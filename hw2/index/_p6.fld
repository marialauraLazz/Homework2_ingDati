doc 0
  field 0
    name titolo
    type string
    value rfc4301.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                            S. Kent\
Request for Comments: 4301                                        K. Seo\
Obsoletes: 2401                                         BBN Technologies\
Category: Standards Track                                  December 2005\
\
\
            Security Architecture for the Internet Protocol\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document describes an updated version of the "Security\
   Architecture for IP", which is designed to provide security services\
   for traffic at the IP layer.  This document obsoletes RFC 2401\
   (November 1998).\
\
Dedication\
\
   This document is dedicated to the memory of Charlie Lynn, a long-time\
   senior colleague at BBN, who made very significant contributions to\
   the IPsec documents.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                     [Page 1]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................4\
      1.1. Summary of Contents of Document ............................4\
      1.2. Audience ...................................................4\
      1.3. Related Documents ..........................................5\
   2. Design Objectives ...............................................5\
      2.1. Goals/Objectives/Requirements/Problem Description ..........5\
      2.2. Caveats and Assumptions ....................................6\
   3. System Overview .................................................7\
      3.1. What IPsec Does ............................................7\
      3.2. How IPsec Works ............................................9\
      3.3. Where IPsec Can Be Implemented ............................10\
   4. Security Associations ..........................................11\
      4.1. Definition and Scope ......................................12\
      4.2. SA Functionality ..........................................16\
      4.3. Combining SAs .............................................17\
      4.4. Major IPsec Databases .....................................18\
           4.4.1. The Security Policy Database (SPD) .................19\
                  4.4.1.1. Selectors .................................26\
                  4.4.1.2. Structure of an SPD Entry .................30\
                  4.4.1.3. More Regarding Fields Associated\
                           with Next Layer Protocols .................32\
           4.4.2. Security Association Database (SAD) ................34\
                  4.4.2.1. Data Items in the SAD .....................36\
                  4.4.2.2. Relationship between SPD, PFP\
                           flag, packet, and SAD .....................38\
           4.4.3. Peer Authorization Database (PAD) ..................43\
                  4.4.3.1. PAD Entry IDs and Matching Rules ..........44\
                  4.4.3.2. IKE Peer Authentication Data ..............45\
                  4.4.3.3. Child SA Authorization Data ...............46\
                  4.4.3.4. How the PAD Is Used .......................46\
      4.5. SA and Key Management .....................................47\
           4.5.1. Manual Techniques ..................................48\
           4.5.2. Automated SA and Key Management ....................48\
           4.5.3. Locating a Security Gateway ........................49\
      4.6. SAs and Multicast .........................................50\
   5. IP Traffic Processing ..........................................50\
      5.1. Outbound IP Traffic Processing\
           (protected-to-unprotected) ................................52\
           5.1.1. Handling an Outbound Packet That Must Be\
                  Discarded ..........................................54\
           5.1.2. Header Construction for Tunnel Mode ................55\
                  5.1.2.1. IPv4: Header Construction for\
                           Tunnel Mode ...............................57\
                  5.1.2.2. IPv6: Header Construction for\
                           Tunnel Mode ...............................59\
      5.2. Processing Inbound IP Traffic (unprotected-to-protected) ..59\
\
\
\
Kent & Seo                  Standards Track                     [Page 2]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   6. ICMP Processing ................................................63\
      6.1. Processing ICMP Error Messages Directed to an\
           IPsec Implementation ......................................63\
           6.1.1. ICMP Error Messages Received on the\
                  Unprotected Side of the Boundary ...................63\
           6.1.2. ICMP Error Messages Received on the\
                  Protected Side of the Boundary .....................64\
      6.2. Processing Protected, Transit ICMP Error Messages .........64\
   7. Handling Fragments (on the protected side of the IPsec\
      boundary) ......................................................66\
      7.1. Tunnel Mode SAs that Carry Initial and Non-Initial\
           Fragments .................................................67\
      7.2. Separate Tunnel Mode SAs for Non-Initial Fragments ........67\
      7.3. Stateful Fragment Checking ................................68\
      7.4. BYPASS/DISCARD Traffic ....................................69\
   8. Path MTU/DF Processing .........................................69\
      8.1. DF Bit ....................................................69\
      8.2. Path MTU (PMTU) Discovery .................................70\
           8.2.1. Propagation of PMTU ................................70\
           8.2.2. PMTU Aging .........................................71\
   9. Auditing .......................................................71\
   10. Conformance Requirements ......................................71\
   11. Security Considerations .......................................72\
   12. IANA Considerations ...........................................72\
   13. Differences from RFC 2401 .....................................72\
   14. Acknowledgements ..............................................75\
   Appendix A: Glossary ..............................................76\
   Appendix B: Decorrelation .........................................79\
      B.1. Decorrelation Algorithm ...................................79\
   Appendix C: ASN.1 for an SPD Entry ................................82\
   Appendix D: Fragment Handling Rationale ...........................88\
      D.1. Transport Mode and Fragments ..............................88\
      D.2. Tunnel Mode and Fragments .................................89\
      D.3. The Problem of Non-Initial Fragments ......................90\
      D.4. BYPASS/DISCARD Traffic ....................................93\
      D.5. Just say no to ports? .....................................94\
      D.6. Other Suggested Solutions..................................94\
      D.7. Consistency................................................95\
      D.8. Conclusions................................................95\
   Appendix E: Example of Supporting Nested SAs via SPD and\
               Forwarding Table Entries...............................96\
   References.........................................................98\
      Normative References............................................98\
      Informative References..........................................99\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                     [Page 3]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
1.  Introduction\
\
1.1.  Summary of Contents of Document\
\
   This document specifies the base architecture for IPsec-compliant\
   systems.  It describes how to provide a set of security services for\
   traffic at the IP layer, in both the IPv4 [Pos81a] and IPv6 [DH98]\
   environments.  This document describes the requirements for systems\
   that implement IPsec, the fundamental elements of such systems, and\
   how the elements fit together and fit into the IP environment.  It\
   also describes the security services offered by the IPsec protocols,\
   and how these services can be employed in the IP environment.  This\
   document does not address all aspects of the IPsec architecture.\
   Other documents address additional architectural details in\
   specialized environments, e.g., use of IPsec in Network Address\
   Translation (NAT) environments and more comprehensive support for IP\
   multicast.  The fundamental components of the IPsec security\
   architecture are discussed in terms of their underlying, required\
   functionality.  Additional RFCs (see Section 1.3 for pointers to\
   other documents) define the protocols in (a), (c), and (d).\
\
        a. Security Protocols -- Authentication Header (AH) and\
           Encapsulating Security Payload (ESP)\
        b. Security Associations -- what they are and how they work,\
           how they are managed, associated processing\
        c. Key Management -- manual and automated (The Internet Key\
           Exchange (IKE))\
        d. Cryptographic algorithms for authentication and encryption\
\
   This document is not a Security Architecture for the Internet; it\
   addresses security only at the IP layer, provided through the use of\
   a combination of cryptographic and protocol security mechanisms.\
\
   The spelling "IPsec" is preferred and used throughout this and all\
   related IPsec standards.  All other capitalizations of IPsec (e.g.,\
   IPSEC, IPSec, ipsec) are deprecated.  However, any capitalization of\
   the sequence of letters "IPsec" should be understood to refer to the\
   IPsec protocols.\
\
   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\
   document, are to be interpreted as described in RFC 2119 [Bra97].\
\
1.2.  Audience\
\
   The target audience for this document is primarily individuals who\
   implement this IP security technology or who architect systems that\
   will use this technology.  Technically adept users of this technology\
\
\
\
Kent & Seo                  Standards Track                     [Page 4]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   (end users or system administrators) also are part of the target\
   audience.  A glossary is provided in Appendix A to help fill in gaps\
   in background/vocabulary.  This document assumes that the reader is\
   familiar with the Internet Protocol (IP), related networking\
   technology, and general information system security terms and\
   concepts.\
\
1.3.  Related Documents\
\
   As mentioned above, other documents provide detailed definitions of\
   some of the components of IPsec and of their interrelationship.  They\
   include RFCs on the following topics:\
\
        a. security protocols -- RFCs describing the Authentication\
           Header (AH) [Ken05b] and Encapsulating Security Payload\
           (ESP) [Ken05a] protocols.\
        b. cryptographic algorithms for integrity and encryption -- one\
           RFC that defines the mandatory, default algorithms for use\
           with AH and ESP [Eas05], a similar RFC that defines the\
           mandatory algorithms for use with IKEv2 [Sch05] plus a\
           separate RFC for each cryptographic algorithm.\
        c. automatic key management -- RFCs on "The Internet Key\
           Exchange (IKEv2) Protocol" [Kau05] and "Cryptographic\
           Algorithms for Use in the Internet Key Exchange Version 2\
           (IKEv2)" [Sch05].\
\
2.  Design Objectives\
\
2.1.  Goals/Objectives/Requirements/Problem Description\
\
   IPsec is designed to provide interoperable, high quality,\
   cryptographically-based security for IPv4 and IPv6.  The set of\
   security services offered includes access control, connectionless\
   integrity, data origin authentication, detection and rejection of\
   replays (a form of partial sequence integrity), confidentiality (via\
   encryption), and limited traffic flow confidentiality.  These\
   services are provided at the IP layer, offering protection in a\
   standard fashion for all protocols that may be carried over IP\
   (including IP itself).\
\
   IPsec includes a specification for minimal firewall functionality,\
   since that is an essential aspect of access control at the IP layer.\
   Implementations are free to provide more sophisticated firewall\
   mechanisms, and to implement the IPsec-mandated functionality using\
   those more sophisticated mechanisms. (Note that interoperability may\
   suffer if additional firewall constraints on traffic flows are\
   imposed by an IPsec implementation but cannot be negotiated based on\
   the traffic selector features defined in this document and negotiated\
\
\
\
Kent & Seo                  Standards Track                     [Page 5]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   via IKEv2.)  The IPsec firewall function makes use of the\
   cryptographically-enforced authentication and integrity provided for\
   all IPsec traffic to offer better access control than could be\
   obtained through use of a firewall (one not privy to IPsec internal\
   parameters) plus separate cryptographic protection.\
\
   Most of the security services are provided through use of two traffic\
   security protocols, the Authentication Header (AH) and the\
   Encapsulating Security Payload (ESP), and through the use of\
   cryptographic key management procedures and protocols.  The set of\
   IPsec protocols employed in a context, and the ways in which they are\
   employed, will be determined by the users/administrators in that\
   context.  It is the goal of the IPsec architecture to ensure that\
   compliant implementations include the services and management\
   interfaces needed to meet the security requirements of a broad user\
   population.\
\
   When IPsec is correctly implemented and deployed, it ought not\
   adversely affect users, hosts, and other Internet components that do\
   not employ IPsec for traffic protection.  IPsec security protocols\
   (AH and ESP, and to a lesser extent, IKE) are designed to be\
   cryptographic algorithm independent.  This modularity permits\
   selection of different sets of cryptographic algorithms as\
   appropriate, without affecting the other parts of the implementation.\
   For example, different user communities may select different sets of\
   cryptographic algorithms (creating cryptographically-enforced\
   cliques) if required.\
\
   To facilitate interoperability in the global Internet, a set of\
   default cryptographic algorithms for use with AH and ESP is specified\
   in [Eas05] and a set of mandatory-to-implement algorithms for IKEv2\
   is specified in [Sch05].  [Eas05] and [Sch05] will be periodically\
   updated to keep pace with computational and cryptologic advances.  By\
   specifying these algorithms in documents that are separate from the\
   AH, ESP, and IKEv2 specifications, these algorithms can be updated or\
   replaced without affecting the standardization progress of the rest\
   of the IPsec document suite.  The use of these cryptographic\
   algorithms, in conjunction with IPsec traffic protection and key\
   management protocols, is intended to permit system and application\
   developers to deploy high quality, Internet-layer, cryptographic\
   security technology.\
\
2.2.  Caveats and Assumptions\
\
   The suite of IPsec protocols and associated default cryptographic\
   algorithms are designed to provide high quality security for Internet\
   traffic.  However, the security offered by use of these protocols\
   ultimately depends on the quality of their implementation, which is\
\
\
\
Kent & Seo                  Standards Track                     [Page 6]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   outside the scope of this set of standards.  Moreover, the security\
   of a computer system or network is a function of many factors,\
   including personnel, physical, procedural, compromising emanations,\
   and computer security practices.  Thus, IPsec is only one part of an\
   overall system security architecture.\
\
   Finally, the security afforded by the use of IPsec is critically\
   dependent on many aspects of the operating environment in which the\
   IPsec implementation executes.  For example, defects in OS security,\
   poor quality of random number sources, sloppy system management\
   protocols and practices, etc., can all degrade the security provided\
   by IPsec.  As above, none of these environmental attributes are\
   within the scope of this or other IPsec standards.\
\
3.  System Overview\
\
   This section provides a high level description of how IPsec works,\
   the components of the system, and how they fit together to provide\
   the security services noted above.  The goal of this description is\
   to enable the reader to "picture" the overall process/system, see how\
   it fits into the IP environment, and to provide context for later\
   sections of this document, which describe each of the components in\
   more detail.\
\
   An IPsec implementation operates in a host, as a security gateway\
   (SG), or as an independent device, affording protection to IP\
   traffic. (A security gateway is an intermediate system implementing\
   IPsec, e.g., a firewall or router that has been IPsec-enabled.) More\
   detail on these classes of implementations is provided later, in\
   Section 3.3. The protection offered by IPsec is based on requirements\
   defined by a Security Policy Database (SPD) established and\
   maintained by a user or system administrator, or by an application\
   operating within constraints established by either of the above.  In\
   general, packets are selected for one of three processing actions\
   based on IP and next layer header information ("Selectors", Section\
   4.4.1.1) matched against entries in the SPD.  Each packet is either\
   PROTECTed using IPsec security services, DISCARDed, or allowed to\
   BYPASS IPsec protection, based on the applicable SPD policies\
   identified by the Selectors.\
\
3.1.  What IPsec Does\
\
   IPsec creates a boundary between unprotected and protected\
   interfaces, for a host or a network (see Figure 1 below).  Traffic\
   traversing the boundary is subject to the access controls specified\
   by the user or administrator responsible for the IPsec configuration.\
   These controls indicate whether packets cross the boundary unimpeded,\
   are afforded security services via AH or ESP, or are discarded.\
\
\
\
Kent & Seo                  Standards Track                     [Page 7]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   IPsec security services are offered at the IP layer through selection\
   of appropriate security protocols, cryptographic algorithms, and\
   cryptographic keys.  IPsec can be used to protect one or more "paths"\
   (a) between a pair of hosts, (b) between a pair of security gateways,\
   or (c) between a security gateway and a host.  A compliant host\
   implementation MUST support (a) and (c) and a compliant security\
   gateway must support all three of these forms of connectivity, since\
   under certain circumstances a security gateway acts as a host.\
\
                        Unprotected\
                         ^       ^\
                         |       |\
           +-------------|-------|-------+\
           | +-------+   |       |       |\
           | |Discard|<--|       V       |\
           | +-------+   |B  +--------+  |\
         ................|y..| AH/ESP |..... IPsec Boundary\
           |   +---+     |p  +--------+  |\
           |   |IKE|<----|a      ^       |\
           |   +---+     |s      |       |\
           | +-------+   |s      |       |\
           | |Discard|<--|       |       |\
           | +-------+   |       |       |\
           +-------------|-------|-------+\
                         |       |\
                         V       V\
                         Protected\
\
            Figure 1.  Top Level IPsec Processing Model\
\
   In this diagram, "unprotected" refers to an interface that might also\
   be described as "black" or "ciphertext".  Here, "protected" refers to\
   an interface that might also be described as "red" or "plaintext".\
   The protected interface noted above may be internal, e.g., in a host\
   implementation of IPsec, the protected interface may link to a socket\
   layer interface presented by the OS.  In this document, the term\
   "inbound" refers to traffic entering an IPsec implementation via the\
   unprotected interface or emitted by the implementation on the\
   unprotected side of the boundary and directed towards the protected\
   interface.  The term "outbound" refers to traffic entering the\
   implementation via the protected interface, or emitted by the\
   implementation on the protected side of the boundary and directed\
   toward the unprotected interface.  An IPsec implementation may\
   support more than one interface on either or both sides of the\
   boundary.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                     [Page 8]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   Note the facilities for discarding traffic on either side of the\
   IPsec boundary, the BYPASS facility that allows traffic to transit\
   the boundary without cryptographic protection, and the reference to\
   IKE as a protected-side key and security management function.\
\
   IPsec optionally supports negotiation of IP compression [SMPT01],\
   motivated in part by the observation that when encryption is employed\
   within IPsec, it prevents effective compression by lower protocol\
   layers.\
\
3.2.  How IPsec Works\
\
   IPsec uses two protocols to provide traffic security services --\
   Authentication Header (AH) and Encapsulating Security Payload (ESP).\
   Both protocols are described in detail in their respective RFCs\
   [Ken05b, Ken05a].  IPsec implementations MUST support ESP and MAY\
   support AH. (Support for AH has been downgraded to MAY because\
   experience has shown that there are very few contexts in which ESP\
   cannot provide the requisite security services.  Note that ESP can be\
   used to provide only integrity, without confidentiality, making it\
   comparable to AH in most contexts.)\
\
    o The IP Authentication Header (AH) [Ken05b] offers integrity and\
      data origin authentication, with optional (at the discretion of\
      the receiver) anti-replay features.\
\
    o The Encapsulating Security Payload (ESP) protocol [Ken05a] offers\
      the same set of services, and also offers confidentiality.  Use of\
      ESP to provide confidentiality without integrity is NOT\
      RECOMMENDED.  When ESP is used with confidentiality enabled, there\
      are provisions for limited traffic flow confidentiality, i.e.,\
      provisions for concealing packet length, and for facilitating\
      efficient generation and discard of dummy packets.  This\
      capability is likely to be effective primarily in virtual private\
      network (VPN) and overlay network contexts.\
\
    o Both AH and ESP offer access control, enforced through the\
      distribution of cryptographic keys and the management of traffic\
      flows as dictated by the Security Policy Database (SPD, Section\
      4.4.1).\
\
   These protocols may be applied individually or in combination with\
   each other to provide IPv4 and IPv6 security services.  However, most\
   security requirements can be met through the use of ESP by itself.\
   Each protocol supports two modes of use: transport mode and tunnel\
   mode.  In transport mode, AH and ESP provide protection primarily for\
\
\
\
\
\
Kent & Seo                  Standards Track                     [Page 9]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   next layer protocols; in tunnel mode, AH and ESP are applied to\
   tunneled IP packets.  The differences between the two modes are\
   discussed in Section 4.1.\
\
   IPsec allows the user (or system administrator) to control the\
   granularity at which a security service is offered.  For example, one\
   can create a single encrypted tunnel to carry all the traffic between\
   two security gateways, or a separate encrypted tunnel can be created\
   for each TCP connection between each pair of hosts communicating\
   across these gateways.  IPsec, through the SPD management paradigm,\
   incorporates facilities for specifying:\
\
    o which security protocol (AH or ESP) to employ, the mode (transport\
      or tunnel), security service options, what cryptographic\
      algorithms to use, and in what combinations to use the specified\
      protocols and services, and\
\
    o the granularity at which protection should be applied.\
\
   Because most of the security services provided by IPsec require the\
   use of cryptographic keys, IPsec relies on a separate set of\
   mechanisms for putting these keys in place.  This document requires\
   support for both manual and automated distribution of keys.  It\
   specifies a specific public-key based approach (IKEv2 [Kau05]) for\
   automated key management, but other automated key distribution\
   techniques MAY be used.\
\
   Note: This document mandates support for several features for which\
   support is available in IKEv2 but not in IKEv1, e.g., negotiation of\
   an SA representing ranges of local and remote ports or negotiation of\
   multiple SAs with the same selectors.  Therefore, this document\
   assumes use of IKEv2 or a key and security association management\
   system with comparable features.\
\
3.3.  Where IPsec Can Be Implemented\
\
   There are many ways in which IPsec may be implemented in a host, or\
   in conjunction with a router or firewall to create a security\
   gateway, or as an independent security device.\
\
   a. IPsec may be integrated into the native IP stack.  This requires\
      access to the IP source code and is applicable to both hosts and\
      security gateways, although native host implementations benefit\
      the most from this strategy, as explained later (Section 4.4.1,\
      paragraph 6; Section 4.4.1.1, last paragraph).\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 10]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   b. In a "bump-in-the-stack" (BITS) implementation, IPsec is\
      implemented "underneath" an existing implementation of an IP\
      protocol stack, between the native IP and the local network\
      drivers.  Source code access for the IP stack is not required in\
      this context, making this implementation approach appropriate for\
      use with legacy systems.  This approach, when it is adopted, is\
      usually employed in hosts.\
\
   c. The use of a dedicated, inline security protocol processor is a\
      common design feature of systems used by the military, and of some\
      commercial systems as well.  It is sometimes referred to as a\
      "bump-in-the-wire" (BITW) implementation.  Such implementations\
      may be designed to serve either a host or a gateway.  Usually, the\
      BITW device is itself IP addressable.  When supporting a single\
      host, it may be quite analogous to a BITS implementation, but in\
      supporting a router or firewall, it must operate like a security\
      gateway.\
\
   This document often talks in terms of use of IPsec by a host or a\
   security gateway, without regard to whether the implementation is\
   native, BITS, or BITW.  When the distinctions among these\
   implementation options are significant, the document makes reference\
   to specific implementation approaches.\
\
   A host implementation of IPsec may appear in devices that might not\
   be viewed as "hosts".  For example, a router might employ IPsec to\
   protect routing protocols (e.g., BGP) and management functions (e.g.,\
   Telnet), without affecting subscriber traffic traversing the router.\
   A security gateway might employ separate IPsec implementations to\
   protect its management traffic and subscriber traffic.  The\
   architecture described in this document is very flexible.  For\
   example, a computer with a full-featured, compliant, native OS IPsec\
   implementation should be capable of being configured to protect\
   resident (host) applications and to provide security gateway\
   protection for traffic traversing the computer.  Such configuration\
   would make use of the forwarding tables and the SPD selection\
   function described in Sections 5.1 and 5.2.\
\
4.  Security Associations\
\
   This section defines Security Association management requirements for\
   all IPv6 implementations and for those IPv4 implementations that\
   implement AH, ESP, or both AH and ESP.  The concept of a "Security\
   Association" (SA) is fundamental to IPsec.  Both AH and ESP make use\
   of SAs, and a major function of IKE is the establishment and\
   maintenance of SAs.  All implementations of AH or ESP MUST support\
   the concept of an SA as described below.  The remainder of this\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 11]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   section describes various aspects of SA management, defining required\
   characteristics for SA policy management and SA management\
   techniques.\
\
4.1.  Definition and Scope\
\
   An SA is a simplex "connection" that affords security services to the\
   traffic carried by it.  Security services are afforded to an SA by\
   the use of AH, or ESP, but not both.  If both AH and ESP protection\
   are applied to a traffic stream, then two SAs must be created and\
   coordinated to effect protection through iterated application of the\
   security protocols.  To secure typical, bi-directional communication\
   between two IPsec-enabled systems, a pair of SAs (one in each\
   direction) is required.  IKE explicitly creates SA pairs in\
   recognition of this common usage requirement.\
\
   For an SA used to carry unicast traffic, the Security Parameters\
   Index (SPI) by itself suffices to specify an SA.  (For information on\
   the SPI, see Appendix A and the AH and ESP specifications [Ken05b,\
   Ken05a].)  However, as a local matter, an implementation may choose\
   to use the SPI in conjunction with the IPsec protocol type (AH or\
   ESP) for SA identification.  If an IPsec implementation supports\
   multicast, then it MUST support multicast SAs using the algorithm\
   below for mapping inbound IPsec datagrams to SAs.  Implementations\
   that support only unicast traffic need not implement this de-\
   multiplexing algorithm.\
\
   In many secure multicast architectures, e.g., [RFC3740], a central\
   Group Controller/Key Server unilaterally assigns the Group Security\
   Association's (GSA's) SPI.  This SPI assignment is not negotiated or\
   coordinated with the key management (e.g., IKE) subsystems that\
   reside in the individual end systems that constitute the group.\
   Consequently, it is possible that a GSA and a unicast SA can\
   simultaneously use the same SPI.  A multicast-capable IPsec\
   implementation MUST correctly de-multiplex inbound traffic even in\
   the context of SPI collisions.\
\
   Each entry in the SA Database (SAD) (Section 4.4.2) must indicate\
   whether the SA lookup makes use of the destination IP address, or the\
   destination and source IP addresses, in addition to the SPI.  For\
   multicast SAs, the protocol field is not employed for SA lookups.\
   For each inbound, IPsec-protected packet, an implementation must\
   conduct its search of the SAD such that it finds the entry that\
   matches the "longest" SA identifier.  In this context, if two or more\
   SAD entries match based on the SPI value, then the entry that also\
   matches based on destination address, or destination and source\
   address (as indicated in the SAD entry) is the "longest" match.  This\
   implies a logical ordering of the SAD search as follows:\
\
\
\
Kent & Seo                  Standards Track                    [Page 12]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      1. Search the SAD for a match on the combination of SPI,\
         destination address, and source address.  If an SAD entry\
         matches, then process the inbound packet with that\
         matching SAD entry.  Otherwise, proceed to step 2.\
\
      2. Search the SAD for a match on both SPI and destination address.\
         If the SAD entry matches, then process the inbound packet\
         with that matching SAD entry.  Otherwise, proceed to step 3.\
\
      3. Search the SAD for a match on only SPI if the receiver has\
         chosen to maintain a single SPI space for AH and ESP, and on\
         both SPI and protocol, otherwise.  If an SAD entry matches,\
         then process the inbound packet with that matching SAD entry.\
         Otherwise, discard the packet and log an auditable event.\
\
   In practice, an implementation may choose any method (or none at all)\
   to accelerate this search, although its externally visible behavior\
   MUST be functionally equivalent to having searched the SAD in the\
   above order.  For example, a software-based implementation could\
   index into a hash table by the SPI.  The SAD entries in each hash\
   table bucket's linked list could be kept sorted to have those SAD\
   entries with the longest SA identifiers first in that linked list.\
   Those SAD entries having the shortest SA identifiers could be sorted\
   so that they are the last entries in the linked list.  A\
   hardware-based implementation may be able to effect the longest match\
   search intrinsically, using commonly available Ternary\
   Content-Addressable Memory (TCAM) features.\
\
   The indication of whether source and destination address matching is\
   required to map inbound IPsec traffic to SAs MUST be set either as a\
   side effect of manual SA configuration or via negotiation using an SA\
   management protocol, e.g., IKE or Group Domain of Interpretation\
   (GDOI) [RFC3547].  Typically, Source-Specific Multicast (SSM) [HC03]\
   groups use a 3-tuple SA identifier composed of an SPI, a destination\
   multicast address, and source address.  An Any-Source Multicast group\
   SA requires only an SPI and a destination multicast address as an\
   identifier.\
\
   If different classes of traffic (distinguished by Differentiated\
   Services Code Point (DSCP) bits [NiBlBaBL98], [Gro02]) are sent on\
   the same SA, and if the receiver is employing the optional\
   anti-replay feature available in both AH and ESP, this could result\
   in inappropriate discarding of lower priority packets due to the\
   windowing mechanism used by this feature.  Therefore, a sender SHOULD\
   put traffic of different classes, but with the same selector values,\
   on different SAs to support Quality of Service (QoS) appropriately.\
   To permit this, the IPsec implementation MUST permit establishment\
   and maintenance of multiple SAs between a given sender and receiver,\
\
\
\
Kent & Seo                  Standards Track                    [Page 13]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   with the same selectors.  Distribution of traffic among these\
   parallel SAs to support QoS is locally determined by the sender and\
   is not negotiated by IKE.  The receiver MUST process the packets from\
   the different SAs without prejudice.  These requirements apply to\
   both transport and tunnel mode SAs.  In the case of tunnel mode SAs,\
   the DSCP values in question appear in the inner IP header.  In\
   transport mode, the DSCP value might change en route, but this should\
   not cause problems with respect to IPsec processing since the value\
   is not employed for SA selection and MUST NOT be checked as part of\
   SA/packet validation.  However, if significant re-ordering of packets\
   occurs in an SA, e.g., as a result of changes to DSCP values en\
   route, this may trigger packet discarding by a receiver due to\
   application of the anti-replay mechanism.\
\
   DISCUSSION: Although the DSCP [NiBlBaBL98, Gro02] and Explicit\
   Congestion Notification (ECN) [RaFlBl01] fields are not "selectors",\
   as that term in used in this architecture, the sender will need a\
   mechanism to direct packets with a given (set of) DSCP values to the\
   appropriate SA.  This mechanism might be termed a "classifier".\
\
   As noted above, two types of SAs are defined: transport mode and\
   tunnel mode.  IKE creates pairs of SAs, so for simplicity, we choose\
   to require that both SAs in a pair be of the same mode, transport or\
   tunnel.\
\
   A transport mode SA is an SA typically employed between a pair of\
   hosts to provide end-to-end security services.  When security is\
   desired between two intermediate systems along a path (vs. end-to-end\
   use of IPsec), transport mode MAY be used between security gateways\
   or between a security gateway and a host.  In the case where\
   transport mode is used between security gateways or between a\
   security gateway and a host, transport mode may be used to support\
   in-IP tunneling (e.g., IP-in-IP [Per96] or Generic Routing\
   Encapsulation (GRE) tunneling [FaLiHaMeTr00] or dynamic routing\
   [ToEgWa04]) over transport mode SAs.  To clarify, the use of\
   transport mode by an intermediate system (e.g., a security gateway)\
   is permitted only when applied to packets whose source address (for\
   outbound packets) or destination address (for inbound packets) is an\
   address belonging to the intermediate system itself.  The access\
   control functions that are an important part of IPsec are\
   significantly limited in this context, as they cannot be applied to\
   the end-to-end headers of the packets that traverse a transport mode\
   SA used in this fashion.  Thus, this way of using transport mode\
   should be evaluated carefully before being employed in a specific\
   context.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 14]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   In IPv4, a transport mode security protocol header appears\
   immediately after the IP header and any options, and before any next\
   layer protocols (e.g., TCP or UDP).  In IPv6, the security protocol\
   header appears after the base IP header and selected extension\
   headers, but may appear before or after destination options; it MUST\
   appear before next layer protocols (e.g., TCP, UDP, Stream Control\
   Transmission Protocol (SCTP)).  In the case of ESP, a transport mode\
   SA provides security services only for these next layer protocols,\
   not for the IP header or any extension headers preceding the ESP\
   header.  In the case of AH, the protection is also extended to\
   selected portions of the IP header preceding it, selected portions of\
   extension headers, and selected options (contained in the IPv4\
   header, IPv6 Hop-by-Hop extension header, or IPv6 Destination\
   extension headers).  For more details on the coverage afforded by AH,\
   see the AH specification [Ken05b].\
\
   A tunnel mode SA is essentially an SA applied to an IP tunnel, with\
   the access controls applied to the headers of the traffic inside the\
   tunnel.  Two hosts MAY establish a tunnel mode SA between themselves.\
   Aside from the two exceptions below, whenever either end of a\
   security association is a security gateway, the SA MUST be tunnel\
   mode.  Thus, an SA between two security gateways is typically a\
   tunnel mode SA, as is an SA between a host and a security gateway.\
   The two exceptions are as follows.\
\
    o Where traffic is destined for a security gateway, e.g., Simple\
      Network Management Protocol (SNMP) commands, the security gateway\
      is acting as a host and transport mode is allowed.  In this case,\
      the SA terminates at a host (management) function within a\
      security gateway and thus merits different treatment.\
\
    o As noted above, security gateways MAY support a transport mode SA\
      to provide security for IP traffic between two intermediate\
      systems along a path, e.g., between a host and a security gateway\
      or between two security gateways.\
\
   Several concerns motivate the use of tunnel mode for an SA involving\
   a security gateway.  For example, if there are multiple paths (e.g.,\
   via different security gateways) to the same destination behind a\
   security gateway, it is important that an IPsec packet be sent to the\
   security gateway with which the SA was negotiated.  Similarly, a\
   packet that might be fragmented en route must have all the fragments\
   delivered to the same IPsec instance for reassembly prior to\
   cryptographic processing.  Also, when a fragment is processed by\
   IPsec and transmitted, then fragmented en route, it is critical that\
   there be inner and outer headers to retain the fragmentation state\
   data for the pre- and post-IPsec packet formats.  Hence there are\
   several reasons for employing tunnel mode when either end of an SA is\
\
\
\
Kent & Seo                  Standards Track                    [Page 15]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   a security gateway. (Use of an IP-in-IP tunnel in conjunction with\
   transport mode can also address these fragmentation issues.  However,\
   this configuration limits the ability of IPsec to enforce access\
   control policies on traffic.)\
\
   Note: AH and ESP cannot be applied using transport mode to IPv4\
   packets that are fragments.  Only tunnel mode can be employed in such\
   cases.  For IPv6, it would be feasible to carry a plaintext fragment\
   on a transport mode SA; however, for simplicity, this restriction\
   also applies to IPv6 packets.  See Section 7 for more details on\
   handling plaintext fragments on the protected side of the IPsec\
   barrier.\
\
   For a tunnel mode SA, there is an "outer" IP header that specifies\
   the IPsec processing source and destination, plus an "inner" IP\
   header that specifies the (apparently) ultimate source and\
   destination for the packet.  The security protocol header appears\
   after the outer IP header, and before the inner IP header.  If AH is\
   employed in tunnel mode, portions of the outer IP header are afforded\
   protection (as above), as well as all of the tunneled IP packet\
   (i.e., all of the inner IP header is protected, as well as next layer\
   protocols).  If ESP is employed, the protection is afforded only to\
   the tunneled packet, not to the outer header.\
\
   In summary,\
\
   a) A host implementation of IPsec MUST support both transport and\
      tunnel mode.  This is true for native, BITS, and BITW\
      implementations for hosts.\
\
   b) A security gateway MUST support tunnel mode and MAY support\
      transport mode.  If it supports transport mode, that should be\
      used only when the security gateway is acting as a host, e.g., for\
      network management, or to provide security between two\
      intermediate systems along a path.\
\
4.2.  SA Functionality\
\
   The set of security services offered by an SA depends on the security\
   protocol selected, the SA mode, the endpoints of the SA, and the\
   election of optional services within the protocol.\
\
   For example, both AH and ESP offer integrity and authentication\
   services, but the coverage differs for each protocol and differs for\
   transport vs. tunnel mode.  If the integrity of an IPv4 option or\
   IPv6 extension header must be protected en route between sender and\
   receiver, AH can provide this service, except for IP or extension\
   headers that may change in a fashion not predictable by the sender.\
\
\
\
Kent & Seo                  Standards Track                    [Page 16]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   However, the same security may be achieved in some contexts by\
   applying ESP to a tunnel carrying a packet.\
\
   The granularity of access control provided is determined by the\
   choice of the selectors that define each SA.  Moreover, the\
   authentication means employed by IPsec peers, e.g., during creation\
   of an IKE (vs. child) SA also affects the granularity of the access\
   control afforded.\
\
   If confidentiality is selected, then an ESP (tunnel mode) SA between\
   two security gateways can offer partial traffic flow confidentiality.\
   The use of tunnel mode allows the inner IP headers to be encrypted,\
   concealing the identities of the (ultimate) traffic source and\
   destination.  Moreover, ESP payload padding also can be invoked to\
   hide the size of the packets, further concealing the external\
   characteristics of the traffic.  Similar traffic flow confidentiality\
   services may be offered when a mobile user is assigned a dynamic IP\
   address in a dialup context, and establishes a (tunnel mode) ESP SA\
   to a corporate firewall (acting as a security gateway).  Note that\
   fine-granularity SAs generally are more vulnerable to traffic\
   analysis than coarse-granularity ones that are carrying traffic from\
   many subscribers.\
\
   Note: A compliant implementation MUST NOT allow instantiation of an\
   ESP SA that employs both NULL encryption and no integrity algorithm.\
   An attempt to negotiate such an SA is an auditable event by both\
   initiator and responder.  The audit log entry for this event SHOULD\
   include the current date/time, local IKE IP address, and remote IKE\
   IP address.  The initiator SHOULD record the relevant SPD entry.\
\
4.3.  Combining SAs\
\
   This document does not require support for nested security\
   associations or for what RFC 2401 [RFC2401] called "SA bundles".\
   These features still can be effected by appropriate configuration of\
   both the SPD and the local forwarding functions (for inbound and\
   outbound traffic), but this capability is outside of the IPsec module\
   and thus the scope of this specification.  As a result, management of\
   nested/bundled SAs is potentially more complex and less assured than\
   under the model implied by RFC 2401 [RFC2401].  An implementation\
   that provides support for nested SAs SHOULD provide a management\
   interface that enables a user or administrator to express the nesting\
   requirement, and then create the appropriate SPD entries and\
   forwarding table entries to effect the requisite processing. (See\
   Appendix E for an example of how to configure nested SAs.)\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 17]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
4.4.  Major IPsec Databases\
\
   Many of the details associated with processing IP traffic in an IPsec\
   implementation are largely a local matter, not subject to\
   standardization.  However, some external aspects of the processing\
   must be standardized to ensure interoperability and to provide a\
   minimum management capability that is essential for productive use of\
   IPsec.  This section describes a general model for processing IP\
   traffic relative to IPsec functionality, in support of these\
   interoperability and functionality goals.  The model described below\
   is nominal; implementations need not match details of this model as\
   presented, but the external behavior of implementations MUST\
   correspond to the externally observable characteristics of this model\
   in order to be compliant.\
\
   There are three nominal databases in this model: the Security Policy\
   Database (SPD), the Security Association Database (SAD), and the Peer\
   Authorization Database (PAD).  The first specifies the policies that\
   determine the disposition of all IP traffic inbound or outbound from\
   a host or security gateway (Section 4.4.1).  The second database\
   contains parameters that are associated with each established (keyed)\
   SA (Section 4.4.2).  The third database, the PAD, provides a link\
   between an SA management protocol (such as IKE) and the SPD (Section\
   4.4.3).\
\
   Multiple Separate IPsec Contexts\
\
      If an IPsec implementation acts as a security gateway for multiple\
      subscribers, it MAY implement multiple separate IPsec contexts.\
      Each context MAY have and MAY use completely independent\
      identities, policies, key management SAs, and/or IPsec SAs.  This\
      is for the most part a local implementation matter.  However, a\
      means for associating inbound (SA) proposals with local contexts\
      is required.  To this end, if supported by the key management\
      protocol in use, context identifiers MAY be conveyed from\
      initiator to responder in the signaling messages, with the result\
      that IPsec SAs are created with a binding to a particular context.\
      For example, a security gateway that provides VPN service to\
      multiple customers will be able to associate each customer's\
      traffic with the correct VPN.\
\
   Forwarding vs Security Decisions\
\
      The IPsec model described here embodies a clear separation between\
      forwarding (routing) and security decisions, to accommodate a wide\
      range of contexts where IPsec may be employed.  Forwarding may be\
      trivial, in the case where there are only two interfaces, or it\
      may be complex, e.g., if the context in which IPsec is implemented\
\
\
\
Kent & Seo                  Standards Track                    [Page 18]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      employs a sophisticated forwarding function.  IPsec assumes only\
      that outbound and inbound traffic that has passed through IPsec\
      processing is forwarded in a fashion consistent with the context\
      in which IPsec is implemented.  Support for nested SAs is\
      optional; if required, it requires coordination between forwarding\
      tables and SPD entries to cause a packet to traverse the IPsec\
      boundary more than once.\
\
   "Local" vs "Remote"\
\
      In this document, with respect to IP addresses and ports, the\
      terms "Local" and "Remote" are used for policy rules.  "Local"\
      refers to the entity being protected by an IPsec implementation,\
      i.e., the "source" address/port of outbound packets or the\
      "destination" address/port of inbound packets. "Remote" refers to\
      a peer entity or peer entities.  The terms "source" and\
      "destination" are used for packet header fields.\
\
   "Non-initial" vs "Initial" Fragments\
\
      Throughout this document, the phrase "non-initial fragments" is\
      used to mean fragments that do not contain all of the selector\
      values that may be needed for access control (e.g., they might not\
      contain Next Layer Protocol, source and destination ports, ICMP\
      message type/code, Mobility Header type).  And the phrase "initial\
      fragment" is used to mean a fragment that contains all the\
      selector values needed for access control.  However, it should be\
      noted that for IPv6, which fragment contains the Next Layer\
      Protocol and ports (or ICMP message type/code or Mobility Header\
      type [Mobip]) will depend on the kind and number of extension\
      headers present.  The "initial fragment" might not be the first\
      fragment, in this context.\
\
4.4.1.  The Security Policy Database (SPD)\
\
   An SA is a management construct used to enforce security policy for\
   traffic crossing the IPsec boundary.  Thus, an essential element of\
   SA processing is an underlying Security Policy Database (SPD) that\
   specifies what services are to be offered to IP datagrams and in what\
   fashion.  The form of the database and its interface are outside the\
   scope of this specification.  However, this section specifies minimum\
   management functionality that must be provided, to allow a user or\
   system administrator to control whether and how IPsec is applied to\
   traffic transmitted or received by a host or transiting a security\
   gateway.  The SPD, or relevant caches, must be consulted during the\
   processing of all traffic (inbound and outbound), including traffic\
   not protected by IPsec, that traverses the IPsec boundary.  This\
   includes IPsec management traffic such as IKE.  An IPsec\
\
\
\
Kent & Seo                  Standards Track                    [Page 19]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   implementation MUST have at least one SPD, and it MAY support\
   multiple SPDs, if appropriate for the context in which the IPsec\
   implementation operates.  There is no requirement to maintain SPDs on\
   a per-interface basis, as was specified in RFC 2401 [RFC2401].\
   However, if an implementation supports multiple SPDs, then it MUST\
   include an explicit SPD selection function that is invoked to select\
   the appropriate SPD for outbound traffic processing.  The inputs to\
   this function are the outbound packet and any local metadata (e.g.,\
   the interface via which the packet arrived) required to effect the\
   SPD selection function.  The output of the function is an SPD\
   identifier (SPD-ID).\
\
   The SPD is an ordered database, consistent with the use of Access\
   Control Lists (ACLs) or packet filters in firewalls, routers, etc.\
   The ordering requirement arises because entries often will overlap\
   due to the presence of (non-trivial) ranges as values for selectors.\
   Thus, a user or administrator MUST be able to order the entries to\
   express a desired access control policy.  There is no way to impose a\
   general, canonical order on SPD entries, because of the allowed use\
   of wildcards for selector values and because the different types of\
   selectors are not hierarchically related.\
\
   Processing Choices:  DISCARD, BYPASS, PROTECT\
\
      An SPD must discriminate among traffic that is afforded IPsec\
      protection and traffic that is allowed to bypass IPsec.  This\
      applies to the IPsec protection to be applied by a sender and to\
      the IPsec protection that must be present at the receiver.  For\
      any outbound or inbound datagram, three processing choices are\
      possible: DISCARD, BYPASS IPsec, or PROTECT using IPsec.  The\
      first choice refers to traffic that is not allowed to traverse the\
      IPsec boundary (in the specified direction).  The second choice\
      refers to traffic that is allowed to cross the IPsec boundary\
      without IPsec protection.  The third choice refers to traffic that\
      is afforded IPsec protection, and for such traffic the SPD must\
      specify the security protocols to be employed, their mode,\
      security service options, and the cryptographic algorithms to be\
      used.\
\
   SPD-S, SPD-I, SPD-O\
\
      An SPD is logically divided into three pieces.  The SPD-S (secure\
      traffic) contains entries for all traffic subject to IPsec\
      protection.  SPD-O (outbound) contains entries for all outbound\
      traffic that is to be bypassed or discarded.  SPD-I (inbound) is\
      applied to inbound traffic that will be bypassed or discarded.\
      All three of these can be decorrelated (with the exception noted\
      above for native host implementations) to facilitate caching.  If\
\
\
\
Kent & Seo                  Standards Track                    [Page 20]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      an IPsec implementation supports only one SPD, then the SPD\
      consists of all three parts.  If multiple SPDs are supported, some\
      of them may be partial, e.g., some SPDs might contain only SPD-I\
      entries, to control inbound bypassed traffic on a per-interface\
      basis.  The split allows SPD-I to be consulted without having to\
      consult SPD-S, for such traffic.  Since the SPD-I is just a part\
      of the SPD, if a packet that is looked up in the SPD-I cannot be\
      matched to an entry there, then the packet MUST be discarded.\
      Note that for outbound traffic, if a match is not found in SPD-S,\
      then SPD-O must be checked to see if the traffic should be\
      bypassed.  Similarly, if SPD-O is checked first and no match is\
      found, then SPD-S must be checked.  In an ordered,\
      non-decorrelated SPD, the entries for the SPD-S, SPD-I, and SPD-O\
      are interleaved.  So there is one lookup in the SPD.\
\
   SPD Entries\
\
      Each SPD entry specifies packet disposition as BYPASS, DISCARD, or\
      PROTECT.  The entry is keyed by a list of one or more selectors.\
      The SPD contains an ordered list of these entries.  The required\
      selector types are defined in Section 4.4.1.1. These selectors are\
      used to define the granularity of the SAs that are created in\
      response to an outbound packet or in response to a proposal from a\
      peer.  The detailed structure of an SPD entry is described in\
      Section 4.4.1.2. Every SPD SHOULD have a nominal, final entry that\
      matches anything that is otherwise unmatched, and discards it.\
\
      The SPD MUST permit a user or administrator to specify policy\
      entries as follows:\
\
       - SPD-I: For inbound traffic that is to be bypassed or discarded,\
         the entry consists of the values of the selectors that apply to\
         the traffic to be bypassed or discarded.\
\
       - SPD-O: For outbound traffic that is to be bypassed or\
         discarded, the entry consists of the values of the selectors\
         that apply to the traffic to be bypassed or discarded.\
\
       - SPD-S: For traffic that is to be protected using IPsec, the\
         entry consists of the values of the selectors that apply to the\
         traffic to be protected via AH or ESP, controls on how to\
         create SAs based on these selectors, and the parameters needed\
         to effect this protection (e.g., algorithms, modes, etc.). Note\
         that an SPD-S entry also contains information such as "populate\
         from packet" (PFP) flag (see paragraphs below on "How To Derive\
         the Values for an SAD entry") and bits indicating whether the\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 21]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
         SA lookup makes use of the local and remote IP addresses in\
         addition to the SPI (see AH [Ken05b] or ESP [Ken05a]\
         specifications).\
\
   Representing Directionality in an SPD Entry\
\
      For traffic protected by IPsec, the Local and Remote address and\
      ports in an SPD entry are swapped to represent directionality,\
      consistent with IKE conventions.  In general, the protocols that\
      IPsec deals with have the property of requiring symmetric SAs with\
      flipped Local/Remote IP addresses.  However, for ICMP, there is\
      often no such bi-directional authorization requirement.\
      Nonetheless, for the sake of uniformity and simplicity, SPD\
      entries for ICMP are specified in the same way as for other\
      protocols.  Note also that for ICMP, Mobility Header, and\
      non-initial fragments, there are no port fields in these packets.\
      ICMP has message type and code and Mobility Header has mobility\
      header type.  Thus, SPD entries have provisions for expressing\
      access controls appropriate for these protocols, in lieu of the\
      normal port field controls.  For bypassed or discarded traffic,\
      separate inbound and outbound entries are supported, e.g., to\
      permit unidirectional flows if required.\
\
   OPAQUE and ANY\
\
      For each selector in an SPD entry, in addition to the literal\
      values that define a match, there are two special values: ANY and\
      OPAQUE.  ANY is a wildcard that matches any value in the\
      corresponding field of the packet, or that matches packets where\
      that field is not present or is obscured.  OPAQUE indicates that\
      the corresponding selector field is not available for examination\
      because it may not be present in a fragment, it does not exist for\
      the given Next Layer Protocol, or prior application of IPsec may\
      have encrypted the value.  The ANY value encompasses the OPAQUE\
      value.  Thus, OPAQUE need be used only when it is necessary to\
      distinguish between the case of any allowed value for a field, vs.\
      the absence or unavailability (e.g., due to encryption) of the\
      field.\
\
   How to Derive the Values for an SAD Entry\
\
      For each selector in an SPD entry, the entry specifies how to\
      derive the corresponding values for a new SA Database (SAD, see\
      Section 4.4.2) entry from those in the SPD and the packet.  The\
      goal is to allow an SAD entry and an SPD cache entry to be created\
      based on specific selector values from the packet, or from the\
      matching SPD entry.  For outbound traffic, there are SPD-S cache\
      entries and SPD-O cache entries.  For inbound traffic not\
\
\
\
Kent & Seo                  Standards Track                    [Page 22]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      protected by IPsec, there are SPD-I cache entries and there is the\
      SAD, which represents the cache for inbound IPsec-protected\
      traffic (see Section 4.4.2).  If IPsec processing is specified for\
      an entry, a "populate from packet" (PFP) flag may be asserted for\
      one or more of the selectors in the SPD entry (Local IP address;\
      Remote IP address; Next Layer Protocol; and, depending on Next\
      Layer Protocol, Local port and Remote port, or ICMP type/code, or\
      Mobility Header type).  If asserted for a given selector X, the\
      flag indicates that the SA to be created should take its value for\
      X from the value in the packet.  Otherwise, the SA should take its\
      value(s) for X from the value(s) in the SPD entry.  Note: In the\
      non-PFP case, the selector values negotiated by the SA management\
      protocol (e.g., IKEv2) may be a subset of those in the SPD entry,\
      depending on the SPD policy of the peer.  Also, whether a single\
      flag is used for, e.g., source port, ICMP type/code, and Mobility\
      Header (MH) type, or a separate flag is used for each, is a local\
      matter.\
\
      The following example illustrates the use of the PFP flag in the\
      context of a security gateway or a BITS/BITW implementation.\
      Consider an SPD entry where the allowed value for Remote address\
      is a range of IPv4 addresses: 192.0.2.1 to 192.0.2.10.  Suppose an\
      outbound packet arrives with a destination address of 192.0.2.3,\
      and there is no extant SA to carry this packet.  The value used\
      for the SA created to transmit this packet could be either of the\
      two values shown below, depending on what the SPD entry for this\
      selector says is the source of the selector value:\
\
          PFP flag value  example of new\
          for the Remote  SAD dest. address\
          addr. selector  selector value\
          --------------- ------------\
          a. PFP TRUE     192.0.2.3 (one host)\
          b. PFP FALSE    192.0.2.1 to 192.0.2.10 (range of hosts)\
\
      Note that if the SPD entry above had a value of ANY for the Remote\
      address, then the SAD selector value would have to be ANY for case\
      (b), but would still be as illustrated for case (a).  Thus, the\
      PFP flag can be used to prohibit sharing of an SA, even among\
      packets that match the same SPD entry.\
\
   Management Interface\
\
      For every IPsec implementation, there MUST be a management\
      interface that allows a user or system administrator to manage the\
      SPD.  The interface must allow the user (or administrator) to\
      specify the security processing to be applied to every packet that\
      traverses the IPsec boundary. (In a native host IPsec\
\
\
\
Kent & Seo                  Standards Track                    [Page 23]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      implementation making use of a socket interface, the SPD may not\
      need to be consulted on a per-packet basis, as noted at the end of\
      Section 4.4.1.1 and in Section 5.)  The management interface for\
      the SPD MUST allow creation of entries consistent with the\
      selectors defined in Section 4.4.1.1, and MUST support (total)\
      ordering of these entries, as seen via this interface.  The SPD\
      entries' selectors are analogous to the ACL or packet filters\
      commonly found in a stateless firewall or packet filtering router\
      and which are currently managed this way.\
\
      In host systems, applications MAY be allowed to create SPD\
      entries.  (The means of signaling such requests to the IPsec\
      implementation are outside the scope of this standard.)  However,\
      the system administrator MUST be able to specify whether or not a\
      user or application can override (default) system policies.  The\
      form of the management interface is not specified by this document\
      and may differ for hosts vs. security gateways, and within hosts\
      the interface may differ for socket-based vs. BITS\
      implementations.  However, this document does specify a standard\
      set of SPD elements that all IPsec implementations MUST support.\
\
   Decorrelation\
\
      The processing model described in this document assumes the\
      ability to decorrelate overlapping SPD entries to permit caching,\
      which enables more efficient processing of outbound traffic in\
      security gateways and BITS/BITW implementations.  Decorrelation\
      [CoSa04] is only a means of improving performance and simplifying\
      the processing description.  This RFC does not require a compliant\
      implementation to make use of decorrelation.  For example, native\
      host implementations typically make use of caching implicitly\
      because they bind SAs to socket interfaces, and thus there is no\
      requirement to be able to decorrelate SPD entries in these\
      implementations.\
\
      Note:  Unless otherwise qualified, the use of "SPD" refers to the\
      body of policy information in both ordered or decorrelated\
      (unordered) state.  Appendix B provides an algorithm that can be\
      used to decorrelate SPD entries, but any algorithm that produces\
      equivalent output may be used.  Note that when an SPD entry is\
      decorrelated all the resulting entries MUST be linked together, so\
      that all members of the group derived from an individual, SPD\
      entry (prior to decorrelation) can all be placed into caches and\
      into the SAD at the same time.  For example, suppose one starts\
      with an entry A (from an ordered SPD) that when decorrelated,\
      yields entries A1, A2, and A3.  When a packet comes along that\
      matches, say A2, and triggers the creation of an SA, the SA\
      management protocol (e.g., IKEv2) negotiates A.  And all 3\
\
\
\
Kent & Seo                  Standards Track                    [Page 24]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      decorrelated entries, A1, A2, and A3, are placed in the\
      appropriate SPD-S cache and linked to the SA.  The intent is that\
      use of a decorrelated SPD ought not to create more SAs than would\
      have resulted from use of a not-decorrelated SPD.\
\
      If a decorrelated SPD is employed, there are three options for\
      what an initiator sends to a peer via an SA management protocol\
      (e.g., IKE).  By sending the complete set of linked, decorrelated\
      entries that were selected from the SPD, a peer is given the best\
      possible information to enable selection of the appropriate SPD\
      entry at its end, especially if the peer has also decorrelated its\
      SPD.  However, if a large number of decorrelated entries are\
      linked, this may create large packets for SA negotiation, and\
      hence fragmentation problems for the SA management protocol.\
\
      Alternatively, the original entry from the (correlated) SPD may be\
      retained and passed to the SA management protocol.  Passing the\
      correlated SPD entry keeps the use of a decorrelated SPD a local\
      matter, not visible to peers, and avoids possible fragmentation\
      concerns, although it provides less precise information to a\
      responder for matching against the responder's SPD.\
\
      An intermediate approach is to send a subset of the complete set\
      of linked, decorrelated SPD entries.  This approach can avoid the\
      fragmentation problems cited above yet provide better information\
      than the original, correlated entry.  The major shortcoming of\
      this approach is that it may cause additional SAs to be created\
      later, since only a subset of the linked, decorrelated entries are\
      sent to a peer.  Implementers are free to employ any of the\
      approaches cited above.\
\
      A responder uses the traffic selector proposals it receives via an\
      SA management protocol to select an appropriate entry in its SPD.\
      The intent of the matching is to select an SPD entry and create an\
      SA that most closely matches the intent of the initiator, so that\
      traffic traversing the resulting SA will be accepted at both ends.\
      If the responder employs a decorrelated SPD, it SHOULD use the\
      decorrelated SPD entries for matching, as this will generally\
      result in creation of SAs that are more likely to match the intent\
      of both peers.  If the responder has a correlated SPD, then it\
      SHOULD match the proposals against the correlated entries.  For\
      IKEv2, use of a decorrelated SPD offers the best opportunity for a\
      responder to generate a "narrowed" response.\
\
      In all cases, when a decorrelated SPD is available, the\
      decorrelated entries are used to populate the SPD-S cache.  If the\
      SPD is not decorrelated, caching is not allowed and an ordered\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 25]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      search of SPD MUST be performed to verify that inbound traffic\
      arriving on an SA is consistent with the access control policy\
      expressed in the SPD.\
\
   Handling Changes to the SPD While the System Is Running\
\
      If a change is made to the SPD while the system is running, a\
      check SHOULD be made of the effect of this change on extant SAs.\
      An implementation SHOULD check the impact of an SPD change on\
      extant SAs and SHOULD provide a user/administrator with a\
      mechanism for configuring what actions to take, e.g., delete an\
      affected SA, allow an affected SA to continue unchanged, etc.\
\
4.4.1.1.   Selectors\
\
   An SA may be fine-grained or coarse-grained, depending on the\
   selectors used to define the set of traffic for the SA.  For example,\
   all traffic between two hosts may be carried via a single SA, and\
   afforded a uniform set of security services.  Alternatively, traffic\
   between a pair of hosts might be spread over multiple SAs, depending\
   on the applications being used (as defined by the Next Layer Protocol\
   and related fields, e.g., ports), with different security services\
   offered by different SAs.  Similarly, all traffic between a pair of\
   security gateways could be carried on a single SA, or one SA could be\
   assigned for each communicating host pair.  The following selector\
   parameters MUST be supported by all IPsec implementations to\
   facilitate control of SA granularity.  Note that both Local and\
   Remote addresses should either be IPv4 or IPv6, but not a mix of\
   address types.  Also, note that the Local/Remote port selectors (and\
   ICMP message type and code, and Mobility Header type) may be labeled\
   as OPAQUE to accommodate situations where these fields are\
   inaccessible due to packet fragmentation.\
\
      - Remote IP Address(es) (IPv4 or IPv6): This is a list of ranges\
        of IP addresses (unicast, broadcast (IPv4 only)).  This\
        structure allows expression of a single IP address (via a\
        trivial range), or a list of addresses (each a trivial range),\
        or a range of addresses (low and high values, inclusive), as\
        well as the most generic form of a list of ranges.  Address\
        ranges are used to support more than one remote system sharing\
        the same SA, e.g., behind a security gateway.\
\
      - Local IP Address(es) (IPv4 or IPv6): This is a list of ranges of\
        IP addresses (unicast, broadcast (IPv4 only)).  This structure\
        allows expression of a single IP address (via a trivial range),\
        or a list of addresses (each a trivial range), or a range of\
        addresses (low and high values, inclusive), as well as the most\
        generic form of a list of ranges.  Address ranges are used to\
\
\
\
Kent & Seo                  Standards Track                    [Page 26]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
        support more than one source system sharing the same SA, e.g.,\
        behind a security gateway.  Local refers to the address(es)\
        being protected by this implementation (or policy entry).\
\
        Note: The SPD does not include support for multicast address\
        entries.  To support multicast SAs, an implementation should\
        make use of a Group SPD (GSPD) as defined in [RFC3740].  GSPD\
        entries require a different structure, i.e., one cannot use the\
        symmetric relationship associated with local and remote address\
        values for unicast SAs in a multicast context.  Specifically,\
        outbound traffic directed to a multicast address on an SA would\
        not be received on a companion, inbound SA with the multicast\
        address as the source.\
\
      - Next Layer Protocol: Obtained from the IPv4 "Protocol" or the\
        IPv6 "Next Header" fields.  This is an individual protocol\
        number, ANY, or for IPv6 only, OPAQUE.  The Next Layer Protocol\
        is whatever comes after any IP extension headers that are\
        present.  To simplify locating the Next Layer Protocol, there\
        SHOULD be a mechanism for configuring which IPv6 extension\
        headers to skip.  The default configuration for which protocols\
        to skip SHOULD include the following protocols: 0 (Hop-by-hop\
        options), 43 (Routing Header), 44 (Fragmentation Header), and 60\
        (Destination Options).  Note: The default list does NOT include\
        51 (AH) or 50 (ESP).  From a selector lookup point of view,\
        IPsec treats AH and ESP as Next Layer Protocols.\
\
        Several additional selectors depend on the Next Layer Protocol\
        value:\
\
         * If the Next Layer Protocol uses two ports (as do TCP, UDP,\
           SCTP, and others), then there are selectors for Local and\
           Remote Ports.  Each of these selectors has a list of ranges\
           of values.  Note that the Local and Remote ports may not be\
           available in the case of receipt of a fragmented packet or if\
           the port fields have been protected by IPsec (encrypted);\
           thus, a value of OPAQUE also MUST be supported.  Note: In a\
           non-initial fragment, port values will not be available.  If\
           a port selector specifies a value other than ANY or OPAQUE,\
           it cannot match packets that are non-initial fragments.  If\
           the SA requires a port value other than ANY or OPAQUE, an\
           arriving fragment without ports MUST be discarded. (See\
           Section 7, "Handling Fragments".)\
\
         * If the Next Layer Protocol is a Mobility Header, then there\
           is a selector for IPv6 Mobility Header message type (MH type)\
           [Mobip].  This is an 8-bit value that identifies a particular\
           mobility message.  Note that the MH type may not be available\
\
\
\
Kent & Seo                  Standards Track                    [Page 27]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
           in the case of receipt of a fragmented packet. (See Section\
           7, "Handling Fragments".) For IKE, the IPv6 Mobility Header\
           message type (MH type) is placed in the most significant\
           eight bits of the 16-bit local "port" selector.\
\
         * If the Next Layer Protocol value is ICMP, then there is a\
           16-bit selector for the ICMP message type and code.  The\
           message type is a single 8-bit value, which defines the type\
           of an ICMP message, or ANY.  The ICMP code is a single 8-bit\
           value that defines a specific subtype for an ICMP message.\
           For IKE, the message type is placed in the most significant 8\
           bits of the 16-bit selector and the code is placed in the\
           least significant 8 bits.  This 16-bit selector can contain a\
           single type and a range of codes, a single type and ANY code,\
           and ANY type and ANY code.  Given a policy entry with a range\
           of Types (T-start to T-end) and a range of Codes (C-start to\
           C-end), and an ICMP packet with Type t and Code c, an\
           implementation MUST test for a match using\
\
               (T-start*256) + C-start <= (t*256) + c <= (T-end*256) +\
               C-end\
\
           Note that the ICMP message type and code may not be available\
           in the case of receipt of a fragmented packet. (See Section\
           7, "Handling Fragments".)\
\
      - Name:  This is not a selector like the others above.  It is not\
        acquired from a packet.  A name may be used as a symbolic\
        identifier for an IPsec Local or Remote address.  Named SPD\
        entries are used in two ways:\
\
         1. A named SPD entry is used by a responder (not an initiator)\
            in support of access control when an IP address would not be\
            appropriate for the Remote IP address selector, e.g., for\
            "road warriors".  The name used to match this field is\
            communicated during the IKE negotiation in the ID payload.\
            In this context, the initiator's Source IP address (inner IP\
            header in tunnel mode) is bound to the Remote IP address in\
            the SAD entry created by the IKE negotiation.  This address\
            overrides the Remote IP address value in the SPD, when the\
            SPD entry is selected in this fashion.  All IPsec\
            implementations MUST support this use of names.\
\
         2. A named SPD entry may be used by an initiator to identify a\
            user for whom an IPsec SA will be created (or for whom\
            traffic may be bypassed).  The initiator's IP source address\
            (from inner IP header in tunnel mode) is used to replace the\
            following if and when they are created:\
\
\
\
Kent & Seo                  Standards Track                    [Page 28]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
                    - local address in the SPD cache entry\
                    - local address in the outbound SAD entry\
                    - remote address in the inbound SAD entry\
\
            Support for this use is optional for multi-user, native host\
            implementations and not applicable to other implementations.\
            Note that this name is used only locally; it is not\
            communicated by the key management protocol.  Also, name\
            forms other than those used for case 1 above (responder) are\
            applicable in the initiator context (see below).\
\
         An SPD entry can contain both a name (or a list of names) and\
         also values for the Local or Remote IP address.\
\
         For case 1, responder, the identifiers employed in named SPD\
         entries are one of the following four types:\
\
                 a. a fully qualified user name string (email), e.g.,\
                    mozart@foo.example.com\
                    (this corresponds to ID_RFC822_ADDR in IKEv2)\
\
                 b. a fully qualified DNS name, e.g.,\
                    foo.example.com\
                    (this corresponds to ID_FQDN in IKEv2)\
\
                 c. X.500 distinguished name, e.g., [WaKiHo97],\
                    CN = Stephen T. Kent, O = BBN Technologies,\
                    SP = MA, C = US\
                    (this corresponds to ID_DER_ASN1_DN in IKEv2, after\
                    decoding)\
\
                 d. a byte string\
                    (this corresponds to Key_ID in IKEv2)\
\
         For case 2, initiator, the identifiers employed in named SPD\
         entries are of type byte string.  They are likely to be Unix\
         UIDs, Windows security IDs, or something similar, but could\
         also be a user name or account name.  In all cases, this\
         identifier is only of local concern and is not transmitted.\
\
   The IPsec implementation context determines how selectors are used.\
   For example, a native host implementation typically makes use of a\
   socket interface.  When a new connection is established, the SPD can\
   be consulted and an SA bound to the socket.  Thus, traffic sent via\
   that socket need not result in additional lookups to the SPD (SPD-O\
   and SPD-S) cache.  In contrast, a BITS, BITW, or security gateway\
   implementation needs to look at each packet and perform an\
   SPD-O/SPD-S cache lookup based on the selectors.\
\
\
\
Kent & Seo                  Standards Track                    [Page 29]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
4.4.1.2.  Structure of an SPD Entry\
\
   This section contains a prose description of an SPD entry.  Also,\
   Appendix C provides an example of an ASN.1 definition of an SPD\
   entry.\
\
   This text describes the SPD in a fashion that is intended to map\
   directly into IKE payloads to ensure that the policy required by SPD\
   entries can be negotiated through IKE.  Unfortunately, the semantics\
   of the version of IKEv2 published concurrently with this document\
   [Kau05] do not align precisely with those defined for the SPD.\
   Specifically, IKEv2 does not enable negotiation of a single SA that\
   binds multiple pairs of local and remote addresses and ports to a\
   single SA.  Instead, when multiple local and remote addresses and\
   ports are negotiated for an SA, IKEv2 treats these not as pairs, but\
   as (unordered) sets of local and remote values that can be\
   arbitrarily paired.  Until IKE provides a facility that conveys the\
   semantics that are expressed in the SPD via selector sets (as\
   described below), users MUST NOT include multiple selector sets in a\
   single SPD entry unless the access control intent aligns with the IKE\
   "mix and match" semantics.  An implementation MAY warn users, to\
   alert them to this problem if users create SPD entries with multiple\
   selector sets, the syntax of which indicates possible conflicts with\
   current IKE semantics.\
\
   The management GUI can offer the user other forms of data entry and\
   display, e.g., the option of using address prefixes as well as\
   ranges, and symbolic names for protocols, ports, etc. (Do not confuse\
   the use of symbolic names in a management interface with the SPD\
   selector "Name".) Note that Remote/Local apply only to IP addresses\
   and ports, not to ICMP message type/code or Mobility Header type.\
   Also, if the reserved, symbolic selector value OPAQUE or ANY is\
   employed for a given selector type, only that value may appear in the\
   list for that selector, and it must appear only once in the list for\
   that selector.  Note that ANY and OPAQUE are local syntax conventions\
   -- IKEv2 negotiates these values via the ranges indicated below:\
\
          ANY:     start = 0        end = <max>\
          OPAQUE:  start = <max>    end = 0\
\
   An SPD is an ordered list of entries each of which contains the\
   following fields.\
\
           o Name -- a list of IDs.  This quasi-selector is optional.\
             The forms that MUST be supported are described above in\
             Section 4.4.1.1 under "Name".\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 30]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
           o PFP flags -- one per traffic selector.  A given flag, e.g.,\
             for Next Layer Protocol, applies to the relevant selector\
             across all "selector sets" (see below) contained in an SPD\
             entry.  When creating an SA, each flag specifies for the\
             corresponding traffic selector whether to instantiate the\
             selector from the corresponding field in the packet that\
             triggered the creation of the SA or from the value(s) in\
             the corresponding SPD entry (see Section 4.4.1, "How to\
             Derive the Values for an SAD Entry").  Whether a single\
             flag is used for, e.g., source port, ICMP type/code, and\
             MH type, or a separate flag is used for each, is a local\
             matter.  There are PFP flags for:\
                - Local Address\
                - Remote Address\
                - Next Layer Protocol\
                - Local Port, or ICMP message type/code or Mobility\
                  Header type (depending on the next layer protocol)\
                - Remote Port, or ICMP message type/code or Mobility\
                  Header type (depending on the next layer protocol)\
\
           o One to N selector sets that correspond to the "condition"\
             for applying a particular IPsec action.  Each selector set\
             contains:\
                - Local Address\
                - Remote Address\
                - Next Layer Protocol\
                - Local Port, or ICMP message type/code or Mobility\
                  Header type (depending on the next layer protocol)\
                - Remote Port, or ICMP message type/code or Mobility\
                  Header type (depending on the next layer protocol)\
\
             Note: The "next protocol" selector is an individual value\
             (unlike the local and remote IP addresses) in a selector\
             set entry.  This is consistent with how IKEv2 negotiates\
             the Traffic Selector (TS) values for an SA.  It also makes\
             sense because one may need to associate different port\
             fields with different protocols.  It is possible to\
             associate multiple protocols (and ports) with a single SA\
             by specifying multiple selector sets for that SA.\
\
           o Processing info -- which action is required -- PROTECT,\
             BYPASS, or DISCARD.  There is just one action that goes\
             with all the selector sets, not a separate action for each\
             set.  If the required processing is PROTECT, the entry\
             contains the following information.\
                - IPsec mode -- tunnel or transport\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 31]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
                - (if tunnel mode) local tunnel address -- For a\
                  non-mobile host, if there is just one interface, this\
                  is straightforward; if there are multiple\
                  interfaces, this must be statically configured.  For a\
                  mobile host, the specification of the local address\
                  is handled externally to IPsec.\
                - (if tunnel mode) remote tunnel address -- There is no\
                  standard way to determine this.  See 4.5.3, "Locating\
                  a Security Gateway".\
                - Extended Sequence Number -- Is this SA using extended\
                  sequence numbers?\
                - stateful fragment checking -- Is this SA using\
                  stateful fragment checking?  (See Section 7 for more\
                  details.)\
                - Bypass DF bit (T/F) -- applicable to tunnel mode SAs\
                - Bypass DSCP (T/F) or map to unprotected DSCP values\
                  (array) if needed to restrict bypass of DSCP values --\
                  applicable to tunnel mode SAs\
                - IPsec protocol -- AH or ESP\
                - algorithms -- which ones to use for AH, which ones to\
                  use for ESP, which ones to use for combined mode,\
                  ordered by decreasing priority\
\
   It is a local matter as to what information is kept with regard to\
   handling extant SAs when the SPD is changed.\
\
4.4.1.3.  More Regarding Fields Associated with Next Layer Protocols\
\
   Additional selectors are often associated with fields in the Next\
   Layer Protocol header.  A particular Next Layer Protocol can have\
   zero, one, or two selectors.  There may be situations where there\
   aren't both local and remote selectors for the fields that are\
   dependent on the Next Layer Protocol.  The IPv6 Mobility Header has\
   only a Mobility Header message type.  AH and ESP have no further\
   selector fields.  A system may be willing to send an ICMP message\
   type and code that it does not want to receive.  In the descriptions\
   below, "port" is used to mean a field that is dependent on the Next\
   Layer Protocol.\
\
        A. If a Next Layer Protocol has no "port" selectors, then\
           the Local and Remote "port" selectors are set to OPAQUE in\
           the relevant SPD entry, e.g.,\
\
           Local's\
             next layer protocol = AH\
             "port" selector     = OPAQUE\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 32]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
           Remote's\
             next layer protocol = AH\
             "port" selector     = OPAQUE\
\
        B. Even if a Next Layer Protocol has only one selector, e.g.,\
           Mobility Header type, then the Local and Remote "port"\
           selectors are used to indicate whether a system is\
           willing to send and/or receive traffic with the specified\
          "port" values. For example, if Mobility Headers of a\
           specified type are allowed to be sent and received via an\
           SA, then the relevant SPD entry would be set as follows:\
\
           Local's\
             next layer protocol = Mobility Header\
             "port" selector     = Mobility Header message type\
\
           Remote's\
             next layer protocol = Mobility Header\
             "port" selector     = Mobility Header message type\
\
           If Mobility Headers of a specified type are allowed to be\
           sent but NOT received via an SA, then the relevant SPD\
           entry would be set as follows:\
\
           Local's\
             next layer protocol = Mobility Header\
             "port" selector     = Mobility Header message type\
\
           Remote's\
             next layer protocol = Mobility Header\
             "port" selector     = OPAQUE\
\
           If Mobility Headers of a specified type are allowed to be\
           received but NOT sent via an SA, then the relevant SPD\
           entry would be set as follows:\
\
           Local's\
             next layer protocol = Mobility Header\
             "port" selector     = OPAQUE\
\
           Remote's\
             next layer protocol = Mobility Header\
             "port" selector     = Mobility Header message type\
\
        C. If a system is willing to send traffic with a particular\
           "port" value but NOT receive traffic with that kind of\
           port value, the system's traffic selectors are set as\
           follows in the relevant SPD entry:\
\
\
\
Kent & Seo                  Standards Track                    [Page 33]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
           Local's\
             next layer protocol = ICMP\
             "port" selector     = <specific ICMP type & code>\
\
           Remote's\
             next layer protocol = ICMP\
             "port" selector     = OPAQUE\
\
        D. To indicate that a system is willing to receive traffic\
           with a particular "port" value but NOT send that kind of\
           traffic, the system's traffic selectors are set as follows\
           in the relevant SPD entry:\
\
           Local's\
             next layer protocol = ICMP\
             "port" selector     = OPAQUE\
\
           Remote's\
             next layer protocol = ICMP\
             "port" selector     = <specific ICMP type & code>\
\
           For example, if a security gateway is willing to allow\
           systems behind it to send ICMP traceroutes, but is not\
           willing to let outside systems run ICMP traceroutes to\
           systems behind it, then the security gateway's traffic\
           selectors are set as follows in the relevant SPD entry:\
\
           Local's\
             next layer protocol = 1 (ICMPv4)\
             "port" selector     = 30 (traceroute)\
\
           Remote's\
             next layer protocol = 1 (ICMPv4)\
             "port" selector     = OPAQUE\
\
4.4.2.  Security Association Database (SAD)\
\
   In each IPsec implementation, there is a nominal Security Association\
   Database (SAD), in which each entry defines the parameters associated\
   with one SA.  Each SA has an entry in the SAD.  For outbound\
   processing, each SAD entry is pointed to by entries in the SPD-S part\
   of the SPD cache.  For inbound processing, for unicast SAs, the SPI\
   is used either alone to look up an SA or in conjunction with the\
   IPsec protocol type.  If an IPsec implementation supports multicast,\
   the SPI plus destination address, or SPI plus destination and source\
   addresses are used to look up the SA. (See Section 4.1 for details on\
   the algorithm that MUST be used for mapping inbound IPsec datagrams\
   to SAs.) The following parameters are associated with each entry in\
\
\
\
Kent & Seo                  Standards Track                    [Page 34]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   the SAD.  They should all be present except where otherwise noted,\
   e.g., AH Authentication algorithm.  This description does not purport\
   to be a MIB, only a specification of the minimal data items required\
   to support an SA in an IPsec implementation.\
\
   For each of the selectors defined in Section 4.4.1.1, the entry for\
   an inbound SA in the SAD MUST be initially populated with the value\
   or values negotiated at the time the SA was created. (See the\
   paragraph in Section 4.4.1 under "Handling Changes to the SPD while\
   the System is Running" for guidance on the effect of SPD changes on\
   extant SAs.) For a receiver, these values are used to check that the\
   header fields of an inbound packet (after IPsec processing) match the\
   selector values negotiated for the SA.  Thus, the SAD acts as a cache\
   for checking the selectors of inbound traffic arriving on SAs.  For\
   the receiver, this is part of verifying that a packet arriving on an\
   SA is consistent with the policy for the SA. (See Section 6 for rules\
   for ICMP messages.)  These fields can have the form of specific\
   values, ranges, ANY, or OPAQUE, as described in Section 4.4.1.1,\
   "Selectors".  Note also that there are a couple of situations in\
   which the SAD can have entries for SAs that do not have corresponding\
   entries in the SPD.  Since this document does not mandate that the\
   SAD be selectively cleared when the SPD is changed, SAD entries can\
   remain when the SPD entries that created them are changed or deleted.\
   Also, if a manually keyed SA is created, there could be an SAD entry\
   for this SA that does not correspond to any SPD entry.\
\
   Note: The SAD can support multicast SAs, if manually configured.  An\
   outbound multicast SA has the same structure as a unicast SA.  The\
   source address is that of the sender, and the destination address is\
   the multicast group address.  An inbound, multicast SA must be\
   configured with the source addresses of each peer authorized to\
   transmit to the multicast SA in question.  The SPI value for a\
   multicast SA is provided by a multicast group controller, not by the\
   receiver, as for a unicast SA.  Because an SAD entry may be required\
   to accommodate multiple, individual IP source addresses that were\
   part of an SPD entry (for unicast SAs), the required facility for\
   inbound, multicast SAs is a feature already present in an IPsec\
   implementation.  However, because the SPD has no provisions for\
   accommodating multicast entries, this document does not specify an\
   automated way to create an SAD entry for a multicast, inbound SA.\
   Only manually configured SAD entries can be created to accommodate\
   inbound, multicast traffic.\
\
   Implementation Guidance: This document does not specify how an SPD-S\
   entry refers to the corresponding SAD entry, as this is an\
   implementation-specific detail.  However, some implementations (based\
   on experience from RFC 2401) are known to have problems in this\
   regard.  In particular, simply storing the (remote tunnel header IP\
\
\
\
Kent & Seo                  Standards Track                    [Page 35]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   address, remote SPI) pair in the SPD cache is not sufficient, since\
   the pair does not always uniquely identify a single SAD entry.  For\
   instance, two hosts behind the same NAT could choose the same SPI\
   value.  The situation also may arise if a host is assigned an IP\
   address (e.g., via DHCP) previously used by some other host, and the\
   SAs associated with the old host have not yet been deleted via dead\
   peer detection mechanisms.  This may lead to packets being sent over\
   the wrong SA or, if key management ensures the pair is unique,\
   denying the creation of otherwise valid SAs.  Thus, implementors\
   should implement links between the SPD cache and the SAD in a way\
   that does not engender such problems.\
\
4.4.2.1.  Data Items in the SAD\
\
   The following data items MUST be in the SAD:\
\
    o Security Parameter Index (SPI): a 32-bit value selected by the\
      receiving end of an SA to uniquely identify the SA.  In an SAD\
      entry for an outbound SA, the SPI is used to construct the\
      packet's AH or ESP header.  In an SAD entry for an inbound SA, the\
      SPI is used to map traffic to the appropriate SA (see text on\
      unicast/multicast in Section 4.1).\
\
    o Sequence Number Counter: a 64-bit counter used to generate the\
      Sequence Number field in AH or ESP headers. 64-bit sequence\
      numbers are the default, but 32-bit sequence numbers are also\
      supported if negotiated.\
\
    o Sequence Counter Overflow: a flag indicating whether overflow of\
      the sequence number counter should generate an auditable event and\
      prevent transmission of additional packets on the SA, or whether\
      rollover is permitted.  The audit log entry for this event SHOULD\
      include the SPI value, current date/time, Local Address, Remote\
      Address, and the selectors from the relevant SAD entry.\
\
    o Anti-Replay Window: a 64-bit counter and a bit-map (or equivalent)\
      used to determine whether an inbound AH or ESP packet is a replay.\
\
      Note: If anti-replay has been disabled by the receiver for an SA,\
      e.g., in the case of a manually keyed SA, then the Anti-Replay\
      Window is ignored for the SA in question. 64-bit sequence numbers\
      are the default, but this counter size accommodates 32-bit\
      sequence numbers as well.\
\
    o AH Authentication algorithm, key, etc.  This is required only if\
      AH is supported.\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 36]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
    o ESP Encryption algorithm, key, mode, IV, etc.  If a combined mode\
      algorithm is used, these fields will not be applicable.\
\
    o ESP integrity algorithm, keys, etc.  If the integrity service is\
      not selected, these fields will not be applicable.  If a combined\
      mode algorithm is used, these fields will not be applicable.\
\
    o ESP combined mode algorithms, key(s), etc.  This data is used when\
      a combined mode (encryption and integrity) algorithm is used with\
      ESP.  If a combined mode algorithm is not used, these fields are\
      not applicable.\
\
    o Lifetime of this SA: a time interval after which an SA must be\
      replaced with a new SA (and new SPI) or terminated, plus an\
      indication of which of these actions should occur.  This may be\
      expressed as a time or byte count, or a simultaneous use of both\
      with the first lifetime to expire taking precedence.  A compliant\
      implementation MUST support both types of lifetimes, and MUST\
      support a simultaneous use of both.  If time is employed, and if\
      IKE employs X.509 certificates for SA establishment, the SA\
      lifetime must be constrained by the validity intervals of the\
      certificates, and the NextIssueDate of the Certificate Revocation\
      Lists (CRLs) used in the IKE exchange for the SA.  Both initiator\
      and responder are responsible for constraining the SA lifetime in\
      this fashion.  Note: The details of how to handle the refreshing\
      of keys when SAs expire is a local matter.  However, one\
      reasonable approach is:\
\
     (a) If byte count is used, then the implementation SHOULD count the\
         number of bytes to which the IPsec cryptographic algorithm is\
         applied.  For ESP, this is the encryption algorithm (including\
         Null encryption) and for AH, this is the authentication\
         algorithm.  This includes pad bytes, etc.  Note that\
         implementations MUST be able to handle having the counters at\
         the ends of an SA get out of synch, e.g., because of packet\
         loss or because the implementations at each end of the SA\
         aren't doing things the same way.\
\
     (b) There SHOULD be two kinds of lifetime -- a soft lifetime that\
         warns the implementation to initiate action such as setting up\
         a replacement SA, and a hard lifetime when the current SA ends\
         and is destroyed.\
\
     (c) If the entire packet does not get delivered during the SA's\
         lifetime, the packet SHOULD be discarded.\
\
    o IPsec protocol mode: tunnel or transport.  Indicates which mode of\
      AH or ESP is applied to traffic on this SA.\
\
\
\
Kent & Seo                  Standards Track                    [Page 37]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
    o Stateful fragment checking flag.  Indicates whether or not\
      stateful fragment checking applies to this SA.\
\
    o Bypass DF bit (T/F) -- applicable to tunnel mode SAs where both\
      inner and outer headers are IPv4.\
\
    o DSCP values -- the set of DSCP values allowed for packets carried\
      over this SA.  If no values are specified, no DSCP-specific\
      filtering is applied.  If one or more values are specified, these\
      are used to select one SA among several that match the traffic\
      selectors for an outbound packet.  Note that these values are NOT\
      checked against inbound traffic arriving on the SA.\
\
    o Bypass DSCP (T/F) or map to unprotected DSCP values (array) if\
      needed to restrict bypass of DSCP values -- applicable to tunnel\
      mode SAs.  This feature maps DSCP values from an inner header to\
      values in an outer header, e.g., to address covert channel\
      signaling concerns.\
\
    o Path MTU: any observed path MTU and aging variables.\
\
    o Tunnel header IP source and destination address -- both addresses\
      must be either IPv4 or IPv6 addresses.  The version implies the\
      type of IP header to be used.  Only used when the IPsec protocol\
      mode is tunnel.\
\
4.4.2.2.  Relationship between SPD, PFP flag, packet, and SAD\
\
      For each selector, the following tables show the relationship\
      between the value in the SPD, the PFP flag, the value in the\
      triggering packet, and the resulting value in the SAD.  Note that\
      the administrative interface for IPsec can use various syntactic\
      options to make it easier for the administrator to enter rules.\
      For example, although a list of ranges is what IKEv2 sends, it\
      might be clearer and less error prone for the user to enter a\
      single IP address or IP address prefix.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 38]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
                                        Value in\
                                        Triggering   Resulting SAD\
         Selector  SPD Entry        PFP Packet       Entry\
         --------  ---------------- --- ------------ --------------\
         loc addr  list of ranges    0  IP addr "S"  list of ranges\
                   ANY               0  IP addr "S"  ANY\
                   list of ranges    1  IP addr "S"  "S"\
                   ANY               1  IP addr "S"  "S"\
\
         rem addr  list of ranges    0  IP addr "D"  list of ranges\
                   ANY               0  IP addr "D"  ANY\
                   list of ranges    1  IP addr "D"  "D"\
                   ANY               1  IP addr "D"  "D"\
\
         protocol  list of prot's*   0  prot. "P"    list of prot's*\
                   ANY**             0  prot. "P"    ANY\
                   OPAQUE****        0  prot. "P"    OPAQUE\
\
                   list of prot's*   0  not avail.   discard packet\
                   ANY**             0  not avail.   ANY\
                   OPAQUE****        0  not avail.   OPAQUE\
\
                   list of prot's*   1  prot. "P"    "P"\
                   ANY**             1  prot. "P"    "P"\
                   OPAQUE****        1  prot. "P"    ***\
\
                   list of prot's*   1  not avail.   discard packet\
                   ANY**             1  not avail.   discard packet\
                   OPAQUE****        1  not avail.   ***\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 39]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      If the protocol is one that has two ports, then there will be\
      selectors for both Local and Remote ports.\
\
                                        Value in\
                                        Triggering   Resulting SAD\
         Selector  SPD Entry        PFP Packet       Entry\
         --------  ---------------- --- ------------ --------------\
         loc port  list of ranges    0  src port "s" list of ranges\
                   ANY               0  src port "s" ANY\
                   OPAQUE            0  src port "s" OPAQUE\
\
                   list of ranges    0  not avail.   discard packet\
                   ANY               0  not avail.   ANY\
                   OPAQUE            0  not avail.   OPAQUE\
\
                   list of ranges    1  src port "s" "s"\
                   ANY               1  src port "s" "s"\
                   OPAQUE            1  src port "s" ***\
\
                   list of ranges    1  not avail.   discard packet\
                   ANY               1  not avail.   discard packet\
                   OPAQUE            1  not avail.   ***\
\
\
         rem port  list of ranges    0  dst port "d" list of ranges\
                   ANY               0  dst port "d" ANY\
                   OPAQUE            0  dst port "d" OPAQUE\
\
                   list of ranges    0  not avail.   discard packet\
                   ANY               0  not avail.   ANY\
                   OPAQUE            0  not avail.   OPAQUE\
\
                   list of ranges    1  dst port "d" "d"\
                   ANY               1  dst port "d" "d"\
                   OPAQUE            1  dst port "d" ***\
\
                   list of ranges    1  not avail.   discard packet\
                   ANY               1  not avail.   discard packet\
                   OPAQUE            1  not avail.   ***\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 40]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      If the protocol is mobility header, then there will be a selector\
      for mh type.\
\
                                        Value in\
                                        Triggering   Resulting SAD\
         Selector  SPD Entry        PFP Packet       Entry\
         --------  ---------------- --- ------------ --------------\
         mh type   list of ranges    0  mh type "T"  list of ranges\
                   ANY               0  mh type "T"  ANY\
                   OPAQUE            0  mh type "T"  OPAQUE\
\
                   list of ranges    0  not avail.   discard packet\
                   ANY               0  not avail.   ANY\
                   OPAQUE            0  not avail.   OPAQUE\
\
                   list of ranges    1  mh type "T"  "T"\
                   ANY               1  mh type "T"  "T"\
                   OPAQUE            1  mh type "T"  ***\
\
                   list of ranges    1  not avail.   discard packet\
                   ANY               1  not avail.   discard packet\
                   OPAQUE            1  not avail.   ***\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 41]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      If the protocol is ICMP, then there will be a 16-bit selector for\
      ICMP type and ICMP code.  Note that the type and code are bound to\
      each other, i.e., the codes apply to the particular type.  This\
      16-bit selector can contain a single type and a range of codes, a\
      single type and ANY code, and ANY type and ANY code.\
\
                                         Value in\
                                         Triggering   Resulting SAD\
         Selector   SPD Entry        PFP Packet       Entry\
         ---------  ---------------- --- ------------ --------------\
         ICMP type  a single type &   0  type "t" &   single type &\
         and code    range of codes        code "c"    range of codes\
                    a single type &   0  type "t" &   single type &\
                     ANY code              code "c"    ANY code\
                    ANY type & ANY    0  type "t" &   ANY type &\
                     code                  code "c"    ANY code\
                    OPAQUE            0  type "t" &   OPAQUE\
                                           code "c"\
\
                    a single type &   0  not avail.   discard packet\
                     range of codes\
                    a single type &   0  not avail.   discard packet\
                     ANY code\
                    ANY type &        0  not avail.   ANY type &\
                     ANY code                          ANY code\
                    OPAQUE            0  not avail.   OPAQUE\
\
                    a single type &   1  type "t" &   "t" and "c"\
                     range of codes        code "c"\
                    a single type &   1  type "t" &   "t" and "c"\
                     ANY code              code "c"\
                    ANY type &        1  type "t" &   "t" and "c"\
                     ANY code              code "c"\
                    OPAQUE            1  type "t" &   ***\
                                           code "c"\
\
                    a single type &   1  not avail.   discard packet\
                     range of codes\
                    a single type &   1  not avail.   discard packet\
                     ANY code\
                    ANY type &        1  not avail.   discard packet\
                     ANY code\
                    OPAQUE            1  not avail.   ***\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 42]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      If the name selector is used:\
\
                                         Value in\
                                         Triggering   Resulting SAD\
         Selector   SPD Entry        PFP Packet       Entry\
         ---------  ---------------- --- ------------ --------------\
         name       list of user or  N/A     N/A           N/A\
                    system names\
\
            * "List of protocols" is the information, not the way\
              that the SPD or SAD or IKEv2 have to represent this\
              information.\
           ** 0 (zero) is used by IKE to indicate ANY for\
              protocol.\
          *** Use of PFP=1 with an OPAQUE value is an error and\
              SHOULD be prohibited by an IPsec implementation.\
         **** The protocol field cannot be OPAQUE in IPv4.  This\
              table entry applies only to IPv6.\
\
4.4.3.  Peer Authorization Database (PAD)\
\
   The Peer Authorization Database (PAD) provides the link between the\
   SPD and a security association management protocol such as IKE.  It\
   embodies several critical functions:\
\
        o identifies the peers or groups of peers that are authorized\
          to communicate with this IPsec entity\
        o specifies the protocol and method used to authenticate each\
          peer\
        o provides the authentication data for each peer\
        o constrains the types and values of IDs that can be asserted\
          by a peer with regard to child SA creation, to ensure that the\
          peer does not assert identities for lookup in the SPD that it\
          is not authorized to represent, when child SAs are created\
        o peer gateway location info, e.g., IP address(es) or DNS names,\
          MAY be included for peers that are known to be "behind" a\
          security gateway\
\
   The PAD provides these functions for an IKE peer when the peer acts\
   as either the initiator or the responder.\
\
   To perform these functions, the PAD contains an entry for each peer\
   or group of peers with which the IPsec entity will communicate.  An\
   entry names an individual peer (a user, end system or security\
   gateway) or specifies a group of peers (using ID matching rules\
   defined below).  The entry specifies the authentication protocol\
   (e.g., IKEv1, IKEv2, KINK) method used (e.g., certificates or pre-\
   shared secrets) and the authentication data (e.g., the pre-shared\
\
\
\
Kent & Seo                  Standards Track                    [Page 43]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   secret or the trust anchor relative to which the peer's certificate\
   will be validated).  For certificate-based authentication, the entry\
   also may provide information to assist in verifying the revocation\
   status of the peer, e.g., a pointer to a CRL repository or the name\
   of an Online Certificate Status Protocol (OCSP) server associated\
   with the peer or with the trust anchor associated with the peer.\
\
   Each entry also specifies whether the IKE ID payload will be used as\
   a symbolic name for SPD lookup, or whether the remote IP address\
   provided in traffic selector payloads will be used for SPD lookups\
   when child SAs are created.\
\
   Note that the PAD information MAY be used to support creation of more\
   than one tunnel mode SA at a time between two peers, e.g., two\
   tunnels to protect the same addresses/hosts, but with different\
   tunnel endpoints.\
\
4.4.3.1.  PAD Entry IDs and Matching Rules\
\
   The PAD is an ordered database, where the order is defined by an\
   administrator (or a user in the case of a single-user end system).\
   Usually, the same administrator will be responsible for both the PAD\
   and SPD, since the two databases must be coordinated.  The ordering\
   requirement for the PAD arises for the same reason as for the SPD,\
   i.e., because use of "star name" entries allows for overlaps in the\
   set of IKE IDs that could match a specific entry.\
\
   Six types of IDs are supported for entries in the PAD, consistent\
   with the symbolic name types and IP addresses used to identify SPD\
   entries.  The ID for each entry acts as the index for the PAD, i.e.,\
   it is the value used to select an entry.  All of these ID types can\
   be used to match IKE ID payload types.  The six types are:\
\
           o DNS name (specific or partial)\
           o Distinguished Name (complete or sub-tree constrained)\
           o RFC 822 email address (complete or partially qualified)\
           o IPv4 address (range)\
           o IPv6 address (range)\
           o Key ID (exact match only)\
\
   The first three name types can accommodate sub-tree matching as well\
   as exact matches.  A DNS name may be fully qualified and thus match\
   exactly one name, e.g., foo.example.com.  Alternatively, the name may\
   encompass a group of peers by being partially specified, e.g., the\
   string ".example.com" could be used to match any DNS name ending in\
   these two domain name components.\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 44]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   Similarly, a Distinguished Name may specify a complete Distinguished\
   Name to match exactly one entry, e.g., CN = Stephen, O = BBN\
   Technologies, SP = MA, C = US.  Alternatively, an entry may encompass\
   a group of peers by specifying a sub-tree, e.g., an entry of the form\
   "C = US, SP = MA" might be used to match all DNs that contain these\
   two attributes as the top two Relative Distinguished Names (RDNs).\
\
   For an RFC 822 e-mail addresses, the same options exist.  A complete\
   address such as foo@example.com matches one entity, but a sub-tree\
   name such as "@example.com" could be used to match all the entities\
   with names ending in those two domain names to the right of the @.\
\
   The specific syntax used by an implementation to accommodate sub-tree\
   matching for distinguished names, domain names or RFC 822 e-mail\
   addresses is a local matter.  But, at a minimum, sub-tree matching of\
   the sort described above MUST be supported. (Substring matching\
   within a DN, DNS name, or RFC 822 address MAY be supported, but is\
   not required.)\
\
   For IPv4 and IPv6 addresses, the same address range syntax used for\
   SPD entries MUST be supported.  This allows specification of an\
   individual address (via a trivial range), an address prefix (by\
   choosing a range that adheres to Classless Inter-Domain Routing\
   (CIDR)-style prefixes), or an arbitrary address range.\
\
   The Key ID field is defined as an OCTET string in IKE.  For this name\
   type, only exact-match syntax MUST be supported (since there is no\
   explicit structure for this ID type).  Additional matching functions\
   MAY be supported for this ID type.\
\
4.4.3.2.  IKE Peer Authentication Data\
\
   Once an entry is located based on an ordered search of the PAD based\
   on ID field matching, it is necessary to verify the asserted\
   identity, i.e., to authenticate the asserted ID.  For each PAD entry,\
   there is an indication of the type of authentication to be performed.\
   This document requires support for two required authentication data\
   types:\
\
        - X.509 certificate\
        - pre-shared secret\
\
   For authentication based on an X.509 certificate, the PAD entry\
   contains a trust anchor via which the end entity (EE) certificate for\
   the peer must be verifiable, either directly or via a certificate\
   path.  See RFC 3280 for the definition of a trust anchor.  An entry\
   used with certificate-based authentication MAY include additional\
   data to facilitate certificate revocation status, e.g., a list of\
\
\
\
Kent & Seo                  Standards Track                    [Page 45]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   appropriate OCSP responders or CRL repositories, and associated\
   authentication data.  For authentication based on a pre-shared\
   secret, the PAD contains the pre-shared secret to be used by IKE.\
\
   This document does not require that the IKE ID asserted by a peer be\
   syntactically related to a specific field in an end entity\
   certificate that is employed to authenticate the identity of that\
   peer.  However, it often will be appropriate to impose such a\
   requirement, e.g., when a single entry represents a set of peers each\
   of whom may have a distinct SPD entry.  Thus, implementations MUST\
   provide a means for an administrator to require a match between an\
   asserted IKE ID and the subject name or subject alt name in a\
   certificate.  The former is applicable to IKE IDs expressed as\
   distinguished names; the latter is appropriate for DNS names, RFC 822\
   e-mail addresses, and IP addresses.  Since KEY ID is intended for\
   identifying a peer authenticated via a pre-shared secret, there is no\
   requirement to match this ID type to a certificate field.\
\
   See IKEv1 [HarCar98] and IKEv2 [Kau05] for details of how IKE\
   performs peer authentication using certificates or pre-shared\
   secrets.\
\
   This document does not mandate support for any other authentication\
   methods, although such methods MAY be employed.\
\
4.4.3.3.  Child SA Authorization Data\
\
   Once an IKE peer is authenticated, child SAs may be created.  Each\
   PAD entry contains data to constrain the set of IDs that can be\
   asserted by an IKE peer, for matching against the SPD.  Each PAD\
   entry indicates whether the IKE ID is to be used as a symbolic name\
   for SPD matching, or whether an IP address asserted in a traffic\
   selector payload is to be used.\
\
   If the entry indicates that the IKE ID is to be used, then the PAD\
   entry ID field defines the authorized set of IDs.  If the entry\
   indicates that child SAs traffic selectors are to be used, then an\
   additional data element is required, in the form of IPv4 and/or IPv6\
   address ranges. (A peer may be authorized for both address types, so\
   there MUST be provision for both a v4 and a v6 address range.)\
\
4.4.3.4.  How the PAD Is Used\
\
   During the initial IKE exchange, the initiator and responder each\
   assert their identity via the IKE ID payload and send an AUTH payload\
   to verify the asserted identity.  One or more CERT payloads may be\
   transmitted to facilitate the verification of each asserted identity.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 46]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   When an IKE entity receives an IKE ID payload, it uses the asserted\
   ID to locate an entry in the PAD, using the matching rules described\
   above.  The PAD entry specifies the authentication method to be\
   employed for the identified peer.  This ensures that the right method\
   is used for each peer and that different methods can be used for\
   different peers.  The entry also specifies the authentication data\
   that will be used to verify the asserted identity.  This data is\
   employed in conjunction with the specified method to authenticate the\
   peer, before any CHILD SAs are created.\
\
   Child SAs are created based on the exchange of traffic selector\
   payloads, either at the end of the initial IKE exchange or in\
   subsequent CREATE_CHILD_SA exchanges.  The PAD entry for the (now\
   authenticated) IKE peer is used to constrain creation of child SAs;\
   specifically, the PAD entry specifies how the SPD is searched using a\
   traffic selector proposal from a peer.  There are two choices: either\
   the IKE ID asserted by the peer is used to find an SPD entry via its\
   symbolic name, or peer IP addresses asserted in traffic selector\
   payloads are used for SPD lookups based on the remote IP address\
   field portion of an SPD entry.  It is necessary to impose these\
   constraints on creation of child SAs to prevent an authenticated peer\
   from spoofing IDs associated with other, legitimate peers.\
\
   Note that because the PAD is checked before searching for an SPD\
   entry, this safeguard protects an initiator against spoofing attacks.\
   For example, assume that IKE A receives an outbound packet destined\
   for IP address X, a host served by a security gateway.  RFC 2401\
   [RFC2401] and this document do not specify how A determines the\
   address of the IKE peer serving X.  However, any peer contacted by A\
   as the presumed representative for X must be registered in the PAD in\
   order to allow the IKE exchange to be authenticated.  Moreover, when\
   the authenticated peer asserts that it represents X in its traffic\
   selector exchange, the PAD will be consulted to determine if the peer\
   in question is authorized to represent X.  Thus, the PAD provides a\
   binding of address ranges (or name sub-spaces) to peers, to counter\
   such attacks.\
\
4.5.  SA and Key Management\
\
   All IPsec implementations MUST support both manual and automated SA\
   and cryptographic key management.  The IPsec protocols, AH and ESP,\
   are largely independent of the associated SA management techniques,\
   although the techniques involved do affect some of the security\
   services offered by the protocols.  For example, the optional\
   anti-replay service available for AH and ESP requires automated SA\
   management.  Moreover, the granularity of key distribution employed\
   with IPsec determines the granularity of authentication provided.  In\
   general, data origin authentication in AH and ESP is limited by the\
\
\
\
Kent & Seo                  Standards Track                    [Page 47]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   extent to which secrets used with the integrity algorithm (or with a\
   key management protocol that creates such secrets) are shared among\
   multiple possible sources.\
\
   The following text describes the minimum requirements for both types\
   of SA management.\
\
4.5.1.  Manual Techniques\
\
   The simplest form of management is manual management, in which a\
   person manually configures each system with keying material and SA\
   management data relevant to secure communication with other systems.\
   Manual techniques are practical in small, static environments but\
   they do not scale well.  For example, a company could create a\
   virtual private network (VPN) using IPsec in security gateways at\
   several sites.  If the number of sites is small, and since all the\
   sites come under the purview of a single administrative domain, this\
   might be a feasible context for manual management techniques.  In\
   this case, the security gateway might selectively protect traffic to\
   and from other sites within the organization using a manually\
   configured key, while not protecting traffic for other destinations.\
   It also might be appropriate when only selected communications need\
   to be secured.  A similar argument might apply to use of IPsec\
   entirely within an organization for a small number of hosts and/or\
   gateways.  Manual management techniques often employ statically\
   configured, symmetric keys, though other options also exist.\
\
4.5.2.  Automated SA and Key Management\
\
   Widespread deployment and use of IPsec requires an Internet-standard,\
   scalable, automated, SA management protocol.  Such support is\
   required to facilitate use of the anti-replay features of AH and ESP,\
   and to accommodate on-demand creation of SAs, e.g., for user- and\
   session-oriented keying.  (Note that the notion of "rekeying" an SA\
   actually implies creation of a new SA with a new SPI, a process that\
   generally implies use of an automated SA/key management protocol.)\
\
   The default automated key management protocol selected for use with\
   IPsec is IKEv2 [Kau05].  This document assumes the availability of\
   certain functions from the key management protocol that are not\
   supported by IKEv1.  Other automated SA management protocols MAY be\
   employed.\
\
   When an automated SA/key management protocol is employed, the output\
   from this protocol is used to generate multiple keys for a single SA.\
   This also occurs because distinct keys are used for each of the two\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 48]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   SAs created by IKE.  If both integrity and confidentiality are\
   employed, then a minimum of four keys are required.  Additionally,\
   some cryptographic algorithms may require multiple keys, e.g., 3DES.\
\
   The Key Management System may provide a separate string of bits for\
   each key or it may generate one string of bits from which all keys\
   are extracted.  If a single string of bits is provided, care needs to\
   be taken to ensure that the parts of the system that map the string\
   of bits to the required keys do so in the same fashion at both ends\
   of the SA.  To ensure that the IPsec implementations at each end of\
   the SA use the same bits for the same keys, and irrespective of which\
   part of the system divides the string of bits into individual keys,\
   the encryption keys MUST be taken from the first (left-most,\
   high-order) bits and the integrity keys MUST be taken from the\
   remaining bits.  The number of bits for each key is defined in the\
   relevant cryptographic algorithm specification RFC.  In the case of\
   multiple encryption keys or multiple integrity keys, the\
   specification for the cryptographic algorithm must specify the order\
   in which they are to be selected from a single string of bits\
   provided to the cryptographic algorithm.\
\
4.5.3.  Locating a Security Gateway\
\
   This section discusses issues relating to how a host learns about the\
   existence of relevant security gateways and, once a host has\
   contacted these security gateways, how it knows that these are the\
   correct security gateways.  The details of where the required\
   information is stored is a local matter, but the Peer Authorization\
   Database (PAD) described in Section 4.4 is the most likely candidate.\
   (Note: S* indicates a system that is running IPsec, e.g., SH1 and SG2\
   below.)\
\
   Consider a situation in which a remote host (SH1) is using the\
   Internet to gain access to a server or other machine (H2) and there\
   is a security gateway (SG2), e.g., a firewall, through which H1's\
   traffic must pass.  An example of this situation would be a mobile\
   host crossing the Internet to his home organization's firewall (SG2).\
   This situation raises several issues:\
\
   1. How does SH1 know/learn about the existence of the security\
      gateway SG2?\
\
   2. How does it authenticate SG2, and once it has authenticated SG2,\
      how does it confirm that SG2 has been authorized to represent H2?\
\
   3. How does SG2 authenticate SH1 and verify that SH1 is authorized to\
      contact H2?\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 49]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   4. How does SH1 know/learn about any additional gateways that provide\
      alternate paths to H2?\
\
   To address these problems, an IPsec-supporting host or security\
   gateway MUST have an administrative interface that allows the\
   user/administrator to configure the address of one or more security\
   gateways for ranges of destination addresses that require its use.\
   This includes the ability to configure information for locating and\
   authenticating one or more security gateways and verifying the\
   authorization of these gateways to represent the destination host.\
   (The authorization function is implied in the PAD.) This document\
   does not address the issue of how to automate the\
   discovery/verification of security gateways.\
\
4.6.  SAs and Multicast\
\
   The receiver-orientation of the SA implies that, in the case of\
   unicast traffic, the destination system will select the SPI value.\
   By having the destination select the SPI value, there is no potential\
   for manually configured SAs to conflict with automatically configured\
   (e.g., via a key management protocol) SAs or for SAs from multiple\
   sources to conflict with each other.  For multicast traffic, there\
   are multiple destination systems associated with a single SA.  So\
   some system or person will need to coordinate among all multicast\
   groups to select an SPI or SPIs on behalf of each multicast group and\
   then communicate the group's IPsec information to all of the\
   legitimate members of that multicast group via mechanisms not defined\
   here.\
\
   Multiple senders to a multicast group SHOULD use a single Security\
   Association (and hence SPI) for all traffic to that group when a\
   symmetric key encryption or integrity algorithm is employed.  In such\
   circumstances, the receiver knows only that the message came from a\
   system possessing the key for that multicast group.  In such\
   circumstances, a receiver generally will not be able to authenticate\
   which system sent the multicast traffic.  Specifications for other,\
   more general multicast approaches are deferred to the IETF Multicast\
   Security Working Group.\
\
5.  IP Traffic Processing\
\
   As mentioned in Section 4.4.1, "The Security Policy Database (SPD)",\
   the SPD (or associated caches) MUST be consulted during the\
   processing of all traffic that crosses the IPsec protection boundary,\
   including IPsec management traffic.  If no policy is found in the SPD\
   that matches a packet (for either inbound or outbound traffic), the\
   packet MUST be discarded.  To simplify processing, and to allow for\
   very fast SA lookups (for SG/BITS/BITW), this document introduces the\
\
\
\
Kent & Seo                  Standards Track                    [Page 50]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   notion of an SPD cache for all outbound traffic (SPD-O plus SPD-S),\
   and a cache for inbound, non-IPsec-protected traffic (SPD-I).  (As\
   mentioned earlier, the SAD acts as a cache for checking the selectors\
   of inbound IPsec-protected traffic arriving on SAs.) There is\
   nominally one cache per SPD.  For the purposes of this specification,\
   it is assumed that each cached entry will map to exactly one SA.\
   Note, however, exceptions arise when one uses multiple SAs to carry\
   traffic of different priorities (e.g., as indicated by distinct DSCP\
   values) but the same selectors.  Note also, that there are a couple\
   of situations in which the SAD can have entries for SAs that do not\
   have corresponding entries in the SPD.  Since this document does not\
   mandate that the SAD be selectively cleared when the SPD is changed,\
   SAD entries can remain when the SPD entries that created them are\
   changed or deleted.  Also, if a manually keyed SA is created, there\
   could be an SAD entry for this SA that does not correspond to any SPD\
   entry.\
\
   Since SPD entries may overlap, one cannot safely cache these entries\
   in general.  Simple caching might result in a match against a cache\
   entry, whereas an ordered search of the SPD would have resulted in a\
   match against a different entry.  But, if the SPD entries are first\
   decorrelated, then the resulting entries can safely be cached.  Each\
   cached entry will indicate that matching traffic should be bypassed\
   or discarded, appropriately. (Note: The original SPD entry might\
   result in multiple SAs, e.g., because of PFP.) Unless otherwise\
   noted, all references below to the "SPD" or "SPD cache" or "cache"\
   are to a decorrelated SPD (SPD-I, SPD-O, SPD-S) or the SPD cache\
   containing entries from the decorrelated SPD.\
\
   Note: In a host IPsec implementation based on sockets, the SPD will\
   be consulted whenever a new socket is created to determine what, if\
   any, IPsec processing will be applied to the traffic that will flow\
   on that socket.  This provides an implicit caching mechanism, and the\
   portions of the preceding discussion that address caching can be\
   ignored in such implementations.\
\
   Note: It is assumed that one starts with a correlated SPD because\
   that is how users and administrators are accustomed to managing these\
   sorts of access control lists or firewall filter rules.  Then the\
   decorrelation algorithm is applied to build a list of cache-able SPD\
   entries.  The decorrelation is invisible at the management interface.\
\
   For inbound IPsec traffic, the SAD entry selected by the SPI serves\
   as the cache for the selectors to be matched against arriving IPsec\
   packets, after AH or ESP processing has been performed.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 51]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
5.1.  Outbound IP Traffic Processing (protected-to-unprotected)\
\
   First consider the path for traffic entering the implementation via a\
   protected interface and exiting via an unprotected interface.\
\
                          Unprotected Interface\
                                   ^\
                                   |\
            (nested SAs)      +----------+\
           -------------------|Forwarding|<-----+\
           |                  +----------+      |\
           |                        ^           |\
           |                        | BYPASS    |\
           V                     +-----+        |\
       +-------+                 | SPD |     +--------+\
    ...| SPD-I |.................|Cache|.....|PROCESS |...IPsec\
       |  (*)  |                 | (*) |---->|(AH/ESP)|   boundary\
       +-------+                 +-----+     +--------+\
           |        +-------+     /  ^\
           |        |DISCARD| <--/   |\
           |        +-------+        |\
           |                         |\
           |                 +-------------+\
           |---------------->|SPD Selection|\
                             +-------------+\
                                    ^\
                                    |     +------+\
                                    |  -->| ICMP |\
                                    | /   +------+\
                                    |/\
                                    |\
                                    |\
                            Protected Interface\
\
\
         Figure 2.  Processing Model for Outbound Traffic\
                    (*) = The SPD caches are shown here.  If there\
                          is a cache miss, then the SPD is checked.\
                          There is no requirement that an\
                          implementation buffer the packet if\
                          there is a cache miss.\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 52]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   IPsec MUST perform the following steps when processing outbound\
   packets:\
\
   1.  When a packet arrives from the subscriber (protected) interface,\
       invoke the SPD selection function to obtain the SPD-ID needed to\
       choose the appropriate SPD. (If the implementation uses only one\
       SPD, this step is a no-op.)\
\
   2.  Match the packet headers against the cache for the SPD specified\
       by the SPD-ID from step 1.  Note that this cache contains entries\
       from SPD-O and SPD-S.\
\
   3a. If there is a match, then process the packet as specified by the\
       matching cache entry, i.e., BYPASS, DISCARD, or PROTECT using AH\
       or ESP.  If IPsec processing is applied, there is a link from the\
       SPD cache entry to the relevant SAD entry (specifying the mode,\
       cryptographic algorithms, keys, SPI, PMTU, etc.).  IPsec\
       processing is as previously defined, for tunnel or transport\
       modes and for AH or ESP, as specified in their respective RFCs\
       [Ken05b, Ken05a].  Note that the SA PMTU value, plus the value of\
       the stateful fragment checking flag (and the DF bit in the IP\
       header of the outbound packet) determine whether the packet can\
       (must) be fragmented prior to or after IPsec processing, or if it\
       must be discarded and an ICMP PMTU message is sent.\
\
   3b. If no match is found in the cache, search the SPD (SPD-S and\
       SPD-O parts) specified by SPD-ID.  If the SPD entry calls for\
       BYPASS or DISCARD, create one or more new outbound SPD cache\
       entries and if BYPASS, create one or more new inbound SPD cache\
       entries. (More than one cache entry may be created since a\
       decorrelated SPD entry may be linked to other such entries that\
       were created as a side effect of the decorrelation process.) If\
       the SPD entry calls for PROTECT, i.e., creation of an SA, the key\
       management mechanism (e.g., IKEv2) is invoked to create the SA.\
       If SA creation succeeds, a new outbound (SPD-S) cache entry is\
       created, along with outbound and inbound SAD entries, otherwise\
       the packet is discarded. (A packet that triggers an SPD lookup\
       MAY be discarded by the implementation, or it MAY be processed\
       against the newly created cache entry, if one is created.)  Since\
       SAs are created in pairs, an SAD entry for the corresponding\
       inbound SA also is created, and it contains the selector values\
       derived from the SPD entry (and packet, if any PFP flags were\
       "true") used to create the inbound SA, for use in checking\
       inbound traffic delivered via the SA.\
\
   4.  The packet is passed to the outbound forwarding function\
       (operating outside of the IPsec implementation), to select the\
       interface to which the packet will be directed.  This function\
\
\
\
Kent & Seo                  Standards Track                    [Page 53]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       may cause the packet to be passed back across the IPsec boundary,\
       for additional IPsec processing, e.g., in support of nested SAs.\
       If so, there MUST be an entry in SPD-I database that permits\
       inbound bypassing of the packet, otherwise the packet will be\
       discarded.  If necessary, i.e., if there is more than one SPD-I,\
       the traffic being looped back MAY be tagged as coming from this\
       internal interface.  This would allow the use of a different\
       SPD-I for "real" external traffic vs. looped traffic, if needed.\
\
   Note: With the exception of IPv4 and IPv6 transport mode, an SG,\
   BITS, or BITW implementation MAY fragment packets before applying\
   IPsec. (This applies only to IPv4.  For IPv6 packets, only the\
   originator is allowed to fragment them.) The device SHOULD have a\
   configuration setting to disable this.  The resulting fragments are\
   evaluated against the SPD in the normal manner.  Thus, fragments not\
   containing port numbers (or ICMP message type and code, or Mobility\
   Header type) will only match rules having port (or ICMP message type\
   and code, or MH type) selectors of OPAQUE or ANY. (See Section 7 for\
   more details.)\
\
   Note: With regard to determining and enforcing the PMTU of an SA, the\
   IPsec system MUST follow the steps described in Section 8.2.\
\
5.1.1.  Handling an Outbound Packet That Must Be Discarded\
\
   If an IPsec system receives an outbound packet that it finds it must\
   discard, it SHOULD be capable of generating and sending an ICMP\
   message to indicate to the sender of the outbound packet that the\
   packet was discarded.  The type and code of the ICMP message will\
   depend on the reason for discarding the packet, as specified below.\
   The reason SHOULD be recorded in the audit log.  The audit log entry\
   for this event SHOULD include the reason, current date/time, and the\
   selector values from the packet.\
\
   a.  The selectors of the packet matched an SPD entry requiring the\
       packet to be discarded.\
\
           IPv4 Type = 3 (destination unreachable) Code = 13\
                (Communication Administratively Prohibited)\
\
           IPv6 Type = 1 (destination unreachable) Code = 1\
                (Communication with destination administratively\
                prohibited)\
\
   b1. The IPsec system successfully reached the remote peer but was\
       unable to negotiate the SA required by the SPD entry matching the\
       packet because, for example, the remote peer is administratively\
       prohibited from communicating with the initiator, the initiating\
\
\
\
Kent & Seo                  Standards Track                    [Page 54]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       peer was unable to authenticate itself to the remote peer, the\
       remote peer was unable to authenticate itself to the initiating\
       peer, or the SPD at the remote peer did not have a suitable\
       entry.\
\
           IPv4 Type = 3 (destination unreachable) Code = 13\
                (Communication Administratively Prohibited)\
\
           IPv6 Type = 1 (destination unreachable) Code = 1\
                (Communication with destination administratively\
                prohibited)\
\
   b2. The IPsec system was unable to set up the SA required by the SPD\
       entry matching the packet because the IPsec peer at the other end\
       of the exchange could not be contacted.\
\
           IPv4 Type = 3 (destination unreachable) Code = 1 (host\
                unreachable)\
\
           IPv6 Type = 1 (destination unreachable) Code = 3 (address\
                unreachable)\
\
   Note that an attacker behind a security gateway could send packets\
   with a spoofed source address, W.X.Y.Z, to an IPsec entity causing it\
   to send ICMP messages to W.X.Y.Z.  This creates an opportunity for a\
   denial of service (DoS) attack among hosts behind a security gateway.\
   To address this, a security gateway SHOULD include a management\
   control to allow an administrator to configure an IPsec\
   implementation to send or not send the ICMP messages under these\
   circumstances, and if this facility is selected, to rate limit the\
   transmission of such ICMP responses.\
\
5.1.2.  Header Construction for Tunnel Mode\
\
   This section describes the handling of the inner and outer IP\
   headers, extension headers, and options for AH and ESP tunnels, with\
   regard to outbound traffic processing.  This includes how to\
   construct the encapsulating (outer) IP header, how to process fields\
   in the inner IP header, and what other actions should be taken for\
   outbound, tunnel mode traffic.  The general processing described here\
   is modeled after RFC 2003, "IP Encapsulation within IP" [Per96]:\
\
    o The outer IP header Source Address and Destination Address\
      identify the "endpoints" of the tunnel (the encapsulator and\
      decapsulator).  The inner IP header Source Address and Destination\
      Addresses identify the original sender and recipient of the\
      datagram (from the perspective of this tunnel), respectively.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 55]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      (See footnote 3 after the table in 5.1.2.1 for more details on the\
      encapsulating source IP address.)\
\
    o The inner IP header is not changed except as noted below for TTL\
      (or Hop Limit) and the DS/ECN Fields.  The inner IP header\
      otherwise remains unchanged during its delivery to the tunnel exit\
      point.\
\
    o No change to IP options or extension headers in the inner header\
      occurs during delivery of the encapsulated datagram through the\
      tunnel.\
\
   Note: IPsec tunnel mode is different from IP-in-IP tunneling (RFC\
   2003 [Per96]) in several ways:\
\
    o IPsec offers certain controls to a security administrator to\
      manage covert channels (which would not normally be a concern for\
      tunneling) and to ensure that the receiver examines the right\
      portions of the received packet with respect to application of\
      access controls.  An IPsec implementation MAY be configurable with\
      regard to how it processes the outer DS field for tunnel mode for\
      transmitted packets.  For outbound traffic, one configuration\
      setting for the outer DS field will operate as described in the\
      following sections on IPv4 and IPv6 header processing for IPsec\
      tunnels.  Another will allow the outer DS field to be mapped to a\
      fixed value, which MAY be configured on a per-SA basis. (The value\
      might really be fixed for all traffic outbound from a device, but\
      per-SA granularity allows that as well.) This configuration option\
      allows a local administrator to decide whether the covert channel\
      provided by copying these bits outweighs the benefits of copying.\
\
    o IPsec describes how to handle ECN or DS and provides the ability\
      to control propagation of changes in these fields between\
      unprotected and protected domains.  In general, propagation from a\
      protected to an unprotected domain is a covert channel and thus\
      controls are provided to manage the bandwidth of this channel.\
      Propagation of ECN values in the other direction are controlled so\
      that only legitimate ECN changes (indicating occurrence of\
      congestion between the tunnel endpoints) are propagated.  By\
      default, DS propagation from an unprotected domain to a protected\
      domain is not permitted.  However, if the sender and receiver do\
      not share the same DS code space, and the receiver has no way of\
      learning how to map between the two spaces, then it may be\
      appropriate to deviate from the default.  Specifically, an IPsec\
      implementation MAY be configurable in terms of how it processes\
      the outer DS field for tunnel mode for received packets.  It may\
      be configured to either discard the outer DS value (the default)\
      OR to overwrite the inner DS field with the outer DS field.  If\
\
\
\
Kent & Seo                  Standards Track                    [Page 56]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      offered, the discard vs. overwrite behavior MAY be configured on a\
      per-SA basis.  This configuration option allows a local\
      administrator to decide whether the vulnerabilities created by\
      copying these bits outweigh the benefits of copying.  See\
      [RFC2983] for further information on when each of these behaviors\
      may be useful, and also for the possible need for diffserv traffic\
      conditioning prior or subsequent to IPsec processing (including\
      tunnel decapsulation).\
\
    o IPsec allows the IP version of the encapsulating header to be\
      different from that of the inner header.\
\
   The tables in the following sub-sections show the handling for the\
   different header/option fields ("constructed" means that the value in\
   the outer field is constructed independently of the value in the\
   inner).\
\
5.1.2.1.  IPv4: Header Construction for Tunnel Mode\
\
                         <-- How Outer Hdr Relates to Inner Hdr -->\
                         Outer Hdr at                 Inner Hdr at\
    IPv4                 Encapsulator                 Decapsulator\
      Header fields:     --------------------         ------------\
        version          4 (1)                        no change\
        header length    constructed                  no change\
        DS Field         copied from inner hdr (5)    no change\
        ECN Field        copied from inner hdr        constructed (6)\
        total length     constructed                  no change\
        ID               constructed                  no change\
        flags (DF,MF)    constructed, DF (4)          no change\
        fragment offset  constructed                  no change\
        TTL              constructed (2)              decrement (2)\
        protocol         AH, ESP                      no change\
        checksum         constructed                  constructed (2)(6)\
        src address      constructed (3)              no change\
        dest address     constructed (3)              no change\
      Options            never copied                 no change\
\
    Notes:\
\
      (1) The IP version in the encapsulating header can be different\
          from the value in the inner header.\
\
      (2) The TTL in the inner header is decremented by the encapsulator\
          prior to forwarding and by the decapsulator if it forwards the\
          packet.  (The IPv4 checksum changes when the TTL changes.)\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 57]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
          Note: Decrementing the TTL value is a normal part of\
          forwarding a packet.  Thus, a packet originating from the same\
          node as the encapsulator does not have its TTL decremented,\
          since the sending node is originating the packet rather than\
          forwarding it.  This applies to BITS and native IPsec\
          implementations in hosts and routers.  However, the IPsec\
          processing model includes an external forwarding capability.\
          TTL processing can be used to prevent looping of packets,\
          e.g., due to configuration errors, within the context of this\
          processing model.\
\
      (3) Local and Remote addresses depend on the SA, which is used to\
          determine the Remote address, which in turn determines which\
          Local address (net interface) is used to forward the packet.\
\
          Note: For multicast traffic, the destination address, or\
          source and destination addresses, may be required for\
          demuxing.  In that case, it is important to ensure consistency\
          over the lifetime of the SA by ensuring that the source\
          address that appears in the encapsulating tunnel header is the\
          same as the one that was negotiated during the SA\
          establishment process.  There is an exception to this general\
          rule, i.e., a mobile IPsec implementation will update its\
          source address as it moves.\
\
      (4) Configuration determines whether to copy from the inner header\
          (IPv4 only), clear, or set the DF.\
\
      (5) If the packet will immediately enter a domain for which the\
          DSCP value in the outer header is not appropriate, that value\
          MUST be mapped to an appropriate value for the domain\
          [NiBlBaBL98].  See RFC 2475 [BBCDWW98] for further\
          information.\
\
      (6) If the ECN field in the inner header is set to ECT(0) or\
          ECT(1), where ECT is ECN-Capable Transport (ECT), and if the\
          ECN field in the outer header is set to Congestion Experienced\
          (CE), then set the ECN field in the inner header to CE;\
          otherwise, make no change to the ECN field in the inner\
          header.  (The IPv4 checksum changes when the ECN changes.)\
\
   Note: IPsec does not copy the options from the inner header into the\
   outer header, nor does IPsec construct the options in the outer\
   header.  However, post-IPsec code MAY insert/construct options for\
   the outer header.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 58]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
5.1.2.2.  IPv6: Header Construction for Tunnel Mode\
\
                         <-- How Outer Hdr  Relates Inner Hdr --->\
                         Outer Hdr at                 Inner Hdr at\
    IPv6                 Encapsulator                 Decapsulator\
      Header fields:     --------------------         ------------\
        version          6 (1)                        no change\
        DS Field         copied from inner hdr (5)    no change (9)\
        ECN Field        copied from inner hdr        constructed (6)\
        flow label       copied or configured (8)     no change\
        payload length   constructed                  no change\
        next header      AH,ESP,routing hdr           no change\
        hop limit        constructed (2)              decrement (2)\
        src address      constructed (3)              no change\
        dest address     constructed (3)              no change\
      Extension headers  never copied (7)             no change\
\
    Notes:\
\
      (1) - (6) See Section 5.1.2.1.\
\
      (7) IPsec does not copy the extension headers from the inner\
          packet into outer headers, nor does IPsec construct extension\
          headers in the outer header.  However, post-IPsec code MAY\
          insert/construct extension headers for the outer header.\
\
      (8) See [RaCoCaDe04].  Copying is acceptable only for end systems,\
          not SGs.  If an SG copied flow labels from the inner header to\
          the outer header, collisions might result.\
\
      (9) An implementation MAY choose to provide a facility to pass the\
          DS value from the outer header to the inner header, on a per-\
          SA basis, for received tunnel mode packets.  The motivation\
          for providing this feature is to accommodate situations in\
          which the DS code space at the receiver is different from that\
          of the sender and the receiver has no way of knowing how to\
          translate from the sender's space.  There is a danger in\
          copying this value from the outer header to the inner header,\
          since it enables an attacker to modify the outer DSCP value in\
          a fashion that may adversely affect other traffic at the\
          receiver.  Hence the default behavior for IPsec\
          implementations is NOT to permit such copying.\
\
5.2.  Processing Inbound IP Traffic (unprotected-to-protected)\
\
   Inbound processing is somewhat different from outbound processing,\
   because of the use of SPIs to map IPsec-protected traffic to SAs.\
   The inbound SPD cache (SPD-I) is applied only to bypassed or\
\
\
\
Kent & Seo                  Standards Track                    [Page 59]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   discarded traffic.  If an arriving packet appears to be an IPsec\
   fragment from an unprotected interface, reassembly is performed prior\
   to IPsec processing.  The intent for any SPD cache is that a packet\
   that fails to match any entry is then referred to the corresponding\
   SPD.  Every SPD SHOULD have a nominal, final entry that catches\
   anything that is otherwise unmatched, and discards it.  This ensures\
   that non-IPsec-protected traffic that arrives and does not match any\
   SPD-I entry will be discarded.\
\
                      Unprotected Interface\
                                |\
                                V\
                             +-----+   IPsec protected\
         ------------------->|Demux|-------------------+\
         |                   +-----+                   |\
         |                      |                      |\
         |            Not IPsec |                      |\
         |                      |                      |\
         |                      V                      |\
         |     +-------+    +---------+                |\
         |     |DISCARD|<---|SPD-I (*)|                |\
         |     +-------+    +---------+                |\
         |                   |                         |\
         |                   |-----+                   |\
         |                   |     |                   |\
         |                   |     V                   |\
         |                   |  +------+               |\
         |                   |  | ICMP |               |\
         |                   |  +------+               |\
         |                   |                         V\
      +---------+            |                   +-----------+\
  ....|SPD-O (*)|............|...................|PROCESS(**)|...IPsec\
      +---------+            |                   | (AH/ESP)  | Boundary\
         ^                   |                   +-----------+\
         |                   |       +---+             |\
         |            BYPASS |   +-->|IKE|             |\
         |                   |   |   +---+             |\
         |                   V   |                     V\
         |               +----------+          +---------+   +----+\
         |--------<------|Forwarding|<---------|SAD Check|-->|ICMP|\
           nested SAs    +----------+          | (***)   |   +----+\
                               |               +---------+\
                               V\
                       Protected Interface\
\
            Figure 3.  Processing Model for Inbound Traffic\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 60]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
                       (*) = The caches are shown here.  If there is\
                             a cache miss, then the SPD is checked.\
                             There is no requirement that an\
                             implementation buffer the packet if\
                             there is a cache miss.\
                      (**) = This processing includes using the\
                             packet's SPI, etc., to look up the SA\
                             in the SAD, which forms a cache of the\
                             SPD for inbound packets (except for\
                             cases noted in Sections 4.4.2 and 5).\
                             See step 3a below.\
                     (***) = This SAD check refers to step 4 below.\
\
   Prior to performing AH or ESP processing, any IP fragments that\
   arrive via the unprotected interface are reassembled (by IP).  Each\
   inbound IP datagram to which IPsec processing will be applied is\
   identified by the appearance of the AH or ESP values in the IP Next\
   Protocol field (or of AH or ESP as a next layer protocol in the IPv6\
   context).\
\
   IPsec MUST perform the following steps:\
\
   1.  When a packet arrives, it may be tagged with the ID of the\
       interface (physical or virtual) via which it arrived, if\
       necessary, to support multiple SPDs and associated SPD-I caches.\
       (The interface ID is mapped to a corresponding SPD-ID.)\
\
   2.  The packet is examined and demuxed into one of two categories:\
       - If the packet appears to be IPsec protected and it is addressed\
         to this device, an attempt is made to map it to an active SA\
         via the SAD.  Note that the device may have multiple IP\
         addresses that may be used in the SAD lookup, e.g., in the case\
         of protocols such as SCTP.\
       - Traffic not addressed to this device, or addressed to this\
         device and not AH or ESP, is directed to SPD-I lookup. (This\
         implies that IKE traffic MUST have an explicit BYPASS entry in\
         the SPD.) If multiple SPDs are employed, the tag assigned to\
         the packet in step 1 is used to select the appropriate SPD-I\
         (and cache) to search.  SPD-I lookup determines whether the\
         action is DISCARD or BYPASS.\
\
   3a. If the packet is addressed to the IPsec device and AH or ESP is\
       specified as the protocol, the packet is looked up in the SAD.\
       For unicast traffic, use only the SPI (or SPI plus protocol).\
       For multicast traffic, use the SPI plus the destination or SPI\
       plus destination and source addresses, as specified in Section\
       4.1. In either case (unicast or multicast), if there is no match,\
       discard the traffic.  This is an auditable event.  The audit log\
\
\
\
Kent & Seo                  Standards Track                    [Page 61]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       entry for this event SHOULD include the current date/time, SPI,\
       source and destination of the packet, IPsec protocol, and any\
       other selector values of the packet that are available.  If the\
       packet is found in the SAD, process it accordingly (see step 4).\
\
   3b. If the packet is not addressed to the device or is addressed to\
       this device and is not AH or ESP, look up the packet header in\
       the (appropriate) SPD-I cache.  If there is a match and the\
       packet is to be discarded or bypassed, do so.  If there is no\
       cache match, look up the packet in the corresponding SPD-I and\
       create a cache entry as appropriate. (No SAs are created in\
       response to receipt of a packet that requires IPsec protection;\
       only BYPASS or DISCARD cache entries can be created this way.) If\
       there is no match, discard the traffic.  This is an auditable\
       event.  The audit log entry for this event SHOULD include the\
       current date/time, SPI if available, IPsec protocol if available,\
       source and destination of the packet, and any other selector\
       values of the packet that are available.\
\
   3c. Processing of ICMP messages is assumed to take place on the\
       unprotected side of the IPsec boundary.  Unprotected ICMP\
       messages are examined and local policy is applied to determine\
       whether to accept or reject these messages and, if accepted, what\
       action to take as a result.  For example, if an ICMP unreachable\
       message is received, the implementation must decide whether to\
       act on it, reject it, or act on it with constraints. (See Section\
       6.)\
\
   4.  Apply AH or ESP processing as specified, using the SAD entry\
       selected in step 3a above.  Then match the packet against the\
       inbound selectors identified by the SAD entry to verify that the\
       received packet is appropriate for the SA via which it was\
       received.\
\
   5.  If an IPsec system receives an inbound packet on an SA and the\
       packet's header fields are not consistent with the selectors for\
       the SA, it MUST discard the packet.  This is an auditable event.\
       The audit log entry for this event SHOULD include the current\
       date/time, SPI, IPsec protocol(s), source and destination of the\
       packet, any other selector values of the packet that are\
       available, and the selector values from the relevant SAD entry.\
       The system SHOULD also be capable of generating and sending an\
       IKE notification of INVALID_SELECTORS to the sender (IPsec peer),\
       indicating that the received packet was discarded because of\
       failure to pass selector checks.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 62]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   To minimize the impact of a DoS attack, or a mis-configured peer, the\
   IPsec system SHOULD include a management control to allow an\
   administrator to configure the IPsec implementation to send or not\
   send this IKE notification, and if this facility is selected, to rate\
   limit the transmission of such notifications.\
\
   After traffic is bypassed or processed through IPsec, it is handed to\
   the inbound forwarding function for disposition.  This function may\
   cause the packet to be sent (outbound) across the IPsec boundary for\
   additional inbound IPsec processing, e.g., in support of nested SAs.\
   If so, then as with ALL outbound traffic that is to be bypassed, the\
   packet MUST be matched against an SPD-O entry.  Ultimately, the\
   packet should be forwarded to the destination host or process for\
   disposition.\
\
6.  ICMP Processing\
\
   This section describes IPsec handling of ICMP traffic.  There are two\
   categories of ICMP traffic: error messages (e.g., type = destination\
   unreachable) and non-error messages (e.g., type = echo).  This\
   section applies exclusively to error messages.  Disposition of\
   non-error, ICMP messages (that are not addressed to the IPsec\
   implementation itself) MUST be explicitly accounted for using SPD\
   entries.\
\
   The discussion in this section applies to ICMPv6 as well as to\
   ICMPv4.  Also, a mechanism SHOULD be provided to allow an\
   administrator to cause ICMP error messages (selected, all, or none)\
   to be logged as an aid to problem diagnosis.\
\
6.1.  Processing ICMP Error Messages Directed to an IPsec Implementation\
\
6.1.1.  ICMP Error Messages Received on the Unprotected Side of the\
        Boundary\
\
   Figure 3 in Section 5.2 shows a distinct ICMP processing module on\
   the unprotected side of the IPsec boundary, for processing ICMP\
   messages (error or otherwise) that are addressed to the IPsec device\
   and that are not protected via AH or ESP.  An ICMP message of this\
   sort is unauthenticated, and its processing may result in denial or\
   degradation of service.  This suggests that, in general, it would be\
   desirable to ignore such messages.  However, many ICMP messages will\
   be received by hosts or security gateways from unauthenticated\
   sources, e.g., routers in the public Internet.  Ignoring these ICMP\
   messages can degrade service, e.g., because of a failure to process\
   PMTU message and redirection messages.  Thus, there is also a\
   motivation for accepting and acting upon unauthenticated ICMP\
   messages.\
\
\
\
Kent & Seo                  Standards Track                    [Page 63]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   To accommodate both ends of this spectrum, a compliant IPsec\
   implementation MUST permit a local administrator to configure an\
   IPsec implementation to accept or reject unauthenticated ICMP\
   traffic.  This control MUST be at the granularity of ICMP type and\
   MAY be at the granularity of ICMP type and code.  Additionally, an\
   implementation SHOULD incorporate mechanisms and parameters for\
   dealing with such traffic.  For example, there could be the ability\
   to establish a minimum PMTU for traffic (on a per destination basis),\
   to prevent receipt of an unauthenticated ICMP from setting the PMTU\
   to a trivial size.\
\
   If an ICMP PMTU message passes the checks above and the system is\
   configured to accept it, then there are two possibilities.  If the\
   implementation applies fragmentation on the ciphertext side of the\
   boundary, then the accepted PMTU information is passed to the\
   forwarding module (outside of the IPsec implementation), which uses\
   it to manage outbound packet fragmentation.  If the implementation is\
   configured to effect plaintext side fragmentation, then the PMTU\
   information is passed to the plaintext side and processed as\
   described in Section 8.2.\
\
6.1.2.  ICMP Error Messages Received on the Protected Side of the\
        Boundary\
\
   These ICMP messages are not authenticated, but they do come from\
   sources on the protected side of the IPsec boundary.  Thus, these\
   messages generally are viewed as more "trustworthy" than their\
   counterparts arriving from sources on the unprotected side of the\
   boundary.  The major security concern here is that a compromised host\
   or router might emit erroneous ICMP error messages that could degrade\
   service for other devices "behind" the security gateway, or that\
   could even result in violations of confidentiality.  For example, if\
   a bogus ICMP redirect were consumed by a security gateway, it could\
   cause the forwarding table on the protected side of the boundary to\
   be modified so as to deliver traffic to an inappropriate destination\
   "behind" the gateway.  Thus, implementers MUST provide controls to\
   allow local administrators to constrain the processing of ICMP error\
   messages received on the protected side of the boundary, and directed\
   to the IPsec implementation.  These controls are of the same type as\
   those employed on the unprotected side, described above in Section\
   6.1.1.\
\
6.2.  Processing Protected, Transit ICMP Error Messages\
\
   When an ICMP error message is transmitted via an SA to a device\
   "behind" an IPsec implementation, both the payload and the header of\
   the ICMP message require checking from an access control perspective.\
   If one of these messages is forwarded to a host behind a security\
\
\
\
Kent & Seo                  Standards Track                    [Page 64]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   gateway, the receiving host IP implementation will make decisions\
   based on the payload, i.e., the header of the packet that purportedly\
   triggered the error response.  Thus, an IPsec implementation MUST be\
   configurable to check that this payload header information is\
   consistent with the SA via which it arrives. (This means that the\
   payload header, with source and destination address and port fields\
   reversed, matches the traffic selectors for the SA.) If this sort of\
   check is not performed, then, for example, anyone with whom the\
   receiving IPsec system (A) has an active SA could send an ICMP\
   Destination Unreachable message that refers to any host/net with\
   which A is currently communicating, and thus effect a highly\
   efficient DoS attack regarding communication with other peers of A.\
   Normal IPsec receiver processing of traffic is not sufficient to\
   protect against such attacks.  However, not all contexts may require\
   such checks, so it is also necessary to allow a local administrator\
   to configure an implementation to NOT perform such checks.\
\
   To accommodate both policies, the following convention is adopted.\
   If an administrator wants to allow ICMP error messages to be carried\
   by an SA without inspection of the payload, then configure an SPD\
   entry that explicitly allows for carriage of such traffic.  If an\
   administrator wants IPsec to check the payload of ICMP error messages\
   for consistency, then do not create any SPD entries that accommodate\
   carriage of such traffic based on the ICMP packet header.  This\
   convention motivates the following processing description.\
\
   IPsec senders and receivers MUST support the following processing for\
   ICMP error messages that are sent and received via SAs.\
\
   If an SA exists that accommodates an outbound ICMP error message,\
   then the message is mapped to the SA and only the IP and ICMP headers\
   are checked upon receipt, just as would be the case for other\
   traffic.  If no SA exists that matches the traffic selectors\
   associated with an ICMP error message, then the SPD is searched to\
   determine if such an SA can be created.  If so, the SA is created and\
   the ICMP error message is transmitted via that SA.  Upon receipt,\
   this message is subject to the usual traffic selector checks at the\
   receiver.  This processing is exactly what would happen for traffic\
   in general, and thus does not represent any special processing for\
   ICMP error messages.\
\
   If no SA exists that would carry the outbound ICMP message in\
   question, and if no SPD entry would allow carriage of this outbound\
   ICMP error message, then an IPsec implementation MUST map the message\
   to the SA that would carry the return traffic associated with the\
   packet that triggered the ICMP error message.  This requires an IPsec\
   implementation to detect outbound ICMP error messages that map to no\
   extant SA or SPD entry, and treat them specially with regard to SA\
\
\
\
Kent & Seo                  Standards Track                    [Page 65]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   creation and lookup.  The implementation extracts the header for the\
   packet that triggered the error (from the ICMP message payload),\
   reverses the source and destination IP address fields, extracts the\
   protocol field, and reverses the port fields (if accessible).  It\
   then uses this extracted information to locate an appropriate, active\
   outbound SA, and transmits the error message via this SA.  If no such\
   SA exists, no SA will be created, and this is an auditable event.\
\
   If an IPsec implementation receives an inbound ICMP error message on\
   an SA, and the IP and ICMP headers of the message do not match the\
   traffic selectors for the SA, the receiver MUST process the received\
   message in a special fashion.  Specifically, the receiver must\
   extract the header of the triggering packet from the ICMP payload,\
   and reverse fields as described above to determine if the packet is\
   consistent with the selectors for the SA via which the ICMP error\
   message was received.  If the packet fails this check, the IPsec\
   implementation MUST NOT forwarded the ICMP message to the\
   destination.  This is an auditable event.\
\
7.  Handling Fragments (on the protected side of the IPsec boundary)\
\
   Earlier sections of this document describe mechanisms for (a)\
   fragmenting an outbound packet after IPsec processing has been\
   applied and reassembling it at the receiver before IPsec processing\
   and (b) handling inbound fragments received from the unprotected side\
   of the IPsec boundary.  This section describes how an implementation\
   should handle the processing of outbound plaintext fragments on the\
   protected side of the IPsec boundary. (See Appendix D, "Fragment\
   Handling Rationale".) In particular, it addresses:\
\
        o mapping an outbound non-initial fragment to the right SA\
          (or finding the right SPD entry)\
        o verifying that a received non-initial fragment is\
          authorized for the SA via which it was received\
        o mapping outbound and inbound non-initial fragments to the\
          right SPD-O/SPD-I entry or the relevant cache entry, for\
          BYPASS/DISCARD traffic\
\
   Note: In Section 4.1, transport mode SAs have been defined to not\
   carry fragments (IPv4 or IPv6).  Note also that in Section 4.4.1, two\
   special values, ANY and OPAQUE, were defined for selectors and that\
   ANY includes OPAQUE.  The term "non-trivial" is used to mean that the\
   selector has a value other than OPAQUE or ANY.\
\
   Note: The term "non-initial fragment" is used here to indicate a\
   fragment that does not contain all the selector values that may be\
   needed for access control.  As observed in Section 4.4.1, depending\
   on the Next Layer Protocol, in addition to Ports, the ICMP message\
\
\
\
Kent & Seo                  Standards Track                    [Page 66]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   type/code or Mobility Header type could be missing from non-initial\
   fragments.  Also, for IPv6, even the first fragment might NOT contain\
   the Next Layer Protocol or Ports (or ICMP message type/code, or\
   Mobility Header type) depending on the kind and number of extension\
   headers present.  If a non-initial fragment contains the Port (or\
   ICMP type and code or Mobility Header type) but not the Next Layer\
   Protocol, then unless there is an SPD entry for the relevant\
   Local/Remote addresses with ANY for Next Layer Protocol and Port (or\
   ICMP type and code or Mobility Header type), the fragment would not\
   contain all the selector information needed for access control.\
\
   To address the above issues, three approaches have been defined:\
\
       o Tunnel mode SAs that carry initial and non-initial fragments\
         (See Section 7.1.)\
       o Separate tunnel mode SAs for non-initial fragments (See\
         Section 7.2.)\
       o Stateful fragment checking (See Section 7.3.)\
\
7.1.  Tunnel Mode SAs that Carry Initial and Non-Initial Fragments\
\
   All implementations MUST support tunnel mode SAs that are configured\
   to pass traffic without regard to port field (or ICMP type/code or\
   Mobility Header type) values.  If the SA will carry traffic for\
   specified protocols, the selector set for the SA MUST specify the\
   port fields (or ICMP type/code or Mobility Header type) as ANY.  An\
   SA defined in this fashion will carry all traffic including initial\
   and non-initial fragments for the indicated Local/Remote addresses\
   and specified Next Layer protocol(s).  If the SA will carry traffic\
   without regard to a specific protocol value (i.e., ANY is specified\
   as the (Next Layer) protocol selector value), then the port field\
   values are undefined and MUST be set to ANY as well. (As noted in\
   4.4.1, ANY includes OPAQUE as well as all specific values.)\
\
7.2.  Separate Tunnel Mode SAs for Non-Initial Fragments\
\
   An implementation MAY support tunnel mode SAs that will carry only\
   non-initial fragments, separate from non-fragmented packets and\
   initial fragments.  The OPAQUE value will be used to specify port (or\
   ICMP type/code or Mobility Header type) field selectors for an SA to\
   carry such fragments.  Receivers MUST perform a minimum offset check\
   on IPv4 (non-initial) fragments to protect against overlapping\
   fragment attacks when SAs of this type are employed.  Because such\
   checks cannot be performed on IPv6 non-initial fragments, users and\
   administrators are advised that carriage of such fragments may be\
   dangerous, and implementers may choose to NOT support such SAs for\
   IPv6 traffic.  Also, an SA of this sort will carry all non-initial\
   fragments that match a specified Local/Remote address pair and\
\
\
\
Kent & Seo                  Standards Track                    [Page 67]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   protocol value, i.e., the fragments carried on this SA belong to\
   packets that if not fragmented, might have gone on separate SAs of\
   differing security.  Therefore, users and administrators are advised\
   to protect such traffic using ESP (with integrity) and the\
   "strongest" integrity and encryption algorithms in use between both\
   peers.  (Determination of the "strongest" algorithms requires\
   imposing an ordering of the available algorithms, a local\
   determination at the discretion of the initiator of the SA.)\
\
   Specific port (or ICMP type/code or Mobility Header type) selector\
   values will be used to define SAs to carry initial fragments and\
   non-fragmented packets.  This approach can be used if a user or\
   administrator wants to create one or more tunnel mode SAs between the\
   same Local/Remote addresses that discriminate based on port (or ICMP\
   type/code or Mobility Header type) fields.  These SAs MUST have\
   non-trivial protocol selector values, otherwise approach #1 above\
   MUST be used.\
\
   Note: In general, for the approach described in this section, one\
   needs only a single SA between two implementations to carry all\
   non-initial fragments.  However, if one chooses to have multiple SAs\
   between the two implementations for QoS differentiation, then one\
   might also want multiple SAs to carry fragments-without-ports, one\
   for each supported QoS class.  Since support for QoS via distinct SAs\
   is a local matter, not mandated by this document, the choice to have\
   multiple SAs to carry non-initial fragments should also be local.\
\
7.3.  Stateful Fragment Checking\
\
   An implementation MAY support some form of stateful fragment checking\
   for a tunnel mode SA with non-trivial port (or ICMP type/code or MH\
   type) field values (not ANY or OPAQUE).  Implementations that will\
   transmit non-initial fragments on a tunnel mode SA that makes use of\
   non-trivial port (or ICMP type/code or MH type) selectors MUST notify\
   a peer via the IKE NOTIFY NON_FIRST_FRAGMENTS_ALSO payload.\
\
   The peer MUST reject this proposal if it will not accept non-initial\
   fragments in this context.  If an implementation does not\
   successfully negotiate transmission of non-initial fragments for such\
   an SA, it MUST NOT send such fragments over the SA.  This standard\
   does not specify how peers will deal with such fragments, e.g., via\
   reassembly or other means, at either sender or receiver.  However, a\
   receiver MUST discard non-initial fragments that arrive on an SA with\
   non-trivial port (or ICMP type/code or MH type) selector values\
   unless this feature has been negotiated.  Also, the receiver MUST\
   discard non-initial fragments that do not comply with the security\
   policy applied to the overall packet.  Discarding such packets is an\
   auditable event.  Note that in network configurations where fragments\
\
\
\
Kent & Seo                  Standards Track                    [Page 68]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   of a packet might be sent or received via different security gateways\
   or BITW implementations, stateful strategies for tracking fragments\
   may fail.\
\
7.4.  BYPASS/DISCARD Traffic\
\
   All implementations MUST support DISCARDing of fragments using the\
   normal SPD packet classification mechanisms.  All implementations\
   MUST support stateful fragment checking to accommodate BYPASS traffic\
   for which a non-trivial port range is specified.  The concern is that\
   BYPASS of a cleartext, non-initial fragment arriving at an IPsec\
   implementation could undermine the security afforded IPsec-protected\
   traffic directed to the same destination.  For example, consider an\
   IPsec implementation configured with an SPD entry that calls for\
   IPsec protection of traffic between a specific source/destination\
   address pair, and for a specific protocol and destination port, e.g.,\
   TCP traffic on port 23 (Telnet).  Assume that the implementation also\
   allows BYPASS of traffic from the same source/destination address\
   pair and protocol, but for a different destination port, e.g., port\
   119 (NNTP).  An attacker could send a non-initial fragment (with a\
   forged source address) that, if bypassed, could overlap with\
   IPsec-protected traffic from the same source and thus violate the\
   integrity of the IPsec-protected traffic.  Requiring stateful\
   fragment checking for BYPASS entries with non-trivial port ranges\
   prevents attacks of this sort.  As noted above, in network\
   configurations where fragments of a packet might be sent or received\
   via different security gateways or BITW implementations, stateful\
   strategies for tracking fragments may fail.\
\
8.  Path MTU/DF Processing\
\
   The application of AH or ESP to an outbound packet increases the size\
   of a packet and thus may cause a packet to exceed the PMTU for the SA\
   via which the packet will travel.  An IPsec implementation also may\
   receive an unprotected ICMP PMTU message and, if it chooses to act\
   upon the message, the result will affect outbound traffic processing.\
   This section describes the processing required of an IPsec\
   implementation to deal with these two PMTU issues.\
\
8.1.  DF Bit\
\
   All IPsec implementations MUST support the option of copying the DF\
   bit from an outbound packet to the tunnel mode header that it emits,\
   when traffic is carried via a tunnel mode SA.  This means that it\
   MUST be possible to configure the implementation's treatment of the\
   DF bit (set, clear, copy from inner header) for each SA.  This\
   applies to SAs where both inner and outer headers are IPv4.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 69]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
8.2.  Path MTU (PMTU) Discovery\
\
   This section discusses IPsec handling for unprotected Path MTU\
   Discovery messages.  ICMP PMTU is used here to refer to an ICMP\
   message for:\
\
           IPv4 (RFC 792 [Pos81b]):\
                   - Type = 3 (Destination Unreachable)\
                   - Code = 4 (Fragmentation needed and DF set)\
                   - Next-Hop MTU in the low-order 16 bits of the\
                     second word of the ICMP header (labeled "unused"\
                     in RFC 792), with high-order 16 bits set to zero)\
\
           IPv6 (RFC 2463 [CD98]):\
                   - Type = 2 (Packet Too Big)\
                   - Code = 0 (Fragmentation needed)\
                   - Next-Hop MTU in the 32-bit MTU field of the ICMP6\
                     message\
\
8.2.1.  Propagation of PMTU\
\
   When an IPsec implementation receives an unauthenticated PMTU\
   message, and it is configured to process (vs. ignore) such messages,\
   it maps the message to the SA to which it corresponds.  This mapping\
   is effected by extracting the header information from the payload of\
   the PMTU message and applying the procedure described in Section 5.2.\
   The PMTU determined by this message is used to update the SAD PMTU\
   field, taking into account the size of the AH or ESP header that will\
   be applied, any crypto synchronization data, and the overhead imposed\
   by an additional IP header, in the case of a tunnel mode SA.\
\
   In a native host implementation, it is possible to maintain PMTU data\
   at the same granularity as for unprotected communication, so there is\
   no loss of functionality.  Signaling of the PMTU information is\
   internal to the host.  For all other IPsec implementation options,\
   the PMTU data must be propagated via a synthesized ICMP PMTU.  In\
   these cases, the IPsec implementation SHOULD wait for outbound\
   traffic to be mapped to the SAD entry.  When such traffic arrives, if\
   the traffic would exceed the updated PMTU value the traffic MUST be\
   handled as follows:\
\
       Case 1: Original (cleartext) packet is IPv4 and has the DF\
               bit set.  The implementation SHOULD discard the packet\
               and send a PMTU ICMP message.\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 70]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       Case 2: Original (cleartext) packet is IPv4 and has the DF\
               bit clear.  The implementation SHOULD fragment (before or\
               after encryption per its configuration) and then forward\
               the fragments.  It SHOULD NOT send a PMTU ICMP message.\
\
       Case 3: Original (cleartext) packet is IPv6.  The implementation\
               SHOULD discard the packet and send a PMTU ICMP message.\
\
8.2.2.  PMTU Aging\
\
   In all IPsec implementations, the PMTU associated with an SA MUST be\
   "aged" and some mechanism is required to update the PMTU in a timely\
   manner, especially for discovering if the PMTU is smaller than\
   required by current network conditions.  A given PMTU has to remain\
   in place long enough for a packet to get from the source of the SA to\
   the peer, and to propagate an ICMP error message if the current PMTU\
   is too big.\
\
   Implementations SHOULD use the approach described in the Path MTU\
   Discovery document (RFC 1191 [MD90], Section 6.3), which suggests\
   periodically resetting the PMTU to the first-hop data-link MTU and\
   then letting the normal PMTU Discovery processes update the PMTU as\
   necessary.  The period SHOULD be configurable.\
\
9.  Auditing\
\
   IPsec implementations are not required to support auditing.  For the\
   most part, the granularity of auditing is a local matter.  However,\
   several auditable events are identified in this document, and for\
   each of these events a minimum set of information that SHOULD be\
   included in an audit log is defined.  Additional information also MAY\
   be included in the audit log for each of these events, and additional\
   events, not explicitly called out in this specification, also MAY\
   result in audit log entries.  There is no requirement for the\
   receiver to transmit any message to the purported transmitter in\
   response to the detection of an auditable event, because of the\
   potential to induce denial of service via such action.\
\
10.  Conformance Requirements\
\
   All IPv4 IPsec implementations MUST comply with all requirements of\
   this document.  All IPv6 implementations MUST comply with all\
   requirements of this document.\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 71]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
11.  Security Considerations\
\
   The focus of this document is security; hence security considerations\
   permeate this specification.\
\
   IPsec imposes stringent constraints on bypass of IP header data in\
   both directions, across the IPsec barrier, especially when tunnel\
   mode SAs are employed.  Some constraints are absolute, while others\
   are subject to local administrative controls, often on a per-SA\
   basis.  For outbound traffic, these constraints are designed to limit\
   covert channel bandwidth.  For inbound traffic, the constraints are\
   designed to prevent an adversary who has the ability to tamper with\
   one data stream (on the unprotected side of the IPsec barrier) from\
   adversely affecting other data streams (on the protected side of the\
   barrier).  The discussion in Section 5 dealing with processing DSCP\
   values for tunnel mode SAs illustrates this concern.\
\
   If an IPsec implementation is configured to pass ICMP error messages\
   over SAs based on the ICMP header values, without checking the header\
   information from the ICMP message payload, serious vulnerabilities\
   may arise.  Consider a scenario in which several sites (A, B, and C)\
   are connected to one another via ESP-protected tunnels: A-B, A-C, and\
   B-C.  Also assume that the traffic selectors for each tunnel specify\
   ANY for protocol and port fields and IP source/destination address\
   ranges that encompass the address range for the systems behind the\
   security gateways serving each site.  This would allow a host at site\
   B to send an ICMP Destination Unreachable message to any host at site\
   A, that declares all hosts on the net at site C to be unreachable.\
   This is a very efficient DoS attack that could have been prevented if\
   the ICMP error messages were subjected to the checks that IPsec\
   provides, if the SPD is suitably configured, as described in Section\
   6.2.\
\
12.  IANA Considerations\
\
   The IANA has assigned the value (3) for the asn1-modules registry and\
   has assigned the object identifier 1.3.6.1.5.8.3.1 for the SPD\
   module.  See Appendix C, "ASN.1 for an SPD Entry".\
\
13.  Differences from RFC 2401\
\
   This architecture document differs substantially from RFC 2401\
   [RFC2401] in detail and in organization, but the fundamental notions\
   are unchanged.\
\
   o The processing model has been revised to address new IPsec\
     scenarios, improve performance, and simplify implementation.  This\
     includes a separation between forwarding (routing) and SPD\
\
\
\
Kent & Seo                  Standards Track                    [Page 72]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
     selection, several SPD changes, and the addition of an outbound SPD\
     cache and an inbound SPD cache for bypassed or discarded traffic.\
     There is also a new database, the Peer Authorization Database\
     (PAD).  This provides a link between an SA management protocol\
     (such as IKE) and the SPD.\
\
   o There is no longer a requirement to support nested SAs or "SA\
     bundles".  Instead this functionality can be achieved through SPD\
     and forwarding table configuration.  An example of a configuration\
     has been added in Appendix E.\
\
   o SPD entries were redefined to provide more flexibility.  Each SPD\
     entry now consists of 1 to N sets of selectors, where each selector\
     set contains one protocol and a "list of ranges" can now be\
     specified for the Local IP address, Remote IP address, and whatever\
     fields (if any) are associated with the Next Layer Protocol (Local\
     Port, Remote Port, ICMP message type and code, and Mobility Header\
     type).  An individual value for a selector is represented via a\
     trivial range and ANY is represented via a range than spans all\
     values for the selector.  An example of an ASN.1 description is\
     included in Appendix C.\
\
   o TOS (IPv4) and Traffic Class (IPv6) have been replaced by DSCP and\
     ECN.  The tunnel section has been updated to explain how to handle\
     DSCP and ECN bits.\
\
   o For tunnel mode SAs, an SG, BITS, or BITW implementation is now\
     allowed to fragment packets before applying IPsec.  This applies\
     only to IPv4.  For IPv6 packets, only the originator is allowed to\
     fragment them.\
\
   o When security is desired between two intermediate systems along a\
     path or between an intermediate system and an end system, transport\
     mode may now be used between security gateways and between a\
     security gateway and a host.\
\
   o This document clarifies that for all traffic that crosses the IPsec\
     boundary, including IPsec management traffic, the SPD or associated\
     caches must be consulted.\
\
   o This document defines how to handle the situation of a security\
     gateway with multiple subscribers requiring separate IPsec\
     contexts.\
\
   o A definition of reserved SPIs has been added.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 73]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   o Text has been added explaining why ALL IP packets must be checked\
     -- IPsec includes minimal firewall functionality to support access\
     control at the IP layer.\
\
   o The tunnel section has been updated to clarify how to handle the IP\
     options field and IPv6 extension headers when constructing the\
     outer header.\
\
   o SA mapping for inbound traffic has been updated to be consistent\
     with the changes made in AH and ESP for support of unicast and\
     multicast SAs.\
\
   o Guidance has been added regarding how to handle the covert channel\
     created in tunnel mode by copying the DSCP value to outer header.\
\
   o Support for AH in both IPv4 and IPv6 is no longer required.\
\
   o PMTU handling has been updated.  The appendix on\
     PMTU/DF/Fragmentation has been deleted.\
\
   o Three approaches have been added for handling plaintext fragments\
     on the protected side of the IPsec boundary.  Appendix D documents\
     the rationale behind them.\
\
   o Added revised text describing how to derive selector values for SAs\
     (from the SPD entry or from the packet, etc.)\
\
   o Added a new table describing the relationship between selector\
     values in an SPD entry, the PFP flag, and resulting selector values\
     in the corresponding SAD entry.\
\
   o Added Appendix B to describe decorrelation.\
\
   o Added text describing how to handle an outbound packet that must be\
     discarded.\
\
   o Added text describing how to handle a DISCARDED inbound packet,\
     i.e., one that does not match the SA upon which it arrived.\
\
   o IPv6 mobility header has been added as a possible Next Layer\
     Protocol.  IPv6 Mobility Header message type has been added as a\
     selector.\
\
   o ICMP message type and code have been added as selectors.\
\
   o The selector "data sensitivity level" has been removed to simplify\
     things.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 74]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   o Updated text describing handling ICMP error messages.  The appendix\
     on "Categorization of ICMP Messages" has been deleted.\
\
   o The text for the selector name has been updated and clarified.\
\
   o The "Next Layer Protocol" has been further explained and a default\
     list of protocols to skip when looking for the Next Layer Protocol\
     has been added.\
\
   o The text has been amended to say that this document assumes use of\
     IKEv2 or an SA management protocol with comparable features.\
\
   o Text has been added clarifying the algorithm for mapping inbound\
     IPsec datagrams to SAs in the presence of multicast SAs.\
\
   o The appendix "Sequence Space Window Code Example" has been removed.\
\
   o With respect to IP addresses and ports, the terms "Local" and\
     "Remote" are used for policy rules (replacing source and\
     destination).  "Local" refers to the entity being protected by an\
     IPsec implementation, i.e., the "source" address/port of outbound\
     packets or the "destination" address/port of inbound packets.\
     "Remote" refers to a peer entity or peer entities.  The terms\
     "source" and "destination" are still used for packet header fields.\
\
14.  Acknowledgements\
\
   The authors would like to acknowledge the contributions of Ran\
   Atkinson, who played a critical role in initial IPsec activities, and\
   who authored the first series of IPsec standards: RFCs 1825-1827; and\
   Charlie Lynn, who made significant contributions to the second series\
   of IPsec standards (RFCs 2401, 2402, and 2406) and to the current\
   versions, especially with regard to IPv6 issues.  The authors also\
   would like to thank the members of the IPsec and MSEC working groups\
   who have contributed to the development of this protocol\
   specification.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 75]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Appendix A: Glossary\
\
   This section provides definitions for several key terms that are\
   employed in this document.  Other documents provide additional\
   definitions and background information relevant to this technology,\
   e.g., [Shi00], [VK83], and [HA94].  Included in this glossary are\
   generic security service and security mechanism terms, plus\
   IPsec-specific terms.\
\
   Access Control\
      A security service that prevents unauthorized use of a resource,\
      including the prevention of use of a resource in an unauthorized\
      manner.  In the IPsec context, the resource to which access is\
      being controlled is often:\
\
               o for a host, computing cycles or data\
               o for a security gateway, a network behind the gateway\
                 or bandwidth on that network.\
\
   Anti-replay\
      See "Integrity" below.\
\
   Authentication\
      Used informally to refer to the combination of two nominally\
      distinct security services, data origin authentication and\
      connectionless integrity.  See the definitions below for each of\
      these services.\
\
   Availability\
      When viewed as a security service, addresses the security concerns\
      engendered by attacks against networks that deny or degrade\
      service.  For example, in the IPsec context, the use of\
      anti-replay mechanisms in AH and ESP support availability.\
\
   Confidentiality\
      The security service that protects data from unauthorized\
      disclosure.  The primary confidentiality concern in most instances\
      is unauthorized disclosure of application-level data, but\
      disclosure of the external characteristics of communication also\
      can be a concern in some circumstances.  Traffic flow\
      confidentiality is the service that addresses this latter concern\
      by concealing source and destination addresses, message length, or\
      frequency of communication.  In the IPsec context, using ESP in\
      tunnel mode, especially at a security gateway, can provide some\
      level of traffic flow confidentiality. (See also "Traffic\
      Analysis" below.)\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 76]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   Data Origin Authentication\
      A security service that verifies the identity of the claimed\
      source of data.  This service is usually bundled with\
      connectionless integrity service.\
\
   Encryption\
      A security mechanism used to transform data from an intelligible\
      form (plaintext) into an unintelligible form (ciphertext), to\
      provide confidentiality.  The inverse transformation process is\
      designated "decryption".  Often the term "encryption" is used to\
      generically refer to both processes.\
\
   Integrity\
      A security service that ensures that modifications to data are\
      detectable.  Integrity comes in various flavors to match\
      application requirements.  IPsec supports two forms of integrity:\
      connectionless and a form of partial sequence integrity.\
      Connectionless integrity is a service that detects modification of\
      an individual IP datagram, without regard to the ordering of the\
      datagram in a stream of traffic.  The form of partial sequence\
      integrity offered in IPsec is referred to as anti-replay\
      integrity, and it detects arrival of duplicate IP datagrams\
      (within a constrained window).  This is in contrast to\
      connection-oriented integrity, which imposes more stringent\
      sequencing requirements on traffic, e.g., to be able to detect\
      lost or re-ordered messages.  Although authentication and\
      integrity services often are cited separately, in practice they\
      are intimately connected and almost always offered in tandem.\
\
   Protected vs. Unprotected\
      "Protected" refers to the systems or interfaces that are inside\
      the IPsec protection boundary, and "unprotected" refers to the\
      systems or interfaces that are outside the IPsec protection\
      boundary.  IPsec provides a boundary through which traffic passes.\
      There is an asymmetry to this barrier, which is reflected in the\
      processing model.  Outbound data, if not discarded or bypassed, is\
      protected via the application of AH or ESP and the addition of the\
      corresponding headers.  Inbound data, if not discarded or\
      bypassed, is processed via the removal of AH or ESP headers.  In\
      this document, inbound traffic enters an IPsec implementation from\
      the "unprotected" interface.  Outbound traffic enters the\
      implementation via the "protected" interface, or is internally\
      generated by the implementation on the "protected" side of the\
      boundary and directed toward the "unprotected" interface.  An\
      IPsec implementation may support more than one interface on either\
      or both sides of the boundary.  The protected interface may be\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 77]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      internal, e.g., in a host implementation of IPsec.  The protected\
      interface may link to a socket layer interface presented by the\
      OS.\
\
   Security Association (SA)\
      A simplex (uni-directional) logical connection, created for\
      security purposes.  All traffic traversing an SA is provided the\
      same security processing.  In IPsec, an SA is an Internet-layer\
      abstraction implemented through the use of AH or ESP.  State data\
      associated with an SA is represented in the SA Database (SAD).\
\
   Security Gateway\
      An intermediate system that acts as the communications interface\
      between two networks.  The set of hosts (and networks) on the\
      external side of the security gateway is termed unprotected (they\
      are generally at least less protected than those "behind" the SG),\
      while the networks and hosts on the internal side are viewed as\
      protected.  The internal subnets and hosts served by a security\
      gateway are presumed to be trusted by virtue of sharing a common,\
      local, security administration.  In the IPsec context, a security\
      gateway is a point at which AH and/or ESP is implemented in order\
      to serve a set of internal hosts, providing security services for\
      these hosts when they communicate with external hosts also\
      employing IPsec (either directly or via another security gateway).\
\
   Security Parameters Index (SPI)\
      An arbitrary 32-bit value that is used by a receiver to identify\
      the SA to which an incoming packet should be bound.  For a unicast\
      SA, the SPI can be used by itself to specify an SA, or it may be\
      used in conjunction with the IPsec protocol type.  Additional IP\
      address information is used to identify multicast SAs.  The SPI is\
      carried in AH and ESP protocols to enable the receiving system to\
      select the SA under which a received packet will be processed.  An\
      SPI has only local significance, as defined by the creator of the\
      SA (usually the receiver of the packet carrying the SPI); thus an\
      SPI is generally viewed as an opaque bit string.  However, the\
      creator of an SA may choose to interpret the bits in an SPI to\
      facilitate local processing.\
\
   Traffic Analysis\
      The analysis of network traffic flow for the purpose of deducing\
      information that is useful to an adversary.  Examples of such\
      information are frequency of transmission, the identities of the\
      conversing parties, sizes of packets, and flow identifiers\
      [Sch94].\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 78]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Appendix B: Decorrelation\
\
   This appendix is based on work done for caching of policies in the IP\
   Security Policy Working Group by Luis Sanchez, Matt Condell, and John\
   Zao.\
\
   Two SPD entries are correlated if there is a non-null intersection\
   between the values of corresponding selectors in each entry.  Caching\
   correlated SPD entries can lead to incorrect policy enforcement.  A\
   solution to this problem, which still allows for caching, is to\
   remove the ambiguities by decorrelating the entries.  That is, the\
   SPD entries must be rewritten so that for every pair of entries there\
   exists a selector for which there is a null intersection between the\
   values in both of the entries.  Once the entries are decorrelated,\
   there is no longer any ordering requirement on them, since only one\
   entry will match any lookup.  The next section describes\
   decorrelation in more detail and presents an algorithm that may be\
   used to implement decorrelation.\
\
B.1.  Decorrelation Algorithm\
\
   The basic decorrelation algorithm takes each entry in a correlated\
   SPD and divides it into a set of entries using a tree structure.\
   The nodes of the tree are the selectors that may overlap between the\
   policies.  At each node, the algorithm creates a branch for each of\
   the values of the selector.  It also creates one branch for the\
   complement of the union of all selector values.  Policies are then\
   formed by traversing the tree from the root to each leaf.  The\
   policies at the leaves are compared to the set of already\
   decorrelated policy rules.  Each policy at a leaf is either\
   completely overridden by a policy in the already decorrelated set and\
   is discarded or is decorrelated with all the policies in the\
   decorrelated set and is added to it.\
\
   The basic algorithm does not guarantee an optimal set of decorrelated\
   entries.  That is, the entries may be broken up into smaller sets\
   than is necessary, though they will still provide all the necessary\
   policy information.  Some extensions to the basic algorithm are\
   described later to improve this and improve the performance of the\
   algorithm.\
\
           C   A set of ordered, correlated entries (a correlated SPD).\
           Ci  The ith entry in C.\
           U   The set of decorrelated entries being built from C.\
           Ui  The ith entry in U.\
           Sik The kth selection for policy Ci.\
           Ai  The action for policy Ci.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 79]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   A policy (SPD entry) P may be expressed as a sequence of selector\
   values and an action (BYPASS, DISCARD, or PROTECT):\
\
           Ci = Si1 x Si2 x ... x Sik -> Ai\
\
   1) Put C1 in set U as U1\
\
   For each policy Cj (j > 1) in C\
\
   2) If Cj is decorrelated with every entry in U, then add it to U.\
\
   3) If Cj is correlated with one or more entries in U, create a tree\
   rooted at the policy Cj that partitions Cj into a set of decorrelated\
   entries.  The algorithm starts with a root node where no selectors\
   have yet been chosen.\
\
     A) Choose a selector in Cj, Sjn, that has not yet been chosen when\
        traversing the tree from the root to this node.  If there are no\
        selectors not yet used, continue to the next unfinished branch\
        until all branches have been completed.  When the tree is\
        completed, go to step D.\
\
        T is the set of entries in U that are correlated with the entry\
        at this node.\
\
        The entry at this node is the entry formed by the selector\
        values of each of the branches between the root and this node.\
        Any selector values that are not yet represented by branches\
        assume the corresponding selector value in Cj, since the values\
        in Cj represent the maximum value for each selector.\
\
     B) Add a branch to the tree for each value of the selector Sjn that\
        appears in any of the entries in T.  (If the value is a superset\
        of the value of Sjn in Cj, then use the value in Cj, since that\
        value represents the universal set.)  Also add a branch for the\
        complement of the union of all the values of the selector Sjn\
        in T.  When taking the complement, remember that the universal\
        set is the value of Sjn in Cj.  A branch need not be created\
        for the null set.\
\
     C) Repeat A and B until the tree is completed.\
\
     D) The entry to each leaf now represents an entry that is a subset\
        of Cj.  The entries at the leaves completely partition Cj in\
        such a way that each entry is either completely overridden by\
        an entry in U, or is decorrelated with the entries in U.\
\
        Add all the decorrelated entries at the leaves of the tree to U.\
\
\
\
Kent & Seo                  Standards Track                    [Page 80]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   4) Get next Cj and go to 2.\
\
   5) When all entries in C have been processed, then U will contain an\
   decorrelated version of C.\
\
   There are several optimizations that can be made to this algorithm.\
   A few of them are presented here.\
\
   It is possible to optimize, or at least improve, the amount of\
   branching that occurs by carefully choosing the order of the\
   selectors used for the next branch.  For example, if a selector Sjn\
   can be chosen so that all the values for that selector in T are equal\
   to or a superset of the value of Sjn in Cj, then only a single branch\
   needs to be created (since the complement will be null).\
\
   Branches of the tree do not have to proceed with the entire\
   decorrelation algorithm.  For example, if a node represents an entry\
   that is decorrelated with all the entries in U, then there is no\
   reason to continue decorrelating that branch.  Also, if a branch is\
   completely overridden by an entry in U, then there is no reason to\
   continue decorrelating the branch.\
\
   An additional optimization is to check to see if a branch is\
   overridden by one of the CORRELATED entries in set C that has already\
   been decorrelated.  That is, if the branch is part of decorrelating\
   Cj, then check to see if it was overridden by an entry Cm, m < j.\
   This is a valid check, since all the entries Cm are already expressed\
   in U.\
\
   Along with checking if an entry is already decorrelated in step 2,\
   check if Cj is overridden by any entry in U.  If it is, skip it since\
   it is not relevant.  An entry x is overridden by another entry y if\
   every selector in x is equal to or a subset of the corresponding\
   selector in entry y.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 81]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Appendix C: ASN.1 for an SPD Entry\
\
   This appendix is included as an additional way to describe SPD\
   entries, as defined in Section 4.4.1.  It uses ASN.1 syntax that has\
   been successfully compiled.  This syntax is merely illustrative and\
   need not be employed in an implementation to achieve compliance.  The\
   SPD description in Section 4.4.1 is normative.\
\
   SPDModule\
\
    {iso(1) org (3) dod (6) internet (1) security (5) mechanisms (5)\
     ipsec (8) asn1-modules (3) spd-module (1) }\
\
       DEFINITIONS IMPLICIT TAGS ::=\
\
       BEGIN\
\
       IMPORTS\
           RDNSequence FROM PKIX1Explicit88\
             { iso(1) identified-organization(3)\
               dod(6) internet(1) security(5) mechanisms(5) pkix(7)\
               id-mod(0) id-pkix1-explicit(18) } ;\
\
       -- An SPD is a list of policies in decreasing order of preference\
       SPD ::= SEQUENCE OF SPDEntry\
\
       SPDEntry ::= CHOICE {\
           iPsecEntry       IPsecEntry,               -- PROTECT traffic\
           bypassOrDiscard  [0] BypassOrDiscardEntry } -- DISCARD/BYPASS\
\
       IPsecEntry ::= SEQUENCE {       -- Each entry consists of\
           name        NameSets OPTIONAL,\
           pFPs        PacketFlags,    -- Populate from packet flags\
                              -- Applies to ALL of the corresponding\
                              -- traffic selectors in the SelectorLists\
           condition   SelectorLists,  -- Policy "condition"\
           processing  Processing      -- Policy "action"\
           }\
\
       BypassOrDiscardEntry ::= SEQUENCE {\
           bypass      BOOLEAN,        -- TRUE BYPASS, FALSE DISCARD\
           condition   InOutBound }\
\
       InOutBound ::= CHOICE {\
           outbound    [0] SelectorLists,\
           inbound     [1] SelectorLists,\
           bothways    [2] BothWays }\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 82]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       BothWays ::= SEQUENCE {\
           inbound     SelectorLists,\
           outbound    SelectorLists }\
\
       NameSets ::= SEQUENCE {\
           passed      SET OF Names-R,  -- Matched to IKE ID by\
                                        -- responder\
           local       SET OF Names-I } -- Used internally by IKE\
                                        -- initiator\
\
       Names-R ::= CHOICE {                   -- IKEv2 IDs\
           dName       RDNSequence,           -- ID_DER_ASN1_DN\
           fqdn        FQDN,                  -- ID_FQDN\
           rfc822      [0] RFC822Name,        -- ID_RFC822_ADDR\
           keyID       OCTET STRING }         -- KEY_ID\
\
       Names-I ::= OCTET STRING       -- Used internally by IKE\
                                      -- initiator\
\
       FQDN ::= IA5String\
\
       RFC822Name ::= IA5String\
\
       PacketFlags ::= BIT STRING {\
                   -- if set, take selector value from packet\
                   -- establishing SA\
                   -- else use value in SPD entry\
           localAddr  (0),\
           remoteAddr (1),\
           protocol   (2),\
           localPort  (3),\
           remotePort (4)  }\
\
       SelectorLists ::= SET OF SelectorList\
\
       SelectorList ::= SEQUENCE {\
           localAddr   AddrList,\
           remoteAddr  AddrList,\
           protocol    ProtocolChoice }\
\
       Processing ::= SEQUENCE {\
           extSeqNum   BOOLEAN, -- TRUE 64 bit counter, FALSE 32 bit\
           seqOverflow BOOLEAN, -- TRUE rekey, FALSE terminate & audit\
           fragCheck   BOOLEAN, -- TRUE stateful fragment checking,\
                                -- FALSE no stateful fragment checking\
           lifetime    SALifetime,\
           spi         ManualSPI,\
           algorithms  ProcessingAlgs,\
\
\
\
Kent & Seo                  Standards Track                    [Page 83]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
           tunnel      TunnelOptions OPTIONAL } -- if absent, use\
                                                -- transport mode\
\
       SALifetime ::= SEQUENCE {\
           seconds   [0] INTEGER OPTIONAL,\
           bytes     [1] INTEGER OPTIONAL }\
\
       ManualSPI ::= SEQUENCE {\
           spi     INTEGER,\
           keys    KeyIDs }\
\
       KeyIDs ::= SEQUENCE OF OCTET STRING\
\
       ProcessingAlgs ::= CHOICE {\
           ah          [0] IntegrityAlgs,  -- AH\
           esp         [1] ESPAlgs}        -- ESP\
\
       ESPAlgs ::= CHOICE {\
           integrity       [0] IntegrityAlgs,       -- integrity only\
           confidentiality [1] ConfidentialityAlgs, -- confidentiality\
                                                    -- only\
           both            [2] IntegrityConfidentialityAlgs,\
           combined        [3] CombinedModeAlgs }\
\
       IntegrityConfidentialityAlgs ::= SEQUENCE {\
           integrity       IntegrityAlgs,\
           confidentiality ConfidentialityAlgs }\
\
       -- Integrity Algorithms, ordered by decreasing preference\
       IntegrityAlgs ::= SEQUENCE OF IntegrityAlg\
\
       -- Confidentiality Algorithms, ordered by decreasing preference\
       ConfidentialityAlgs ::= SEQUENCE OF ConfidentialityAlg\
\
       -- Integrity Algorithms\
       IntegrityAlg ::= SEQUENCE {\
           algorithm   IntegrityAlgType,\
           parameters  ANY -- DEFINED BY algorithm -- OPTIONAL }\
\
       IntegrityAlgType ::= INTEGER {\
           none              (0),\
           auth-HMAC-MD5-96  (1),\
           auth-HMAC-SHA1-96 (2),\
           auth-DES-MAC      (3),\
           auth-KPDK-MD5     (4),\
           auth-AES-XCBC-96  (5)\
       --  tbd (6..65535)\
           }\
\
\
\
Kent & Seo                  Standards Track                    [Page 84]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       -- Confidentiality Algorithms\
       ConfidentialityAlg ::= SEQUENCE {\
           algorithm   ConfidentialityAlgType,\
           parameters  ANY -- DEFINED BY algorithm -- OPTIONAL }\
\
       ConfidentialityAlgType ::= INTEGER {\
           encr-DES-IV64   (1),\
           encr-DES        (2),\
           encr-3DES       (3),\
           encr-RC5        (4),\
           encr-IDEA       (5),\
           encr-CAST       (6),\
           encr-BLOWFISH   (7),\
           encr-3IDEA      (8),\
           encr-DES-IV32   (9),\
           encr-RC4       (10),\
           encr-NULL      (11),\
           encr-AES-CBC   (12),\
           encr-AES-CTR   (13)\
       --  tbd (14..65535)\
           }\
\
       CombinedModeAlgs ::= SEQUENCE OF CombinedModeAlg\
\
       CombinedModeAlg ::= SEQUENCE {\
           algorithm   CombinedModeType,\
           parameters  ANY -- DEFINED BY algorithm} -- defined outside\
                                    -- of this document for AES modes.\
\
       CombinedModeType ::= INTEGER {\
           comb-AES-CCM    (1),\
           comb-AES-GCM    (2)\
       --  tbd (3..65535)\
           }\
\
       TunnelOptions ::= SEQUENCE {\
           dscp        DSCP,\
           ecn         BOOLEAN,    -- TRUE Copy CE to inner header\
           df          DF,\
           addresses   TunnelAddresses }\
\
       TunnelAddresses ::= CHOICE {\
           ipv4        IPv4Pair,\
           ipv6        [0] IPv6Pair }\
\
       IPv4Pair ::= SEQUENCE {\
           local       OCTET STRING (SIZE(4)),\
           remote      OCTET STRING (SIZE(4)) }\
\
\
\
Kent & Seo                  Standards Track                    [Page 85]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       IPv6Pair ::= SEQUENCE {\
           local       OCTET STRING (SIZE(16)),\
           remote      OCTET STRING (SIZE(16)) }\
\
       DSCP ::= SEQUENCE {\
           copy      BOOLEAN, -- TRUE copy from inner header\
                              -- FALSE do not copy\
           mapping   OCTET STRING OPTIONAL} -- points to table\
                                            -- if no copy\
\
       DF ::= INTEGER {\
           clear   (0),\
           set     (1),\
           copy    (2) }\
\
       ProtocolChoice::= CHOICE {\
           anyProt  AnyProtocol,              -- for ANY protocol\
           noNext   [0] NoNextLayerProtocol,  -- has no next layer\
                                              -- items\
           oneNext  [1] OneNextLayerProtocol, -- has one next layer\
                                              -- item\
           twoNext  [2] TwoNextLayerProtocol, -- has two next layer\
                                              -- items\
           fragment FragmentNoNext }          -- has no next layer\
                                              -- info\
\
       AnyProtocol ::= SEQUENCE {\
           id          INTEGER (0),    -- ANY protocol\
           nextLayer   AnyNextLayers }\
\
       AnyNextLayers ::= SEQUENCE {      -- with either\
           first       AnyNextLayer,     -- ANY next layer selector\
           second      AnyNextLayer }    -- ANY next layer selector\
\
       NoNextLayerProtocol ::= INTEGER (2..254)\
\
       FragmentNoNext ::= INTEGER (44)   -- Fragment identifier\
\
       OneNextLayerProtocol ::= SEQUENCE {\
           id          INTEGER (1..254),   -- ICMP, MH, ICMPv6\
           nextLayer   NextLayerChoice }   -- ICMP Type*256+Code\
                                           -- MH   Type*256\
\
       TwoNextLayerProtocol ::= SEQUENCE {\
           id          INTEGER (2..254),   -- Protocol\
           local       NextLayerChoice,    -- Local and\
           remote      NextLayerChoice }   -- Remote ports\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 86]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
       NextLayerChoice ::= CHOICE {\
           any         AnyNextLayer,\
           opaque      [0] OpaqueNextLayer,\
           range       [1] NextLayerRange }\
\
       -- Representation of ANY in next layer field\
       AnyNextLayer ::= SEQUENCE {\
           start       INTEGER (0),\
           end         INTEGER (65535) }\
\
       -- Representation of OPAQUE in next layer field.\
       -- Matches IKE convention\
       OpaqueNextLayer ::= SEQUENCE {\
           start       INTEGER (65535),\
           end         INTEGER (0) }\
\
       -- Range for a next layer field\
       NextLayerRange ::= SEQUENCE {\
           start       INTEGER (0..65535),\
           end         INTEGER (0..65535) }\
\
       -- List of IP addresses\
       AddrList ::= SEQUENCE {\
           v4List      IPv4List OPTIONAL,\
           v6List      [0] IPv6List OPTIONAL }\
\
       -- IPv4 address representations\
       IPv4List ::= SEQUENCE OF IPv4Range\
\
       IPv4Range ::= SEQUENCE {    -- close, but not quite right ...\
           ipv4Start   OCTET STRING (SIZE (4)),\
           ipv4End     OCTET STRING (SIZE (4)) }\
\
       -- IPv6 address representations\
       IPv6List ::= SEQUENCE OF IPv6Range\
\
       IPv6Range ::= SEQUENCE {    -- close, but not quite right ...\
           ipv6Start   OCTET STRING (SIZE (16)),\
           ipv6End     OCTET STRING (SIZE (16)) }\
\
       END\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 87]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Appendix D: Fragment Handling Rationale\
\
   There are three issues that must be resolved regarding processing of\
   (plaintext) fragments in IPsec:\
\
        - mapping a non-initial, outbound fragment to the right SA\
          (or finding the right SPD entry)\
        - verifying that a received, non-initial fragment is authorized\
          for the SA via which it is received\
        - mapping outbound and inbound non-initial fragments to the\
          right SPD/cache entry, for BYPASS/DISCARD traffic\
\
   The first and third issues arise because we need a deterministic\
   algorithm for mapping traffic to SAs (and SPD/cache entries).  All\
   three issues are important because we want to make sure that\
   non-initial fragments that cross the IPsec boundary do not cause the\
   access control policies in place at the receiver (or transmitter) to\
   be violated.\
\
D.1.  Transport Mode and Fragments\
\
   First, we note that transport mode SAs have been defined to not carry\
   fragments.  This is a carryover from RFC 2401, where transport mode\
   SAs always terminated at endpoints.  This is a fundamental\
   requirement because, in the worst case, an IPv4 fragment to which\
   IPsec was applied might then be fragmented (as a ciphertext packet),\
   en route to the destination.  IP fragment reassembly procedures at\
   the IPsec receiver would not be able to distinguish between pre-IPsec\
   fragments and fragments created after IPsec processing.\
\
   For IPv6, only the sender is allowed to fragment a packet.  As for\
   IPv4, an IPsec implementation is allowed to fragment tunnel mode\
   packets after IPsec processing, because it is the sender relative to\
   the (outer) tunnel header.  However, unlike IPv4, it would be\
   feasible to carry a plaintext fragment on a transport mode SA,\
   because the fragment header in IPv6 would appear after the AH or ESP\
   header, and thus would not cause confusion at the receiver with\
   respect to reassembly.  Specifically, the receiver would not attempt\
   reassembly for the fragment until after IPsec processing.  To keep\
   things simple, this specification prohibits carriage of fragments on\
   transport mode SAs for IPv6 traffic.\
\
   When only end systems used transport mode SAs, the prohibition on\
   carriage of fragments was not a problem, since we assumed that the\
   end system could be configured to not offer a fragment to IPsec.  For\
   a native host implementation, this seems reasonable, and, as someone\
   already noted, RFC 2401 warned that a BITS implementation might have\
   to reassemble fragments before performing an SA lookup.  (It would\
\
\
\
Kent & Seo                  Standards Track                    [Page 88]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   then apply AH or ESP and could re-fragment the packet after IPsec\
   processing.) Because a BITS implementation is assumed to be able to\
   have access to all traffic emanating from its host, even if the host\
   has multiple interfaces, this was deemed a reasonable mandate.\
\
   In this specification, it is acceptable to use transport mode in\
   cases where the IPsec implementation is not the ultimate destination,\
   e.g., between two SGs.  In principle, this creates a new opportunity\
   for outbound, plaintext fragments to be mapped to a transport mode SA\
   for IPsec processing.  However, in these new contexts in which a\
   transport mode SA is now approved for use, it seems likely that we\
   can continue to prohibit transmission of fragments, as seen by IPsec,\
   i.e., packets that have an "outer header" with a non-zero fragment\
   offset field.  For example, in an IP overlay network, packets being\
   sent over transport mode SAs are IP-in-IP tunneled and thus have the\
   necessary inner header to accommodate fragmentation prior to IPsec\
   processing.  When carried via a transport mode SA, IPsec would not\
   examine the inner IP header for such traffic, and thus would not\
   consider the packet to be a fragment.\
\
D.2.  Tunnel Mode and Fragments\
\
   For tunnel mode SAs, it has always been the case that outbound\
   fragments might arrive for processing at an IPsec implementation.\
   The need to accommodate fragmented outbound packets can pose a\
   problem because a non-initial fragment generally will not contain the\
   port fields associated with a next layer protocol such as TCP, UDP,\
   or SCTP.  Thus, depending on the SPD configuration for a given IPsec\
   implementation, plaintext fragments might or might not pose a\
   problem.\
\
   For example, if the SPD requires that all traffic between two address\
   ranges is offered IPsec protection (no BYPASS or DISCARD SPD entries\
   apply to this address range), then it should be easy to carry\
   non-initial fragments on the SA defined for this address range, since\
   the SPD entry implies an intent to carry ALL traffic between the\
   address ranges.  But, if there are multiple SPD entries that could\
   match a fragment, and if these entries reference different subsets of\
   port fields (vs. ANY), then it is not possible to map an outbound\
   non-initial fragment to the right entry, unambiguously. (If we choose\
   to allow carriage of fragments on transport mode SAs for IPv6, the\
   problems arises in that context as well.)\
\
   This problem largely, though not exclusively, motivated the\
   definition of OPAQUE as a selector value for port fields in RFC 2401.\
   The other motivation for OPAQUE is the observation that port fields\
   might not be accessible due to the prior application of IPsec.  For\
   example, if a host applied IPsec to its traffic and that traffic\
\
\
\
Kent & Seo                  Standards Track                    [Page 89]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   arrived at an SG, these fields would be encrypted.  The algorithm\
   specified for locating the "next layer protocol" described in RFC\
   2401 also motivated use of OPAQUE to accommodate an encrypted next\
   layer protocol field in such circumstances.  Nonetheless, the primary\
   use of the OPAQUE value was to match traffic selector fields in\
   packets that did not contain port fields (non-initial fragments), or\
   packets in which the port fields were already encrypted (as a result\
   of nested application of IPsec).  RFC 2401 was ambiguous in\
   discussing the use of OPAQUE vs. ANY, suggesting in some places that\
   ANY might be an alternative to OPAQUE.\
\
   We gain additional access control capability by defining both ANY and\
   OPAQUE values.  OPAQUE can be defined to match only fields that are\
   not accessible.  We could define ANY as the complement of OPAQUE,\
   i.e., it would match all values but only for accessible port fields.\
   We have therefore simplified the procedure employed to locate the\
   next layer protocol in this document, so that we treat ESP and AH as\
   next layer protocols.  As a result, the notion of an encrypted next\
   layer protocol field has vanished, and there is also no need to worry\
   about encrypted port fields either.  And accordingly, OPAQUE will be\
   applicable only to non-initial fragments.\
\
   Since we have adopted the definitions above for ANY and OPAQUE, we\
   need to clarify how these values work when the specified protocol\
   does not have port fields, and when ANY is used for the protocol\
   selector.  Accordingly, if a specific protocol value is used as a\
   selector, and if that protocol has no port fields, then the port\
   field selectors are to be ignored and ANY MUST be specified as the\
   value for the port fields. (In this context, ICMP TYPE and CODE\
   values are lumped together as a single port field (for IKEv2\
   negotiation), as is the IPv6 Mobility Header TYPE value.) If the\
   protocol selector is ANY, then this should be treated as equivalent\
   to specifying a protocol for which no port fields are defined, and\
   thus the port selectors should be ignored, and MUST be set to ANY.\
\
D.3.  The Problem of Non-Initial Fragments\
\
   For an SG implementation, it is obvious that fragments might arrive\
   from end systems behind the SG.  A BITW implementation also may\
   encounter fragments from a host or gateway behind it. (As noted\
   earlier, native host implementations and BITS implementations\
   probably can avoid the problems described below.) In the worst case,\
   fragments from a packet might arrive at distinct BITW or SG\
   instantiations and thus preclude reassembly as a solution option.\
   Hence, in RFC 2401 we adopted a general requirement that fragments\
   must be accommodated in tunnel mode for all implementations. However,\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 90]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   RFC 2401 did not provide a perfect solution.  The use of OPAQUE as a\
   selector value for port fields (a SHOULD in RFC 2401) allowed an SA\
   to carry non-initial fragments.\
\
   Using the features defined in RFC 2401, if one defined an SA between\
   two IPsec (SG or BITW) implementations using the OPAQUE value for\
   both port fields, then all non-initial fragments matching the\
   source/destination (S/D) address and protocol values for the SA would\
   be mapped to that SA.  Initial fragments would NOT map to this SA, if\
   we adopt a strict definition of OPAQUE.  However, RFC 2401 did not\
   provide detailed guidance on this and thus it may not have been\
   apparent that use of this feature would essentially create a\
   "non-initial fragment only" SA.\
\
   In the course of discussing the "fragment-only" SA approach, it was\
   noted that some subtle problems, problems not considered in RFC 2401,\
   would have to be avoided.  For example, an SA of this sort must be\
   configured to offer the "highest quality" security services for any\
   traffic between the indicated S/D addresses (for the specified\
   protocol).  This is necessary to ensure that any traffic captured by\
   the fragment-only SA is not offered degraded security relative to\
   what it would have been offered if the packet were not fragmented.  A\
   possible problem here is that we may not be able to identify the\
   "highest quality" security services defined for use between two IPsec\
   implementation, since the choice of security protocols, options, and\
   algorithms is a lattice, not a totally ordered set. (We might safely\
   say that BYPASS < AH < ESP w/integrity, but it gets complicated if we\
   have multiple ESP encryption or integrity algorithm options.) So, one\
   has to impose a total ordering on these security parameters to make\
   this work, but this can be done locally.\
\
   However, this conservative strategy has a possible performance\
   downside.  If most traffic traversing an IPsec implementation for a\
   given S/D address pair (and specified protocol) is bypassed, then a\
   fragment-only SA for that address pair might cause a dramatic\
   increase in the volume of traffic afforded crypto processing.  If the\
   crypto implementation cannot support high traffic rates, this could\
   cause problems. (An IPsec implementation that is capable of line rate\
   or near line rate crypto performance would not be adversely affected\
   by this SA configuration approach.  Nonetheless, the performance\
   impact is a potential concern, specific to implementation\
   capabilities.)\
\
   Another concern is that non-initial fragments sent over a dedicated\
   SA might be used to effect overlapping reassembly attacks, when\
   combined with an apparently acceptable initial fragment. (This sort\
   of attack assumes creation of bogus fragments and is not a side\
   effect of normal fragmentation.) This concern is easily addressed in\
\
\
\
Kent & Seo                  Standards Track                    [Page 91]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   IPv4, by checking the fragment offset value to ensure that no\
   non-initial fragments have a small enough offset to overlap port\
   fields that should be contained in the initial fragment.  Recall that\
   the IPv4 MTU minimum is 576 bytes, and the max IP header length is 60\
   bytes, so any ports should be present in the initial fragment.  If we\
   require all non-initial fragments to have an offset of, say, 128 or\
   greater, just to be on the safe side, this should prevent successful\
   attacks of this sort.  If the intent is only to protect against this\
   sort of reassembly attack, this check need be implemented only by a\
   receiver.\
\
   IPv6 also has a fragment offset, carried in the fragmentation\
   extension header.  However, IPv6 extension headers are variable in\
   length and there is no analogous max header length value that we can\
   use to check non-initial fragments, to reject ones that might be used\
   for an attack of the sort noted above.  A receiver would need to\
   maintain state analogous to reassembly state, to provide equivalent\
   protection.  So, only for IPv4 is it feasible to impose a fragment\
   offset check that would reject attacks designed to circumvent port\
   field checks by IPsec (or firewalls) when passing non-initial\
   fragments.\
\
   Another possible concern is that in some topologies and SPD\
   configurations this approach might result in an access control\
   surprise.  The notion is that if we create an SA to carry ALL\
   (non-initial) fragments, then that SA would carry some traffic that\
   might otherwise arrive as plaintext via a separate path, e.g., a path\
   monitored by a proxy firewall.  But, this concern arises only if the\
   other path allows initial fragments to traverse it without requiring\
   reassembly, presumably a bad idea for a proxy firewall.  Nonetheless,\
   this does represent a potential problem in some topologies and under\
   certain assumptions with respect to SPD and (other) firewall rule\
   sets, and administrators need to be warned of this possibility.\
\
   A less serious concern is that non-initial fragments sent over a\
   non-initial fragment-only SA might represent a DoS opportunity, in\
   that they could be sent when no valid, initial fragment will ever\
   arrive.  This might be used to attack hosts behind an SG or BITW\
   device.  However, the incremental risk posed by this sort of attack,\
   which can be mounted only by hosts behind an SG or BITW device, seems\
   small.\
\
   If we interpret the ANY selector value as encompassing OPAQUE, then a\
   single SA with ANY values for both port fields would be able to\
   accommodate all traffic matching the S/D address and protocol traffic\
   selectors, an alternative to using the OPAQUE value.  But, using ANY\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 92]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   here precludes multiple, distinct SAs between the same IPsec\
   implementations for the same address pairs and protocol.  So, it is\
   not an exactly equivalent alternative.\
\
   Fundamentally, fragment handling problems arise only when more than\
   one SA is defined with the same S/D address and protocol selector\
   values, but with different port field selector values.\
\
D.4.  BYPASS/DISCARD Traffic\
\
   We also have to address the non-initial fragment processing issue for\
   BYPASS/DISCARD entries, independent of SA processing.  This is\
   largely a local matter for two reasons:\
\
           1) We have no means for coordinating SPD entries for such\
              traffic between IPsec implementations since IKE is not\
              invoked.\
           2) Many of these entries refer to traffic that is NOT\
              directed to or received from a location that is using\
              IPsec.  So there is no peer IPsec implementation with\
              which to coordinate via any means.\
\
   However, this document should provide guidance here, consistent with\
   our goal of offering a well-defined, access control function for all\
   traffic, relative to the IPsec boundary.  To that end, this document\
   says that implementations MUST support fragment reassembly for\
   BYPASS/DISCARD traffic when port fields are specified.  An\
   implementation also MUST permit a user or administrator to accept\
   such traffic or reject such traffic using the SPD conventions\
   described in Section 4.4.1.  The concern is that BYPASS of a\
   cleartext, non-initial fragment arriving at an IPsec implementation\
   could undermine the security afforded IPsec-protected traffic\
   directed to the same destination.  For example, consider an IPsec\
   implementation configured with an SPD entry that calls for\
   IPsec-protection of traffic between a specific source/destination\
   address pair, and for a specific protocol and destination port, e.g.,\
   TCP traffic on port 23 (Telnet).  Assume that the implementation also\
   allows BYPASS of traffic from the same source/destination address\
   pair and protocol, but for a different destination port, e.g., port\
   119 (NNTP).  An attacker could send a non-initial fragment (with a\
   forged source address) that, if bypassed, could overlap with\
   IPsec-protected traffic from the same source and thus violate the\
   integrity of the IPsec-protected traffic.  Requiring stateful\
   fragment checking for BYPASS entries with non-trivial port ranges\
   prevents attacks of this sort.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 93]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
D.5.  Just say no to ports?\
\
   It has been suggested that we could avoid the problems described\
   above by not allowing port field selectors to be used in tunnel mode.\
   But the discussion above shows this to be an unnecessarily stringent\
   approach, i.e., since no problems arise for the native OS and BITS\
   implementations.  Moreover, some WG members have described scenarios\
   where use of tunnel mode SAs with (non-trivial) port field selectors\
   is appropriate.  So the challenge is defining a strategy that can\
   deal with this problem in BITW and SG contexts.  Also note that\
   BYPASS/DISCARD entries in the SPD that make use of ports pose the\
   same problems, irrespective of tunnel vs. transport mode notions.\
\
   Some folks have suggested that a firewall behind an SG or BITW should\
   be left to enforce port-level access controls and the effects of\
   fragmentation.  However, this seems to be an incongruous suggestion\
   in that elsewhere in IPsec (e.g., in IKE payloads) we are concerned\
   about firewalls that always discard fragments.  If many firewalls\
   don't pass fragments in general, why should we expect them to deal\
   with fragments in this case? So, this analysis rejects the suggestion\
   of disallowing use of port field selectors with tunnel mode SAs.\
\
D.6.  Other Suggested Solutions\
\
   One suggestion is to reassemble fragments at the sending IPsec\
   implementation, and thus avoid the problem entirely.  This approach\
   is invisible to a receiver and thus could be adopted as a purely\
   local implementation option.\
\
   A more sophisticated version of this suggestion calls for\
   establishing and maintaining minimal state from each initial fragment\
   encountered, to allow non-initial fragments to be matched to the\
   right SAs or SPD/cache entries.  This implies an extension to the\
   current processing model (and the old one).  The IPsec implementation\
   would intercept all fragments; capture Source/Destination IP\
   addresses, protocol, packet ID, and port fields from initial\
   fragments; and then use this data to map non-initial fragments to SAs\
   that require port fields.  If this approach is employed, the receiver\
   needs to employ an equivalent scheme, as it too must verify that\
   received fragments are consistent with SA selector values.  A\
   non-initial fragment that arrives prior to an initial fragment could\
   be cached or discarded, awaiting arrival of the corresponding initial\
   fragment.\
\
   A downside of both approaches noted above is that they will not\
   always work.  When a BITW device or SG is configured in a topology\
   that might allow some fragments for a packet to be processed at\
   different SGs or BITW devices, then there is no guarantee that all\
\
\
\
Kent & Seo                  Standards Track                    [Page 94]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   fragments will ever arrive at the same IPsec device.  This approach\
   also raises possible processing problems.  If the sender caches\
   non-initial fragments until the corresponding initial fragment\
   arrives, buffering problems might arise, especially at high speeds.\
   If the non-initial fragments are discarded rather than cached, there\
   is no guarantee that traffic will ever pass, e.g., retransmission\
   will result in different packet IDs that cannot be matched with prior\
   transmissions.  In any case, housekeeping procedures will be needed\
   to decide when to delete the fragment state data, adding some\
   complexity to the system.  Nonetheless, this is a viable solution in\
   some topologies, and these are likely to be common topologies.\
\
   The Working Group rejected an earlier version of the convention of\
   creating an SA to carry only non-initial fragments, something that\
   was supported implicitly under the RFC 2401 model via use of OPAQUE\
   port fields, but never clearly articulated in RFC 2401.  The\
   (rejected) text called for each non-initial fragment to be treated as\
   protocol 44 (the IPv6 fragment header protocol ID) by the sender and\
   receiver.  This approach has the potential to make IPv4 and IPv6\
   fragment handling more uniform, but it does not fundamentally change\
   the problem, nor does it address the issue of fragment handling for\
   BYPASS/DISCARD traffic.  Given the fragment overlap attack problem\
   that IPv6 poses, it does not seem that it is worth the effort to\
   adopt this strategy.\
\
D.7.  Consistency\
\
   Earlier, the WG agreed to allow an IPsec BITS, BITW, or SG to perform\
   fragmentation prior to IPsec processing.  If this fragmentation is\
   performed after SA lookup at the sender, there is no "mapping to the\
   right SA" problem.  But, the receiver still needs to be able to\
   verify that the non-initial fragments are consistent with the SA via\
   which they are received.  Since the initial fragment might be lost en\
   route, the receiver encounters all of the potential problems noted\
   above.  Thus, if we are to be consistent in our decisions, we need to\
   say how a receiver will deal with the non-initial fragments that\
   arrive.\
\
D.8.  Conclusions\
\
   There is no simple, uniform way to handle fragments in all contexts.\
   Different approaches work better in different contexts.  Thus, this\
   document offers 3 choices -- one MUST and two MAYs.  At some point in\
   the future, if the community gains experience with the two MAYs, they\
   may become SHOULDs or MUSTs or other approaches may be proposed.\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 95]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Appendix E: Example of Supporting Nested SAs via SPD and Forwarding\
            Table Entries\
\
   This appendix provides an example of how to configure the SPD and\
   forwarding tables to support a nested pair of SAs, consistent with\
   the new processing model.  For simplicity, this example assumes just\
   one SPD-I.\
\
   The goal in this example is to support a transport mode SA from A to\
   C, carried over a tunnel mode SA from A to B.  For example, A might\
   be a laptop connected to the public Internet, B might be a firewall\
   that protects a corporate network, and C might be a server on the\
   corporate network that demands end-to-end authentication of A's\
   traffic.\
\
         +---+     +---+  +---+\
         | A |=====| B |  | C |\
         |   |------------|   |\
         |   |=====|   |  |   |\
         +---+     +---+  +---+\
\
   A's SPD contains entries of the form:\
\
                        Next Layer\
      Rule Local Remote Protocol   Action\
      ---- ----- ------ ---------- -----------------------\
       1     C     A     ESP       BYPASS\
       2     A     C     ICMP,ESP  PROTECT(ESP,tunnel,integr+conf)\
       3     A     C     ANY       PROTECT(ESP,transport,integr-only)\
       4     A     B     ICMP,IKE  BYPASS\
\
   A's unprotected-side forwarding table is set so that outbound packets\
   destined for C are looped back to the protected side.  A's\
   protected-side forwarding table is set so that inbound ESP packets\
   are looped back to the unprotected side.  A's forwarding tables\
   contain entries of the form:\
\
      Unprotected-side forwarding table\
\
        Rule Local Remote Protocol Action\
        ---- ----- ------ -------- ---------------------------\
         1     A     C       ANY   loop back to protected side\
         2     A     B       ANY   forward to B\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 96]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
      Protected-side forwarding table\
\
        Rule Local Remote Protocol Action\
        ---- ----- ------ -------- -----------------------------\
         1     A     C       ESP   loop back to unprotected side\
\
   An outbound TCP packet from A to C would match SPD rule 3 and have\
   transport mode ESP applied to it.  The unprotected-side forwarding\
   table would then loop back the packet.  The packet is compared\
   against SPD-I (see Figure 2), matches SPD rule 1, and so it is\
   BYPASSed.  The packet is treated as an outbound packet and compared\
   against the SPD for a third time.  This time it matches SPD rule 2,\
   so ESP is applied in tunnel mode.  This time the forwarding table\
   doesn't loop back the packet, because the outer destination address\
   is B, so the packet goes out onto the wire.\
\
   An inbound TCP packet from C to A is wrapped in two ESP headers; the\
   outer header (ESP in tunnel mode) shows B as the source, whereas the\
   inner header (ESP transport mode) shows C as the source.  Upon\
   arrival at A, the packet would be mapped to an SA based on the SPI,\
   have the outer header removed, and be decrypted and\
   integrity-checked.  Then it would be matched against the SAD\
   selectors for this SA, which would specify C as the source and A as\
   the destination, derived from SPD rule 2.  The protected-side\
   forwarding function would then send it back to the unprotected side\
   based on the addresses and the next layer protocol (ESP), indicative\
   of nesting.  It is compared against SPD-O (see Figure 3) and found to\
   match SPD rule 1, so it is BYPASSed.  The packet is mapped to an SA\
   based on the SPI, integrity-checked, and compared against the SAD\
   selectors derived from SPD rule 3.  The forwarding function then\
   passes it up to the next layer, because it isn't an ESP packet.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 97]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
References\
\
Normative References\
\
   [BBCDWW98]     Blake, S., Black, D., Carlson, M., Davies, E., Wang,\
                  Z., and W. Weiss, "An Architecture for Differentiated\
                  Service", RFC 2475, December 1998.\
\
   [Bra97]        Bradner, S., "Key words for use in RFCs to Indicate\
                  Requirement Level", BCP 14, RFC 2119, March 1997.\
\
   [CD98]         Conta, A. and S. Deering, "Internet Control Message\
                  Protocol (ICMPv6) for the Internet Protocol Version 6\
                  (IPv6) Specification", RFC 2463, December 1998.\
\
   [DH98]         Deering, S., and R. Hinden, "Internet Protocol,\
                  Version 6 (IPv6) Specification", RFC 2460, December\
                  1998.\
\
   [Eas05]        3rd Eastlake, D., "Cryptographic Algorithm\
                  Implementation Requirements For Encapsulating Security\
                  Payload (ESP) and Authentication Header (AH)", RFC\
                  4305, December 2005.\
\
   [HarCar98]     Harkins, D. and D. Carrel, "The Internet Key Exchange\
                  (IKE)", RFC 2409, November 1998.\
\
   [Kau05]        Kaufman, C., Ed., "The Internet Key Exchange (IKEv2)\
                  Protocol", RFC 4306, December 2005.\
\
   [Ken05a]       Kent, S., "IP Encapsulating Security Payload (ESP)",\
                  RFC 4303, December 2005.\
\
   [Ken05b]       Kent, S., "IP Authentication Header", RFC 4302,\
                  December 2005.\
\
   [MD90]         Mogul, J. and S. Deering, "Path MTU discovery", RFC\
                  1191, November 1990.\
\
   [Mobip]        Johnson, D., Perkins, C., and J. Arkko, "Mobility\
                  Support in IPv6", RFC 3775, June 2004.\
\
   [Pos81a]       Postel, J., "Internet Protocol", STD 5, RFC 791,\
                  September 1981.\
\
   [Pos81b]       Postel, J., "Internet Control Message Protocol", RFC\
                  792, September 1981.\
\
\
\
\
Kent & Seo                  Standards Track                    [Page 98]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   [Sch05]        Schiller, J., "Cryptographic Algorithms for use in the\
                  Internet Key Exchange Version 2 (IKEv2)", RFC 4307,\
                  December 2005.\
\
   [WaKiHo97]     Wahl, M., Kille, S., and T. Howes, "Lightweight\
                  Directory Access Protocol (v3): UTF-8 String\
                  Representation of Distinguished Names", RFC 2253,\
                  December 1997.\
\
Informative References\
\
   [CoSa04]       Condell, M., and L. Sanchez, "On the Deterministic\
                  Enforcement of Un-ordered Security Policies", BBN\
                  Technical Memo 1346, March 2004.\
\
   [FaLiHaMeTr00] Farinacci, D., Li, T., Hanks, S., Meyer, D., and P.\
                  Traina, "Generic Routing Encapsulation (GRE)", RFC\
                  2784, March 2000.\
\
   [Gro02]        Grossman, D., "New Terminology and Clarifications for\
                  Diffserv", RFC 3260, April 2002.\
   [HC03]         Holbrook, H. and B. Cain, "Source Specific Multicast\
                  for IP", Work in Progress, November 3, 2002.\
\
   [HA94]         Haller, N. and R. Atkinson, "On Internet\
                  Authentication", RFC 1704, October 1994.\
\
   [NiBlBaBL98]   Nichols, K., Blake, S., Baker, F., and D. Black,\
                  "Definition of the Differentiated Services Field (DS\
                  Field) in the IPv4 and IPv6 Headers", RFC 2474,\
                  December 1998.\
\
   [Per96]        Perkins, C., "IP Encapsulation within IP", RFC 2003,\
                  October 1996.\
\
   [RaFlBl01]     Ramakrishnan, K., Floyd, S., and D. Black, "The\
                  Addition of Explicit Congestion Notification (ECN) to\
                  IP", RFC 3168, September 2001.\
\
   [RFC2401]      Kent, S. and R. Atkinson, "Security Architecture for\
                  the Internet Protocol", RFC 2401, November 1998.\
\
   [RFC2983]      Black, D., "Differentiated Services and Tunnels", RFC\
                  2983, October 2000.\
\
   [RFC3547]      Baugher, M., Weis, B., Hardjono, T., and H. Harney,\
                  "The Group Domain of Interpretation", RFC 3547, July\
                  2003.\
\
\
\
Kent & Seo                  Standards Track                    [Page 99]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
   [RFC3740]      Hardjono, T. and B.  Weis, "The Multicast Group\
                  Security Architecture", RFC 3740, March 2004.\
\
   [RaCoCaDe04]   Rajahalme, J., Conta, A., Carpenter, B., and S.\
                  Deering, "IPv6 Flow Label Specification", RFC 3697,\
                  March 2004.\
\
   [Sch94]        Schneier, B.,  Applied Cryptography, Section 8.6, John\
                  Wiley & Sons, New York, NY, 1994.\
\
   [Shi00]        Shirey, R., "Internet Security Glossary", RFC 2828,\
                  May 2000.\
\
   [SMPT01]       Shacham, A., Monsour, B., Pereira, R., and M. Thomas,\
                  "IP Payload Compression Protocol (IPComp)", RFC 3173,\
                  September 2001.\
\
   [ToEgWa04]     Touch, J., Eggert, L., and Y. Wang, "Use of IPsec\
                  Transport Mode for Dynamic Routing", RFC 3884,\
                  September 2004.\
\
   [VK83]         V.L. Voydock & S.T. Kent, "Security Mechanisms in\
                  High-level Networks", ACM Computing Surveys, Vol. 15,\
                  No. 2, June 1983.\
\
Authors' Addresses\
\
   Stephen Kent\
   BBN Technologies\
   10 Moulton Street\
   Cambridge, MA  02138\
   USA\
\
   Phone: +1 (617) 873-3988\
   EMail: kent@bbn.com\
\
\
   Karen Seo\
   BBN Technologies\
   10 Moulton Street\
   Cambridge, MA  02138\
   USA\
\
   Phone: +1 (617) 873-3152\
   EMail: kseo@bbn.com\
\
\
\
\
\
\
Kent & Seo                  Standards Track                   [Page 100]\
\
RFC 4301              Security Architecture for IP         December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Kent & Seo                  Standards Track                   [Page 101]\
\

doc 1
  field 0
    name titolo
    type string
    value rfc4293.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                   S. Routhier, Ed.\
Request for Comments: 4293                                    April 2006\
Obsoletes: 2011, 2465, 2466\
Category: Standards Track\
\
\
                      Management Information Base\
                     for the Internet Protocol (IP)\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This memo defines a portion of the Management Information Base (MIB)\
   for use with network management protocols in the Internet community.\
   In particular, it describes managed objects used for implementations\
   of the Internet Protocol (IP) in an IP version independent manner.\
   This memo obsoletes RFCs 2011, 2465, and 2466.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 1]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
Table of Contents\
\
   1. The Internet-Standard Management Framework ......................2\
   2. Revision History ................................................3\
   3. Overview ........................................................3\
      3.1. Multi-Stack Implementations ................................3\
      3.2. Discussion of Tables and Groups ............................3\
           3.2.1. General Objects .....................................4\
           3.2.2. Interface Tables ....................................4\
           3.2.3. IP Statistics Tables ................................4\
           3.2.4. Internet Address Prefix Table .......................8\
           3.2.5. Internet Address Table ..............................8\
           3.2.6. Internet Address Translation Table ..................9\
           3.2.7. IPv6 Scope Zone Index Table .........................9\
           3.2.8. Default Router Table ................................9\
           3.2.9. Router Advertisement Table ..........................9\
           3.2.10. ICMP Statistics Tables .............................9\
           3.2.11. Conformance and Compliance ........................10\
           3.2.12. Deprecated Objects ................................10\
   4. Updating Implementations .......................................10\
      4.1. Updating an Implementation of the IPv4-only IP-MIB ........11\
      4.2. Updating an Implementation of the IPv6-MIB ................12\
   5. Definitions ....................................................13\
   6. Previous Work .................................................116\
   7. References ....................................................116\
      7.1. Normative References .....................................116\
      7.2. Informative References ...................................117\
   8. Security Considerations .......................................118\
   9. Acknowledgements ..............................................120\
   10. Authors ......................................................120\
\
1.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to section 7 of\
   RFC 3410 [9].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [1], STD 58, RFC 2579 [2] and STD 58, RFC 2580 [3].\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 2]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
2.  Revision History\
\
   One of the primary purposes of this revision of the IP MIB is to\
   create a single set of objects to describe and manage IP modules in\
   an IP version independent manner.  Where RFCs 2465 and 2466 created a\
   set of objects independent from RFC 2011, this document merges those\
   three documents into a single unified set of objects.  The\
   ipSystemStatsTable and ipIfStatsTable tables are examples of updating\
   objects to be independent of IP version.  Both of these tables\
   contain counters to reflect IP traffic statistics that originated in\
   much earlier MIBs and both include an IP address type in order to\
   separate the information based on IP version.\
\
   Another purpose of this document is to increase the manageability of\
   a node running IPv6 by adding new objects.  Some of these tables,\
   such as ipDefaultRouterTable, may be useful on both IPv4 and IPv6\
   nodes while others, such as ipv6RouterAdvertTable, are specific to a\
   single protocol.\
\
3.  Overview\
\
3.1.  Multi-Stack Implementations\
\
   This MIB does not provide native support for implementations of\
   multiple stacks sharing the same address type.  One option for\
   supporting such designs is to assign each stack within an address\
   type to a separate context.  These contexts could then be selected\
   based upon the context name, with the Entity MIB and View-based\
   Access Control Model (VACM) Context Table providing methods for\
   listing the supported contexts.\
\
3.2.  Discussion of Tables and Groups\
\
   This MIB is composed of a small number of discrete objects and a\
   series of tables meant to form the base for managing IPv4 and IPv6\
   entities.\
\
   While some of the objects are meant to be included in all entities,\
   some of the objects are only conditionally mandatory.  The\
   unconditionally mandatory objects are mostly counters for IP and ICMP\
   statistics.  The conditionally mandatory objects fall into one of\
   several groups: objects for use in higher bandwidth situations,\
   objects for use with IPv4, objects for use with IPv6, and objects for\
   use on IPv6 routers.  In short, it is not expected that every entity\
   will implement all of the objects within this MIB.  The reader should\
   consult the conformance and compliance section to determine which\
   objects are appropriate for a given entity.\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 3]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
3.2.1.  General Objects\
\
   In both IPv4 and IPv6, there are only a small number of "knobs" for\
   controlling the general IP stack.  Most controls will be in a more\
   specific setting, such as for controlling a router or TCP engine.\
\
   This MIB defines a total of three general knobs, only two of which\
   are used for both IPv4 and IPv6.\
\
   Objects are included for both protocols to enable or disable\
   forwarding and to set limits on the lifetime of a packet (ttl or hop\
   count).\
\
   The third knob, the timeout period for reassembling fragments, is\
   only defined for IPv4, as IPv6 specifies this value directly.\
\
   Each group of objects is required when implementing their respective\
   protocols.\
\
3.2.2.  Interface Tables\
\
   This MIB includes a pair of tables to convey information about the\
   IPv4 and IPv6 protocols that is interface specific.\
\
   Special note should be taken of the administrative status objects.\
   These are defined to allow each protocol to selectively enable or\
   disable interfaces.  These objects can be used in conjunction with\
   the ifAdminStatus object to manipulate the interfaces as necessary.\
   With these three objects, an interface may be enabled or disabled\
   completely, as well as connected to the IPv4 stack, the IPv6 stack or\
   both stacks.  Setting ifAdminStatus to "down" should not affect the\
   protocol specific status objects.\
\
   Each interface table is required when implementing their respective\
   protocols.\
\
3.2.3.  IP Statistics Tables\
\
   The IP statistics tables (ipSystemStatsTable and ipIfStatsTable)\
   contain objects to count the number of datagrams and octets that a\
   given entity has processed.  Unlike the previous attempt, this\
   document uses a single table for multiple address types.  Typically\
   the only two types of interest are IPv4 and IPv6; however, the table\
   can support other types if necessary.\
\
   The first table, ipSystemStatsTable, conveys system wide information.\
   (That is, the various counters are for all interfaces and not a\
   specific set of interfaces.)  Its index is formed from a single\
\
\
\
Routhier, Ed.               Standards Track                     [Page 4]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   sub-id that represents the address type for which the statistics were\
   counted.\
\
   The second table, ipIfStatsTable, conveys interface specific\
   information.  Its index is formed from two sub-ids.  The first\
   represents the address type (IPv4 and IPv6), and the interface within\
   that address type is represented by the second sub-id.\
\
   The two tables have a similar set of objects that are intended to\
   count the same things, except for the difference in granularity.  The\
   object ID "ipSystemStatsEntry.2" is reserved in order to align the\
   object IDs of the counters in the first table with their counterparts\
   in the second table.\
\
   Several objects to note are ipSystemStatsDiscontinuityTime,\
   ipIfStatsDiscontinuityTime, ipSystemsStatsRefreshRate, and\
   ipIfStatsRefreshRate.  These objects provide information about the\
   row in the table more than about the system itself.\
\
   The discontinuity objects allow a management entity to determine if a\
   discontinuity event that would invalidate the management entity's\
   understanding of the counters has occurred.  The system being re-\
   initialized or the interface being cycled are possible examples of a\
   discontinuity event.\
\
   The refresh objects allow a management entity to determine a proper\
   polling interval for the rest of the objects.\
\
   The following Case diagram represents the general ordering of the\
   packet counters.  In order to avoid extra clutter, the prefixes\
   "ipSystemStats" and "ipIfStats" have been removed from each of the\
   counter names.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 5]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
 from                                            from\
 interface                                       upper\
                                                 layers\
\
  V                                               V\
  |                                               |\
  + InReceives (1)                                + OutRequests\
  |                                               |\
  |                                               |\
  +--> InHdrErrors (5)                            +--> OutNoRoutes\
  |                                               |\
  |                                               |\
  +->-+ InMcastPkts (1)                           |\
  |   V                                           |\
  +-<-+                                           |\
  |                                               |\
  +->-+ InBcastPkts (1)                           |\
  |   V                                           |\
  +-<-+                                           |\
  |                                               |\
  |                                               |\
  +--> InTruncatedPkts (5)                        |\
  |                                               |\
  |                                               |\
  +--> InAddrErrors                               |\
  |                                               |\
  |                                               |\
  +--> InDiscards (2)                             |\
  |                                               |\
  |                                               |\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 6]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
  +--------+------->------+----->-----+----->-----+\
  |  InForwDatagrams (6)  |   OutForwDatagrams (6)|\
  |                       V                       +->-+ OutFragReqds\
  |                   InNoRoutes                  |   | (packets)\
  / (local packet (3)                             |   |\
  |  IF is that of the address                    |   +--> OutFragFails\
  |  and may not be the receiving IF)             |   |    (packets)\
  |                                               |   |\
  |                                               |   V OutFragOks\
  |                                               |   | (packets) (7)\
  |                                               |   |\
  +->-+ ReasmReqds (fragments)                    +-<-+ OutFragCreates\
  |   |                                           |       (fragments)\
  |   |                                           |\
  |   +--> ReasmFails (fragments (4))             +->-+ OutMcastPkts (1)\
  |   |                                           |   V\
  |   |                                           +-<-+\
  +-<-+ ReasmOKs (reassembled packets)            |\
  |                                               +->-+ OutBcastPkts (1)\
  |                                               |   V\
  +--> InUnknownProtos                            +-<-+\
  |                                               |\
  |                                               |\
  +--> InDiscards (2)                             +--> OutDiscards (2)\
  |                                               |\
  |                                               |\
  + InDelivers                                    + OutTransmits (1)\
  |                                               |\
  V                                               V\
 to                                              to\
 upper                                           interface\
 layers\
\
   (1) The HC counters and octet counters are also found at these points\
       but have been left out for clarity.\
\
   (2) The discard counters may increment at any time in the processing\
       path.  Packets discarded to the left of InNoRoutes cause the\
       InDiscards counter to increment, while those discarded to the\
       right are counted in the OutDiscards counters.\
\
   (3) Local packets on the input side are counted on the interface\
       associated with their destination address, which may not be the\
       interface on which they were received.  This requirement is\
       caused by the possibility of losing the original interface during\
       processing, especially re-assembly.\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 7]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   (4) Some re-assembly algorithms may lose track of the number of\
       fragments during processing and so some fragments may not be\
       counted in this object.\
\
   (5) InTruncatedPkts should only be incremented if the frame contained\
       a valid header but was otherwise shorter than required.  Frames\
       that are too short to contain a valid header should be counted as\
       InHdrErrors.\
\
   (6) The forwarding objects may be incremented, even for packets that\
       originated locally or are destined for the local host, if their\
       addresses are such that the local host would need to forward the\
       packet to pass it to the correct interface.\
\
   (7) When fragmenting a packet, an entity should increment the\
       OutFragFails counter, rather than the OutDiscards counter, in\
       order to preserve the equation FragOks + FragFails == FragRqds.\
\
   The objects in both tables are spread amongst several conformance\
   groups based on the bandwidth required to wrap the counters within an\
   hour.  The base system group is mandatory for all entities.  The\
   other system groups are optional depending on bandwidth.  The\
   interface specific-groups are optional.\
\
3.2.4.  Internet Address Prefix Table\
\
   This table provides information about the prefixes this entity is\
   using, including their lifetimes.  This table provides a convenient\
   place to which other tables that make use of prefixes, such as the\
   ipAddressTable, may point.  By including this table, the MIB can\
   supply the prefix information for all addresses, yet minimize the\
   amount of duplication required in storing and accessing this data.\
   This arrangement also clarifies the relationship between addresses\
   that have the same prefix.\
\
   This table is required for IPv6 entities.\
\
3.2.5.  Internet Address Table\
\
   This table lists the IP addresses (both IPv4 and IPv6) used by this\
   entity.  It also includes some basic information about how and when\
   the address was formed and last updated.  This table allows a manager\
   to determine who a given entity thinks it is.\
\
   This table is required for all IP entities.\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 8]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
3.2.6.  Internet Address Translation Table\
\
   This table provides a mapping between IP layer addresses and physical\
   addresses as would be formed by either Address Resolution Protocol\
   (ARP) for IPv4 or the neighbor discovery protocol for IPv6.\
\
3.2.7.  IPv6 Scope Zone Index Table\
\
   This table specifies the zone index to interface mapping.  By\
   examining the table, a manager can determine which groups of\
   interfaces are within a particular zone for a given scope.\
\
   The zone index information is only valid within a given entity; the\
   indexes used on one entity may not be comparable to those used on a\
   different entity.\
\
   This table is required for IPv6 entities.\
\
3.2.8.  Default Router Table\
\
   This table lists the default routers known to this entity.  This\
   table is intended to be a simple list to display the information that\
   end nodes may have been configured with or acquired through a simple\
   system such as IPv6 router advertisements.  Managers attempting to\
   view more complicated routing information should examine the routing\
   specific tables from other MIBs.\
\
   This table is required for all entities.\
\
3.2.9.  Router Advertisement Table\
\
   This table contains the non-routing information that an IPv6 router\
   would use in constructing a router advertisement message.  It does\
   not contain information about the prefixes or other routing specific\
   information that the router might advertise.  The router should\
   acquire such information from either the routing tables or from some\
   routing table specific MIB.\
\
   This table is only required for IPv6 router entities.\
\
3.2.10.  ICMP Statistics Tables\
\
   There are two sets of statistics for ICMP.  The first contains a\
   simple set of counters to track the number of ICMP messages and\
   errors processed by this entity.\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                     [Page 9]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   The second supplies more detail about the ICMP messages processed by\
   this entity.  Its index is formed from two sub-ids.  The first\
   represents the address type (IPv4 and IPv6), and the second\
   represents the particular message type being counted.  A given row\
   need not be instantiated unless a message of that type has been\
   processed, i.e., the row for icmpMsgStatsType=X MAY be instantiated\
   before but MUST be instantated after the first message with Type=X is\
   received or transmitted.  After receiving or transmitting any\
   succeeding messages with Type=X, the relevant counter must be\
   incremented.\
\
   Both of these tables are required for all entities.\
\
3.2.11.  Conformance and Compliance\
\
   This MIB contains several sets of objects.  Some of these sets are\
   useful on all types of entities, while others are only useful on a\
   limited subset of entities.  The conformance section attempts to\
   group the objects into sets that may be discussed as units, and the\
   compliance section then details which of these units are required in\
   various circumstances.\
\
   The circumstances used in the compliance section are implementing\
   IPv4, IPv6, or IPv6 router functions and having a bandwidth of less\
   than 20MB, between 20MB and 650MB, or greater than 650MB.\
\
3.2.12.  Deprecated Objects\
\
   This MIB also includes a set of deprecated objects from previous\
   iterations.  They are included as part of the historical record.\
\
4.  Updating Implementations\
\
   There are several general classes of change that are required.\
\
   The first and most major change is that most of the previous objects\
   have different object IDs and additional indexes to support the\
   possibility of different address types.  The general counters for IP\
   and ICMP are examples of this.  They have been moved to the\
   ipSystemStatsTable and icmpMsgStatsTable, respectively.\
\
   The second change is the extension of all address objects to allow\
   for both IPv4 and IPv6 addresses and the addition of an address type\
   object to specify what address type is in use.\
\
   The third change is the addition of several new objects to the\
   replacement for a previously existing table such as ipNetToPhysical.\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 10]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   The fourth change is the addition of completely new tables such as\
   ipIfStatsTable and ipDefaultRouterTable.  The first is based on the\
   previous statistics groups, while the second is completely new to\
   this MIB.\
\
4.1.  Updating an Implementation of the IPv4-only IP-MIB\
\
   The somewhat more specific changes that are required for IPv4 follow.\
   Note well:  this is not meant to be an exhaustive list and the reader\
   should examine the MIB for full details.\
\
   Several of the general objects (ipForwarding, ipDefaultTTL,\
   ipReasmTimeout) remain unchanged.\
\
   Most of the rest of the general objects were counters and have been\
   moved into the ipSystemStatsTable.  The basic instrumentation should\
   remain the same, though the object definitions should be checked for\
   clarifications.  If they aren't already in a structure, putting the\
   counter variables in one would be useful.  Several new objects have\
   been added to count additional items, and instrumentation code must\
   be added for these objects.  Finally, the SNMP routines must be\
   updated to handle the new indexing.\
\
   In addition to the ipSystemStatsTable, the MIB includes the\
   ipIfStatsTable.  This table counts the same items as the system table\
   but does so on a per interface basis.  It is optional and may be\
   ignored.  If you decide to implement it, you may wish to arrange to\
   collect the data on a per-interface basis and then sum those counters\
   in order to provide the aggregate system level statistics.  However,\
   if you choose to provide the system level statistics by summing the\
   interface level counters, no interface level statistics can be lost -\
   if an interface is removed, the statistics associated with it must be\
   retained.\
\
   The ipAddrTable has, loosely, been converted to the ipAddressTable.\
   While the general idea remains the same, the ipAddressTable is\
   sufficiently different that writing new code may be easier than\
   updating old code.  The primary difference is the addition of several\
   new objects.  In addition, the ipAdEntReasmMaxSize has been moved to\
   another table, ipv4InterfaceTable.  As above, the SNMP routines will\
   need to be updated to handle the new indexing.\
\
   The ipNetToMediaTable has been moved to the ipNetToPhysicalTable.\
   These tables are fairly similar and updating the old code may be\
   straightforward.  As above, the SNMP routines will need to be updated\
   to handle the new indexing.\
\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 11]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   Two new tables, ipv4InterfaceTable and ipDefaultRouterTable, are\
   required as well as several new ICMP counters.\
\
   Finally, there are several tables that are required for IPv6 but are\
   optional for IPv4 that you may elect to implement.\
\
4.2.  Updating an Implementation of the IPv6-MIB\
\
   The somewhat more specific changes that are required for IPv6 follow.\
   Note well:  this is not meant to be an exhaustive list and the reader\
   should examine the MIB for full details.\
\
   Two of the general objects, ipv6Forwarding and ipv6DefaultHopLimit,\
   have been renamed and given new object identifiers within the ip\
   branch but are otherwise unchanged.  The new names are\
   ipv6IpForwarding and ipv6IpDefaultHopLimit.\
\
   While there is an ipv6InterfaceTable that contains some of the pieces\
   from the ipv6IfTable, the two are somewhat different in concept.  The\
   ipv6IfTable was meant to replicate the ifTable while the\
   ipv6InterfaceTable is meant to be an addition to the ifTable.  As\
   such, items that were duplicated between the ifTable and ipv6IfTable\
   have been removed and some new objects added.\
\
   The ipv6IfStatsTable most closely resembles the ipIfStatsTable with\
   an additional index for the address type and most of the\
   instrumentation should be re-usable.  Some new objects have been\
   added to the ipIfStatsTable.  As above, the SNMP routines will need\
   to be updated to handle the new indexing.  Finally, the\
   ipIfStatsTable is optional and may be ignored.\
\
   The ipSystemStatsTable is effectively new, but it may be able to make\
   use of most of the instrumentation from the old ipv6IfStatsTable.  As\
   with the IPv4 discussion, one implementation strategy would be to\
   count the statistics for the ipIfStatsTable and aggregate them when\
   queried for this table.  Again, as with the IPv4 discussion, this\
   strategy only works if the interfaces cannot be removed or if the\
   statistics for removed interfaces are somehow retained.\
\
   The ipv6AddrPrefixTable is now the ipAddressPrefixTable.  The new\
   table contains an extra object and the additional index required for\
   IPv4 compatibility.  As above, the SNMP routines will need to be\
   updated to handle the new indexing.\
\
   The ipAddressTable is loosely based on the ipv6AddrTable but has\
   changed considerably with the addition of several new objects and the\
   removal of one of its indexes.\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 12]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   The IPv6 routing information (ipv6RouteNumber, ipv6DiscardedRoutes,\
   and ipv6RouteTable) has been removed from this MIB.  The replacements\
   or updates for this information is in the update to the IP Forwarding\
   Table MIB [16].  The ipv6NetToMediaTable has been converted to the\
   ipNetToPhysicalTable.  The new table contains an extra object and the\
   additional index required for IPv4 compatibility.  As above, the SNMP\
   routines will need to be updated to handle the new indexing.\
\
   The ICMP tables have been substantially changed.  The previous tables\
   required counting on a per-message and per-interface basis.  The new\
   tables only require counting on a per-message, per-protocol basis and\
   include an aggregate of all messages on a per-protocol basis.\
\
   In addition to the above, several new tables have been added.  Both\
   the ipv6ScopeZoneIndexTable and ipDefaultRouterTable are required on\
   all IPv6 entities.  The ipv6RouterAdvertTable is only required on\
   IPv6 routers.\
\
5.  Definitions\
\
   The following MIB module imports from the IF-MIB [6] and the INET-\
   ADDRESS-MIB [7] and references Neighbor Discovery [4], the IPv6\
   Stateless Address Autoconfiguration protocol [5], the Default Router\
   Preferences document [8], ARP [10] and the IPv6 address architecture\
   document [17].\
\
IP-MIB DEFINITIONS ::= BEGIN\
\
IMPORTS\
    MODULE-IDENTITY, OBJECT-TYPE,\
    Integer32, Counter32, IpAddress,\
    mib-2, Unsigned32, Counter64,\
    zeroDotZero                        FROM SNMPv2-SMI\
    PhysAddress, TruthValue,\
    TimeStamp, RowPointer,\
    TEXTUAL-CONVENTION, TestAndIncr,\
    RowStatus, StorageType             FROM SNMPv2-TC\
    MODULE-COMPLIANCE, OBJECT-GROUP    FROM SNMPv2-CONF\
    InetAddress, InetAddressType,\
    InetAddressPrefixLength,\
    InetVersion, InetZoneIndex         FROM INET-ADDRESS-MIB\
    InterfaceIndex                     FROM IF-MIB;\
\
ipMIB MODULE-IDENTITY\
    LAST-UPDATED "200602020000Z"\
    ORGANIZATION "IETF IPv6 MIB Revision Team"\
    CONTACT-INFO\
           "Editor:\
\
\
\
Routhier, Ed.               Standards Track                    [Page 13]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            Shawn A. Routhier\
            Interworking Labs\
            108 Whispering Pines Dr. Suite 235\
            Scotts Valley, CA 95066\
            USA\
            EMail: <sar@iwl.com>"\
    DESCRIPTION\
           "The MIB module for managing IP and ICMP implementations, but\
            excluding their management of IP routes.\
\
            Copyright (C) The Internet Society (2006).  This version of\
            this MIB module is part of RFC 4293; see the RFC itself for\
            full legal notices."\
\
    REVISION      "200602020000Z"\
    DESCRIPTION\
           "The IP version neutral revision with added IPv6 objects for\
            ND, default routers, and router advertisements.  As well as\
            being the successor to RFC 2011, this MIB is also the\
            successor to RFCs 2465 and 2466.  Published as RFC 4293."\
\
    REVISION      "199411010000Z"\
    DESCRIPTION\
           "A separate MIB module (IP-MIB) for IP and ICMP management\
            objects.  Published as RFC 2011."\
\
    REVISION      "199103310000Z"\
    DESCRIPTION\
           "The initial revision of this MIB module was part of MIB-II,\
            which was published as RFC 1213."\
    ::= { mib-2 48}\
\
--\
-- The textual conventions we define and use in this MIB.\
--\
\
IpAddressOriginTC ::= TEXTUAL-CONVENTION\
    STATUS     current\
    DESCRIPTION\
           "The origin of the address.\
\
            manual(2) indicates that the address was manually configured\
            to a specified address, e.g., by user configuration.\
\
            dhcp(4) indicates an address that was assigned to this\
            system by a DHCP server.\
\
            linklayer(5) indicates an address created by IPv6 stateless\
\
\
\
Routhier, Ed.               Standards Track                    [Page 14]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            auto-configuration.\
\
            random(6) indicates an address chosen by the system at\
            random, e.g., an IPv4 address within 169.254/16, or an RFC\
            3041 privacy address."\
    SYNTAX     INTEGER {\
        other(1),\
        manual(2),\
        dhcp(4),\
        linklayer(5),\
        random(6)\
    }\
\
IpAddressStatusTC ::= TEXTUAL-CONVENTION\
    STATUS     current\
    DESCRIPTION\
           "The status of an address.  Most of the states correspond to\
            states from the IPv6 Stateless Address Autoconfiguration\
            protocol.\
\
            The preferred(1) state indicates that this is a valid\
            address that can appear as the destination or source address\
            of a packet.\
\
            The deprecated(2) state indicates that this is a valid but\
            deprecated address that should no longer be used as a source\
            address in new communications, but packets addressed to such\
            an address are processed as expected.\
\
            The invalid(3) state indicates that this isn't a valid\
            address and it shouldn't appear as the destination or source\
            address of a packet.\
\
            The inaccessible(4) state indicates that the address is not\
            accessible because the interface to which this address is\
            assigned is not operational.\
\
            The unknown(5) state indicates that the status cannot be\
            determined for some reason.\
\
            The tentative(6) state indicates that the uniqueness of the\
            address on the link is being verified.  Addresses in this\
            state should not be used for general communication and\
            should only be used to determine the uniqueness of the\
            address.\
\
            The duplicate(7) state indicates the address has been\
            determined to be non-unique on the link and so must not be\
\
\
\
Routhier, Ed.               Standards Track                    [Page 15]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            used.\
\
            The optimistic(8) state indicates the address is available\
            for use, subject to restrictions, while its uniqueness on\
            a link is being verified.\
\
            In the absence of other information, an IPv4 address is\
            always preferred(1)."\
    REFERENCE "RFC 2462"\
    SYNTAX     INTEGER {\
        preferred(1),\
        deprecated(2),\
        invalid(3),\
        inaccessible(4),\
        unknown(5),\
        tentative(6),\
        duplicate(7),\
        optimistic(8)\
    }\
\
IpAddressPrefixOriginTC ::= TEXTUAL-CONVENTION\
    STATUS     current\
    DESCRIPTION\
           "The origin of this prefix.\
\
            manual(2) indicates a prefix that was manually configured.\
\
            wellknown(3) indicates a well-known prefix, e.g., 169.254/16\
            for IPv4 auto-configuration or fe80::/10 for IPv6 link-local\
            addresses.  Well known prefixes may be assigned by IANA,\
            the address registries, or by specification in a standards\
            track RFC.\
\
            dhcp(4) indicates a prefix that was assigned by a DHCP\
            server.\
\
            routeradv(5) indicates a prefix learned from a router\
            advertisement.\
\
            Note: while IpAddressOriginTC and IpAddressPrefixOriginTC\
            are similar, they are not identical.  The first defines how\
            an address was created, while the second defines how a\
            prefix was found."\
    SYNTAX     INTEGER {\
        other(1),\
        manual(2),\
        wellknown(3),\
        dhcp(4),\
\
\
\
Routhier, Ed.               Standards Track                    [Page 16]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
        routeradv(5)\
    }\
\
Ipv6AddressIfIdentifierTC ::= TEXTUAL-CONVENTION\
     DISPLAY-HINT "2x:"\
     STATUS       current\
     DESCRIPTION\
       "This data type is used to model IPv6 address\
       interface identifiers.  This is a binary string\
       of up to 8 octets in network byte-order."\
     SYNTAX      OCTET STRING (SIZE (0..8))\
\
--\
-- the IP general group\
-- some objects that affect all of IPv4\
--\
\
ip       OBJECT IDENTIFIER ::= { mib-2 4 }\
\
ipForwarding OBJECT-TYPE\
    SYNTAX     INTEGER {\
                    forwarding(1),    -- acting as a router\
                    notForwarding(2)  -- NOT acting as a router\
               }\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The indication of whether this entity is acting as an IPv4\
            router in respect to the forwarding of datagrams received\
            by, but not addressed to, this entity.  IPv4 routers forward\
            datagrams.  IPv4 hosts do not (except those source-routed\
            via the host).\
\
            When this object is written, the entity should save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system.\
            Note: a stronger requirement is not used because this object\
            was previously defined."\
    ::= { ip 1 }\
\
ipDefaultTTL OBJECT-TYPE\
    SYNTAX     Integer32 (1..255)\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The default value inserted into the Time-To-Live field of\
            the IPv4 header of datagrams originated at this entity,\
            whenever a TTL value is not supplied by the transport layer\
\
\
\
Routhier, Ed.               Standards Track                    [Page 17]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            protocol.\
\
            When this object is written, the entity should save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system.\
            Note: a stronger requirement is not used because this object\
            was previously defined."\
    ::= { ip 2 }\
\
ipReasmTimeout OBJECT-TYPE\
    SYNTAX     Integer32\
    UNITS      "seconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The maximum number of seconds that received fragments are\
            held while they are awaiting reassembly at this entity."\
    ::= { ip 13 }\
\
--\
-- the IPv6 general group\
-- Some objects that affect all of IPv6\
--\
\
ipv6IpForwarding OBJECT-TYPE\
    SYNTAX     INTEGER {\
                    forwarding(1),    -- acting as a router\
                    notForwarding(2)  -- NOT acting as a router\
               }\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The indication of whether this entity is acting as an IPv6\
            router on any interface in respect to the forwarding of\
            datagrams received by, but not addressed to, this entity.\
            IPv6 routers forward datagrams.  IPv6 hosts do not (except\
            those source-routed via the host).\
\
            When this object is written, the entity SHOULD save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system."\
    ::= { ip 25 }\
\
ipv6IpDefaultHopLimit OBJECT-TYPE\
    SYNTAX     Integer32 (0..255)\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 18]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The default value inserted into the Hop Limit field of the\
            IPv6 header of datagrams originated at this entity whenever\
            a Hop Limit value is not supplied by the transport layer\
            protocol.\
\
            When this object is written, the entity SHOULD save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system."\
    REFERENCE "RFC 2461 Section 6.3.2"\
    ::= { ip 26 }\
\
--\
-- IPv4 Interface Table\
--\
\
ipv4InterfaceTableLastChange OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime on the most recent occasion at which\
            a row in the ipv4InterfaceTable was added or deleted, or\
            when an ipv4InterfaceReasmMaxSize or an\
            ipv4InterfaceEnableStatus object was modified.\
\
            If new objects are added to the ipv4InterfaceTable that\
            require the ipv4InterfaceTableLastChange to be updated when\
            they are modified, they must specify that requirement in\
            their description clause."\
    ::= { ip 27 }\
\
ipv4InterfaceTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF Ipv4InterfaceEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table containing per-interface IPv4-specific\
            information."\
    ::= { ip 28 }\
\
ipv4InterfaceEntry OBJECT-TYPE\
    SYNTAX     Ipv4InterfaceEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An entry containing IPv4-specific information for a specific\
            interface."\
    INDEX { ipv4InterfaceIfIndex }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 19]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    ::= { ipv4InterfaceTable 1 }\
\
Ipv4InterfaceEntry ::= SEQUENCE {\
        ipv4InterfaceIfIndex         InterfaceIndex,\
        ipv4InterfaceReasmMaxSize    Integer32,\
        ipv4InterfaceEnableStatus    INTEGER,\
        ipv4InterfaceRetransmitTime  Unsigned32\
    }\
\
ipv4InterfaceIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipv4InterfaceEntry 1 }\
\
ipv4InterfaceReasmMaxSize OBJECT-TYPE\
    SYNTAX     Integer32 (0..65535)\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The size of the largest IPv4 datagram that this entity can\
            re-assemble from incoming IPv4 fragmented datagrams received\
            on this interface."\
    ::= { ipv4InterfaceEntry 2 }\
\
ipv4InterfaceEnableStatus OBJECT-TYPE\
    SYNTAX     INTEGER {\
                 up(1),\
                 down(2)\
    }\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The indication of whether IPv4 is enabled (up) or disabled\
            (down) on this interface.  This object does not affect the\
            state of the interface itself, only its connection to an\
            IPv4 stack.  The IF-MIB should be used to control the state\
            of the interface."\
    ::= { ipv4InterfaceEntry 3 }\
\
ipv4InterfaceRetransmitTime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "milliseconds"\
\
\
\
Routhier, Ed.               Standards Track                    [Page 20]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The time between retransmissions of ARP requests to a\
            neighbor when resolving the address or when probing the\
            reachability of a neighbor."\
    REFERENCE "RFC 1122"\
    DEFVAL { 1000 }\
    ::= { ipv4InterfaceEntry 4 }\
\
--\
-- v6 interface table\
--\
\
ipv6InterfaceTableLastChange OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime on the most recent occasion at which\
            a row in the ipv6InterfaceTable was added or deleted or when\
            an ipv6InterfaceReasmMaxSize, ipv6InterfaceIdentifier,\
            ipv6InterfaceEnableStatus, ipv6InterfaceReachableTime,\
            ipv6InterfaceRetransmitTime, or ipv6InterfaceForwarding\
            object was modified.\
\
            If new objects are added to the ipv6InterfaceTable that\
            require the ipv6InterfaceTableLastChange to be updated when\
            they are modified, they must specify that requirement in\
            their description clause."\
    ::= { ip 29 }\
\
ipv6InterfaceTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF Ipv6InterfaceEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table containing per-interface IPv6-specific\
            information."\
    ::= { ip 30 }\
\
ipv6InterfaceEntry OBJECT-TYPE\
    SYNTAX     Ipv6InterfaceEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An entry containing IPv6-specific information for a given\
            interface."\
\
\
\
Routhier, Ed.               Standards Track                    [Page 21]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    INDEX { ipv6InterfaceIfIndex }\
    ::= { ipv6InterfaceTable 1 }\
\
Ipv6InterfaceEntry ::= SEQUENCE {\
        ipv6InterfaceIfIndex         InterfaceIndex,\
        ipv6InterfaceReasmMaxSize    Unsigned32,\
        ipv6InterfaceIdentifier      Ipv6AddressIfIdentifierTC,\
        ipv6InterfaceEnableStatus    INTEGER,\
        ipv6InterfaceReachableTime   Unsigned32,\
        ipv6InterfaceRetransmitTime  Unsigned32,\
        ipv6InterfaceForwarding      INTEGER\
    }\
\
ipv6InterfaceIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipv6InterfaceEntry 1 }\
\
ipv6InterfaceReasmMaxSize OBJECT-TYPE\
    SYNTAX     Unsigned32 (1500..65535)\
    UNITS      "octets"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The size of the largest IPv6 datagram that this entity can\
            re-assemble from incoming IPv6 fragmented datagrams received\
            on this interface."\
    ::= { ipv6InterfaceEntry 2 }\
\
ipv6InterfaceIdentifier OBJECT-TYPE\
    SYNTAX     Ipv6AddressIfIdentifierTC\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The Interface Identifier for this interface.  The Interface\
            Identifier is combined with an address prefix to form an\
            interface address.\
\
            By default, the Interface Identifier is auto-configured\
            according to the rules of the link type to which this\
            interface is attached.\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 22]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            A zero length identifier may be used where appropriate.  One\
            possible example is a loopback interface."\
    ::= { ipv6InterfaceEntry 3 }\
\
-- This object ID is reserved as it was used in earlier versions of\
-- the MIB module.  In theory, OIDs are not assigned until the\
-- specification is released as an RFC; however, as some companies\
-- may have shipped code based on earlier versions of the MIB, it\
-- seems best to reserve this OID.  This OID had been\
-- ipv6InterfacePhysicalAddress.\
-- ::= { ipv6InterfaceEntry 4}\
\
ipv6InterfaceEnableStatus OBJECT-TYPE\
    SYNTAX     INTEGER {\
                 up(1),\
                 down(2)\
    }\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The indication of whether IPv6 is enabled (up) or disabled\
            (down) on this interface.  This object does not affect the\
            state of the interface itself, only its connection to an\
            IPv6 stack.  The IF-MIB should be used to control the state\
            of the interface.\
\
            When this object is written, the entity SHOULD save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system."\
    ::= { ipv6InterfaceEntry 5 }\
\
ipv6InterfaceReachableTime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "milliseconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The time a neighbor is considered reachable after receiving\
            a reachability confirmation."\
    REFERENCE "RFC 2461, Section 6.3.2"\
    ::= { ipv6InterfaceEntry 6 }\
\
ipv6InterfaceRetransmitTime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "milliseconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 23]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The time between retransmissions of Neighbor Solicitation\
            messages to a neighbor when resolving the address or when\
            probing the reachability of a neighbor."\
    REFERENCE "RFC 2461, Section 6.3.2"\
    ::= { ipv6InterfaceEntry 7 }\
\
ipv6InterfaceForwarding OBJECT-TYPE\
    SYNTAX     INTEGER {\
                    forwarding(1),    -- acting as a router\
                    notForwarding(2)  -- NOT acting as a router\
               }\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "The indication of whether this entity is acting as an IPv6\
            router on this interface with respect to the forwarding of\
            datagrams received by, but not addressed to, this entity.\
            IPv6 routers forward datagrams.  IPv6 hosts do not (except\
            those source-routed via the host).\
\
            This object is constrained by ipv6IpForwarding and is\
            ignored if ipv6IpForwarding is set to notForwarding.  Those\
            systems that do not provide per-interface control of the\
            forwarding function should set this object to forwarding for\
            all interfaces and allow the ipv6IpForwarding object to\
            control the forwarding capability.\
\
            When this object is written, the entity SHOULD save the\
            change to non-volatile storage and restore the object from\
            non-volatile storage upon re-initialization of the system."\
    ::= { ipv6InterfaceEntry 8 }\
\
--\
-- Per-Interface or System-Wide IP statistics.\
--\
-- The following two tables, ipSystemStatsTable and ipIfStatsTable,\
-- are intended to provide the same counters at different granularities.\
-- The ipSystemStatsTable provides system wide counters aggregating\
-- the traffic counters for all interfaces for a given address type.\
-- The ipIfStatsTable provides the same counters but for specific\
-- interfaces rather than as an aggregate.\
--\
-- Note well: If a system provides both system-wide and interface-\
-- specific values, the system-wide value may not be equal to the sum\
-- of the interface-specific values across all interfaces due to e.g.,\
-- dynamic interface creation/deletion.\
--\
-- Note well: Both of these tables contain some items that are\
\
\
\
Routhier, Ed.               Standards Track                    [Page 24]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
-- represented by two objects, representing the value in either 32\
-- or 64 bits.  For those objects, the 32-bit value MUST be the low\
-- order 32 bits of the 64-bit value.  Also note that the 32-bit\
-- counters must be included when the 64-bit counters are included.\
\
ipTrafficStats OBJECT IDENTIFIER ::= { ip 31 }\
\
ipSystemStatsTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpSystemStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table containing system wide, IP version specific\
            traffic statistics.  This table and the ipIfStatsTable\
            contain similar objects whose difference is in their\
            granularity.  Where this table contains system wide traffic\
            statistics, the ipIfStatsTable contains the same statistics\
            but counted on a per-interface basis."\
    ::= { ipTrafficStats 1 }\
\
ipSystemStatsEntry OBJECT-TYPE\
    SYNTAX     IpSystemStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "A statistics entry containing system-wide objects for a\
            particular IP version."\
    INDEX { ipSystemStatsIPVersion }\
    ::= { ipSystemStatsTable 1 }\
\
IpSystemStatsEntry ::= SEQUENCE {\
        ipSystemStatsIPVersion           InetVersion,\
        ipSystemStatsInReceives          Counter32,\
        ipSystemStatsHCInReceives        Counter64,\
        ipSystemStatsInOctets            Counter32,\
        ipSystemStatsHCInOctets          Counter64,\
        ipSystemStatsInHdrErrors         Counter32,\
        ipSystemStatsInNoRoutes          Counter32,\
        ipSystemStatsInAddrErrors        Counter32,\
        ipSystemStatsInUnknownProtos     Counter32,\
        ipSystemStatsInTruncatedPkts     Counter32,\
        ipSystemStatsInForwDatagrams     Counter32,\
        ipSystemStatsHCInForwDatagrams   Counter64,\
        ipSystemStatsReasmReqds          Counter32,\
        ipSystemStatsReasmOKs            Counter32,\
        ipSystemStatsReasmFails          Counter32,\
        ipSystemStatsInDiscards          Counter32,\
        ipSystemStatsInDelivers          Counter32,\
\
\
\
Routhier, Ed.               Standards Track                    [Page 25]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
        ipSystemStatsHCInDelivers        Counter64,\
        ipSystemStatsOutRequests         Counter32,\
        ipSystemStatsHCOutRequests       Counter64,\
        ipSystemStatsOutNoRoutes         Counter32,\
        ipSystemStatsOutForwDatagrams    Counter32,\
        ipSystemStatsHCOutForwDatagrams  Counter64,\
        ipSystemStatsOutDiscards         Counter32,\
        ipSystemStatsOutFragReqds        Counter32,\
        ipSystemStatsOutFragOKs          Counter32,\
        ipSystemStatsOutFragFails        Counter32,\
        ipSystemStatsOutFragCreates      Counter32,\
        ipSystemStatsOutTransmits        Counter32,\
        ipSystemStatsHCOutTransmits      Counter64,\
        ipSystemStatsOutOctets           Counter32,\
        ipSystemStatsHCOutOctets         Counter64,\
        ipSystemStatsInMcastPkts         Counter32,\
        ipSystemStatsHCInMcastPkts       Counter64,\
        ipSystemStatsInMcastOctets       Counter32,\
        ipSystemStatsHCInMcastOctets     Counter64,\
        ipSystemStatsOutMcastPkts        Counter32,\
        ipSystemStatsHCOutMcastPkts      Counter64,\
        ipSystemStatsOutMcastOctets      Counter32,\
        ipSystemStatsHCOutMcastOctets    Counter64,\
        ipSystemStatsInBcastPkts         Counter32,\
        ipSystemStatsHCInBcastPkts       Counter64,\
        ipSystemStatsOutBcastPkts        Counter32,\
        ipSystemStatsHCOutBcastPkts      Counter64,\
        ipSystemStatsDiscontinuityTime   TimeStamp,\
        ipSystemStatsRefreshRate         Unsigned32\
    }\
\
ipSystemStatsIPVersion OBJECT-TYPE\
    SYNTAX     InetVersion\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP version of this row."\
    ::= { ipSystemStatsEntry 1 }\
\
-- This object ID is reserved to allow the IDs for this table's objects\
-- to align with the objects in the ipIfStatsTable.\
-- ::= { ipSystemStatsEntry 2 }\
\
ipSystemStatsInReceives OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 26]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The total number of input IP datagrams received, including\
            those received in error.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 3 }\
\
ipSystemStatsHCInReceives OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of input IP datagrams received, including\
            those received in error.  This object counts the same\
            datagrams as ipSystemStatsInReceives, but allows for larger\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 4 }\
\
ipSystemStatsInOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in input IP datagrams,\
            including those received in error.  Octets from datagrams\
            counted in ipSystemStatsInReceives MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 5 }\
\
ipSystemStatsHCInOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in input IP datagrams,\
            including those received in error.  This object counts the\
            same octets as ipSystemStatsInOctets, but allows for larger\
\
\
\
Routhier, Ed.               Standards Track                    [Page 27]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 6 }\
\
ipSystemStatsInHdrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded due to errors in\
            their IP headers, including version number mismatch, other\
            format errors, hop count exceeded, errors discovered in\
            processing their IP options, etc.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 7 }\
\
ipSystemStatsInNoRoutes OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because no route\
            could be found to transmit them to their destination.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 8 }\
\
ipSystemStatsInAddrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because the IP\
            address in their IP header's destination field was not a\
            valid address to be received at this entity.  This count\
            includes invalid addresses (e.g., ::0).  For entities\
            that are not IP routers and therefore do not forward\
\
\
\
Routhier, Ed.               Standards Track                    [Page 28]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            datagrams, this counter includes datagrams discarded\
            because the destination address was not a local address.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 9 }\
\
ipSystemStatsInUnknownProtos OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of locally-addressed IP datagrams received\
            successfully but discarded because of an unknown or\
            unsupported protocol.\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 10 }\
\
ipSystemStatsInTruncatedPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because the\
            datagram frame didn't carry enough data.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 11 }\
\
ipSystemStatsInForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 29]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The number of input datagrams for which this entity was not\
            their final IP destination and for which this entity\
            attempted to find a route to forward them to that final\
            destination.  In entities that do not act as IP routers,\
            this counter will include only those datagrams that were\
            Source-Routed via this entity, and the Source-Route\
            processing was successful.\
\
            When tracking interface statistics, the counter of the\
            incoming interface is incremented for each datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 12 }\
\
ipSystemStatsHCInForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input datagrams for which this entity was not\
            their final IP destination and for which this entity\
            attempted to find a route to forward them to that final\
            destination.  This object counts the same packets as\
            ipSystemStatsInForwDatagrams, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 13 }\
\
ipSystemStatsReasmReqds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP fragments received that needed to be\
            reassembled at this interface.\
\
            When tracking interface statistics, the counter of the\
            interface to which these fragments were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the fragments.\
\
            Discontinuities in the value of this counter can occur at\
\
\
\
Routhier, Ed.               Standards Track                    [Page 30]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 14 }\
\
ipSystemStatsReasmOKs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams successfully reassembled.\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 15 }\
\
ipSystemStatsReasmFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of failures detected by the IP re-assembly\
            algorithm (for whatever reason: timed out, errors, etc.).\
            Note that this is not necessarily a count of discarded IP\
            fragments since some algorithms (notably the algorithm in\
            RFC 815) can lose track of the number of fragments by\
            combining them as they are received.\
\
            When tracking interface statistics, the counter of the\
            interface to which these fragments were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the fragments.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 16 }\
\
ipSystemStatsInDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
\
\
\
Routhier, Ed.               Standards Track                    [Page 31]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams for which no problems were\
            encountered to prevent their continued processing, but\
            were discarded (e.g., for lack of buffer space).  Note that\
            this counter does not include any datagrams discarded while\
            awaiting re-assembly.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 17 }\
\
ipSystemStatsInDelivers OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of datagrams successfully delivered to IP\
            user-protocols (including ICMP).\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 18 }\
\
ipSystemStatsHCInDelivers OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of datagrams successfully delivered to IP\
            user-protocols (including ICMP).  This object counts the\
            same packets as ipSystemStatsInDelivers, but allows for\
            larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
\
\
\
Routhier, Ed.               Standards Track                    [Page 32]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    ::= { ipSystemStatsEntry 19 }\
\
ipSystemStatsOutRequests OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that local IP user-\
            protocols (including ICMP) supplied to IP in requests for\
            transmission.  Note that this counter does not include any\
            datagrams counted in ipSystemStatsOutForwDatagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 20 }\
\
ipSystemStatsHCOutRequests OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that local IP user-\
            protocols (including ICMP) supplied to IP in requests for\
            transmission.  This object counts the same packets as\
            ipSystemStatsOutRequests, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 21 }\
\
ipSystemStatsOutNoRoutes OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of locally generated IP datagrams discarded\
            because no route could be found to transmit them to their\
            destination.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 22 }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 33]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
ipSystemStatsOutForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of datagrams for which this entity was not their\
            final IP destination and for which it was successful in\
            finding a path to their final destination.  In entities\
            that do not act as IP routers, this counter will include\
            only those datagrams that were Source-Routed via this\
            entity, and the Source-Route processing was successful.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            forwarded datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 23 }\
\
ipSystemStatsHCOutForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of datagrams for which this entity was not their\
            final IP destination and for which it was successful in\
            finding a path to their final destination.  This object\
            counts the same packets as ipSystemStatsOutForwDatagrams,\
            but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 24 }\
\
ipSystemStatsOutDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of output IP datagrams for which no problem was\
            encountered to prevent their transmission to their\
            destination, but were discarded (e.g., for lack of\
            buffer space).  Note that this counter would include\
\
\
\
Routhier, Ed.               Standards Track                    [Page 34]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            datagrams counted in ipSystemStatsOutForwDatagrams if any\
            such datagrams met this (discretionary) discard criterion.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 25 }\
\
ipSystemStatsOutFragReqds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that would require fragmentation\
            in order to be transmitted.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 26 }\
\
ipSystemStatsOutFragOKs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that have been successfully\
            fragmented.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 27 }\
\
ipSystemStatsOutFragFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
\
\
\
Routhier, Ed.               Standards Track                    [Page 35]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that have been discarded because\
            they needed to be fragmented but could not be.  This\
            includes IPv4 packets that have the DF bit set and IPv6\
            packets that are being forwarded and exceed the outgoing\
            link MTU.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for an unsuccessfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 28 }\
\
ipSystemStatsOutFragCreates OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of output datagram fragments that have been\
            generated as a result of IP fragmentation.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 29 }\
\
ipSystemStatsOutTransmits OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that this entity supplied\
            to the lower layers for transmission.  This includes\
            datagrams generated locally and those forwarded by this\
            entity.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
\
\
\
Routhier, Ed.               Standards Track                    [Page 36]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 30 }\
\
ipSystemStatsHCOutTransmits OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that this entity supplied\
            to the lower layers for transmission.  This object counts\
            the same datagrams as ipSystemStatsOutTransmits, but allows\
            for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 31 }\
\
ipSystemStatsOutOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets in IP datagrams delivered to the\
            lower layers for transmission.  Octets from datagrams\
            counted in ipSystemStatsOutTransmits MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 32 }\
\
ipSystemStatsHCOutOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets in IP datagrams delivered to the\
            lower layers for transmission.  This objects counts the same\
            octets as ipSystemStatsOutOctets, but allows for larger\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
\
\
\
Routhier, Ed.               Standards Track                    [Page 37]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 33 }\
\
ipSystemStatsInMcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams received.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 34 }\
\
ipSystemStatsHCInMcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams received.  This object\
            counts the same datagrams as ipSystemStatsInMcastPkts but\
            allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 35 }\
\
ipSystemStatsInMcastOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in IP multicast\
            datagrams.  Octets from datagrams counted in\
            ipSystemStatsInMcastPkts MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 36 }\
\
ipSystemStatsHCInMcastOctets OBJECT-TYPE\
    SYNTAX     Counter64\
\
\
\
Routhier, Ed.               Standards Track                    [Page 38]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in IP multicast\
            datagrams.  This object counts the same octets as\
            ipSystemStatsInMcastOctets, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 37 }\
\
ipSystemStatsOutMcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams transmitted.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 38 }\
\
ipSystemStatsHCOutMcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams transmitted.  This\
            object counts the same datagrams as\
            ipSystemStatsOutMcastPkts, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 39 }\
\
ipSystemStatsOutMcastOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets transmitted in IP multicast\
            datagrams.  Octets from datagrams counted in\
\
\
\
Routhier, Ed.               Standards Track                    [Page 39]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipSystemStatsOutMcastPkts MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 40 }\
\
ipSystemStatsHCOutMcastOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets transmitted in IP multicast\
            datagrams.  This object counts the same octets as\
            ipSystemStatsOutMcastOctets, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 41 }\
\
ipSystemStatsInBcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams received.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 42 }\
\
ipSystemStatsHCInBcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams received.  This object\
            counts the same datagrams as ipSystemStatsInBcastPkts but\
            allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
\
\
\
Routhier, Ed.               Standards Track                    [Page 40]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 43 }\
\
ipSystemStatsOutBcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams transmitted.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 44 }\
\
ipSystemStatsHCOutBcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams transmitted.  This\
            object counts the same datagrams as\
            ipSystemStatsOutBcastPkts, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipSystemStatsDiscontinuityTime."\
    ::= { ipSystemStatsEntry 45 }\
\
ipSystemStatsDiscontinuityTime OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime on the most recent occasion at which\
            any one or more of this entry's counters suffered a\
            discontinuity.\
\
            If no such discontinuities have occurred since the last re-\
            initialization of the local management subsystem, then this\
            object contains a zero value."\
    ::= { ipSystemStatsEntry 46 }\
\
ipSystemStatsRefreshRate OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "milli-seconds"\
\
\
\
Routhier, Ed.               Standards Track                    [Page 41]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The minimum reasonable polling interval for this entry.\
            This object provides an indication of the minimum amount of\
            time required to update the counters in this entry."\
    ::= { ipSystemStatsEntry 47 }\
\
ipIfStatsTableLastChange OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime on the most recent occasion at which\
            a row in the ipIfStatsTable was added or deleted.\
\
            If new objects are added to the ipIfStatsTable that require\
            the ipIfStatsTableLastChange to be updated when they are\
            modified, they must specify that requirement in their\
            description clause."\
    ::= { ipTrafficStats 2 }\
\
ipIfStatsTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpIfStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table containing per-interface traffic statistics.  This\
            table and the ipSystemStatsTable contain similar objects\
            whose difference is in their granularity.  Where this table\
            contains per-interface statistics, the ipSystemStatsTable\
            contains the same statistics, but counted on a system wide\
            basis."\
    ::= { ipTrafficStats 3 }\
\
ipIfStatsEntry OBJECT-TYPE\
    SYNTAX     IpIfStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An interface statistics entry containing objects for a\
            particular interface and version of IP."\
    INDEX { ipIfStatsIPVersion, ipIfStatsIfIndex }\
    ::= { ipIfStatsTable 1 }\
\
IpIfStatsEntry ::= SEQUENCE {\
        ipIfStatsIPVersion           InetVersion,\
        ipIfStatsIfIndex             InterfaceIndex,\
\
\
\
Routhier, Ed.               Standards Track                    [Page 42]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
        ipIfStatsInReceives          Counter32,\
        ipIfStatsHCInReceives        Counter64,\
        ipIfStatsInOctets            Counter32,\
        ipIfStatsHCInOctets          Counter64,\
        ipIfStatsInHdrErrors         Counter32,\
        ipIfStatsInNoRoutes          Counter32,\
        ipIfStatsInAddrErrors        Counter32,\
        ipIfStatsInUnknownProtos     Counter32,\
        ipIfStatsInTruncatedPkts     Counter32,\
        ipIfStatsInForwDatagrams     Counter32,\
        ipIfStatsHCInForwDatagrams   Counter64,\
        ipIfStatsReasmReqds          Counter32,\
        ipIfStatsReasmOKs            Counter32,\
        ipIfStatsReasmFails          Counter32,\
        ipIfStatsInDiscards          Counter32,\
        ipIfStatsInDelivers          Counter32,\
        ipIfStatsHCInDelivers        Counter64,\
        ipIfStatsOutRequests         Counter32,\
        ipIfStatsHCOutRequests       Counter64,\
        ipIfStatsOutForwDatagrams    Counter32,\
        ipIfStatsHCOutForwDatagrams  Counter64,\
        ipIfStatsOutDiscards         Counter32,\
        ipIfStatsOutFragReqds        Counter32,\
        ipIfStatsOutFragOKs          Counter32,\
        ipIfStatsOutFragFails        Counter32,\
        ipIfStatsOutFragCreates      Counter32,\
        ipIfStatsOutTransmits        Counter32,\
        ipIfStatsHCOutTransmits      Counter64,\
        ipIfStatsOutOctets           Counter32,\
        ipIfStatsHCOutOctets         Counter64,\
        ipIfStatsInMcastPkts         Counter32,\
        ipIfStatsHCInMcastPkts       Counter64,\
        ipIfStatsInMcastOctets       Counter32,\
        ipIfStatsHCInMcastOctets     Counter64,\
        ipIfStatsOutMcastPkts        Counter32,\
        ipIfStatsHCOutMcastPkts      Counter64,\
        ipIfStatsOutMcastOctets      Counter32,\
        ipIfStatsHCOutMcastOctets    Counter64,\
        ipIfStatsInBcastPkts         Counter32,\
        ipIfStatsHCInBcastPkts       Counter64,\
        ipIfStatsOutBcastPkts        Counter32,\
        ipIfStatsHCOutBcastPkts      Counter64,\
        ipIfStatsDiscontinuityTime   TimeStamp,\
        ipIfStatsRefreshRate         Unsigned32\
    }\
\
ipIfStatsIPVersion OBJECT-TYPE\
    SYNTAX     InetVersion\
\
\
\
Routhier, Ed.               Standards Track                    [Page 43]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP version of this row."\
    ::= { ipIfStatsEntry 1 }\
\
ipIfStatsIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipIfStatsEntry 2 }\
\
ipIfStatsInReceives OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of input IP datagrams received, including\
            those received in error.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 3 }\
\
ipIfStatsHCInReceives OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of input IP datagrams received, including\
            those received in error.  This object counts the same\
            datagrams as ipIfStatsInReceives, but allows for larger\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 4 }\
\
ipIfStatsInOctets OBJECT-TYPE\
\
\
\
Routhier, Ed.               Standards Track                    [Page 44]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in input IP datagrams,\
            including those received in error.  Octets from datagrams\
            counted in ipIfStatsInReceives MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 5 }\
\
ipIfStatsHCInOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in input IP datagrams,\
            including those received in error.  This object counts the\
            same octets as ipIfStatsInOctets, but allows for larger\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 6 }\
\
ipIfStatsInHdrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded due to errors in\
            their IP headers, including version number mismatch, other\
            format errors, hop count exceeded, errors discovered in\
            processing their IP options, etc.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 7 }\
\
ipIfStatsInNoRoutes OBJECT-TYPE\
    SYNTAX     Counter32\
\
\
\
Routhier, Ed.               Standards Track                    [Page 45]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because no route\
            could be found to transmit them to their destination.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 8 }\
\
ipIfStatsInAddrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because the IP\
            address in their IP header's destination field was not a\
            valid address to be received at this entity.  This count\
            includes invalid addresses (e.g., ::0).  For entities that\
            are not IP routers and therefore do not forward datagrams,\
            this counter includes datagrams discarded because the\
            destination address was not a local address.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 9 }\
\
ipIfStatsInUnknownProtos OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of locally-addressed IP datagrams received\
            successfully but discarded because of an unknown or\
            unsupported protocol.\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
\
\
\
Routhier, Ed.               Standards Track                    [Page 46]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 10 }\
\
ipIfStatsInTruncatedPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams discarded because the\
            datagram frame didn't carry enough data.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 11 }\
\
ipIfStatsInForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input datagrams for which this entity was not\
            their final IP destination and for which this entity\
            attempted to find a route to forward them to that final\
            destination.  In entities that do not act as IP routers,\
            this counter will include only those datagrams that were\
            Source-Routed via this entity, and the Source-Route\
            processing was successful.\
\
            When tracking interface statistics, the counter of the\
            incoming interface is incremented for each datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 12 }\
\
ipIfStatsHCInForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input datagrams for which this entity was not\
            their final IP destination and for which this entity\
            attempted to find a route to forward them to that final\
            destination.  This object counts the same packets as\
\
\
\
Routhier, Ed.               Standards Track                    [Page 47]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipIfStatsInForwDatagrams, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 13 }\
\
ipIfStatsReasmReqds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP fragments received that needed to be\
            reassembled at this interface.\
\
            When tracking interface statistics, the counter of the\
            interface to which these fragments were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the fragments.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 14 }\
\
ipIfStatsReasmOKs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams successfully reassembled.\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 15 }\
\
ipIfStatsReasmFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
\
\
\
Routhier, Ed.               Standards Track                    [Page 48]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "The number of failures detected by the IP re-assembly\
            algorithm (for whatever reason: timed out, errors, etc.).\
            Note that this is not necessarily a count of discarded IP\
            fragments since some algorithms (notably the algorithm in\
            RFC 815) can lose track of the number of fragments by\
            combining them as they are received.\
\
            When tracking interface statistics, the counter of the\
            interface to which these fragments were addressed is\
            incremented.  This interface might not be the same as the\
            input interface for some of the fragments.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 16 }\
\
ipIfStatsInDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input IP datagrams for which no problems were\
            encountered to prevent their continued processing, but\
            were discarded (e.g., for lack of buffer space).  Note that\
            this counter does not include any datagrams discarded while\
            awaiting re-assembly.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 17 }\
\
ipIfStatsInDelivers OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of datagrams successfully delivered to IP\
            user-protocols (including ICMP).\
\
            When tracking interface statistics, the counter of the\
            interface to which these datagrams were addressed is\
            incremented.  This interface might not be the same as the\
\
\
\
Routhier, Ed.               Standards Track                    [Page 49]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            input interface for some of the datagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 18 }\
\
ipIfStatsHCInDelivers OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of datagrams successfully delivered to IP\
            user-protocols (including ICMP).  This object counts the\
            same packets as ipIfStatsInDelivers, but allows for larger\
            values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 19 }\
\
ipIfStatsOutRequests OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that local IP user-\
            protocols (including ICMP) supplied to IP in requests for\
            transmission.  Note that this counter does not include any\
            datagrams counted in ipIfStatsOutForwDatagrams.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 20 }\
\
ipIfStatsHCOutRequests OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that local IP user-\
            protocols (including ICMP) supplied to IP in requests for\
            transmission.  This object counts the same packets as\
\
\
\
Routhier, Ed.               Standards Track                    [Page 50]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipIfStatsOutRequests, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 21 }\
\
-- This object ID is reserved to allow the IDs for this table's objects\
-- to align with the objects in the ipSystemStatsTable.\
-- ::= {ipIfStatsEntry 22}\
\
ipIfStatsOutForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of datagrams for which this entity was not their\
            final IP destination and for which it was successful in\
            finding a path to their final destination.  In entities\
            that do not act as IP routers, this counter will include\
            only those datagrams that were Source-Routed via this\
            entity, and the Source-Route processing was successful.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            forwarded datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 23 }\
\
ipIfStatsHCOutForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of datagrams for which this entity was not their\
            final IP destination and for which it was successful in\
            finding a path to their final destination.  This object\
            counts the same packets as ipIfStatsOutForwDatagrams, but\
            allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
\
\
\
Routhier, Ed.               Standards Track                    [Page 51]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 24 }\
\
ipIfStatsOutDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of output IP datagrams for which no problem was\
            encountered to prevent their transmission to their\
            destination, but were discarded (e.g., for lack of\
            buffer space).  Note that this counter would include\
            datagrams counted in ipIfStatsOutForwDatagrams if any such\
            datagrams met this (discretionary) discard criterion.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 25 }\
\
ipIfStatsOutFragReqds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that would require fragmentation\
            in order to be transmitted.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 26 }\
\
ipIfStatsOutFragOKs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that have been successfully\
            fragmented.\
\
            When tracking interface statistics, the counter of the\
\
\
\
Routhier, Ed.               Standards Track                    [Page 52]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 27 }\
\
ipIfStatsOutFragFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP datagrams that have been discarded because\
            they needed to be fragmented but could not be.  This\
            includes IPv4 packets that have the DF bit set and IPv6\
            packets that are being forwarded and exceed the outgoing\
            link MTU.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for an unsuccessfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 28 }\
\
ipIfStatsOutFragCreates OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of output datagram fragments that have been\
            generated as a result of IP fragmentation.\
\
            When tracking interface statistics, the counter of the\
            outgoing interface is incremented for a successfully\
            fragmented datagram.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 29 }\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 53]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
ipIfStatsOutTransmits OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that this entity supplied\
            to the lower layers for transmission.  This includes\
            datagrams generated locally and those forwarded by this\
            entity.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 30 }\
\
ipIfStatsHCOutTransmits OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of IP datagrams that this entity supplied\
            to the lower layers for transmission.  This object counts\
            the same datagrams as ipIfStatsOutTransmits, but allows for\
            larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 31 }\
\
ipIfStatsOutOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets in IP datagrams delivered to the\
            lower layers for transmission.  Octets from datagrams\
            counted in ipIfStatsOutTransmits MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 32 }\
\
ipIfStatsHCOutOctets OBJECT-TYPE\
\
\
\
Routhier, Ed.               Standards Track                    [Page 54]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets in IP datagrams delivered to the\
            lower layers for transmission.  This objects counts the same\
            octets as ipIfStatsOutOctets, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 33 }\
\
ipIfStatsInMcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams received.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 34 }\
\
ipIfStatsHCInMcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams received.  This object\
            counts the same datagrams as ipIfStatsInMcastPkts, but\
            allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 35 }\
\
ipIfStatsInMcastOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in IP multicast\
\
\
\
Routhier, Ed.               Standards Track                    [Page 55]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            datagrams.  Octets from datagrams counted in\
            ipIfStatsInMcastPkts MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 36 }\
\
ipIfStatsHCInMcastOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets received in IP multicast\
            datagrams.  This object counts the same octets as\
            ipIfStatsInMcastOctets, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 37 }\
\
ipIfStatsOutMcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams transmitted.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 38 }\
\
ipIfStatsHCOutMcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP multicast datagrams transmitted.  This\
            object counts the same datagrams as ipIfStatsOutMcastPkts,\
            but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
\
\
\
Routhier, Ed.               Standards Track                    [Page 56]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 39 }\
\
ipIfStatsOutMcastOctets OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets transmitted in IP multicast\
            datagrams.  Octets from datagrams counted in\
            ipIfStatsOutMcastPkts MUST be counted here.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 40 }\
\
ipIfStatsHCOutMcastOctets OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of octets transmitted in IP multicast\
            datagrams.  This object counts the same octets as\
            ipIfStatsOutMcastOctets, but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 41 }\
\
ipIfStatsInBcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams received.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 42 }\
\
ipIfStatsHCInBcastPkts OBJECT-TYPE\
\
\
\
Routhier, Ed.               Standards Track                    [Page 57]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams received.  This object\
            counts the same datagrams as ipIfStatsInBcastPkts, but\
            allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 43 }\
\
ipIfStatsOutBcastPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams transmitted.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 44 }\
\
ipIfStatsHCOutBcastPkts OBJECT-TYPE\
    SYNTAX     Counter64\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of IP broadcast datagrams transmitted.  This\
            object counts the same datagrams as ipIfStatsOutBcastPkts,\
            but allows for larger values.\
\
            Discontinuities in the value of this counter can occur at\
            re-initialization of the management system, and at other\
            times as indicated by the value of\
            ipIfStatsDiscontinuityTime."\
    ::= { ipIfStatsEntry 45 }\
\
ipIfStatsDiscontinuityTime OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime on the most recent occasion at which\
\
\
\
Routhier, Ed.               Standards Track                    [Page 58]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            any one or more of this entry's counters suffered a\
            discontinuity.\
\
            If no such discontinuities have occurred since the last re-\
            initialization of the local management subsystem, then this\
            object contains a zero value."\
    ::= { ipIfStatsEntry 46 }\
\
ipIfStatsRefreshRate OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS "milli-seconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The minimum reasonable polling interval for this entry.\
            This object provides an indication of the minimum amount of\
            time required to update the counters in this entry."\
    ::= { ipIfStatsEntry 47 }\
\
--\
-- Internet Address Prefix table\
--\
\
ipAddressPrefixTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpAddressPrefixEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "This table allows the user to determine the source of an IP\
            address or set of IP addresses, and allows other tables to\
            share the information via pointer rather than by copying.\
\
            For example, when the node configures both a unicast and\
            anycast address for a prefix, the ipAddressPrefix objects\
            for those addresses will point to a single row in this\
            table.\
\
            This table primarily provides support for IPv6 prefixes, and\
            several of the objects are less meaningful for IPv4.  The\
            table continues to allow IPv4 addresses to allow future\
            flexibility.  In order to promote a common configuration,\
            this document includes suggestions for default values for\
            IPv4 prefixes.  Each of these values may be overridden if an\
            object is meaningful to the node.\
\
            All prefixes used by this entity should be included in this\
            table independent of how the entity learned the prefix.\
            (This table isn't limited to prefixes learned from router\
\
\
\
Routhier, Ed.               Standards Track                    [Page 59]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            advertisements.)"\
    ::= { ip 32 }\
\
ipAddressPrefixEntry OBJECT-TYPE\
    SYNTAX     IpAddressPrefixEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An entry in the ipAddressPrefixTable."\
    INDEX    { ipAddressPrefixIfIndex, ipAddressPrefixType,\
               ipAddressPrefixPrefix, ipAddressPrefixLength }\
    ::= { ipAddressPrefixTable 1 }\
\
IpAddressPrefixEntry ::= SEQUENCE {\
        ipAddressPrefixIfIndex               InterfaceIndex,\
        ipAddressPrefixType                  InetAddressType,\
        ipAddressPrefixPrefix                InetAddress,\
        ipAddressPrefixLength                InetAddressPrefixLength,\
        ipAddressPrefixOrigin                IpAddressPrefixOriginTC,\
        ipAddressPrefixOnLinkFlag            TruthValue,\
        ipAddressPrefixAutonomousFlag        TruthValue,\
        ipAddressPrefixAdvPreferredLifetime  Unsigned32,\
        ipAddressPrefixAdvValidLifetime      Unsigned32\
    }\
\
ipAddressPrefixIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface on\
            which this prefix is configured.  The interface identified\
            by a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipAddressPrefixEntry 1 }\
\
ipAddressPrefixType OBJECT-TYPE\
    SYNTAX     InetAddressType\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The address type of ipAddressPrefix."\
    ::= { ipAddressPrefixEntry 2 }\
\
ipAddressPrefixPrefix OBJECT-TYPE\
    SYNTAX     InetAddress\
    MAX-ACCESS not-accessible\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 60]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The address prefix.  The address type of this object is\
            specified in ipAddressPrefixType.  The length of this object\
            is the standard length for objects of that type (4 or 16\
            bytes).  Any bits after ipAddressPrefixLength must be zero.\
\
            Implementors need to be aware that, if the size of\
            ipAddressPrefixPrefix exceeds 114 octets, then OIDS of\
            instances of columns in this row will have more than 128\
            sub-identifiers and cannot be accessed using SNMPv1,\
            SNMPv2c, or SNMPv3."\
    ::= { ipAddressPrefixEntry 3 }\
\
ipAddressPrefixLength OBJECT-TYPE\
    SYNTAX     InetAddressPrefixLength\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The prefix length associated with this prefix.\
\
            The value 0 has no special meaning for this object.  It\
            simply refers to address '::/0'."\
    ::= { ipAddressPrefixEntry 4 }\
\
ipAddressPrefixOrigin OBJECT-TYPE\
    SYNTAX     IpAddressPrefixOriginTC\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The origin of this prefix."\
    ::= { ipAddressPrefixEntry 5 }\
\
ipAddressPrefixOnLinkFlag OBJECT-TYPE\
    SYNTAX     TruthValue\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "This object has the value 'true(1)', if this prefix can be\
            used for on-link determination; otherwise, the value is\
            'false(2)'.\
\
            The default for IPv4 prefixes is 'true(1)'."\
    REFERENCE "For IPv6 RFC 2461, especially sections 2 and 4.6.2 and\
               RFC 2462"\
    ::= { ipAddressPrefixEntry 6 }\
\
ipAddressPrefixAutonomousFlag OBJECT-TYPE\
    SYNTAX     TruthValue\
\
\
\
Routhier, Ed.               Standards Track                    [Page 61]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "Autonomous address configuration flag.  When true(1),\
            indicates that this prefix can be used for autonomous\
            address configuration (i.e., can be used to form a local\
            interface address).  If false(2), it is not used to auto-\
            configure a local interface address.\
\
            The default for IPv4 prefixes is 'false(2)'."\
    REFERENCE "For IPv6 RFC 2461, especially sections 2 and 4.6.2 and\
               RFC 2462"\
    ::= { ipAddressPrefixEntry 7 }\
\
ipAddressPrefixAdvPreferredLifetime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "seconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The remaining length of time, in seconds, that this prefix\
            will continue to be preferred, i.e., time until deprecation.\
\
            A value of 4,294,967,295 represents infinity.\
\
            The address generated from a deprecated prefix should no\
            longer be used as a source address in new communications,\
            but packets received on such an interface are processed as\
            expected.\
\
            The default for IPv4 prefixes is 4,294,967,295 (infinity)."\
    REFERENCE "For IPv6 RFC 2461, especially sections 2 and 4.6.2 and\
               RFC 2462"\
    ::= { ipAddressPrefixEntry 8 }\
\
ipAddressPrefixAdvValidLifetime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS       "seconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The remaining length of time, in seconds, that this prefix\
            will continue to be valid, i.e., time until invalidation.  A\
            value of 4,294,967,295 represents infinity.\
\
            The address generated from an invalidated prefix should not\
            appear as the destination or source address of a packet.\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 62]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            The default for IPv4 prefixes is 4,294,967,295 (infinity)."\
    REFERENCE "For IPv6 RFC 2461, especially sections 2 and 4.6.2 and\
               RFC 2462"\
    ::= { ipAddressPrefixEntry 9 }\
\
--\
-- Internet Address Table\
--\
\
ipAddressSpinLock OBJECT-TYPE\
    SYNTAX     TestAndIncr\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "An advisory lock used to allow cooperating SNMP managers to\
            coordinate their use of the set operation in creating or\
            modifying rows within this table.\
\
            In order to use this lock to coordinate the use of set\
            operations, managers should first retrieve\
            ipAddressTableSpinLock.  They should then determine the\
            appropriate row to create or modify.  Finally, they should\
            issue the appropriate set command, including the retrieved\
            value of ipAddressSpinLock.  If another manager has altered\
            the table in the meantime, then the value of\
            ipAddressSpinLock will have changed, and the creation will\
            fail as it will be specifying an incorrect value for\
            ipAddressSpinLock.  It is suggested, but not required, that\
            the ipAddressSpinLock be the first var bind for each set of\
            objects representing a 'row' in a PDU."\
    ::= { ip 33 }\
\
ipAddressTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpAddressEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "This table contains addressing information relevant to the\
            entity's interfaces.\
\
            This table does not contain multicast address information.\
            Tables for such information should be contained in multicast\
            specific MIBs, such as RFC 3019.\
\
            While this table is writable, the user will note that\
            several objects, such as ipAddressOrigin, are not.  The\
            intention in allowing a user to write to this table is to\
            allow them to add or remove any entry that isn't\
\
\
\
Routhier, Ed.               Standards Track                    [Page 63]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            permanent.  The user should be allowed to modify objects\
            and entries when that would not cause inconsistencies\
            within the table.  Allowing write access to objects, such\
            as ipAddressOrigin, could allow a user to insert an entry\
            and then label it incorrectly.\
\
            Note well: When including IPv6 link-local addresses in this\
            table, the entry must use an InetAddressType of 'ipv6z' in\
            order to differentiate between the possible interfaces."\
    ::= { ip 34 }\
\
ipAddressEntry OBJECT-TYPE\
    SYNTAX     IpAddressEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An address mapping for a particular interface."\
    INDEX { ipAddressAddrType, ipAddressAddr }\
    ::= { ipAddressTable 1 }\
\
IpAddressEntry ::= SEQUENCE {\
        ipAddressAddrType     InetAddressType,\
        ipAddressAddr         InetAddress,\
        ipAddressIfIndex      InterfaceIndex,\
        ipAddressType         INTEGER,\
        ipAddressPrefix       RowPointer,\
        ipAddressOrigin       IpAddressOriginTC,\
        ipAddressStatus       IpAddressStatusTC,\
        ipAddressCreated      TimeStamp,\
        ipAddressLastChanged  TimeStamp,\
        ipAddressRowStatus    RowStatus,\
        ipAddressStorageType  StorageType\
    }\
\
ipAddressAddrType OBJECT-TYPE\
    SYNTAX     InetAddressType\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The address type of ipAddressAddr."\
    ::= { ipAddressEntry 1 }\
\
ipAddressAddr OBJECT-TYPE\
    SYNTAX     InetAddress\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP address to which this entry's addressing information\
\
\
\
Routhier, Ed.               Standards Track                    [Page 64]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            pertains.  The address type of this object is specified in\
            ipAddressAddrType.\
\
            Implementors need to be aware that if the size of\
            ipAddressAddr exceeds 116 octets, then OIDS of instances of\
            columns in this row will have more than 128 sub-identifiers\
            and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3."\
    ::= { ipAddressEntry 2 }\
\
ipAddressIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipAddressEntry 3 }\
\
ipAddressType OBJECT-TYPE\
    SYNTAX     INTEGER {\
                 unicast(1),\
                 anycast(2),\
                 broadcast(3)\
    }\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The type of address.  broadcast(3) is not a valid value for\
            IPv6 addresses (RFC 3513)."\
    DEFVAL { unicast }\
    ::= { ipAddressEntry 4 }\
\
ipAddressPrefix OBJECT-TYPE\
    SYNTAX     RowPointer\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "A pointer to the row in the prefix table to which this\
            address belongs.  May be { 0 0 } if there is no such row."\
    DEFVAL { zeroDotZero }\
    ::= { ipAddressEntry 5 }\
\
ipAddressOrigin OBJECT-TYPE\
    SYNTAX     IpAddressOriginTC\
    MAX-ACCESS read-only\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 65]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The origin of the address."\
    ::= { ipAddressEntry 6 }\
\
ipAddressStatus OBJECT-TYPE\
    SYNTAX     IpAddressStatusTC\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The status of the address, describing if the address can be\
            used for communication.\
\
            In the absence of other information, an IPv4 address is\
            always preferred(1)."\
    DEFVAL { preferred }\
    ::= { ipAddressEntry 7 }\
\
ipAddressCreated OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime at the time this entry was created.\
            If this entry was created prior to the last re-\
            initialization of the local network management subsystem,\
            then this object contains a zero value."\
    ::= { ipAddressEntry 8 }\
\
ipAddressLastChanged OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime at the time this entry was last\
            updated.  If this entry was updated prior to the last re-\
            initialization of the local network management subsystem,\
            then this object contains a zero value."\
    ::= { ipAddressEntry 9 }\
\
ipAddressRowStatus OBJECT-TYPE\
    SYNTAX     RowStatus\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The status of this conceptual row.\
\
            The RowStatus TC requires that this DESCRIPTION clause\
            states under which circumstances other objects in this row\
\
\
\
Routhier, Ed.               Standards Track                    [Page 66]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            can be modified.  The value of this object has no effect on\
            whether other objects in this conceptual row can be\
            modified.\
\
            A conceptual row can not be made active until the\
            ipAddressIfIndex has been set to a valid index."\
    ::= { ipAddressEntry 10 }\
\
ipAddressStorageType OBJECT-TYPE\
    SYNTAX     StorageType\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The storage type for this conceptual row.  If this object\
            has a value of 'permanent', then no other objects are\
            required to be able to be modified."\
    DEFVAL { volatile }\
    ::= { ipAddressEntry 11 }\
\
--\
-- the Internet Address Translation table\
--\
\
ipNetToPhysicalTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpNetToPhysicalEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP Address Translation table used for mapping from IP\
            addresses to physical addresses.\
\
            The Address Translation tables contain the IP address to\
            'physical' address equivalences.  Some interfaces do not use\
            translation tables for determining address equivalences\
            (e.g., DDN-X.25 has an algorithmic method); if all\
            interfaces are of this type, then the Address Translation\
            table is empty, i.e., has zero entries.\
\
            While many protocols may be used to populate this table, ARP\
            and Neighbor Discovery are the most likely\
            options."\
    REFERENCE "RFC 826 and RFC 2461"\
    ::= { ip 35 }\
\
ipNetToPhysicalEntry OBJECT-TYPE\
    SYNTAX     IpNetToPhysicalEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 67]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "Each entry contains one IP address to `physical' address\
            equivalence."\
    INDEX       { ipNetToPhysicalIfIndex,\
                  ipNetToPhysicalNetAddressType,\
                  ipNetToPhysicalNetAddress }\
    ::= { ipNetToPhysicalTable 1 }\
\
IpNetToPhysicalEntry ::= SEQUENCE {\
        ipNetToPhysicalIfIndex         InterfaceIndex,\
        ipNetToPhysicalNetAddressType  InetAddressType,\
        ipNetToPhysicalNetAddress      InetAddress,\
        ipNetToPhysicalPhysAddress     PhysAddress,\
        ipNetToPhysicalLastUpdated     TimeStamp,\
        ipNetToPhysicalType            INTEGER,\
        ipNetToPhysicalState           INTEGER,\
        ipNetToPhysicalRowStatus       RowStatus\
    }\
\
ipNetToPhysicalIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipNetToPhysicalEntry 1 }\
\
ipNetToPhysicalNetAddressType OBJECT-TYPE\
    SYNTAX     InetAddressType\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The type of ipNetToPhysicalNetAddress."\
    ::= { ipNetToPhysicalEntry 2 }\
\
ipNetToPhysicalNetAddress OBJECT-TYPE\
    SYNTAX     InetAddress\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP Address corresponding to the media-dependent\
            `physical' address.  The address type of this object is\
            specified in ipNetToPhysicalAddressType.\
\
            Implementors need to be aware that if the size of\
\
\
\
Routhier, Ed.               Standards Track                    [Page 68]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipNetToPhysicalNetAddress exceeds 115 octets, then OIDS of\
            instances of columns in this row will have more than 128\
            sub-identifiers and cannot be accessed using SNMPv1,\
            SNMPv2c, or SNMPv3."\
    ::= { ipNetToPhysicalEntry 3 }\
\
ipNetToPhysicalPhysAddress OBJECT-TYPE\
    SYNTAX     PhysAddress (SIZE(0..65535))\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The media-dependent `physical' address.\
\
            As the entries in this table are typically not persistent\
            when this object is written the entity SHOULD NOT save the\
            change to non-volatile storage."\
    ::= { ipNetToPhysicalEntry 4 }\
\
ipNetToPhysicalLastUpdated OBJECT-TYPE\
    SYNTAX     TimeStamp\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The value of sysUpTime at the time this entry was last\
            updated.  If this entry was updated prior to the last re-\
            initialization of the local network management subsystem,\
            then this object contains a zero value."\
    ::= { ipNetToPhysicalEntry 5 }\
\
ipNetToPhysicalType OBJECT-TYPE\
    SYNTAX     INTEGER {\
                other(1),        -- none of the following\
                invalid(2),      -- an invalidated mapping\
                dynamic(3),\
                static(4),\
                local(5)         -- local interface\
            }\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The type of mapping.\
\
            Setting this object to the value invalid(2) has the effect\
            of invalidating the corresponding entry in the\
            ipNetToPhysicalTable.  That is, it effectively dis-\
            associates the interface identified with said entry from the\
            mapping identified with said entry.  It is an\
            implementation-specific matter as to whether the agent\
\
\
\
Routhier, Ed.               Standards Track                    [Page 69]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            removes an invalidated entry from the table.  Accordingly,\
            management stations must be prepared to receive tabular\
            information from agents that corresponds to entries not\
            currently in use.  Proper interpretation of such entries\
            requires examination of the relevant ipNetToPhysicalType\
            object.\
\
            The 'dynamic(3)' type indicates that the IP address to\
            physical addresses mapping has been dynamically resolved\
            using e.g., IPv4 ARP or the IPv6 Neighbor Discovery\
            protocol.\
\
            The 'static(4)' type indicates that the mapping has been\
            statically configured.  Both of these refer to entries that\
            provide mappings for other entities addresses.\
\
            The 'local(5)' type indicates that the mapping is provided\
            for an entity's own interface address.\
\
            As the entries in this table are typically not persistent\
            when this object is written the entity SHOULD NOT save the\
            change to non-volatile storage."\
    DEFVAL { static }\
    ::= { ipNetToPhysicalEntry 6 }\
\
ipNetToPhysicalState OBJECT-TYPE\
    SYNTAX     INTEGER {\
                     reachable(1), -- confirmed reachability\
\
                     stale(2),     -- unconfirmed reachability\
\
                     delay(3),     -- waiting for reachability\
                                   -- confirmation before entering\
                                   -- the probe state\
\
                     probe(4),     -- actively probing\
\
                     invalid(5),   -- an invalidated mapping\
\
                     unknown(6),   -- state can not be determined\
                                   -- for some reason.\
\
                     incomplete(7) -- address resolution is being\
                                   -- performed.\
                    }\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 70]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The Neighbor Unreachability Detection state for the\
            interface when the address mapping in this entry is used.\
            If Neighbor Unreachability Detection is not in use (e.g. for\
            IPv4), this object is always unknown(6)."\
    REFERENCE "RFC 2461"\
    ::= { ipNetToPhysicalEntry 7 }\
\
ipNetToPhysicalRowStatus OBJECT-TYPE\
    SYNTAX     RowStatus\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The status of this conceptual row.\
\
            The RowStatus TC requires that this DESCRIPTION clause\
            states under which circumstances other objects in this row\
            can be modified.  The value of this object has no effect on\
            whether other objects in this conceptual row can be\
            modified.\
\
            A conceptual row can not be made active until the\
            ipNetToPhysicalPhysAddress object has been set.\
\
            Note that if the ipNetToPhysicalType is set to 'invalid',\
            the managed node may delete the entry independent of the\
            state of this object."\
    ::= { ipNetToPhysicalEntry 8 }\
\
--\
-- The IPv6 Scope Zone Index Table.\
--\
\
ipv6ScopeZoneIndexTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF Ipv6ScopeZoneIndexEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table used to describe IPv6 unicast and multicast scope\
            zones.\
\
            For those objects that have names rather than numbers, the\
            names were chosen to coincide with the names used in the\
            IPv6 address architecture document. "\
    REFERENCE "Section 2.7 of RFC 4291"\
    ::= { ip 36 }\
\
ipv6ScopeZoneIndexEntry OBJECT-TYPE\
    SYNTAX     Ipv6ScopeZoneIndexEntry\
\
\
\
Routhier, Ed.               Standards Track                    [Page 71]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "Each entry contains the list of scope identifiers on a given\
            interface."\
    INDEX { ipv6ScopeZoneIndexIfIndex }\
    ::= { ipv6ScopeZoneIndexTable 1 }\
\
Ipv6ScopeZoneIndexEntry ::= SEQUENCE {\
        ipv6ScopeZoneIndexIfIndex            InterfaceIndex,\
        ipv6ScopeZoneIndexLinkLocal          InetZoneIndex,\
        ipv6ScopeZoneIndex3                  InetZoneIndex,\
        ipv6ScopeZoneIndexAdminLocal         InetZoneIndex,\
        ipv6ScopeZoneIndexSiteLocal          InetZoneIndex,\
        ipv6ScopeZoneIndex6                  InetZoneIndex,\
        ipv6ScopeZoneIndex7                  InetZoneIndex,\
        ipv6ScopeZoneIndexOrganizationLocal  InetZoneIndex,\
        ipv6ScopeZoneIndex9                  InetZoneIndex,\
        ipv6ScopeZoneIndexA                  InetZoneIndex,\
        ipv6ScopeZoneIndexB                  InetZoneIndex,\
        ipv6ScopeZoneIndexC                  InetZoneIndex,\
        ipv6ScopeZoneIndexD                  InetZoneIndex\
    }\
\
ipv6ScopeZoneIndexIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface to\
            which these scopes belong.  The interface identified by a\
            particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipv6ScopeZoneIndexEntry 1 }\
\
ipv6ScopeZoneIndexLinkLocal OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for the link-local scope on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 2 }\
\
ipv6ScopeZoneIndex3 OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 72]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The zone index for scope 3 on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 3 }\
\
ipv6ScopeZoneIndexAdminLocal OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for the admin-local scope on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 4 }\
\
ipv6ScopeZoneIndexSiteLocal OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for the site-local scope on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 5 }\
\
ipv6ScopeZoneIndex6 OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope 6 on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 6 }\
\
ipv6ScopeZoneIndex7 OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope 7 on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 7 }\
\
ipv6ScopeZoneIndexOrganizationLocal OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for the organization-local scope on this\
            interface."\
    ::= { ipv6ScopeZoneIndexEntry 8 }\
\
ipv6ScopeZoneIndex9 OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 73]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The zone index for scope 9 on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 9 }\
\
ipv6ScopeZoneIndexA OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope A on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 10 }\
\
ipv6ScopeZoneIndexB OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope B on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 11 }\
\
ipv6ScopeZoneIndexC OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope C on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 12 }\
\
ipv6ScopeZoneIndexD OBJECT-TYPE\
    SYNTAX     InetZoneIndex\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The zone index for scope D on this interface."\
    ::= { ipv6ScopeZoneIndexEntry 13 }\
\
--\
-- The Default Router Table\
-- This table simply lists the default routers; for more information\
-- about routing tables, see the routing MIBs\
--\
\
ipDefaultRouterTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpDefaultRouterEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table used to describe the default routers known to this\
\
\
\
Routhier, Ed.               Standards Track                    [Page 74]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            entity."\
    ::= { ip 37 }\
\
ipDefaultRouterEntry OBJECT-TYPE\
    SYNTAX     IpDefaultRouterEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "Each entry contains information about a default router known\
            to this entity."\
    INDEX {ipDefaultRouterAddressType, ipDefaultRouterAddress,\
           ipDefaultRouterIfIndex}\
    ::= { ipDefaultRouterTable 1 }\
\
IpDefaultRouterEntry ::= SEQUENCE {\
        ipDefaultRouterAddressType  InetAddressType,\
        ipDefaultRouterAddress      InetAddress,\
        ipDefaultRouterIfIndex      InterfaceIndex,\
        ipDefaultRouterLifetime     Unsigned32,\
        ipDefaultRouterPreference   INTEGER\
    }\
\
ipDefaultRouterAddressType OBJECT-TYPE\
    SYNTAX     InetAddressType\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The address type for this row."\
    ::= { ipDefaultRouterEntry 1 }\
\
ipDefaultRouterAddress OBJECT-TYPE\
    SYNTAX     InetAddress\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP address of the default router represented by this\
            row.  The address type of this object is specified in\
            ipDefaultRouterAddressType.\
\
            Implementers need to be aware that if the size of\
            ipDefaultRouterAddress exceeds 115 octets, then OIDS of\
            instances of columns in this row will have more than 128\
            sub-identifiers and cannot be accessed using SNMPv1,\
            SNMPv2c, or SNMPv3."\
    ::= { ipDefaultRouterEntry 2 }\
\
ipDefaultRouterIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
\
\
\
Routhier, Ed.               Standards Track                    [Page 75]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface by\
            which the router can be reached.  The interface identified\
            by a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipDefaultRouterEntry 3 }\
\
ipDefaultRouterLifetime OBJECT-TYPE\
    SYNTAX     Unsigned32 (0..65535)\
    UNITS      "seconds"\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The remaining length of time, in seconds, that this router\
            will continue to be useful as a default router.  A value of\
            zero indicates that it is no longer useful as a default\
            router.  It is left to the implementer of the MIB as to\
            whether a router with a lifetime of zero is removed from the\
            list.\
\
            For IPv6, this value should be extracted from the router\
            advertisement messages."\
    REFERENCE "For IPv6 RFC 2462 sections 4.2 and 6.3.4"\
    ::= { ipDefaultRouterEntry 4 }\
\
ipDefaultRouterPreference OBJECT-TYPE\
    SYNTAX     INTEGER {\
                     reserved (-2),\
                     low (-1),\
                     medium (0),\
                     high (1)\
                    }\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "An indication of preference given to this router as a\
            default router as described in he Default Router\
            Preferences document.  Treating the value as a\
            2 bit signed integer allows for simple arithmetic\
            comparisons.\
\
            For IPv4 routers or IPv6 routers that are not using the\
            updated router advertisement format, this object is set to\
            medium (0)."\
    REFERENCE "RFC 4291, section 2.1"\
    ::= { ipDefaultRouterEntry 5 }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 76]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
--\
-- Configuration information for constructing router advertisements\
--\
\
ipv6RouterAdvertSpinLock OBJECT-TYPE\
    SYNTAX     TestAndIncr\
    MAX-ACCESS read-write\
    STATUS     current\
    DESCRIPTION\
           "An advisory lock used to allow cooperating SNMP managers to\
            coordinate their use of the set operation in creating or\
            modifying rows within this table.\
\
            In order to use this lock to coordinate the use of set\
            operations, managers should first retrieve\
            ipv6RouterAdvertSpinLock.  They should then determine the\
            appropriate row to create or modify.  Finally, they should\
            issue the appropriate set command including the retrieved\
            value of ipv6RouterAdvertSpinLock.  If another manager has\
            altered the table in the meantime, then the value of\
            ipv6RouterAdvertSpinLock will have changed and the creation\
            will fail as it will be specifying an incorrect value for\
            ipv6RouterAdvertSpinLock.  It is suggested, but not\
            required, that the ipv6RouterAdvertSpinLock be the first var\
            bind for each set of objects representing a 'row' in a PDU."\
    ::= { ip 38 }\
\
ipv6RouterAdvertTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF Ipv6RouterAdvertEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table containing information used to construct router\
            advertisements."\
    ::= { ip 39 }\
\
ipv6RouterAdvertEntry OBJECT-TYPE\
    SYNTAX     Ipv6RouterAdvertEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "An entry containing information used to construct router\
            advertisements.\
\
            Information in this table is persistent, and when this\
            object is written, the entity SHOULD save the change to\
            non-volatile storage."\
    INDEX { ipv6RouterAdvertIfIndex }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 77]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    ::= { ipv6RouterAdvertTable 1 }\
\
Ipv6RouterAdvertEntry ::= SEQUENCE {\
        ipv6RouterAdvertIfIndex          InterfaceIndex,\
        ipv6RouterAdvertSendAdverts      TruthValue,\
        ipv6RouterAdvertMaxInterval      Unsigned32,\
        ipv6RouterAdvertMinInterval      Unsigned32,\
        ipv6RouterAdvertManagedFlag      TruthValue,\
        ipv6RouterAdvertOtherConfigFlag  TruthValue,\
        ipv6RouterAdvertLinkMTU          Unsigned32,\
        ipv6RouterAdvertReachableTime    Unsigned32,\
        ipv6RouterAdvertRetransmitTime   Unsigned32,\
        ipv6RouterAdvertCurHopLimit      Unsigned32,\
        ipv6RouterAdvertDefaultLifetime  Unsigned32,\
        ipv6RouterAdvertRowStatus        RowStatus\
    }\
\
ipv6RouterAdvertIfIndex OBJECT-TYPE\
    SYNTAX     InterfaceIndex\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The index value that uniquely identifies the interface on\
            which router advertisements constructed with this\
            information will be transmitted.  The interface identified\
            by a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipv6RouterAdvertEntry 1 }\
\
ipv6RouterAdvertSendAdverts OBJECT-TYPE\
    SYNTAX     TruthValue\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "A flag indicating whether the router sends periodic\
            router advertisements and responds to router solicitations\
            on this interface."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { false }\
    ::= { ipv6RouterAdvertEntry 2 }\
\
ipv6RouterAdvertMaxInterval OBJECT-TYPE\
    SYNTAX     Unsigned32 (4..1800)\
    UNITS      "seconds"\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The maximum time allowed between sending unsolicited router\
\
\
\
Routhier, Ed.               Standards Track                    [Page 78]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            advertisements from this interface."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { 600 }\
    ::= { ipv6RouterAdvertEntry 3 }\
\
ipv6RouterAdvertMinInterval OBJECT-TYPE\
    SYNTAX     Unsigned32 (3..1350)\
    UNITS      "seconds"\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The minimum time allowed between sending unsolicited router\
            advertisements from this interface.\
\
            The default is 0.33 * ipv6RouterAdvertMaxInterval, however,\
            in the case of a low value for ipv6RouterAdvertMaxInterval,\
            the minimum value for this object is restricted to 3."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    ::= { ipv6RouterAdvertEntry 4 }\
\
ipv6RouterAdvertManagedFlag OBJECT-TYPE\
    SYNTAX     TruthValue\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The true/false value to be placed into the 'managed address\
            configuration' flag field in router advertisements sent from\
            this interface."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { false }\
    ::= { ipv6RouterAdvertEntry 5 }\
\
ipv6RouterAdvertOtherConfigFlag OBJECT-TYPE\
    SYNTAX     TruthValue\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The true/false value to be placed into the 'other stateful\
            configuration' flag field in router advertisements sent from\
            this interface."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { false }\
    ::= { ipv6RouterAdvertEntry 6 }\
\
ipv6RouterAdvertLinkMTU OBJECT-TYPE\
    SYNTAX     Unsigned32\
    MAX-ACCESS read-create\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 79]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The value to be placed in MTU options sent by the router on\
            this interface.\
\
            A value of zero indicates that no MTU options are sent."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { 0 }\
    ::= { ipv6RouterAdvertEntry 7 }\
\
ipv6RouterAdvertReachableTime OBJECT-TYPE\
    SYNTAX     Unsigned32 (0..3600000)\
    UNITS      "milliseconds"\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The value to be placed in the reachable time field in router\
            advertisement messages sent from this interface.\
\
            A value of zero in the router advertisement indicates that\
            the advertisement isn't specifying a value for reachable\
            time."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { 0 }\
    ::= { ipv6RouterAdvertEntry 8 }\
\
ipv6RouterAdvertRetransmitTime OBJECT-TYPE\
    SYNTAX     Unsigned32\
    UNITS      "milliseconds"\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The value to be placed in the retransmit timer field in\
            router advertisements sent from this interface.\
\
            A value of zero in the router advertisement indicates that\
            the advertisement isn't specifying a value for retrans\
            time."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    DEFVAL { 0 }\
    ::= { ipv6RouterAdvertEntry 9 }\
\
ipv6RouterAdvertCurHopLimit OBJECT-TYPE\
    SYNTAX     Unsigned32 (0..255)\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The default value to be placed in the current hop limit\
            field in router advertisements sent from this interface.\
\
\
\
Routhier, Ed.               Standards Track                    [Page 80]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            The value should be set to the current diameter of the\
            Internet.\
\
            A value of zero in the router advertisement indicates that\
            the advertisement isn't specifying a value for curHopLimit.\
\
            The default should be set to the value specified in the IANA\
            web pages (www.iana.org) at the time of implementation."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    ::= { ipv6RouterAdvertEntry 10 }\
\
ipv6RouterAdvertDefaultLifetime OBJECT-TYPE\
    SYNTAX     Unsigned32 (0|4..9000)\
    UNITS      "seconds"\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The value to be placed in the router lifetime field of\
            router advertisements sent from this interface.  This value\
            MUST be either 0 or between ipv6RouterAdvertMaxInterval and\
            9000 seconds.\
\
            A value of zero indicates that the router is not to be used\
            as a default router.\
\
            The default is 3 * ipv6RouterAdvertMaxInterval."\
    REFERENCE "RFC 2461 Section 6.2.1"\
    ::= { ipv6RouterAdvertEntry 11 }\
\
ipv6RouterAdvertRowStatus OBJECT-TYPE\
    SYNTAX     RowStatus\
    MAX-ACCESS read-create\
    STATUS     current\
    DESCRIPTION\
           "The status of this conceptual row.\
\
            As all objects in this conceptual row have default values, a\
            row can be created and made active by setting this object\
            appropriately.\
\
            The RowStatus TC requires that this DESCRIPTION clause\
            states under which circumstances other objects in this row\
            can be modified.  The value of this object has no effect on\
            whether other objects in this conceptual row can be\
            modified."\
    ::= { ipv6RouterAdvertEntry 12 }\
\
--\
\
\
\
Routhier, Ed.               Standards Track                    [Page 81]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
-- ICMP section\
--\
\
icmp     OBJECT IDENTIFIER ::= { mib-2 5 }\
\
--\
-- ICMP non-message-specific counters\
--\
\
-- These object IDs are reserved, as they were used in earlier\
-- versions of the MIB module.  In theory, OIDs are not assigned\
-- until the specification is released as an RFC; however, as some\
-- companies may have shipped code based on earlier versions of\
-- the MIB, it seems best to reserve these OIDs.\
-- ::= { icmp 27 }\
-- ::= { icmp 28 }\
\
icmpStatsTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IcmpStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table of generic system-wide ICMP counters."\
    ::= { icmp 29 }\
\
icmpStatsEntry OBJECT-TYPE\
    SYNTAX     IcmpStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "A conceptual row in the icmpStatsTable."\
    INDEX    { icmpStatsIPVersion }\
    ::= { icmpStatsTable 1 }\
\
IcmpStatsEntry ::= SEQUENCE {\
        icmpStatsIPVersion  InetVersion,\
        icmpStatsInMsgs     Counter32,\
        icmpStatsInErrors   Counter32,\
        icmpStatsOutMsgs    Counter32,\
        icmpStatsOutErrors  Counter32\
    }\
\
icmpStatsIPVersion OBJECT-TYPE\
    SYNTAX     InetVersion\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP version of the statistics."\
\
\
\
Routhier, Ed.               Standards Track                    [Page 82]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    ::= { icmpStatsEntry 1 }\
\
icmpStatsInMsgs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of ICMP messages that the entity received.\
            Note that this counter includes all those counted by\
            icmpStatsInErrors."\
    ::= { icmpStatsEntry 2 }\
\
icmpStatsInErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of ICMP messages that the entity received but\
            determined as having ICMP-specific errors (bad ICMP\
            checksums, bad length, etc.)."\
    ::= { icmpStatsEntry 3 }\
\
icmpStatsOutMsgs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The total number of ICMP messages that the entity attempted\
            to send.  Note that this counter includes all those counted\
            by icmpStatsOutErrors."\
    ::= { icmpStatsEntry 4 }\
\
icmpStatsOutErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of ICMP messages that this entity did not send\
            due to problems discovered within ICMP, such as a lack of\
            buffers.  This value should not include errors discovered\
            outside the ICMP layer, such as the inability of IP to route\
            the resultant datagram.  In some implementations, there may\
            be no types of error that contribute to this counter's\
            value."\
    ::= { icmpStatsEntry 5 }\
\
--\
-- per-version, per-message type ICMP counters\
\
\
\
Routhier, Ed.               Standards Track                    [Page 83]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
--\
\
icmpMsgStatsTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IcmpMsgStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The table of system-wide per-version, per-message type ICMP\
            counters."\
    ::= { icmp 30 }\
\
icmpMsgStatsEntry OBJECT-TYPE\
    SYNTAX     IcmpMsgStatsEntry\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "A conceptual row in the icmpMsgStatsTable.\
\
            The system should track each ICMP type value, even if that\
            ICMP type is not supported by the system.  However, a\
            given row need not be instantiated unless a message of that\
            type has been processed, i.e., the row for\
            icmpMsgStatsType=X MAY be instantiated before but MUST be\
            instantiated after the first message with Type=X is\
            received or transmitted.  After receiving or transmitting\
            any succeeding messages with Type=X, the relevant counter\
            must be incremented."\
    INDEX { icmpMsgStatsIPVersion, icmpMsgStatsType }\
    ::= { icmpMsgStatsTable 1 }\
\
IcmpMsgStatsEntry ::= SEQUENCE {\
        icmpMsgStatsIPVersion  InetVersion,\
        icmpMsgStatsType       Integer32,\
        icmpMsgStatsInPkts     Counter32,\
        icmpMsgStatsOutPkts    Counter32\
    }\
\
icmpMsgStatsIPVersion OBJECT-TYPE\
    SYNTAX     InetVersion\
    MAX-ACCESS not-accessible\
    STATUS     current\
    DESCRIPTION\
           "The IP version of the statistics."\
    ::= { icmpMsgStatsEntry 1 }\
\
icmpMsgStatsType OBJECT-TYPE\
    SYNTAX     Integer32 (0..255)\
    MAX-ACCESS not-accessible\
\
\
\
Routhier, Ed.               Standards Track                    [Page 84]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "The ICMP type field of the message type being counted by\
            this row.\
\
            Note that ICMP message types are scoped by the address type\
            in use."\
    REFERENCE "http://www.iana.org/assignments/icmp-parameters and\
               http://www.iana.org/assignments/icmpv6-parameters"\
    ::= { icmpMsgStatsEntry 2 }\
\
icmpMsgStatsInPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of input packets for this AF and type."\
    ::= { icmpMsgStatsEntry 3 }\
\
icmpMsgStatsOutPkts OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     current\
    DESCRIPTION\
           "The number of output packets for this AF and type."\
    ::= { icmpMsgStatsEntry 4 }\
--\
-- conformance information\
--\
\
ipMIBConformance OBJECT IDENTIFIER ::= { ipMIB 2 }\
\
ipMIBCompliances OBJECT IDENTIFIER ::= { ipMIBConformance 1 }\
ipMIBGroups      OBJECT IDENTIFIER ::= { ipMIBConformance 2 }\
\
-- compliance statements\
ipMIBCompliance2 MODULE-COMPLIANCE\
    STATUS     current\
    DESCRIPTION\
            "The compliance statement for systems that implement IP -\
             either IPv4 or IPv6.\
\
            There are a number of INDEX objects that cannot be\
            represented in the form of OBJECT clauses in SMIv2, but\
            for which we have the following compliance requirements,\
            expressed in OBJECT clause form in this description\
            clause:\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 85]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            -- OBJECT        ipSystemStatsIPVersion\
            -- SYNTAX        InetVersion {ipv4(1), ipv6(2)}\
            -- DESCRIPTION\
            --     This MIB requires support for only IPv4 and IPv6\
            --     versions.\
            --\
            -- OBJECT        ipIfStatsIPVersion\
            -- SYNTAX        InetVersion {ipv4(1), ipv6(2)}\
            -- DESCRIPTION\
            --     This MIB requires support for only IPv4 and IPv6\
            --     versions.\
            --\
            -- OBJECT        icmpStatsIPVersion\
            -- SYNTAX        InetVersion {ipv4(1), ipv6(2)}\
            -- DESCRIPTION\
            --     This MIB requires support for only IPv4 and IPv6\
            --     versions.\
            --\
            -- OBJECT        icmpMsgStatsIPVersion\
            -- SYNTAX        InetVersion {ipv4(1), ipv6(2)}\
            -- DESCRIPTION\
            --     This MIB requires support for only IPv4 and IPv6\
            --     versions.\
            --\
            -- OBJECT        ipAddressPrefixType\
            -- SYNTAX        InetAddressType {ipv4(1), ipv6(2)}\
            -- DESCRIPTION\
            --     This MIB requires support for only global IPv4 and\
            --     IPv6 address types.\
            --\
            -- OBJECT        ipAddressPrefixPrefix\
            -- SYNTAX        InetAddress (Size(4 | 16))\
            -- DESCRIPTION\
            --     This MIB requires support for only global IPv4 and\
            --     IPv6 addresses and so the size can be either 4 or\
            --     16 bytes.\
            --\
            -- OBJECT        ipAddressAddrType\
            -- SYNTAX        InetAddressType {ipv4(1), ipv6(2),\
            --                                ipv4z(3), ipv6z(4)}\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
            --     non-global IPv4 and IPv6 address types.\
            --\
            -- OBJECT        ipAddressAddr\
            -- SYNTAX        InetAddress (Size(4 | 8 | 16 | 20))\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
\
\
\
Routhier, Ed.               Standards Track                    [Page 86]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            --     non-global IPv4 and IPv6 addresses and so the size\
            --     can be 4, 8, 16, or 20 bytes.\
            --\
            -- OBJECT        ipNetToPhysicalNetAddressType\
            -- SYNTAX        InetAddressType {ipv4(1), ipv6(2),\
            --                                ipv4z(3), ipv6z(4)}\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
            --     non-global IPv4 and IPv6 address types.\
            --\
            -- OBJECT        ipNetToPhysicalNetAddress\
            -- SYNTAX        InetAddress (Size(4 | 8 | 16 | 20))\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
            --     non-global IPv4 and IPv6 addresses and so the size\
            --     can be 4, 8, 16, or 20 bytes.\
            --\
            -- OBJECT        ipDefaultRouterAddressType\
            -- SYNTAX        InetAddressType {ipv4(1), ipv6(2),\
            --                                ipv4z(3), ipv6z(4)}\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
            --     non-global IPv4 and IPv6 address types.\
            --\
            -- OBJECT        ipDefaultRouterAddress\
            -- SYNTAX        InetAddress (Size(4 | 8 | 16 | 20))\
            -- DESCRIPTION\
            --     This MIB requires support for only global and\
            --     non-global IPv4 and IPv6 addresses and so the size\
            --     can be 4, 8, 16, or 20 bytes."\
\
    MODULE -- this module\
\
    MANDATORY-GROUPS { ipSystemStatsGroup,   ipAddressGroup,\
                       ipNetToPhysicalGroup, ipDefaultRouterGroup,\
                       icmpStatsGroup }\
\
    GROUP ipSystemStatsHCOctetGroup\
    DESCRIPTION\
           "This group is mandatory for systems that have an aggregate\
            bandwidth of greater than 20MB.  Including this group does\
            not allow an entity to neglect the 32 bit versions of these\
            objects."\
\
    GROUP ipSystemStatsHCPacketGroup\
    DESCRIPTION\
           "This group is mandatory for systems that have an aggregate\
            bandwidth of greater than 650MB.  Including this group\
\
\
\
Routhier, Ed.               Standards Track                    [Page 87]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            does not allow an entity to neglect the 32 bit versions of\
            these objects."\
\
    GROUP ipIfStatsGroup\
    DESCRIPTION\
           "This group is optional for all systems."\
\
    GROUP ipIfStatsHCOctetGroup\
    DESCRIPTION\
           "This group is mandatory for systems that include the\
            ipIfStatsGroup and include links with bandwidths of greater\
            than 20MB.  Including this group does not allow an entity to\
            neglect the 32 bit versions of these objects."\
\
    GROUP ipIfStatsHCPacketGroup\
    DESCRIPTION\
           "This group is mandatory for systems that include the\
            ipIfStatsGroup and include links with bandwidths of greater\
            than 650MB.  Including this group does not allow an entity\
            to neglect the 32 bit versions of these objects."\
\
    GROUP ipv4GeneralGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4."\
\
    GROUP ipv4IfGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4."\
\
    GROUP ipv4SystemStatsGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4."\
\
    GROUP ipv4SystemStatsHCPacketGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4 and\
            that have an aggregate bandwidth of greater than 650MB.\
            Including this group does not allow an entity to neglect the\
            32 bit versions of these objects."\
\
    GROUP ipv4IfStatsGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4 and\
            including the ipIfStatsGroup."\
\
    GROUP ipv4IfStatsHCPacketGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv4 and\
\
\
\
Routhier, Ed.               Standards Track                    [Page 88]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            including the ipIfStatsHCPacketGroup.  Including this group\
            does not allow an entity to neglect the 32 bit versions of\
            these objects."\
\
    GROUP ipv6GeneralGroup2\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv6."\
\
    GROUP ipv6IfGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv6."\
\
    GROUP ipAddressPrefixGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv6."\
\
    GROUP ipv6ScopeGroup\
    DESCRIPTION\
           "This group is mandatory for all systems supporting IPv6."\
\
    GROUP ipv6RouterAdvertGroup\
    DESCRIPTION\
           "This group is mandatory for all IPv6 routers."\
\
    GROUP ipLastChangeGroup\
    DESCRIPTION\
           "This group is optional for all agents."\
\
    OBJECT     ipv6IpForwarding\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6IpDefaultHopLimit\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv4InterfaceEnableStatus\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6InterfaceEnableStatus\
    MIN-ACCESS read-only\
\
\
\
Routhier, Ed.               Standards Track                    [Page 89]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6InterfaceForwarding\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipAddressSpinLock\
    MIN-ACCESS not-accessible\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object.  However, if an agent provides write access to any\
            of the other objects in the ipAddressGroup, it SHOULD\
            provide write access to this object as well."\
\
    OBJECT     ipAddressIfIndex\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipAddressType\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipAddressStatus\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipAddressRowStatus\
    SYNTAX     RowStatus { active(1) }\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipAddressStorageType\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object.\
\
\
\
Routhier, Ed.               Standards Track                    [Page 90]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            If an agent allows this object to be written or created, it\
            is not required to allow this object to be set to readOnly,\
            permanent, or nonVolatile."\
\
    OBJECT     ipNetToPhysicalPhysAddress\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipNetToPhysicalType\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    OBJECT     ipv6RouterAdvertSpinLock\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object.  However, if an agent provides write access to\
            any of the other objects in the ipv6RouterAdvertGroup, it\
            SHOULD provide write access to this object as well."\
\
    OBJECT     ipv6RouterAdvertSendAdverts\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertMaxInterval\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertMinInterval\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertManagedFlag\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
\
\
\
Routhier, Ed.               Standards Track                    [Page 91]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    OBJECT     ipv6RouterAdvertOtherConfigFlag\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertLinkMTU\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertReachableTime\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertRetransmitTime\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertCurHopLimit\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertDefaultLifetime\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write access to this\
            object."\
\
    OBJECT     ipv6RouterAdvertRowStatus\
    MIN-ACCESS read-only\
    DESCRIPTION\
           "An agent is not required to provide write or create access\
            to this object."\
\
    ::= { ipMIBCompliances 2 }\
\
-- units of conformance\
\
ipv4GeneralGroup OBJECT-GROUP\
    OBJECTS   { ipForwarding, ipDefaultTTL, ipReasmTimeout }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 92]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "The group of IPv4-specific objects for basic management of\
            IPv4 entities."\
    ::= { ipMIBGroups 3 }\
\
ipv4IfGroup OBJECT-GROUP\
    OBJECTS   { ipv4InterfaceReasmMaxSize, ipv4InterfaceEnableStatus,\
                ipv4InterfaceRetransmitTime }\
    STATUS     current\
    DESCRIPTION\
           "The group of IPv4-specific objects for basic management of\
            IPv4 interfaces."\
    ::= { ipMIBGroups 4 }\
\
ipv6GeneralGroup2 OBJECT-GROUP\
    OBJECTS { ipv6IpForwarding, ipv6IpDefaultHopLimit }\
    STATUS     current\
    DESCRIPTION\
           "The IPv6 group of objects providing for basic management of\
            IPv6 entities."\
    ::= { ipMIBGroups 5 }\
\
ipv6IfGroup OBJECT-GROUP\
    OBJECTS   { ipv6InterfaceReasmMaxSize,   ipv6InterfaceIdentifier,\
                ipv6InterfaceEnableStatus,   ipv6InterfaceReachableTime,\
                ipv6InterfaceRetransmitTime, ipv6InterfaceForwarding }\
    STATUS     current\
    DESCRIPTION\
           "The group of IPv6-specific objects for basic management of\
            IPv6 interfaces."\
    ::= { ipMIBGroups 6 }\
\
ipLastChangeGroup OBJECT-GROUP\
    OBJECTS   { ipv4InterfaceTableLastChange,\
                ipv6InterfaceTableLastChange,\
                ipIfStatsTableLastChange }\
    STATUS     current\
    DESCRIPTION\
           "The last change objects associated with this MIB.  These\
            objects are optional for all agents.  They SHOULD be\
            implemented on agents where it is possible to determine the\
            proper values.  Where it is not possible to determine the\
            proper values, for example when the tables are split amongst\
            several sub-agents using AgentX, the agent MUST NOT\
            implement these objects to return an incorrect or static\
            value."\
    ::= { ipMIBGroups 7 }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 93]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
ipSystemStatsGroup OBJECT-GROUP\
    OBJECTS   { ipSystemStatsInReceives,\
                ipSystemStatsInOctets,\
                ipSystemStatsInHdrErrors,\
                ipSystemStatsInNoRoutes,\
                ipSystemStatsInAddrErrors,\
                ipSystemStatsInUnknownProtos,\
                ipSystemStatsInTruncatedPkts,\
                ipSystemStatsInForwDatagrams,\
                ipSystemStatsReasmReqds,\
                ipSystemStatsReasmOKs,\
                ipSystemStatsReasmFails,\
                ipSystemStatsInDiscards,\
                ipSystemStatsInDelivers,\
                ipSystemStatsOutRequests,\
                ipSystemStatsOutNoRoutes,\
                ipSystemStatsOutForwDatagrams,\
                ipSystemStatsOutDiscards,\
                ipSystemStatsOutFragReqds,\
                ipSystemStatsOutFragOKs,\
                ipSystemStatsOutFragFails,\
                ipSystemStatsOutFragCreates,\
                ipSystemStatsOutTransmits,\
                ipSystemStatsOutOctets,\
                ipSystemStatsInMcastPkts,\
                ipSystemStatsInMcastOctets,\
                ipSystemStatsOutMcastPkts,\
                ipSystemStatsOutMcastOctets,\
                ipSystemStatsDiscontinuityTime,\
                ipSystemStatsRefreshRate }\
    STATUS     current\
    DESCRIPTION\
           "IP system wide statistics."\
    ::= { ipMIBGroups 8 }\
\
ipv4SystemStatsGroup OBJECT-GROUP\
    OBJECTS   { ipSystemStatsInBcastPkts, ipSystemStatsOutBcastPkts }\
    STATUS     current\
    DESCRIPTION\
           "IPv4 only system wide statistics."\
    ::= { ipMIBGroups 9 }\
\
ipSystemStatsHCOctetGroup OBJECT-GROUP\
    OBJECTS   { ipSystemStatsHCInOctets,\
                ipSystemStatsHCOutOctets,\
                ipSystemStatsHCInMcastOctets,\
                ipSystemStatsHCOutMcastOctets\
}\
\
\
\
Routhier, Ed.               Standards Track                    [Page 94]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "IP system wide statistics for systems that may overflow the\
            standard octet counters within 1 hour."\
    ::= { ipMIBGroups 10 }\
\
ipSystemStatsHCPacketGroup OBJECT-GROUP\
    OBJECTS   { ipSystemStatsHCInReceives,\
                ipSystemStatsHCInForwDatagrams,\
                ipSystemStatsHCInDelivers,\
                ipSystemStatsHCOutRequests,\
                ipSystemStatsHCOutForwDatagrams,\
                ipSystemStatsHCOutTransmits,\
                ipSystemStatsHCInMcastPkts,\
                ipSystemStatsHCOutMcastPkts\
}\
    STATUS     current\
    DESCRIPTION\
           "IP system wide statistics for systems that may overflow the\
            standard packet counters within 1 hour."\
    ::= { ipMIBGroups 11 }\
\
ipv4SystemStatsHCPacketGroup OBJECT-GROUP\
    OBJECTS   { ipSystemStatsHCInBcastPkts,\
                ipSystemStatsHCOutBcastPkts }\
    STATUS     current\
    DESCRIPTION\
           "IPv4 only system wide statistics for systems that may\
            overflow the standard packet counters within 1 hour."\
    ::= { ipMIBGroups 12 }\
\
ipIfStatsGroup OBJECT-GROUP\
    OBJECTS   { ipIfStatsInReceives,        ipIfStatsInOctets,\
                ipIfStatsInHdrErrors,       ipIfStatsInNoRoutes,\
                ipIfStatsInAddrErrors,      ipIfStatsInUnknownProtos,\
                ipIfStatsInTruncatedPkts,   ipIfStatsInForwDatagrams,\
                ipIfStatsReasmReqds,        ipIfStatsReasmOKs,\
                ipIfStatsReasmFails,        ipIfStatsInDiscards,\
                ipIfStatsInDelivers,        ipIfStatsOutRequests,\
                ipIfStatsOutForwDatagrams,  ipIfStatsOutDiscards,\
                ipIfStatsOutFragReqds,      ipIfStatsOutFragOKs,\
                ipIfStatsOutFragFails,      ipIfStatsOutFragCreates,\
                ipIfStatsOutTransmits,      ipIfStatsOutOctets,\
                ipIfStatsInMcastPkts,       ipIfStatsInMcastOctets,\
                ipIfStatsOutMcastPkts,      ipIfStatsOutMcastOctets,\
                ipIfStatsDiscontinuityTime, ipIfStatsRefreshRate }\
    STATUS     current\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                    [Page 95]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "IP per-interface statistics."\
    ::= { ipMIBGroups 13 }\
\
ipv4IfStatsGroup OBJECT-GROUP\
    OBJECTS   { ipIfStatsInBcastPkts, ipIfStatsOutBcastPkts }\
    STATUS     current\
    DESCRIPTION\
           "IPv4 only per-interface statistics."\
    ::= { ipMIBGroups 14 }\
\
ipIfStatsHCOctetGroup OBJECT-GROUP\
    OBJECTS   { ipIfStatsHCInOctets,      ipIfStatsHCOutOctets,\
                ipIfStatsHCInMcastOctets, ipIfStatsHCOutMcastOctets }\
    STATUS     current\
    DESCRIPTION\
           "IP per-interfaces statistics for systems that include\
            interfaces that may overflow the standard octet\
            counters within 1 hour."\
    ::= { ipMIBGroups 15 }\
\
ipIfStatsHCPacketGroup OBJECT-GROUP\
    OBJECTS   { ipIfStatsHCInReceives,       ipIfStatsHCInForwDatagrams,\
                ipIfStatsHCInDelivers,       ipIfStatsHCOutRequests,\
                ipIfStatsHCOutForwDatagrams, ipIfStatsHCOutTransmits,\
                ipIfStatsHCInMcastPkts,      ipIfStatsHCOutMcastPkts }\
    STATUS     current\
    DESCRIPTION\
           "IP per-interfaces statistics for systems that include\
            interfaces that may overflow the standard packet counters\
            within 1 hour."\
    ::= { ipMIBGroups 16 }\
\
ipv4IfStatsHCPacketGroup OBJECT-GROUP\
    OBJECTS   { ipIfStatsHCInBcastPkts, ipIfStatsHCOutBcastPkts }\
    STATUS     current\
    DESCRIPTION\
           "IPv4 only per-interface statistics for systems that include\
            interfaces that may overflow the standard packet counters\
            within 1 hour."\
    ::= { ipMIBGroups 17 }\
\
ipAddressPrefixGroup OBJECT-GROUP\
    OBJECTS   { ipAddressPrefixOrigin,\
                ipAddressPrefixOnLinkFlag,\
                ipAddressPrefixAutonomousFlag,\
                ipAddressPrefixAdvPreferredLifetime,\
                ipAddressPrefixAdvValidLifetime }\
    STATUS     current\
\
\
\
Routhier, Ed.               Standards Track                    [Page 96]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The group of objects for providing information about address\
            prefixes used by this node."\
    ::= { ipMIBGroups 18 }\
\
ipAddressGroup OBJECT-GROUP\
    OBJECTS   { ipAddressSpinLock,  ipAddressIfIndex,\
                ipAddressType,      ipAddressPrefix,\
                ipAddressOrigin,    ipAddressStatus,\
                ipAddressCreated,   ipAddressLastChanged,\
                ipAddressRowStatus, ipAddressStorageType }\
    STATUS     current\
    DESCRIPTION\
           "The group of objects for providing information about the\
            addresses relevant to this entity's interfaces."\
    ::= { ipMIBGroups 19 }\
\
ipNetToPhysicalGroup OBJECT-GROUP\
    OBJECTS   { ipNetToPhysicalPhysAddress, ipNetToPhysicalLastUpdated,\
                ipNetToPhysicalType,        ipNetToPhysicalState,\
                ipNetToPhysicalRowStatus }\
    STATUS     current\
    DESCRIPTION\
           "The group of objects for providing information about the\
            mappings of network address to physical address known to\
            this node."\
    ::= { ipMIBGroups 20 }\
\
ipv6ScopeGroup OBJECT-GROUP\
    OBJECTS   { ipv6ScopeZoneIndexLinkLocal,\
                ipv6ScopeZoneIndex3,\
                ipv6ScopeZoneIndexAdminLocal,\
                ipv6ScopeZoneIndexSiteLocal,\
                ipv6ScopeZoneIndex6,\
                ipv6ScopeZoneIndex7,\
                ipv6ScopeZoneIndexOrganizationLocal,\
                ipv6ScopeZoneIndex9,\
                ipv6ScopeZoneIndexA,\
                ipv6ScopeZoneIndexB,\
                ipv6ScopeZoneIndexC,\
                ipv6ScopeZoneIndexD }\
    STATUS     current\
    DESCRIPTION\
           "The group of objects for managing IPv6 scope zones."\
    ::= { ipMIBGroups 21 }\
\
ipDefaultRouterGroup OBJECT-GROUP\
    OBJECTS   { ipDefaultRouterLifetime, ipDefaultRouterPreference }\
\
\
\
Routhier, Ed.               Standards Track                    [Page 97]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    STATUS     current\
    DESCRIPTION\
           "The group of objects for providing information about default\
            routers known to this node."\
    ::= { ipMIBGroups 22 }\
\
ipv6RouterAdvertGroup OBJECT-GROUP\
    OBJECTS   { ipv6RouterAdvertSpinLock,\
                ipv6RouterAdvertSendAdverts,\
                ipv6RouterAdvertMaxInterval,\
                ipv6RouterAdvertMinInterval,\
                ipv6RouterAdvertManagedFlag,\
                ipv6RouterAdvertOtherConfigFlag,\
                ipv6RouterAdvertLinkMTU,\
                ipv6RouterAdvertReachableTime,\
                ipv6RouterAdvertRetransmitTime,\
                ipv6RouterAdvertCurHopLimit,\
                ipv6RouterAdvertDefaultLifetime,\
                ipv6RouterAdvertRowStatus\
}\
    STATUS     current\
    DESCRIPTION\
           "The group of objects for controlling information advertised\
            by IPv6 routers."\
    ::= { ipMIBGroups 23 }\
\
icmpStatsGroup OBJECT-GROUP\
    OBJECTS   {icmpStatsInMsgs,    icmpStatsInErrors,\
               icmpStatsOutMsgs,   icmpStatsOutErrors,\
               icmpMsgStatsInPkts, icmpMsgStatsOutPkts }\
    STATUS     current\
    DESCRIPTION\
           "The group of objects providing ICMP statistics."\
    ::= { ipMIBGroups 24 }\
\
--\
-- Deprecated objects\
--\
\
ipInReceives OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The total number of input datagrams received from\
            interfaces, including those received in error.\
\
            This object has been deprecated, as a new IP version-neutral\
\
\
\
Routhier, Ed.               Standards Track                    [Page 98]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInRecieves."\
    ::= { ip 3 }\
\
ipInHdrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of input datagrams discarded due to errors in\
            their IPv4 headers, including bad checksums, version number\
            mismatch, other format errors, time-to-live exceeded, errors\
            discovered in processing their IPv4 options, etc.\
\
            This object has been deprecated as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInHdrErrors."\
    ::= { ip 4 }\
\
ipInAddrErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of input datagrams discarded because the IPv4\
            address in their IPv4 header's destination field was not a\
            valid address to be received at this entity.  This count\
            includes invalid addresses (e.g., 0.0.0.0) and addresses of\
            unsupported Classes (e.g., Class E).  For entities which are\
            not IPv4 routers, and therefore do not forward datagrams,\
            this counter includes datagrams discarded because the\
            destination address was not a local address.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInAddrErrors."\
    ::= { ip 5 }\
\
ipForwDatagrams OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of input datagrams for which this entity was not\
            their final IPv4 destination, as a result of which an\
            attempt was made to find a route to forward them to that\
            final destination.  In entities which do not act as IPv4\
            routers, this counter will include only those packets which\
\
\
\
Routhier, Ed.               Standards Track                    [Page 99]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            were Source-Routed via this entity, and the Source-Route\
            option processing was successful.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInForwDatagrams."\
    ::= { ip 6 }\
\
ipInUnknownProtos OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of locally-addressed datagrams received\
            successfully but discarded because of an unknown or\
            unsupported protocol.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInUnknownProtos."\
    ::= { ip 7 }\
\
ipInDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of input IPv4 datagrams for which no problems\
            were encountered to prevent their continued processing, but\
            which were discarded (e.g., for lack of buffer space).  Note\
            that this counter does not include any datagrams discarded\
            while awaiting re-assembly.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsInDiscards."\
    ::= { ip 8 }\
\
ipInDelivers OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The total number of input datagrams successfully delivered\
            to IPv4 user-protocols (including ICMP).\
\
            This object has been deprecated as a new IP version neutral\
            table has been added.  It is loosely replaced by\
\
\
\
Routhier, Ed.               Standards Track                   [Page 100]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            ipSystemStatsIndelivers."\
    ::= { ip 9 }\
\
ipOutRequests OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The total number of IPv4 datagrams which local IPv4 user\
            protocols (including ICMP) supplied to IPv4 in requests for\
            transmission.  Note that this counter does not include any\
            datagrams counted in ipForwDatagrams.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutRequests."\
    ::= { ip 10 }\
\
ipOutDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of output IPv4 datagrams for which no problem was\
            encountered to prevent their transmission to their\
            destination, but which were discarded (e.g., for lack of\
            buffer space).  Note that this counter would include\
            datagrams counted in ipForwDatagrams if any such packets met\
            this (discretionary) discard criterion.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutDiscards."\
    ::= { ip 11 }\
\
ipOutNoRoutes OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 datagrams discarded because no route\
            could be found to transmit them to their destination.  Note\
            that this counter includes any packets counted in\
            ipForwDatagrams which meet this `no-route' criterion.  Note\
            that this includes any datagrams which a host cannot route\
            because all of its default routers are down.\
\
            This object has been deprecated, as a new IP version-neutral\
\
\
\
Routhier, Ed.               Standards Track                   [Page 101]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutNoRoutes."\
    ::= { ip 12 }\
\
ipReasmReqds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 fragments received which needed to be\
            reassembled at this entity.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsReasmReqds."\
    ::= { ip 14 }\
\
ipReasmOKs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 datagrams successfully re-assembled.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsReasmOKs."\
    ::= { ip 15 }\
\
ipReasmFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of failures detected by the IPv4 re-assembly\
            algorithm (for whatever reason: timed out, errors, etc).\
            Note that this is not necessarily a count of discarded IPv4\
            fragments since some algorithms (notably the algorithm in\
            RFC 815) can lose track of the number of fragments by\
            combining them as they are received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsReasmFails."\
    ::= { ip 16 }\
\
ipFragOKs OBJECT-TYPE\
    SYNTAX     Counter32\
\
\
\
Routhier, Ed.               Standards Track                   [Page 102]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 datagrams that have been successfully\
            fragmented at this entity.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutFragOKs."\
    ::= { ip 17 }\
\
ipFragFails OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 datagrams that have been discarded\
            because they needed to be fragmented at this entity but\
            could not be, e.g., because their Don't Fragment flag was\
            set.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutFragFails."\
    ::= { ip 18 }\
\
ipFragCreates OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of IPv4 datagram fragments that have been\
            generated as a result of fragmentation at this entity.\
\
            This object has been deprecated as a new IP version neutral\
            table has been added.  It is loosely replaced by\
            ipSystemStatsOutFragCreates."\
    ::= { ip 19 }\
\
ipRoutingDiscards OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of routing entries which were chosen to be\
            discarded even though they are valid.  One possible reason\
            for discarding such an entry could be to free-up buffer\
            space for other routing entries.\
\
\
\
Routhier, Ed.               Standards Track                   [Page 103]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            This object was defined in pre-IPv6 versions of the IP MIB.\
            It was implicitly IPv4 only, but the original specifications\
            did not indicate this protocol restriction.  In order to\
            clarify the specifications, this object has been deprecated\
            and a similar, but more thoroughly clarified, object has\
            been added to the IP-FORWARD-MIB."\
    ::= { ip 23 }\
\
-- the deprecated IPv4 address table\
\
ipAddrTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpAddrEntry\
    MAX-ACCESS not-accessible\
    STATUS     deprecated\
    DESCRIPTION\
           "The table of addressing information relevant to this\
            entity's IPv4 addresses.\
\
            This table has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by the\
            ipAddressTable although several objects that weren't deemed\
            useful weren't carried forward while another\
            (ipAdEntReasmMaxSize) was moved to the ipv4InterfaceTable."\
    ::= { ip 20 }\
\
ipAddrEntry OBJECT-TYPE\
    SYNTAX     IpAddrEntry\
    MAX-ACCESS not-accessible\
    STATUS     deprecated\
    DESCRIPTION\
           "The addressing information for one of this entity's IPv4\
            addresses."\
    INDEX      { ipAdEntAddr }\
    ::= { ipAddrTable 1 }\
\
IpAddrEntry ::= SEQUENCE {\
        ipAdEntAddr          IpAddress,\
        ipAdEntIfIndex       INTEGER,\
        ipAdEntNetMask       IpAddress,\
        ipAdEntBcastAddr     INTEGER,\
        ipAdEntReasmMaxSize  INTEGER\
    }\
\
ipAdEntAddr OBJECT-TYPE\
    SYNTAX     IpAddress\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
\
\
\
Routhier, Ed.               Standards Track                   [Page 104]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
           "The IPv4 address to which this entry's addressing\
            information pertains."\
    ::= { ipAddrEntry 1 }\
\
ipAdEntIfIndex OBJECT-TYPE\
    SYNTAX     INTEGER (1..2147483647)\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The index value which uniquely identifies the interface to\
            which this entry is applicable.  The interface identified by\
            a particular value of this index is the same interface as\
            identified by the same value of the IF-MIB's ifIndex."\
    ::= { ipAddrEntry 2 }\
\
ipAdEntNetMask OBJECT-TYPE\
    SYNTAX     IpAddress\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The subnet mask associated with the IPv4 address of this\
            entry.  The value of the mask is an IPv4 address with all\
            the network bits set to 1 and all the hosts bits set to 0."\
    ::= { ipAddrEntry 3 }\
\
ipAdEntBcastAddr OBJECT-TYPE\
    SYNTAX     INTEGER (0..1)\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The value of the least-significant bit in the IPv4 broadcast\
            address used for sending datagrams on the (logical)\
            interface associated with the IPv4 address of this entry.\
            For example, when the Internet standard all-ones broadcast\
            address is used, the value will be 1.  This value applies to\
            both the subnet and network broadcast addresses used by the\
            entity on this (logical) interface."\
    ::= { ipAddrEntry 4 }\
\
ipAdEntReasmMaxSize OBJECT-TYPE\
    SYNTAX     INTEGER (0..65535)\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The size of the largest IPv4 datagram which this entity can\
            re-assemble from incoming IPv4 fragmented datagrams received\
            on this interface."\
    ::= { ipAddrEntry 5 }\
\
\
\
Routhier, Ed.               Standards Track                   [Page 105]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
-- the deprecated IPv4 Address Translation table\
\
-- The Address Translation tables contain the IpAddress to\
-- "physical" address equivalences.  Some interfaces do not\
-- use translation tables for determining address\
-- equivalences (e.g., DDN-X.25 has an algorithmic method);\
-- if all interfaces are of this type, then the Address\
-- Translation table is empty, i.e., has zero entries.\
\
ipNetToMediaTable OBJECT-TYPE\
    SYNTAX     SEQUENCE OF IpNetToMediaEntry\
    MAX-ACCESS not-accessible\
    STATUS     deprecated\
    DESCRIPTION\
           "The IPv4 Address Translation table used for mapping from\
            IPv4 addresses to physical addresses.\
\
            This table has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by the\
            ipNetToPhysicalTable."\
    ::= { ip 22 }\
\
ipNetToMediaEntry OBJECT-TYPE\
    SYNTAX     IpNetToMediaEntry\
    MAX-ACCESS not-accessible\
    STATUS     deprecated\
    DESCRIPTION\
           "Each entry contains one IpAddress to `physical' address\
            equivalence."\
    INDEX       { ipNetToMediaIfIndex,\
                  ipNetToMediaNetAddress }\
    ::= { ipNetToMediaTable 1 }\
\
IpNetToMediaEntry ::= SEQUENCE {\
        ipNetToMediaIfIndex      INTEGER,\
        ipNetToMediaPhysAddress  PhysAddress,\
        ipNetToMediaNetAddress   IpAddress,\
        ipNetToMediaType         INTEGER\
    }\
\
ipNetToMediaIfIndex OBJECT-TYPE\
    SYNTAX     INTEGER (1..2147483647)\
    MAX-ACCESS read-create\
    STATUS     deprecated\
    DESCRIPTION\
           "The interface on which this entry's equivalence is\
            effective.  The interface identified by a particular value\
            of this index is the same interface as identified by the\
\
\
\
Routhier, Ed.               Standards Track                   [Page 106]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            same value of the IF-MIB's ifIndex.\
\
            This object predates the rule limiting index objects to a\
            max access value of 'not-accessible' and so continues to use\
            a value of 'read-create'."\
    ::= { ipNetToMediaEntry 1 }\
\
ipNetToMediaPhysAddress OBJECT-TYPE\
    SYNTAX     PhysAddress (SIZE(0..65535))\
    MAX-ACCESS read-create\
    STATUS     deprecated\
    DESCRIPTION\
           "The media-dependent `physical' address.  This object should\
            return 0 when this entry is in the 'incomplete' state.\
\
            As the entries in this table are typically not persistent\
            when this object is written the entity should not save the\
            change to non-volatile storage.  Note: a stronger\
            requirement is not used because this object was previously\
            defined."\
    ::= { ipNetToMediaEntry 2 }\
\
ipNetToMediaNetAddress OBJECT-TYPE\
    SYNTAX     IpAddress\
    MAX-ACCESS read-create\
    STATUS     deprecated\
    DESCRIPTION\
           "The IpAddress corresponding to the media-dependent\
            `physical' address.\
\
            This object predates the rule limiting index objects to a\
            max access value of 'not-accessible' and so continues to use\
            a value of 'read-create'."\
    ::= { ipNetToMediaEntry 3 }\
\
ipNetToMediaType OBJECT-TYPE\
    SYNTAX     INTEGER {\
                other(1),        -- none of the following\
                invalid(2),      -- an invalidated mapping\
                dynamic(3),\
                static(4)\
            }\
    MAX-ACCESS read-create\
    STATUS     deprecated\
    DESCRIPTION\
           "The type of mapping.\
\
            Setting this object to the value invalid(2) has the effect\
\
\
\
Routhier, Ed.               Standards Track                   [Page 107]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            of invalidating the corresponding entry in the\
            ipNetToMediaTable.  That is, it effectively dis-associates\
            the interface identified with said entry from the mapping\
            identified with said entry.  It is an implementation-\
            specific matter as to whether the agent removes an\
            invalidated entry from the table.  Accordingly, management\
            stations must be prepared to receive tabular information\
            from agents that corresponds to entries not currently in\
            use.  Proper interpretation of such entries requires\
            examination of the relevant ipNetToMediaType object.\
\
            As the entries in this table are typically not persistent\
            when this object is written the entity should not save the\
            change to non-volatile storage.  Note: a stronger\
            requirement is not used because this object was previously\
            defined."\
    ::= { ipNetToMediaEntry 4 }\
\
-- the deprecated ICMP group\
\
icmpInMsgs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The total number of ICMP messages which the entity received.\
            Note that this counter includes all those counted by\
            icmpInErrors.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            icmpStatsInMsgs."\
    ::= { icmp 1 }\
\
icmpInErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP messages which the entity received but\
            determined as having ICMP-specific errors (bad ICMP\
            checksums, bad length, etc.).\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            icmpStatsInErrors."\
    ::= { icmp 2 }\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 108]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
icmpInDestUnreachs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Destination Unreachable messages\
            received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 3 }\
\
icmpInTimeExcds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Time Exceeded messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 4 }\
\
icmpInParmProbs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Parameter Problem messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 5 }\
\
icmpInSrcQuenchs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Source Quench messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 6 }\
\
\
\
Routhier, Ed.               Standards Track                   [Page 109]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
icmpInRedirects OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Redirect messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 7 }\
\
icmpInEchos OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Echo (request) messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 8 }\
\
icmpInEchoReps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Echo Reply messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 9 }\
\
icmpInTimestamps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Timestamp (request) messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 10 }\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 110]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
icmpInTimestampReps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Timestamp Reply messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 11 }\
\
icmpInAddrMasks OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Address Mask Request messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 12 }\
\
icmpInAddrMaskReps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Address Mask Reply messages received.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 13 }\
\
icmpOutMsgs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The total number of ICMP messages which this entity\
            attempted to send.  Note that this counter includes all\
            those counted by icmpOutErrors.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            icmpStatsOutMsgs."\
\
\
\
Routhier, Ed.               Standards Track                   [Page 111]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    ::= { icmp 14 }\
\
icmpOutErrors OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP messages which this entity did not send\
            due to problems discovered within ICMP, such as a lack of\
            buffers.  This value should not include errors discovered\
            outside the ICMP layer, such as the inability of IP to route\
            the resultant datagram.  In some implementations, there may\
            be no types of error which contribute to this counter's\
            value.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by\
            icmpStatsOutErrors."\
    ::= { icmp 15 }\
\
icmpOutDestUnreachs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Destination Unreachable messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 16 }\
\
icmpOutTimeExcds OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Time Exceeded messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 17 }\
\
icmpOutParmProbs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
\
\
\
Routhier, Ed.               Standards Track                   [Page 112]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    DESCRIPTION\
           "The number of ICMP Parameter Problem messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 18 }\
\
icmpOutSrcQuenchs OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Source Quench messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 19 }\
\
icmpOutRedirects OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Redirect messages sent.  For a host, this\
            object will always be zero, since hosts do not send\
            redirects.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 20 }\
\
icmpOutEchos OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Echo (request) messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 21 }\
\
icmpOutEchoReps OBJECT-TYPE\
    SYNTAX     Counter32\
\
\
\
Routhier, Ed.               Standards Track                   [Page 113]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Echo Reply messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 22 }\
\
icmpOutTimestamps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Timestamp (request) messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 23 }\
\
icmpOutTimestampReps OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Timestamp Reply messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 24 }\
\
icmpOutAddrMasks OBJECT-TYPE\
    SYNTAX     Counter32\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Address Mask Request messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 25 }\
\
icmpOutAddrMaskReps OBJECT-TYPE\
    SYNTAX     Counter32\
\
\
\
Routhier, Ed.               Standards Track                   [Page 114]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
    MAX-ACCESS read-only\
    STATUS     deprecated\
    DESCRIPTION\
           "The number of ICMP Address Mask Reply messages sent.\
\
            This object has been deprecated, as a new IP version-neutral\
            table has been added.  It is loosely replaced by a column in\
            the icmpMsgStatsTable."\
    ::= { icmp 26 }\
\
-- deprecated conformance information\
-- deprecated compliance statements\
\
ipMIBCompliance MODULE-COMPLIANCE\
    STATUS     deprecated\
    DESCRIPTION\
           "The compliance statement for systems that implement only\
            IPv4.  For version-independence, this compliance statement\
            is deprecated in favor of ipMIBCompliance2."\
    MODULE  -- this module\
        MANDATORY-GROUPS { ipGroup,\
                           icmpGroup }\
    ::= { ipMIBCompliances 1 }\
\
-- deprecated units of conformance\
\
ipGroup OBJECT-GROUP\
    OBJECTS   { ipForwarding,           ipDefaultTTL,\
                ipInReceives,           ipInHdrErrors,\
                ipInAddrErrors,         ipForwDatagrams,\
                ipInUnknownProtos,      ipInDiscards,\
                ipInDelivers,           ipOutRequests,\
                ipOutDiscards,          ipOutNoRoutes,\
                ipReasmTimeout,         ipReasmReqds,\
                ipReasmOKs,             ipReasmFails,\
                ipFragOKs,              ipFragFails,\
                ipFragCreates,          ipAdEntAddr,\
                ipAdEntIfIndex,         ipAdEntNetMask,\
                ipAdEntBcastAddr,       ipAdEntReasmMaxSize,\
                ipNetToMediaIfIndex,    ipNetToMediaPhysAddress,\
                ipNetToMediaNetAddress, ipNetToMediaType,\
                ipRoutingDiscards\
}\
    STATUS     deprecated\
    DESCRIPTION\
           "The ip group of objects providing for basic management of IP\
            entities, exclusive of the management of IP routes.\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 115]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
            As part of the version independence, this group has been\
            deprecated.  "\
    ::= { ipMIBGroups 1 }\
\
icmpGroup OBJECT-GROUP\
    OBJECTS   { icmpInMsgs,          icmpInErrors,\
                icmpInDestUnreachs,  icmpInTimeExcds,\
                icmpInParmProbs,     icmpInSrcQuenchs,\
                icmpInRedirects,     icmpInEchos,\
                icmpInEchoReps,      icmpInTimestamps,\
                icmpInTimestampReps, icmpInAddrMasks,\
                icmpInAddrMaskReps,  icmpOutMsgs,\
                icmpOutErrors,       icmpOutDestUnreachs,\
                icmpOutTimeExcds,    icmpOutParmProbs,\
                icmpOutSrcQuenchs,   icmpOutRedirects,\
                icmpOutEchos,        icmpOutEchoReps,\
                icmpOutTimestamps,   icmpOutTimestampReps,\
                icmpOutAddrMasks,    icmpOutAddrMaskReps }\
    STATUS     deprecated\
    DESCRIPTION\
           "The icmp group of objects providing ICMP statistics.\
\
            As part of the version independence, this group has been\
            deprecated.  "\
    ::= { ipMIBGroups 2 }\
\
END\
\
6.  Previous Work\
\
   This document contains objects modified from RFC 1213 [11], RFC 2011\
   [12], RFC 2465 [13], and RFC 2466 [14].\
\
7.  References\
\
7.1.  Normative References\
\
   [1]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Structure of\
        Management Information Version 2 (SMIv2)", STD 58, RFC 2578,\
        April 1999.\
\
   [2]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Textual\
        Conventions for SMIv2", STD 58, RFC 2579, April 1999.\
\
   [3]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Conformance\
        Statements for SMIv2", STD 58, RFC 2580, April 1999.\
\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 116]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   [4]  Narten, T., Nordmark, E., and W. Simpson, "Neighbor Discovery\
        for IP Version 6 (IPv6)", RFC 2461, December 1998.\
\
   [5]  Thomson, S. and T. Narten, "IPv6 Stateless Address\
        Autoconfiguration", RFC 2462, December 1998.\
\
   [6]  McCloghrie, K. and F. Kastenholz, "The Interfaces Group MIB",\
        RFC 2863, June 2000.\
\
   [7]  Daniele, M., Haberman, B., Routhier, S., and J. Schoenwaelder,\
        "Textual Conventions for Internet Network Addresses", RFC 4001,\
        February 2005.\
\
   [8]  Draves, R. and D. Thaler, "Default Router Preferences and More-\
        Specific Routes", RFC 4191, November 2005.\
\
7.2.  Informative References\
\
   [9]  Case, J., Mundy, R., Partain, D., and B. Stewart, "Introduction\
        and Applicability Statements for Internet-Standard Management\
        Framework", RFC 3410, December 2002.\
\
   [10] Plummer, D., "Ethernet Address Resolution Protocol: Or\
        converting network protocol addresses to 48.bit Ethernet address\
        for transmission on Ethernet hardware", STD 37, RFC 826,\
        November 1982.\
\
   [11] McCloghrie, K. and M. Rose, "Management Information Base for\
        Network Management of TCP/IP-based internets:MIB-II", STD 17,\
        RFC 1213, March 1991.\
\
   [12] McCloghrie, K., "SNMPv2 Management Information Base for the\
        Internet Protocol using SMIv2", RFC 2011, November 1996.\
\
   [13] Haskin, D. and S. Onishi, "Management Information Base for IP\
        Version 6: Textual Conventions and General Group", RFC 2465,\
        December 1998.\
\
   [14] Haskin, D. and S. Onishi, "Management Information Base for IP\
        Version 6: ICMPv6 Group", RFC 2466, December 1998.\
\
   [15] Narten, T. and R. Draves, "Privacy Extensions for Stateless\
        Address Autoconfiguration in IPv6", RFC 3041, January 2001.\
\
   [16] Haberman, B., "IP Forwarding Table MIB", RFC 4292, April 2006.\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 117]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   [17] Hinden, R. and S. Deering, "IP Version 6 Addressing\
        Architecture", RFC 4291, February 2006.\
\
8.  Security Considerations\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write and/or read-create.  Such\
   objects may be considered sensitive or vulnerable in some network\
   environments.  The support for SET operations in a non-secure\
   environment without proper protection can have a negative effect on\
   network operations.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
      ipForwarding and ipv6IpForwarding - these objects allow a manager\
      to enable or disable the routing functions on the entity.  By\
      disabling the routing functions, an attacker would possibly be\
      able to deny service to users.  By enabling the routing functions,\
      an attacker could open a conduit into an area.  This might result\
      in the area providing transit for packets it shouldn't or might\
      allow the attacker access to the area bypassing security\
      safeguards.\
\
      ipDefaultTTL and ipv6IpDefaultHopLimit - these objects allow a\
      manager to determine the diameter of the valid area for a packet.\
      By decreasing the value of these objects, an attacker could cause\
      packets to be discarded before reaching their destinations.\
\
      ipv4InterfaceEnableStatus and ipv6InterfaceEnableStatus - these\
      objects allow a manager to enable or disable IPv4 and IPv6 on a\
      specific interface.  By enabling a protocol on an interface, an\
      attacker might be able to create an unsecured path into a node (or\
      through it if routing is also enabled).  By disabling a protocol\
      on an interface, an attacker might be able to force packets to be\
      routed through some other interface or deny access to some or all\
      of the network via that protocol.\
\
      ipAddressTable - the objects in this table specify the addresses\
      in use on this node.  By modifying this information, an attacker\
      can cause a node to either ignore messages destined to it or\
      accept (at least at the IP layer) messages it would otherwise\
      ignore.  The use of filtering or security associations may reduce\
      the potential damage in the latter case.\
\
      ipv6RouterAdvertTable - the objects in this table specify the\
      information that a router should propagate in its routing\
      advertisement messages.  By modifying this information, an\
      attacker can interfere with the auto-configuration of all hosts on\
      the link.  Most modifications to this table will result in a\
\
\
\
Routhier, Ed.               Standards Track                   [Page 118]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
      denial of service to some or all hosts on the link.  However two\
      objects, ipv6RouterAdvertManagedFlag and\
      ipv6RouterAdvertOtherConfigFlag, indicate if a host should acquire\
      configuration information from some other source.  By enabling\
      these, an attacker might be able to cause a host to retrieve its\
      configuration information from a compromised source.\
\
      ipNetToPhysicalPhysAddress and ipNetToPhysicalType - these objects\
      specify information used to translate a network (IP) address into\
      a media dependent address.  By modifying these objects, an\
      attacker could disable communication with a node or divert\
      messages from one node to another.  However, the attacker may be\
      able to carry out a similar attack by simply responding to the ARP\
      or ND request made by the target node.\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
   control even GET access to these objects and possibly to even encrypt\
   the values of these objects when sending them over the network via\
   SNMP.\
\
   These are the tables and objects and their sensitivity/vulnerability:\
\
      Essentially, all of the objects in this MIB could be considered\
      sensitive as they report on the status of the IP modules within a\
      system.  However, the ipSystemStatsTable, ipIfStatsTable, and\
      ipAddressTable are likely to be of most interest to an attacker.\
      The statistics tables supply information about the quantity and\
      type of traffic this node is processing and, especially for\
      transit providers, may be considered sensitive.  The address table\
      provides a convenient list of all addresses in use by this node.\
      Each address in isolation is unremarkable, however, the total list\
      would allow an attacker to correlate otherwise unrelated traffic.\
      For example, an attacker might be able to correlate an RFC 3041\
      [15] private address with known public addresses, thus\
      circumventing the intentions of RFC 3041.\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPSec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.\
\
   It is RECOMMENDED that implementers consider the security features as\
   provided by the SNMPv3 framework (see [9], section 8), including full\
   support for the SNMPv3 cryptographic mechanisms (for authentication\
   and privacy).\
\
\
\
Routhier, Ed.               Standards Track                   [Page 119]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
   Further, deployment of SNMP versions prior to SNMPv3 is NOT\
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\
   enable cryptographic security.  It is then a customer/operator\
   responsibility to ensure that the SNMP entity giving access to an\
   instance of this MIB module, is properly configured to give access to\
   the objects only to those principals (users) that have legitimate\
   rights to indeed GET or SET (change/create/delete) them.\
\
9.  Acknowledgements\
\
   Reviews and other contributions were made by:\
\
   Dario Acornero, Cisco Systems\
   Mike MacFaden, VMWare\
   Keith McCloghrie, Cisco Systems\
   Juergen Schoenwalder, TU Braunschweig\
   Margaret Wasserman, Devicescape\
\
10.  Authors\
\
   This document was written by the IPv6 MIB revision design team:\
\
   Bill Fenner, AT&T Labs -- Research\
   EMail: fenner@research.att.com\
\
   Brian Haberman\
   EMail: brian@innovationslab.net\
\
   Shawn A. Routhier\
   EMail: sar@iwl.com\
\
   Dave Thaler, Microsoft\
   EMail: dthaler@microsoft.com\
\
   This document updates parts of the MIBs from several other documents.\
   RFC 2011 is the previous update to the IP MIB.  RFC 2465 and RFC 2466\
   are the first versions that specified IPv6 addresses and information.\
\
   RFC 2011:\
   Keith McCloghrie, Cisco Systems (Editor)\
\
   RFC 2465 and RFC 2466:\
   Dimitry Haskin, Bay Networks\
\
   Steve Onishi, Bay Networks\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 120]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
Editor's Contact Information\
\
   Shawn A. Routhier\
   Interworking Labs\
   108 Whispering Pines Dr. Suite 235\
   Scotts Valley, CA 95066\
   USA\
\
   EMail: sar@iwl.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 121]\
\
RFC 4293                         IP MIB                       April 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Routhier, Ed.               Standards Track                   [Page 122]\
\

doc 2
  field 0
    name titolo
    type string
    value rfc4295.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           G. Keeni\
Request for Comments: 4295                          Cyber Solutions Inc.\
Category: Standards Track                                       K. Koide\
                                                       Tohoku University\
                                                               K. Nagami\
                                                      INTEC NetCore Inc.\
                                                           S. Gundavelli\
                                                      Cisco Systems Inc.\
                                                              April 2006\
\
\
                Mobile IPv6 Management Information Base\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This memo defines a portion of the Management Information Base (MIB),\
   the Mobile-IPv6 MIB, for use with network management protocols in the\
   Internet community.  In particular, the Mobile-IPv6 MIB will be used\
   to monitor and control the mobile node, home agent, and correspondent\
   node functions of a Mobile IPv6 (MIPv6) entity.\
\
Table of Contents\
\
   1. The Internet-Standard Management Framework ......................2\
   2. Overview ........................................................2\
      2.1. The Mobile IPv6 Protocol Entities ..........................2\
      2.2. Terminology ................................................3\
   3. Mobile IPv6 Monitoring and Control Requirements .................3\
   4. MIB Design ......................................................4\
   5. The Mobile-IPv6 MIB .............................................6\
   6. Security Considerations .......................................104\
   7. IANA Considerations ...........................................106\
   8. References ....................................................106\
      8.1. Normative References .....................................106\
      8.2. Informative References ...................................107\
   9. Acknowledgements ..............................................107\
\
\
\
Keeni, et al.               Standards Track                     [Page 1]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
1.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to section 7 of\
   RFC 3410 [RFC3410].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\
   [RFC2580].\
\
2.  Overview\
\
2.1.  The Mobile IPv6 Protocol Entities\
\
   Mobile IPv6 (MIPv6) [RFC3775] specifies a protocol that allows nodes\
   to remain reachable while moving around in the IPv6 Internet.  An\
   entity that implements the MIPv6 protocol is a MIPv6 entity.  There\
   are three types of entities envisaged by the MIPv6 protocol.\
\
      mobile node (MN): A node that can change its point of attachment\
      from one link to another, while still being reachable via its home\
      address.\
\
      correspondent node (CN): A peer node with which a mobile node is\
      communicating.  The correspondent node may be either mobile or\
      stationary.  (Note that a correspondent node does not necessarily\
      require MIPv6 support.)\
\
      home agent (HA): A router on a mobile node's home link with which\
      the mobile node has registered its current care-of address.  While\
      the mobile node is away from home, the home agent intercepts\
      packets on the home link destined to the mobile node's home\
      address, encapsulates them, and routes them to the mobile node's\
      registered care-of address.\
\
   This document defines a set of managed objects (MOs) that can be used\
   to monitor and control MIPv6 entities.\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                     [Page 2]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
2.2.  Terminology\
\
   The terminology used in this document is consistent with the\
   definitions used in Mobile IPv6 protocol specification [RFC3775].\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and\
   "OPTIONAL" in this document are to be interpreted as described in\
   BCP 14, RFC 2119 [RFC2119].\
\
3.  Mobile IPv6 Monitoring and Control Requirements\
\
   For managing a MIPv6 entity it is necessary to monitor\
   the following:\
\
       o capabilities of MIPv6 entities\
       o traffic due to MIPv6\
       o binding-related statistics (at home agent, correspondent\
         node, and mobile node)\
       o binding details (at home agent and correspondent node)\
       o history of Binding Updates (at home agent, correspondent\
         node, and mobile node)\
\
   The MIPv6 protocol document stipulates that several MIPv6-related\
   parameters should be manually configurable.  The MIPv6 MIB should\
   define managed objects that can be used to configure the related\
   parameters, for example:\
\
       o the preference value the home agent will use in Router\
         Advertisements;\
       o the lifetime value the home agent will use in Router\
         Advertisements;\
       o whether a home agent will send ICMP Mobile Prefix\
         Advertisements to mobile nodes;\
       o whether a home agent will respond to ICMP Mobile Prefix\
         Solicitation messages from mobile nodes; and\
       o whether a home agent will process multicast group membership\
         control messages from mobile nodes.\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                     [Page 3]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
4.  MIB Design\
\
   The basic principle has been to keep the MIB as simple as possible\
   and at the same time to make it effective enough so that the\
   essential needs of monitoring and control are met.  It is envisaged\
   that wherever possible existing MIBs will be used (e.g., IPSec MIB,\
   Neighbor Discovery MIB, Tunnel MIB [RFC4087]) for monitor and control\
   of MIPv6 entities.\
\
   It is assumed that the Mobile IPv6 Management Information Base\
   (MOBILEIPV6-MIB) will always be implemented in conjunction with the\
   IPv6-capable version of the IP-MIB [RFC4293].  The MOBILEIPV6-MIB\
   uses the textual conventions defined in the INET-ADDRESS-MIB\
   [RFC4001].\
\
   The Mobile-IPv6 MIB is composed of the following groups of\
   definitions:\
\
       - mip6Core: a generic group containing objects that are\
         common to all the Mobile IPv6 entities.\
       - mip6Ha: this group models the home agent service.  It is\
         composed of objects specific to the services and associated\
         advertisement parameters offered by the home agent on each\
         of its links.  It also contains objects pertaining to the\
         maintenance of the home agent list on each of the links on\
         which the service is offered.\
       - mip6Mn: this group models the mobile node service.  It is\
         composed of objects specific to the Dynamic Home Agent\
         discovery function and related parameters.  It also contains\
         objects that record the movement of the mobile node.\
       - mip6Cn: models the correspondent node and is primarily\
         scoped to its participation in the Return Routability\
         procedure for achieving Route Optimization triggered by\
         the mobile node.\
       - mip6Notifications: defines the set of notifications that\
         will be used to asynchronously monitor the Mobile IPv6\
         entities.\
\
   The tables contained in the above groups are as follows:\
\
       mip6BindingCacheTable   : models the binding cache on the home\
                                 agent and correspondent node.  It\
                                 contains details of the Binding Update\
                                 requests that have been received and\
                                 accepted.\
       mip6BindingHistoryTable : tracks the history of the binding\
                                 cache.\
       mip6NodeTrafficTable    : the mobile node-wise traffic counters.\
\
\
\
Keeni, et al.               Standards Track                     [Page 4]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnHomeAddressTable  : contains all the home addresses\
                                 pertaining to the mobile node and\
                                 the corresponding registration status.\
       mip6MnBLTable           : models the Binding Update List on the\
                                 mobile node.  It contains information\
                                 about the registration requests sent\
                                 by the mobile node and the\
                                 corresponding results.\
       mip6CnCounterTable      : contains the mobile node-wise\
                                 registration statistics.\
       mip6HaConfTable         : contains the configurable\
                                 advertisement parameters for all the\
                                 interfaces on which the home agent\
                                 service is advertised.\
       mip6HaCounterTable      : contains registration statistics\
                                 for all mobile nodes registered\
                                 with the home agent.\
       mip6HaListTable         : contains the list of all routers\
                                 that are acting as home agents on\
                                 each of the interfaces on which\
                                 the home agent service is offered\
                                 by this router.\
       mip6HaGlAddrTable       : contains the global addresses of\
                                 the home agents.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                     [Page 5]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
5.  The Mobile-IPv6 MIB.\
\
      MOBILEIPV6-MIB DEFINITIONS ::= BEGIN\
       IMPORTS\
         MODULE-IDENTITY, mib-2, Unsigned32, Integer32, Counter32,\
         Gauge32, Counter64,\
         OBJECT-TYPE, NOTIFICATION-TYPE\
                    FROM SNMPv2-SMI\
         TEXTUAL-CONVENTION,\
         TruthValue, DateAndTime, TimeStamp\
                    FROM SNMPv2-TC\
         MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\
                    FROM SNMPv2-CONF\
         InetAddressType, InetAddress\
                    FROM INET-ADDRESS-MIB\
         ipv6InterfaceIfIndex\
                    FROM IP-MIB\
         ;\
\
     mip6MIB MODULE-IDENTITY\
          LAST-UPDATED "200602010000Z"        --  1st February 2006\
          ORGANIZATION "IETF mip6 Working Group"\
          CONTACT-INFO\
         "                      Glenn Mansfield Keeni\
                        Postal: Cyber Solutions Inc.\
                                6-6-3, Minami Yoshinari\
                                Aoba-ku, Sendai, Japan 989-3204.\
                           Tel: +81-22-303-4012\
                           Fax: +81-22-303-4015\
                        E-mail: glenn@cysols.com\
\
                                Kenichi Nagami\
                        Postal: INTEC NetCore Inc.\
                                1-3-3, Shin-suna\
                                Koto-ku, Tokyo, 135-0075\
                                Japan\
\
                           Tel: +81-3-5665-5069\
                        E-mail: nagami@inetcore.com\
\
                                Kazuhide Koide\
                        Postal: Tohoku University\
                                2-1-1, Katahira\
                                Aoba-ku, Sendai, 980-8577\
                                Japan\
\
                           Tel: +81-22-217-5454\
                        E-mail: koide@shiratori.riec.tohoku.ac.jp\
\
\
\
Keeni, et al.               Standards Track                     [Page 6]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
\
                                Sri Gundavelli\
                        Postal: Cisco Systems\
                                170 W.Tasman Drive,\
                                San Jose, CA 95134\
                                USA\
\
                           Tel: +1-408-527-6109\
                        E-mail: sgundave@cisco.com\
\
             Support Group E-mail: mip6@ietf.org"\
\
             DESCRIPTION\
                     "The MIB module for monitoring Mobile-IPv6\
                      entities.\
\
                      Copyright (C) The Internet Society 2006.  This\
                      version of this MIB module is part of RFC 4295;\
                      see the RFC itself for full legal notices.\
                     "\
\
             REVISION    "200602010000Z"      -- 1st February 2006\
             DESCRIPTION "Initial version, published as RFC 4295."\
\
                  ::= { mib-2 133 }\
\
\
       -- The major groups\
\
       mip6Notifications        OBJECT IDENTIFIER ::= { mip6MIB 0 }\
       mip6Objects              OBJECT IDENTIFIER ::= { mip6MIB 1 }\
       mip6Conformance          OBJECT IDENTIFIER ::= { mip6MIB 2 }\
       mip6Core                 OBJECT IDENTIFIER ::= { mip6Objects 1 }\
       mip6Mn                   OBJECT IDENTIFIER ::= { mip6Objects 2 }\
       mip6Cn                   OBJECT IDENTIFIER ::= { mip6Objects 3 }\
       mip6Ha                   OBJECT IDENTIFIER ::= { mip6Objects 4 }\
\
       -- The sub groups\
\
       mip6System               OBJECT IDENTIFIER ::= { mip6Core 1 }\
       mip6Bindings             OBJECT IDENTIFIER ::= { mip6Core 2 }\
       mip6Stats                OBJECT IDENTIFIER ::= { mip6Core 3 }\
\
       mip6MnSystem             OBJECT IDENTIFIER ::= { mip6Mn 1 }\
       mip6MnConf               OBJECT IDENTIFIER ::= { mip6Mn 2 }\
       mip6MnRegistration       OBJECT IDENTIFIER ::= { mip6Mn 3 }\
\
       mip6CnSystem             OBJECT IDENTIFIER ::= { mip6Cn 1 }\
\
\
\
Keeni, et al.               Standards Track                     [Page 7]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnStats              OBJECT IDENTIFIER ::= { mip6Cn 2 }\
\
       mip6HaAdvertisement      OBJECT IDENTIFIER ::= { mip6Ha 1 }\
       mip6HaStats              OBJECT IDENTIFIER ::= { mip6Ha 2 }\
\
\
\
      -- Textual Conventions\
       Mip6BURequestRejectionCode ::= TEXTUAL-CONVENTION\
              STATUS        current\
              DESCRIPTION\
                      "The value of the status field in the Binding\
                       Acknowledgment message when the Binding Update\
                       was rejected.\
                      "\
              REFERENCE\
                      "RFC 3775 : Section 6.1.8"\
              SYNTAX  INTEGER {\
                      reasonUnspecified               (1),  --(Code 128)\
                      admProhibited                   (2),  --(Code 129)\
                      insufficientResource            (3),  --(Code 130)\
                      homeRegistrationNotSupported    (4),  --(Code 131)\
                      notHomeSubnet                   (5),  --(Code 132)\
                      notHomeAgentForThisMobileNode   (6),  --(Code 133)\
                      duplicateAddressDetectionFailed (7),  --(Code 134)\
                      sequenceNumberOutOfWindow       (8),  --(Code 135)\
                      expiredHomeNonceIndex           (9),  --(Code 136)\
                      expiredCareofNonceIndex         (10), --(Code 137)\
                      expiredNonces                   (11), --(Code 138)\
                      registrationTypeChangeDisallowed(12)  --(Code 139)\
                     }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                     [Page 8]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6Capabilities OBJECT-TYPE\
           SYNTAX      BITS {\
                            mobileNode         (0),\
                            homeAgent          (1),\
                            correspondentNode  (2)\
                       }\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "This object indicates the Mobile IPv6 functions that\
                    are supported by this managed entity.  Multiple\
                    Mobile IPv6 functions may be supported by a single\
                    entity.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 3.2, 4.1"\
           ::= { mip6System 1 }\
\
       mip6Status OBJECT-TYPE\
           SYNTAX      INTEGER { enabled(1), disabled(2) }\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                   "This object indicates whether the Mobile IPv6\
                    function is enabled for the managed entity.  If it\
                    is enabled, the agent discovery and registration\
                    functions will be operational.\
                    Changing the status from enabled(1) to disabled(2)\
                    will terminate the agent discovery and registration\
                    functions.  On the other hand, changing the status\
                    from disabled(2) to enabled(1) will start the agent\
                    discovery and registration functions.\
\
                    The value of this object SHOULD remain unchanged\
                    across reboots of the managed entity.\
                   "\
           ::= { mip6System 2 }\
\
\
       -- mip6BindingCache\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                     [Page 9]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6BindingCacheTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6BindingCacheEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "This table models the Binding Cache on the\
                    managed entity.  The cache is maintained by home\
                    agents and correspondent nodes.  It contains\
                    both correspondent registration entries and home\
                    registration entries.\
\
                    Entries in this table are not required to survive\
                    a reboot of the managed entity.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 4.5, 9.1, 10.1"\
           ::= { mip6Bindings 1 }\
\
        mip6BindingCacheEntry OBJECT-TYPE\
           SYNTAX      Mip6BindingCacheEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "This entry represents a conceptual row in the\
                    binding cache table.  It represents a single Binding\
                    Update.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6BindingHomeAddress\
                    exceeds 113, then OIDs of column\
                    instances in this row will have more than 128\
                    sub-identifiers and cannot be accessed using\
                    SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX  { mip6BindingHomeAddressType, mip6BindingHomeAddress }\
           ::= { mip6BindingCacheTable 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 10]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        Mip6BindingCacheEntry ::=\
           SEQUENCE {\
            mip6BindingHomeAddressType   InetAddressType,\
            mip6BindingHomeAddress       InetAddress,\
            mip6BindingCOAType           InetAddressType,\
            mip6BindingCOA               InetAddress,\
            mip6BindingTimeRegistered    DateAndTime,\
            mip6BindingTimeGranted       Gauge32,\
            mip6BindingTimeRemaining     Gauge32,\
            mip6BindingHomeRegn          TruthValue,\
            mip6BindingMaxSeq            Unsigned32,\
            mip6BindingUsageTS           DateAndTime,\
            mip6BindingUsageCount        Gauge32,\
            mip6BindingAdminStatus       INTEGER\
           }\
\
       mip6BindingHomeAddressType OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the mip6BindingHomeAddress\
                    that follows.\
                   "\
           ::= { mip6BindingCacheEntry 1 }\
\
       mip6BindingHomeAddress OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The home address of the mobile node corresponding\
                    to the Binding Cache entry.  This field is used as\
                    the key for searching the mobile node's current\
                    care-of address in the Binding Cache.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6BindingHomeAddressType object.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 2 }\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 11]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6BindingCOAType   OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the mip6BindingCOA that\
                    follows.\
                   "\
           ::= { mip6BindingCacheEntry 3 }\
\
       mip6BindingCOA   OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The care-of address of the mobile node indicated by\
                    the home address field (mip6BindingHomeAddress) in\
                    this Binding Cache entry.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding mip6BindingCOAType\
                    object.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 4 }\
\
        mip6BindingTimeRegistered OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The timestamp when this Binding Cache entry was\
                    created.\
                   "\
           ::= { mip6BindingCacheEntry 5 }\
\
        mip6BindingTimeGranted OBJECT-TYPE\
           SYNTAX      Gauge32\
           UNITS       "seconds"\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The lifetime in seconds granted to the mobile node\
                    for this registration.\
                   "\
           ::= { mip6BindingCacheEntry 6 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 12]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6BindingTimeRemaining OBJECT-TYPE\
           SYNTAX      Gauge32\
           UNITS       "seconds"\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The lifetime in seconds remaining for this\
                    registration.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 7 }\
\
        mip6BindingHomeRegn OBJECT-TYPE\
           SYNTAX      TruthValue\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "This object indicates whether or not this Binding\
                    Cache entry is a home registration entry (applicable\
                    only on nodes that support home agent\
                    functionality).\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 8 }\
\
        mip6BindingMaxSeq OBJECT-TYPE\
           SYNTAX      Unsigned32 (0..65536)\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The maximum value of the Sequence Number field\
                    received in previous Binding Updates for this home\
                    address (mip6BindingHomeAddress).\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1, 9.5.1"\
           ::= { mip6BindingCacheEntry 9 }\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 13]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6BindingUsageTS OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The timestamp when this entry was last looked up.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 10 }\
\
        mip6BindingUsageCount OBJECT-TYPE\
           SYNTAX      Gauge32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of times this entry was looked up.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 11 }\
\
        mip6BindingAdminStatus OBJECT-TYPE\
           SYNTAX      INTEGER {\
                           active     (1),\
                           inactive   (2)\
                       }\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                   "This is an administrative object used to control\
                    the status of a binding cache entry.  By default\
                    the value will be 'active'(1).\
                    A value of 'inactive'(2) will indicate that the\
                    validity of the entry is suspended.  It does not\
                    exist in the binding cache for all practical\
                    purposes.\
                    The state can be changed from 'active' to\
                    'inactive' by operator intervention.\
                    Causing the state to change to 'inactive' results\
                    in the entry being deleted from the cache.\
                    Attempts to change the status from 'inactive'\
                    to 'active' will be rejected.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.1"\
           ::= { mip6BindingCacheEntry 12 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 14]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       -- mip6BindingHistory\
       -- Once the lifetime expires an entry will be removed from the\
       -- Binding Cache.\
       -- For monitoring purposes it will be useful to have access to\
       -- the history of the Binding Cache.  BindingHistoryTable serves\
       -- this purpose.  It records the history of the Bindings.\
       -- The size of the table will be left to implementors.\
\
        mip6BindingHistoryTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6BindingHistoryEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "A table containing a record of the bindings.\
                   "\
           ::= { mip6Bindings 2 }\
\
        mip6BindingHistoryEntry OBJECT-TYPE\
           SYNTAX      Mip6BindingHistoryEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The record of a binding.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6BindingHstHomeAddress\
                    exceeds 112, then OIDs of column\
                    instances in this row will have more than 128\
                    sub-identifiers and cannot be accessed using\
                    SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX   { mip6BindingHstHomeAddressType,\
                     mip6BindingHstHomeAddress ,\
                     mip6BindingHstIndex}\
           ::= { mip6BindingHistoryTable 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 15]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        Mip6BindingHistoryEntry ::=\
           SEQUENCE {\
            mip6BindingHstHomeAddressType   InetAddressType,\
            mip6BindingHstHomeAddress       InetAddress,\
            mip6BindingHstIndex             Unsigned32,\
            mip6BindingHstCOAType           InetAddressType,\
            mip6BindingHstCOA               InetAddress,\
            mip6BindingHstTimeRegistered    DateAndTime,\
            mip6BindingHstTimeExpired       DateAndTime,\
            mip6BindingHstHomeRegn          TruthValue,\
            mip6BindingHstUsageTS           DateAndTime,\
            mip6BindingHstUsageCount        Gauge32\
           }\
\
       mip6BindingHstHomeAddressType OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the\
                    mip6BindingHstHomeAddress that follows.\
                   "\
           ::= { mip6BindingHistoryEntry 1 }\
\
       mip6BindingHstHomeAddress OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "Mobile node's home address.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6BindingHstHomeAddressType object.\
                   "\
           ::= { mip6BindingHistoryEntry 2 }\
\
       mip6BindingHstIndex OBJECT-TYPE\
           SYNTAX      Unsigned32 (1..4294967295)\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The index to uniquely identify this record along\
                    with the mobile node's HomeAddress type and\
                    HomeAddress.  It should be monotonically increasing.\
                    It may wrap after reaching its max value."\
           ::= { mip6BindingHistoryEntry 3 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 16]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6BindingHstCOAType   OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the mip6BindingHstCOA that\
                    follows.\
                   "\
           ::= { mip6BindingHistoryEntry 4 }\
\
       mip6BindingHstCOA   OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Mobile node's care-of address.  One mobile node can\
                    have multiple bindings with different\
                    care-of addresses.\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6BindingHstCOAType object.\
                   "\
           ::= { mip6BindingHistoryEntry 5 }\
\
        mip6BindingHstTimeRegistered OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The timestamp when this Binding Cache entry was\
                    created.\
                   "\
           ::= { mip6BindingHistoryEntry 6 }\
\
        mip6BindingHstTimeExpired OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The timestamp when this Binding Cache entry expired.\
                   "\
           ::= { mip6BindingHistoryEntry 7 }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 17]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6BindingHstHomeRegn OBJECT-TYPE\
           SYNTAX      TruthValue\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "This object indicates whether or not this Binding\
                    Cache entry is a home registration entry (applicable\
                    only on nodes that support home agent\
                    functionality).\
                   "\
           ::= { mip6BindingHistoryEntry 8 }\
\
        mip6BindingHstUsageTS OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The timestamp when this entry was last looked up.\
                   "\
           ::= { mip6BindingHistoryEntry 9 }\
\
        mip6BindingHstUsageCount OBJECT-TYPE\
           SYNTAX      Gauge32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of times this entry was looked up.\
                   "\
           ::= { mip6BindingHistoryEntry 10 }\
\
       -- mip6TrafficCounters\
\
       -- MIPv6 Traffic will be characterized by\
       -- IPv6 datagrams which satisfy at least one of the following\
       -- conditions\
       --   - the datagrams are tunneled to the mobile node by the HA\
       --   - the datagrams are reverse tunneled by the MN to the HA\
       --   - the datagrams have the Routing header type 2 set.\
       --   - the datagrams have the Home Address option set in the\
       --     Destination Option extension header\
       --   - the datagrams have the mobility header\
\
        mip6TotalTraffic OBJECT IDENTIFIER ::= { mip6Stats 1 }\
       --  REFERENCE\
       --             "RFC 3775 : Section 4.1, 6.3, 6.4"\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 18]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6InOctets  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The total number of octets in the MIPv6 datagrams\
                   received by the MIPv6 entity.  This will include\
                   datagrams with the Mobility Header, the Home Address\
                   option in the Destination Option extension header\
                   (Next Header value = 60), or the type 2 Routing\
                   Header.  It will also include the IPv6 datagrams that\
                   are reverse tunneled to a home agent from a mobile\
                   node's home address.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CounterDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 1 }\
\
        mip6HCInOctets  OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The total number of octets in the MIPv6 datagrams\
                   received by the MIPv6 entity.  This will include\
                   datagrams with the Mobility Header, the Home Address\
                   option in the Destination Option extension header\
                   (Next Header value = 60), or the type 2 Routing\
                   Header.  It will also include the IPv6 datagrams that\
                   are reverse tunneled to a home agent from a mobile\
                   node's home address.\
                   This object is a 64-bit version of mip6InOctets.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CounterDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 2 }\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 19]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6InPkts    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams received by the MIPv6\
                    entity.  This will include datagrams with the\
                    Mobility Header, the Home Address option in the\
                    Destination Option extension header (Next Header\
                    value = 60), or the type 2 Routing Header.\
                    It will also include the IPv6 datagrams that are\
                    reverse tunneled to a home agent from a mobile\
                    node's home address.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 3 }\
\
        mip6HCInPkts    OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams received by the MIPv6\
                    entity.  This will include datagrams with the\
                    Mobility Header, the Home Address option in the\
                    Destination Option extension header (Next Header\
                    value = 60), or the type 2 Routing Header.  It will\
                    also include the IPv6 datagrams that are reverse\
                    tunneled to a home agent from a mobile node's home\
                    address.\
                    This object is a 64-bit version of mip6InPkts.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 4 }\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 20]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6OutOctets  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The total number of octets in the MIPv6 datagrams\
                   sent by the MIPv6 entity.  This will include\
                   datagrams with the Mobility Header, the Home Address\
                   option in the Destination Option extension header\
                   (Next Header value = 60), or the type 2 Routing\
                   Header.  It will also include the IPv6 datagrams that\
                   are reverse tunneled to a home agent from a mobile\
                   node's home address.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CounterDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 5 }\
\
        mip6HCOutOctets  OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The total number of octets in the MIPv6 datagrams\
                   sent by the MIPv6 entity.  This will include\
                   datagrams with the Mobility Header, the Home Address\
                   option in the Destination Option extension header\
                   (Next Header value = 60), or the type 2 Routing\
                   Header.  It will also include the IPv6 datagrams that\
                   are reverse tunneled to a home agent from a mobile\
                   node's home address.\
                   This object is a 64-bit version of mip6OutOctets.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CounterDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 6 }\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 21]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6OutPkts    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams sent by the MIPv6\
                    entity.  This will include the datagrams with\
                    Mobility Header, the Home Address option in the\
                    Destination Option extension header (Next Header\
                    value = 60), or the type 2 Routing Header.  It will\
                    also include the IPv6 datagrams that are reverse\
                    tunneled to a home agent from a mobile node's home\
                    address.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 7 }\
\
        mip6HCOutPkts    OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams sent by the MIPv6\
                    entity.  This will include datagrams with the\
                    Mobility Header, the Home Address option in the\
                    Destination Option extension header (Next Header\
                    value = 60), or the type 2 Routing Header.  It will\
                    also include the IPv6 datagrams that are reverse\
                    tunneled to a home agent from a mobile node's home\
                    address.\
                    This object is a 64-bit version of mip6OutPkts.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6TotalTraffic 8 }\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 22]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6CounterDiscontinuityTime OBJECT-TYPE\
           SYNTAX      TimeStamp\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The value of sysUpTime on the most recent occasion\
                    at which any one or more of this MIPv6 entities\
                    global counters, viz., counters with OID prefix\
                    'mip6TotalTraffic' or 'mip6CnGlobalStats' or\
                    'mip6HaGlobalStats' suffered a discontinuity.\
                    If no such discontinuities have occurred since the\
                    last re-initialization of the local management\
                    subsystem, then this object will have a zero value.\
                   "\
           ::= { mip6TotalTraffic 9 }\
\
\
       -- mip6NodeTrafficCounters\
\
        mip6NodeTrafficTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6NodeTrafficEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "A table containing MIPv6 traffic counters per mobile\
                    node.\
                   "\
           ::= { mip6Stats 2 }\
\
        mip6NodeTrafficEntry OBJECT-TYPE\
           SYNTAX      Mip6NodeTrafficEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The MIPv6 traffic statistics for a mobile node.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6BindingHomeAddress\
                    exceeds 113, then OIDs of column\
                    instances in this row will have more than 128\
                    sub-identifiers and cannot be accessed using\
                    SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX  { mip6BindingHomeAddressType, mip6BindingHomeAddress }\
           ::= { mip6NodeTrafficTable 1 }\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 23]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        Mip6NodeTrafficEntry ::=\
           SEQUENCE {\
                 mip6NodeInOctets             Counter32,\
                 mip6HCNodeInOctets           Counter64,\
                 mip6NodeInPkts               Counter32,\
                 mip6HCNodeInPkts             Counter64,\
                 mip6NodeOutOctets            Counter32,\
                 mip6HCNodeOutOctets          Counter64,\
                 mip6NodeOutPkts              Counter32,\
                 mip6HCNodeOutPkts            Counter64,\
                 mip6NodeCtrDiscontinuityTime TimeStamp\
           }\
\
        mip6NodeInOctets  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of octets in the MIPv6 datagrams\
                    received from the mobile node by the MIPv6 entity.\
                    This will include datagrams with the Mobility\
                    Header or the Home Address option in the Destination\
                    Option extension header (Next Header value = 60).\
                    It will also include the IPv6 datagrams that are\
                    reverse tunneled to a home agent from the mobile\
                    node's home address.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 24]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6HCNodeInOctets  OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of octets in the MIPv6 datagrams\
                    received from the mobile node by the MIPv6 entity.\
                    This will include datagrams with the Mobility\
                    Header or the Home Address option in the Destination\
                    Option extension header (Next Header value = 60).\
                    It will also include the IPv6 datagrams that are\
                    reverse tunneled to a home agent from the mobile\
                    node's home address.\
                    This object is a 64-bit version of mip6NodeInOctets.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 2 }\
\
        mip6NodeInPkts    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams received from the\
                    mobile node by the MIPv6 entity.  This will include\
                    the datagrams with the Mobility Header or\
                    the Home Address option in the Destination\
                    Option extension header (Next Header value = 60).\
                    It will also include the IPv6 datagrams that are\
                    reverse tunneled to a home agent from the mobile\
                    node's home address.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 3 }\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 25]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6HCNodeInPkts    OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams received from the\
                    mobile node by the MIPv6 entity.  This will include\
                    datagrams with the Mobility Header or the Home\
                    Address option in the Destination Option extension\
                    header (Next Header value = 60).  It will also\
                    include the IPv6 datagrams that are reverse tunneled\
                    to a home agent from the mobile node's home address.\
                    This object is a 64-bit version of mip6NodeInPkts.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 4 }\
\
        mip6NodeOutOctets  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of octets in the MIPv6 datagrams\
                    sent to the mobile node by the MIPv6 entity.  This\
                    will include datagrams with the Mobility Header\
                    or the type 2 Routing Header.  It will also include\
                    the IPv6 datagrams that are tunneled by a home agent\
                    to the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 5 }\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 26]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6HCNodeOutOctets  OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The total number of octets in the MIPv6 datagrams\
                   sent to the mobile node by the MIPv6 entity.  This\
                   will include datagrams with the Mobility Header\
                   or the type 2 Routing Header.  It will also include\
                   the IPv6 datagrams that are tunneled by a home agent\
                   to the mobile node.\
                   This object is a 64-bit version of mip6NodeOutOctets.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6NodeCtrDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 6 }\
\
        mip6NodeOutPkts    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of MIPv6 datagrams sent to the mobile\
                    node by the MIPv6 entity.  This will include\
                    datagrams with the Mobility Header or the type 2\
                    Routing Header.  It will also include the IPv6\
                    datagrams that are tunneled by a home agent to the\
                    mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6NodeCtrDiscontinuityTime.\
                   "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 7 }\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 27]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6HCNodeOutPkts    OBJECT-TYPE\
           SYNTAX      Counter64\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The number of MIPv6 datagrams sent to the mobile\
                   node by the MIPv6 entity.  This will include\
                   datagrams with the Mobility Header or the type 2\
                   Routing Header.  It will also include the IPv6\
                   datagrams that are tunneled by a home agent to the\
                   mobile node.\
                   This object is a 64-bit version of mip6NodeOutOctets.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6NodeCtrDiscontinuityTime.\
                  "\
           REFERENCE\
                      "RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5"\
           ::= { mip6NodeTrafficEntry 8 }\
\
        mip6NodeCtrDiscontinuityTime OBJECT-TYPE\
           SYNTAX      TimeStamp\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The value of sysUpTime on the most recent occasion\
                    at which any one or more of the counters in this row\
                    suffered a discontinuity.  The relevant counters are\
                    the specific instances of any Counter32 or Counter64\
                    objects in this row.\
                    If no such discontinuities have occurred since the\
                    last re-initialization of the local management\
                    subsystem, then this object contains a zero value.\
                   "\
           ::= { mip6NodeTrafficEntry 9 }\
\
       -- mip6MnSystem Group\
\
       mip6MnHomeAddressTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6MnHomeAddressEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "A table containing registration status for all the\
                    home addresses pertaining to the mobile node.\
                   "\
           ::= { mip6MnSystem 1 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 28]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6MnHomeAddressEntry OBJECT-TYPE\
           SYNTAX      Mip6MnHomeAddressEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The registration status for a home address.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6MnHomeAddress\
                    exceeds 113, then OIDs of column instances in\
                    this row will have more than 128 sub-identifiers and\
                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX   { mip6MnHomeAddressType, mip6MnHomeAddress }\
           ::= { mip6MnHomeAddressTable 1 }\
\
        Mip6MnHomeAddressEntry ::=\
           SEQUENCE {\
                 mip6MnHomeAddressType            InetAddressType,\
                 mip6MnHomeAddress                InetAddress,\
                 mip6MnHomeAddressState           INTEGER\
           }\
\
       mip6MnHomeAddressType OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the mip6MnHomeAddress that\
                    follows.\
                   "\
           ::= { mip6MnHomeAddressEntry 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 29]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnHomeAddress OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "A unicast routable address assigned to the mobile\
                   node.  This is used as the 'permanent address' of the\
                   mobile node in the sense that it remains unchanged\
                   regardless of the mobile node's current point of\
                   attachment.  If mobile node doesn't have a home\
                   address assigned yet, then this object will take the\
                   default 'unspecified' value ::0.\
\
                   The type of the address represented by this object\
                   is specified by the corresponding\
                   mip6MnHomeAddressType object.\
                  "\
           REFERENCE\
                   "RFC 3775 : Section 3.2"\
           ::= { mip6MnHomeAddressEntry 2 }\
\
       mip6MnHomeAddressState OBJECT-TYPE\
           SYNTAX      INTEGER {\
                               unknown(1),\
                               home(2),\
                               registered(3),\
                               pending(4),\
                               isolated(5)\
                       }\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "This object indicates the state of the mobile node:\
                    unknown     -- The state of the mobile node\
                                   cannot be determined.\
                    home        -- mobile node is on the home network.\
                    registered  -- mobile node is on a foreign network\
                                   and is registered with the home\
                                   agent.\
                    pending     -- mobile node has sent registration\
                                   request to the home agent and is\
                                   waiting for the reply.\
                    isolated    -- mobile node is isolated from network,\
                                   i.e., it is not in its home network,\
                                   it is not registered, and no\
                                   registration ack is pending.\
                   "\
           ::= { mip6MnHomeAddressEntry 3 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 30]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       -- Mobile Node Discovery and Advertisement Group Counters\
\
       mip6MnDiscoveryRequests OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Dynamic Home Agent Address\
                    Discovery Requests sent by the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.5, 11.4.1"\
              ::= { mip6MnConf 1 }\
\
       mip6MnDiscoveryReplies OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Dynamic Home Agent Address\
                    Discovery Replies received by the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.5, 11.4.1"\
              ::= { mip6MnConf 2 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 31]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnDiscoveryTimeouts OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Dynamic Home Agent Address\
                    Discovery Requests that timed out.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.5, 11.4.1, 12"\
              ::= { mip6MnConf 3 }\
\
       mip6MnPrefixSolicitationsSent OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Mobile Prefix Solicitations\
                    sent by the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.5, 11.4.2"\
              ::= { mip6MnConf 4 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 32]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnPrefixAdvsRecd OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Mobile Prefix Advertisements\
                    received by the mobile node.  This will include the\
                    ICMP Mobile Prefix Advertisements that failed the\
                    validity checks.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.6, 11.4.3"\
           ::= { mip6MnConf 5 }\
\
       mip6MnPrefixAdvsIgnored OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Mobile Prefix Advertisements\
                    discarded by the validity check.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.6, 11.4.3"\
           ::= { mip6MnConf 6 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 33]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnMovedToFN OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Number of times the mobile node has detected\
                    movement to a foreign network from another\
                    foreign network or from the home network, has\
                    reconstructed its care-of address and has initiated\
                    the care-of address registration process.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.5.1"\
           ::= { mip6MnConf 7 }\
\
       mip6MnMovedToHN OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Number of times the mobile node has detected\
                    movement from a foreign network to its home\
                    network.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.5.4"\
           ::= { mip6MnConf 8 }\
\
       -- Mobile Node Registration Group\
\
       -- Registration table of mobile node\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 34]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBLTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6MnBLEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "This table corresponds to the Binding Update List\
                   (BL) that is maintained by the mobile node.  The list\
                   holds an item for every binding that the mobile node\
                   has established or is trying to establish.  Both\
                   correspondent and home registrations are included in\
                   this table.  Entries from the table are deleted as\
                   the lifetime of the binding expires.\
                  "\
           REFERENCE\
                   "RFC 3775 : Section 4.5, 11.1"\
           ::= { mip6MnRegistration 1 }\
\
       mip6MnBLEntry OBJECT-TYPE\
           SYNTAX      Mip6MnBLEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "Information about a Binding Update sent by the\
                    mobile node either to its home agent or to one of\
                    its correspondent nodes.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6MnHomeAddress and\
                    mip6MnBLNodeAddress exceeds 111, then OIDs of column\
                    instances in this row will have more than 128\
                    sub-identifiers and cannot be accessed using\
                    SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX { mip6MnHomeAddressType,\
                   mip6MnHomeAddress,\
                   mip6MnBLNodeAddressType,\
                   mip6MnBLNodeAddress\
                 }\
           ::= { mip6MnBLTable 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 35]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       Mip6MnBLEntry ::= SEQUENCE {\
           mip6MnBLNodeAddressType   InetAddressType,\
           mip6MnBLNodeAddress       InetAddress,\
           mip6MnBLCOAType           InetAddressType,\
           mip6MnBLCOA               InetAddress,\
           mip6MnBLLifeTimeRequested Unsigned32,\
           mip6MnBLLifeTimeGranted   Unsigned32,\
           mip6MnBLMaxSeq            Unsigned32,\
           mip6MnBLTimeSent          DateAndTime,\
           mip6MnBLAccepted          TruthValue,\
           mip6MnBLAcceptedTime      DateAndTime,\
           mip6MnBLRetransmissions   Gauge32,\
           mip6MnBLDontSendBUFlag    TruthValue\
           }\
\
       mip6MnBLNodeAddressType OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                    "The InetAddressType of the mip6MnBLNodeAddress\
                     that follows.\
                    "\
           ::= { mip6MnBLEntry 1 }\
\
       mip6MnBLNodeAddress OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The address of the agent as used in the destination\
                    address of the Binding Update.  The agent\
                    may be a home agent or a correspondent node.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6MnBLNodeAddressType object.\
\
                    "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 2 }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 36]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBLCOAType OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The InetAddressType of the mip6MnBLCOA that follows.\
                   "\
           ::= { mip6MnBLEntry 3 }\
\
       mip6MnBLCOA OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Care-of address that the mobile node intends to\
                    register in the Binding Update request.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding mip6MnBLCOAType\
                    object.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 4 }\
\
       mip6MnBLLifeTimeRequested OBJECT-TYPE\
           SYNTAX      Unsigned32\
           UNITS       "seconds"\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The lifetime requested by the mobile node (in\
                    seconds) in the Binding Update.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 5 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 37]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBLLifeTimeGranted OBJECT-TYPE\
           SYNTAX      Unsigned32\
           UNITS       "seconds"\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The lifetime granted to the mobile node for this\
                    binding.  This field will be inaccessible if the\
                    Binding Update request has not been accepted.\
                    The lifetime remaining (lR) can be calculated using\
                    the current time (cT), mip6MnBLAcceptedTime (aT) and\
                    mip6MnBLLifeTimeGranted (lG) as follows:\
                            lR  = lG - (cT - aT).\
                    When lR is zero, this entry will be deleted from the\
                    Binding Update List and consequently from this\
                    table.\
                   "\
           ::= { mip6MnBLEntry 6 }\
\
       mip6MnBLMaxSeq OBJECT-TYPE\
           SYNTAX      Unsigned32 (0..65536)\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The maximum value of the Sequence Number field sent\
                    in previous Binding Updates to this destination.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 7 }\
\
       mip6MnBLTimeSent OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time when the last (re-)transmission occurred."\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 8 }\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 38]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBLAccepted OBJECT-TYPE\
           SYNTAX      TruthValue\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "true(1) if the mobile node has received a\
                    binding acknowledgment indicating that service has\
                    been accepted (status code 0 or 1); false(2)\
                    otherwise.  false(2) implies that the registration\
                    is still pending.\
                   "\
           ::= { mip6MnBLEntry 9 }\
\
       mip6MnBLAcceptedTime OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time at which the mobile node receives a binding\
                    acknowledgment indicating that Binding Update has\
                    been accepted (status code 0 or 1);\
                    This object will be inaccessible if the Binding\
                    Update request is still pending.\
                   "\
           ::= { mip6MnBLEntry 10 }\
\
\
       mip6MnBLRetransmissions  OBJECT-TYPE\
           SYNTAX      Gauge32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The number of Binding Update retransmissions.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 11 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 39]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBLDontSendBUFlag OBJECT-TYPE\
           SYNTAX      TruthValue\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "true(1) indicates that future binding updates\
                    will not be sent to mip6MnBLNodeAddress.\
                    false(2) implies that binding updates will be\
                    sent to mip6MnBLNodeAddress.\
                    The mobile node sets this flag in the when it\
                    receives an ICMP Parameter Problem, Code 1,\
                    error message in response to a return\
                    routability message or Binding Update sent to\
                    mip6MnBLNodeAddress.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.1"\
           ::= { mip6MnBLEntry 12 }\
\
\
       -- Mobile Node Registration Group Counters\
\
       mip6MnRegnCounters OBJECT IDENTIFIER ::= { mip6MnRegistration 2 }\
\
       mip6MnMobilityMessagesSent OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of mobility messages, i.e., IPv6\
                    datagrams with Mobility Header, sent by the mobile\
                    node.  There are 3 types of mobility messages, viz.,\
                    Home Test Init, Care-of Test Init, and Binding\
                    Updates, that are sent by mobile nodes.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 4.2, 6.1"\
           ::= {  mip6MnRegnCounters 1 }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 40]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnMobilityMessagesRecd OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of mobility messages, i.e., IPv6\
                    datagrams with Mobility Header, received by the\
                    mobile node.  There are 5 types of mobility\
                    messages, viz., Home Test, Care-of Test, Binding\
                    Acknowledgment, Binding Refresh Request, and Binding\
                    Error, that are sent to mobile nodes.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 4.2, 6.1"\
           ::= {  mip6MnRegnCounters 2 }\
\
       mip6MnBUsToHA  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates sent to the mobile\
                    node's home agent(s).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.7.1"\
           ::= {  mip6MnRegnCounters 3 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 41]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBUAcksFromHA  OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of valid binding acknowledgments\
                    received from the mobile node's home agent(s).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.7.3"\
           ::= {  mip6MnRegnCounters 4 }\
\
       mip6MnBUsToCN OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates sent to\
                    correspondent nodes by the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.7.2"\
           ::= {  mip6MnRegnCounters 5 }\
\
       mip6MnBUAcksFromCN OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of valid Binding Update acks\
                    received from all the correspondent nodes.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.7.3"\
           ::= {  mip6MnRegnCounters 6 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 42]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBindingErrorsFromCN OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Error messages received\
                    by mobile node from CN.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           ::= {  mip6MnRegnCounters 7 }\
\
       mip6MnICMPErrorsRecd OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of ICMP Error messages of type ICMP\
                    Parameter Problem, Code 1 or Code 2, received by\
                    the mobile node from a correspondent node in\
                    response to a return routability procedure, a\
                    Binding Update, or a packet with the Home Address\
                    option.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.3.5"\
           ::= {  mip6MnRegnCounters 8 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 43]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBRRequestsRecd OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Refresh requests\
                    received by the mobile node from correspondent\
                    nodes.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 11.7.4"\
           ::= {  mip6MnRegnCounters 9 }\
\
       -- Registration Group counters used for Correspondent Node\
       mip6CnGlobalStats OBJECT IDENTIFIER ::= { mip6CnStats 1 }\
\
\
       mip6CnHomeTestInitsRecd     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Home Test Init messages received.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.4.1"\
           ::= { mip6CnGlobalStats 1 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 44]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnHomeTestsSent      OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Home Test messages sent.  If a Home\
                    Test Init message is found to be valid, a Home Test\
                    message will be generated and sent.  Otherwise the\
                    Home Test message is silently discarded.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.4.3"\
           ::= { mip6CnGlobalStats 2 }\
\
       mip6CnCareOfTestInitsRecd     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Care-of Test Init messages received.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.4.2"\
           ::= { mip6CnGlobalStats 3 }\
\
       mip6CnCareOfTestsSent            OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Care-of Test messages sent.  If a\
                    Care-of Test Init message is found to be valid, a\
                    Care-of Test message will be generated and sent.\
                    Otherwise the Care-of Test message is silently\
                    discarded.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.4.4"\
           ::= { mip6CnGlobalStats 4 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 45]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnBUsRecd     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates received by the\
                    correspondent node from mobile nodes.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.5.1"\
           ::= { mip6CnGlobalStats 5 }\
\
       mip6CnBUAcksSent    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of acknowledgments sent by the\
                    correspondent node for the Binding Updates received.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.5.4"\
           ::= { mip6CnGlobalStats 6 }\
\
\
       mip6CnBRsSent     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Refresh Request messages\
                    sent by the correspondent node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.5.5"\
           ::= { mip6CnGlobalStats 7 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 46]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
        mip6CnBindingErrors OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Error messages sent by the\
                    correspondent node to the mobile node.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.3.3"\
           ::= { mip6CnGlobalStats 8 }\
\
       mip6CnBUsAccepted   OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates accepted by the\
                    correspondent node.  If a Binding Acknowledgment\
                    message is sent for the Binding Update request,\
                    the Status code field in the message will have\
                    a value less than 128.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.5.1, 9.5.4"\
           ::= { mip6CnGlobalStats 9 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 47]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnBUsRejected   OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected\
                    by the correspondent node.  If a Binding\
                    Acknowledgment message has been sent for the Binding\
                    Update request, the Status code field in the\
                    message will have a value greater than or equal to\
                    128.  Otherwise the Binding Update request will be\
                    silently discarded.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 9.5.1, 9.5.4"\
           ::= { mip6CnGlobalStats 10 }\
\
       mip6CnReasonUnspecified OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the correspondent node with status code in the\
                    Binding Acknowledgment message indicating 'reason\
                    unspecified' (Code 128).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8"\
           ::= { mip6CnGlobalStats 11 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 48]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnInsufficientResource OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the correspondent node with status code in the\
                    Binding Acknowledgment message indicating\
                    'insufficient resources' (Code 130).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8"\
           ::= { mip6CnGlobalStats 12 }\
\
       mip6CnHomeRegnNotSupported OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "Total number of Binding Update requests rejected by\
                   correspondent node with status code in the Binding\
                   Acknowledgment message indicating 'home registration\
                   not supported' (Code 131).\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CounterDiscontinuityTime.\
                  "\
           REFERENCE\
                   "RFC 3775 : Section 10.3.1"\
           ::= { mip6CnGlobalStats 13 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 49]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnSeqNumberOutOfWindow OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates rejected by\
                    correspondent node with status code in the Binding\
                    Acknowledgment message indicating 'sequence number\
                    out of window' (Code 135).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8, 9.5.1"\
           ::= { mip6CnGlobalStats 14 }\
\
       mip6CnExpiredHomeNonceIndex OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Updates rejected by\
                    correspondent node with status code in the Binding\
                    Acknowledgment message indicating 'expired home\
                    nonce index' (Code 136).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8, 9.5.1"\
           ::= { mip6CnGlobalStats 15 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 50]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnExpiredCareOfNonceIndex OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Updates rejected by\
                    correspondent node with status code in the Binding\
                    Acknowledgment message indicating 'expired\
                    care-of nonce index' (Code 137).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8, 9.5.1"\
           ::= { mip6CnGlobalStats 16 }\
\
       mip6CnExpiredNonce OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Updates rejected by\
                    correspondent node with status code in the Binding\
                    Acknowledgment message indicating 'expired nonces'\
                    (Code 138), i.e., the correspondent node no longer\
                    recognizes the Home Nonce Index value and the\
                    Care-of Nonce Index value.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8, 9.5.1"\
           ::= { mip6CnGlobalStats 17 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 51]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnRegTypeChangeDisallowed OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Updates rejected by\
                    correspondent node with status code in the Binding\
                    Acknowledgment message indicating 'registration\
                    type change disallowed' (Code 139), i.e., a binding\
                    already exists for the given home address and the\
                    home registration flag has a different value than\
                    the Home Registration (H) bit in the Binding Update.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8, 9.5.1"\
           ::= { mip6CnGlobalStats 18 }\
\
\
\
       -- The Correspondent Node statistics by mobile node\
\
       mip6CnCounterTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6CnCounterEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "A table containing each mobile ."\
           ::= { mip6CnStats 2 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 52]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnCounterEntry OBJECT-TYPE\
           SYNTAX      Mip6CnCounterEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The set of correspondent node counters for a mobile\
                    node.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6BindingHomeAddress\
                    exceeds 113, then OIDs of column instances in\
                    this row will have more than 128 sub-identifiers and\
                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX   {    mip6BindingHomeAddressType,\
                        mip6BindingHomeAddress\
                   }\
           ::= { mip6CnCounterTable 1 }\
\
       Mip6CnCounterEntry ::=\
           SEQUENCE {\
              mip6CnBURequestsAccepted       Counter32,\
              mip6CnBURequestsRejected       Counter32,\
              mip6CnBCEntryCreationTime      DateAndTime,\
              mip6CnBUAcceptedTime           DateAndTime,\
              mip6CnBURejectionTime          DateAndTime,\
              mip6CnBURejectionCode          Mip6BURequestRejectionCode,\
              mip6CnCtrDiscontinuityTime     TimeStamp\
           }\
\
       mip6CnBURequestsAccepted OBJECT-TYPE   --(Code 0,1)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests from the\
                    mobile node accepted by the correspondent node.\
                    If Binding Acknowledgment messages are sent, then\
                    the status code in the message will have a value\
                    less than 128.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CnCtrDiscontinuityTime.\
                   "\
           ::= { mip6CnCounterEntry 1 }\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 53]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnBURequestsRejected     OBJECT-TYPE\
                                         -- (Code 128 through Code 159)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "Total number of Binding Update requests from the\
                   mobile node that have been rejected by the\
                   correspondent node.  This includes the Binding Update\
                   requests for which a Binding Acknowledgment message\
                   has been sent with status code value greater than or\
                   equal to 128 and the Binding Acknowledgment requests\
                   that have been silently discarded.\
                   Discontinuities in the value of this counter can\
                   occur at re-initialization of the management system,\
                   and at other times as indicated by the value of\
                   mip6CnCtrDiscontinuityTime.\
                  "\
           ::= { mip6CnCounterEntry 2 }\
\
       mip6CnBCEntryCreationTime        OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time when the current Binding Cache entry was\
                    created for the mobile node.\
                   "\
           ::= { mip6CnCounterEntry 3 }\
\
       mip6CnBUAcceptedTime OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time at which the last Binding Update was\
                    accepted by the correspondent node and the\
                    corresponding Binding Cache entry was updated.\
                   "\
           ::= { mip6CnCounterEntry 4 }\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 54]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnBURejectionTime   OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time at which the last Binding Update message\
                    was rejected by the correspondent node.\
                    If there have been no rejections, then this object\
                    will be inaccessible.\
                   "\
           ::= { mip6CnCounterEntry 5 }\
\
       mip6CnBURejectionCode  OBJECT-TYPE\
              SYNTAX      Mip6BURequestRejectionCode\
              MAX-ACCESS  read-only\
              STATUS      current\
              DESCRIPTION\
                     "If a Binding Acknowledgment is sent to the mobile\
                      node, this is the status code (> 128) that is\
                      returned in the Binding Acknowledgment.\
                      In case a Binding Acknowledgment is not sent to\
                      the mobile node, then this will be the value\
                      of the Status code that corresponds to the reason\
                      of the rejection.  If there have been no\
                      rejections, then this object will be inaccessible.\
                     "\
           REFERENCE\
                   "RFC 3775 : Section 6.1.8"\
\
              ::= { mip6CnCounterEntry 6 }\
\
        mip6CnCtrDiscontinuityTime OBJECT-TYPE\
           SYNTAX      TimeStamp\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The value of sysUpTime on the most recent occasion\
                   at which any one or more of counters in this row,\
                   viz., instances of 'mip6CnBURequestsAccepted' and\
                   'mip6CnBURequestsRejected', suffered a discontinuity.\
                   If no such discontinuities have occurred since the\
                   last re-initialization of the local management\
                   subsystem, then this object will have a zero value.\
                  "\
           ::= { mip6CnCounterEntry 7 }\
\
       -- Home agent group\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 55]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaAdvsRecd OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of valid Router Advertisements\
                    received with the Home Agent (H) bit set, on\
                    all the links on which it is serving as a Home\
                    Agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 7"\
           ::= { mip6HaAdvertisement 1 }\
\
\
       mip6HaAdvsSent OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of unsolicited multicast Router\
                    Advertisements sent with the Home Agent (H) bit set,\
                    on all the links on which the router is serving as\
                    a Home Agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 7"\
           ::= { mip6HaAdvertisement 2 }\
\
\
       mip6HaConfTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6HaConfEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "A table containing configurable advertisement\
                   parameters for all interfaces on which the\
                   home agent service is advertised.\
                   It is RECOMMENDED that the last written values\
                   of the objects in the conceptual rows of this\
\
\
\
Keeni, et al.               Standards Track                    [Page 56]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   table will remain unchanged across reboots of\
                   the managed entity provided that the interfaces\
                   have not been renumbered after the reboot.\
                  "\
           ::= { mip6HaAdvertisement 3 }\
\
       mip6HaConfEntry OBJECT-TYPE\
           SYNTAX      Mip6HaConfEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "Advertisement parameters for an interface.\
                   The instances of the columnar objects in this entry\
                   pertain to the interface that is uniquely identified\
                   by the ipv6InterfaceIfIndex of the interface.  The\
                   same ipv6InterfaceIfIndex object is used to uniquely\
                   identify instances of the columnar objects of this\
                   conceptual row.\
                  "\
           INDEX   { ipv6InterfaceIfIndex }\
           ::= { mip6HaConfTable 1 }\
\
       Mip6HaConfEntry    ::= SEQUENCE {\
             mip6HaAdvPreference               Integer32,\
             mip6HaAdvLifetime                 Integer32,\
             mip6HaPrefixAdv                   INTEGER,\
             mip6HaPrefixSolicitation          INTEGER,\
             mip6HaMCastCtlMsgSupport          INTEGER\
           }\
\
       mip6HaAdvPreference OBJECT-TYPE\
           SYNTAX      Integer32 (0..65536)\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                  "The preference value for the home agent to\
                   be used in the Router Advertisements.  Higher\
                   value denotes greater preference.\
                  "\
           REFERENCE\
                   "RFC 3775 : Section 7.4, 8.4"\
           ::= { mip6HaConfEntry 1 }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 57]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaAdvLifetime   OBJECT-TYPE\
           SYNTAX      Integer32 (1..65535)\
           UNITS       "seconds"\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                  "The lifetime value for the home agent to be\
                   used in the Router Advertisements.\
                  "\
           REFERENCE\
                   "RFC 3775 : Section 7.4"\
           ::= { mip6HaConfEntry 2 }\
\
       mip6HaPrefixAdv    OBJECT-TYPE\
           SYNTAX      INTEGER { enabled(1), disabled(2) }\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                   "Indicates whether the home agent should support\
                    sending of the ICMP Mobile Prefix Advertisements.\
                    If it is disabled(2), the home agent will not\
                    send ICMP Mobile Prefix Advertisements to the\
                    mobile nodes.\
                    The state can be changed from enabled(1) to\
                    disabled(2) and vice versa by operator\
                    intervention.\
                    Causing the state to change from enabled(1) to\
                    disabled(2) will result in the home agent\
                    disabling the Prefix advertisement function.\
                    On the other hand, changing the status from\
                    disabled(2) to enabled(1) will start the prefix\
                    advertisement function.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 8.4"\
           ::= { mip6HaConfEntry 3}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 58]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaPrefixSolicitation   OBJECT-TYPE\
           SYNTAX      INTEGER { enabled(1), disabled(2) }\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                   "Indicates whether the home agent should respond\
                    to ICMP Mobile Prefix Solicitation messages it\
                    receives from the mobile nodes.  By default, the\
                    value will be set to enabled(1).  If it is\
                    disabled(2), the home agent will not respond to\
                    any ICMP Mobile Prefix Solicitation messages.\
                    The state can be changed from enabled(1) to\
                    disabled(2), by operator intervention.  Causing\
                    the state to change from enabled(1) to\
                    disabled(2) will result in the home agent not\
                    responding to any ICMP Mobile Prefix\
                    Solicitation messages it receives from the\
                    mobile nodes.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 8.4"\
           ::= { mip6HaConfEntry 4}\
\
\
      mip6HaMCastCtlMsgSupport OBJECT-TYPE\
           SYNTAX      INTEGER { enabled(1), disabled(2) }\
           MAX-ACCESS  read-write\
           STATUS      current\
           DESCRIPTION\
                   "Indicates whether the home agent should enable\
                    support for the processing of the multicast\
                    group membership control messages it receives\
                    from the mobile nodes.  By default, the value\
                    will be set to enabled(1).  If it is\
                    disabled(2), the home agent will not process\
                    any multicast group control messages it receives\
                    from the mobile nodes.\
                    The state can be changed from enabled(1) to\
                    disabled(2), by operator intervention.  Causing\
                    the state to change from enabled(1) to\
                    disabled(2) will result in the home agent\
                    disabling the processing of the multicast group\
                    control messages it received from the mobile\
                    nodes.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.4.3"\
           ::= { mip6HaConfEntry 5}\
\
\
\
Keeni, et al.               Standards Track                    [Page 59]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
\
       -- Registration Group counters HA\
\
       mip6HaGlobalStats OBJECT IDENTIFIER ::= { mip6HaStats 1 }\
\
       mip6HaHomeTestInitsRecd     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Home Test Init messages received by\
                    the home agent.  This will include Home Test Init\
                    messages that failed the validity checks.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
             REFERENCE\
                      "RFC 3775 : Section 5.2.5"\
           ::= { mip6HaGlobalStats 1 }\
\
       mip6HaHomeTestsSent      OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Home Test messages sent by the\
                    home agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
            REFERENCE\
                      "RFC 3775 : Section 5.2.5"\
           ::= { mip6HaGlobalStats 2 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 60]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaBUsRecd     OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates received by the\
                    home agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 3 }\
\
       mip6HaBUAcksSent    OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Acknowledgments sent\
                    by the home agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 4 }\
\
       mip6HaBRAdviceSent OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Acknowledgments sent\
                    by the home agent with Binding Refresh Advice\
                    mobility option included.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 5 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 61]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaBUsAccepted   OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Updates accepted by this HA.\
                    Binding Acknowledgment with status code of 0 or 1.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 6 }\
\
       mip6HaPrefDiscoverReqd OBJECT-TYPE        -- (Code 1)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The total number of Binding Acknowledgments sent by\
                    the home agent with status code indicating 'accepted\
                    but prefix discovery necessary'  (Code 1).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 7 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 62]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaReasonUnspecified OBJECT-TYPE               -- (Code 128)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'reason\
                    unspecified' (Code 128).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 8 }\
\
       mip6HaAdmProhibited OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'administratively\
                    prohibited' (Code 129).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 9 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 63]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaInsufficientResource OBJECT-TYPE            -- (Code 130)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'insufficient\
                    resources' (Code 130).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 9.5.2"\
           ::= { mip6HaGlobalStats 10 }\
\
       mip6HaHomeRegnNotSupported OBJECT-TYPE    -- (Code 131)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'home\
                    registration not supported' (Code 131).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 11 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 64]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaNotHomeSubnet OBJECT-TYPE                   -- (Code 132)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'not home subnet'\
                    (Code 132).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 12 }\
\
       mip6HaNotHomeAgentForThisMN OBJECT-TYPE           -- (Code 133)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'not home agent\
                    for this mobile node' (Code 133).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.2"\
           ::= { mip6HaGlobalStats 13 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 65]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaDupAddrDetectionFailed OBJECT-TYPE       -- (Code 134)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'Duplicate\
                    Address Detection failed' (Code 134).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6HaGlobalStats 14 }\
\
       mip6HaSeqNumberOutOfWindow OBJECT-TYPE            -- (Code 135)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'sequence number\
                    out of window' (Code 135).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 9.5.1"\
           ::= { mip6HaGlobalStats 15 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 66]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaExpiredHomeNonceIndex OBJECT-TYPE           -- (Code 136)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'expired home\
                    nonce index' (Code 136).\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 9.5.1"\
           ::= { mip6HaGlobalStats 16 }\
\
       mip6HaRegTypeChangeDisallowed OBJECT-TYPE         -- (Code 139)\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of Binding Update requests rejected by\
                    the home agent with status code in the Binding\
                    Acknowledgment message indicating 'registration\
                    type change disallowed' (Code 139), i.e., a binding\
                    already exists for the given home address and the\
                    home registration flag has a different value than\
                    the Home Registration (H) bit in the Binding Update.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6CounterDiscontinuityTime.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 9.5.1"\
           ::= { mip6HaGlobalStats 17 }\
\
       -- Home agent registration Counters per node\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 67]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaCounterTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6HaCounterEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "A table containing registration statistics for all\
                    mobile nodes registered with the home agent.\
                   "\
           ::= { mip6HaStats 2 }\
\
       mip6HaCounterEntry  OBJECT-TYPE\
           SYNTAX      Mip6HaCounterEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "Home agent registration statistics for a mobile\
                    node.\
\
                    Implementors need to be aware that if the total\
                    number of octets in mip6BindingHomeAddress\
                    exceeds 113, then OIDs of column instances in\
                    this row will have more than 128 sub-identifiers and\
                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\
                   "\
           INDEX   { mip6BindingHomeAddressType,\
                     mip6BindingHomeAddress\
                   }\
           ::= { mip6HaCounterTable 1 }\
\
       Mip6HaCounterEntry      ::= SEQUENCE {\
           mip6HaBURequestsAccepted       Counter32,\
           mip6HaBURequestsDenied         Counter32,\
           mip6HaBCEntryCreationTime      DateAndTime,\
           mip6HaBUAcceptedTime           DateAndTime,\
           mip6HaBURejectionTime          DateAndTime,\
           mip6HaRecentBURejectionCode    Mip6BURequestRejectionCode,\
           mip6HaCtrDiscontinuityTime     TimeStamp\
           }\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 68]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaBURequestsAccepted OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of service requests for the mobile node\
                    accepted by the home agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6HaCtrDiscontinuityTime.\
                   "\
           ::= { mip6HaCounterEntry 1 }\
\
       mip6HaBURequestsDenied   OBJECT-TYPE\
           SYNTAX      Counter32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "Total number of service requests for the mobile node\
                    rejected by the home agent.\
                    Discontinuities in the value of this counter can\
                    occur at re-initialization of the management system,\
                    and at other times as indicated by the value of\
                    mip6HaCtrDiscontinuityTime.\
                   "\
           ::= { mip6HaCounterEntry 2 }\
\
       mip6HaBCEntryCreationTime   OBJECT-TYPE\
           SYNTAX      DateAndTime\
           UNITS       "seconds"\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time when the current Binding Cache entry was\
                    created for the mobile node.\
                   "\
           ::= { mip6HaCounterEntry 3 }\
\
       mip6HaBUAcceptedTime  OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time at which the last Binding Update was\
                    accepted by the home agent for this mobile node.\
                   "\
           ::= { mip6HaCounterEntry 4 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 69]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaBURejectionTime  OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time at which the last Binding Update was\
                    rejected by the home agent for this mobile node.\
                    If there have been no rejections, then this object\
                    will be inaccessible.\
                   "\
           ::= { mip6HaCounterEntry 5 }\
\
       mip6HaRecentBURejectionCode  OBJECT-TYPE\
           SYNTAX      Mip6BURequestRejectionCode\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "If a Binding Acknowledgment is sent to the mobile\
                    node, this is the status code (> 128) that is\
                    returned in the Binding Acknowledgment.\
                    In case a Binding Acknowledgment is not sent to the\
                    mobile node, then this will be the value of the\
                    status code that corresponds to the reason of the\
                    rejection.\
                    If there have been no rejections, then this object\
                    will be inaccessible.\
                   "\
           ::= { mip6HaCounterEntry 6 }\
\
        mip6HaCtrDiscontinuityTime OBJECT-TYPE\
           SYNTAX      TimeStamp\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                  "The value of sysUpTime on the most recent occasion\
                   at which any one or more of counters in this row,\
                   viz., instances of 'mip6HaBURequestsAccepted' and\
                   'mip6HaBURequestsRejected', suffered a discontinuity.\
                   If no such discontinuities have occurred since the\
                   last re-initialization of the local management\
                   subsystem, then this object will have a zero value.\
                  "\
           ::= { mip6HaCounterEntry 7 }\
\
       -- Home Agent List Table\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 70]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaListTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6HaListEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "This table models the Home Agents List that contains\
                    the list of all routers that are acting as home\
                    agents on each of the interfaces on which the home\
                    agent service is offered by this router.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.1"\
           ::= { mip6HaAdvertisement 4 }\
\
       mip6HaListEntry  OBJECT-TYPE\
           SYNTAX      Mip6HaListEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "Information about a router that is offering home\
                   agent service.\
                   The instances of the columnar objects in this entry\
                   pertain to an interface for a particular value of\
                   mip6HaLinkLocalAddressType and\
                   mip6HaLinkLocalAddress.  The interface is uniquely\
                   identified by its ipv6InterfaceIfIndex.  The same\
                   ipv6InterfaceIfIndex object is used in conjunction\
                   with the mip6HaLinkLocalAddressType and\
                   mip6HaLinkLocalAddress to uniquely identify\
                   instances of the columnar objects of this row.\
\
                   Implementors need to be aware that if the total\
                   number of octets in mip6HaLinkLocalAddress\
                   exceeds 112, then OIDs of column instances in\
                   this row will have more than 128 sub-identifiers and\
                   cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\
                  "\
           INDEX   { ipv6InterfaceIfIndex, mip6HaLinkLocalAddressType,\
                                           mip6HaLinkLocalAddress }\
           ::= { mip6HaListTable 1 }\
\
       Mip6HaListEntry      ::= SEQUENCE {\
           mip6HaLinkLocalAddressType      InetAddressType,\
           mip6HaLinkLocalAddress          InetAddress,\
           mip6HaPreference                Integer32,\
           mip6HaRecvLifeTime              Gauge32,\
           mip6HaRecvTimeStamp             DateAndTime\
           }\
\
\
\
Keeni, et al.               Standards Track                    [Page 71]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaLinkLocalAddressType  OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The address type for the link-local address\
                    of the home agent that follows.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.1"\
           ::= { mip6HaListEntry 1 }\
\
       mip6HaLinkLocalAddress  OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The link local address of the home agent.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6HaLinkLocalAddressType object.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.1"\
           ::= { mip6HaListEntry 2 }\
\
      mip6HaPreference     OBJECT-TYPE\
           SYNTAX      Integer32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The preference value of this home agent.\
                    Higher values indicate a more preferable home\
                    agent.  The preference value is obtained from\
                    the preference field of the received Router\
                    Advertisement.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.1"\
           ::= { mip6HaListEntry 3 }\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 72]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6HaRecvLifeTime       OBJECT-TYPE\
           SYNTAX      Gauge32\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The lifetime for this home agent.\
                   "\
           REFERENCE\
                   "RFC 3775 : Section 10.1"\
           ::= { mip6HaListEntry 4 }\
\
      mip6HaRecvTimeStamp  OBJECT-TYPE\
           SYNTAX      DateAndTime\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The time when the home agent advertisement was\
                    received.\
                   "\
           ::= { mip6HaListEntry 5 }\
\
      --\
      -- The list of global addresses of a home agent in the\
      -- home agent list\
      --\
\
      mip6HaGlAddrTable OBJECT-TYPE\
           SYNTAX      SEQUENCE OF Mip6HaGlAddrEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "This table contains the global addresses of the home\
                    agents in the Home Agents List.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.1"\
           ::= { mip6HaAdvertisement 5 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 73]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaGlAddrEntry  OBJECT-TYPE\
           SYNTAX      Mip6HaGlAddrEntry\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                  "A global address for a home agent in the Home Agents\
                   List.\
                   The instances of the columnar objects in this entry\
                   pertain to an interface for a particular value of\
                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress\
                   and mip6HaGaAddrSeqNo.\
                   The mip6HaGaAddrSeqNo object is used to distinguish\
                   between multiple instances of the home agent global\
                   addresses on the same interface for the same set of\
                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress,\
                   values.\
                   There is no upper-bound on the maximum number of\
                   global addresses on an interface but, for practical\
                   purposes, the upper-bound of the value\
                   mip6HaGaAddrSeqNo is set to 1024.\
                   The interface is uniquely identified by its\
                   ipv6InterfaceIfIndex.  The same ipv6InterfaceIfIndex\
                   object is used in conjunction with the\
                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress,\
                   and mip6HaGaAddrSeqNo to uniquely identify instances\
                   of the columnar objects of this row.\
\
                   Implementors need to be aware that if the total\
                   number of octets in mip6HaLinkLocalAddress\
                   exceeds 111, then OIDs of column instances in\
                   this row will have more than 128 sub-identifiers and\
                   cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\
                  "\
           INDEX   { ipv6InterfaceIfIndex,   mip6HaLinkLocalAddressType,\
                     mip6HaLinkLocalAddress, mip6HaGaAddrSeqNo }\
           ::= { mip6HaGlAddrTable 1 }\
\
       Mip6HaGlAddrEntry      ::= SEQUENCE {\
           mip6HaGaAddrSeqNo              Integer32,\
           mip6HaGaGlobalAddressType      InetAddressType,\
           mip6HaGaGlobalAddress          InetAddress\
       }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 74]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaGaAddrSeqNo  OBJECT-TYPE\
           SYNTAX      Integer32 (1..1024)\
           MAX-ACCESS  not-accessible\
           STATUS      current\
           DESCRIPTION\
                   "The index that along with ipv6InterfaceIfIndex,\
                    mip6HaLinkLocalAddressType, and\
                    mip6HaLinkLocalAddress uniquely identifies this row.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.1"\
           ::= { mip6HaGlAddrEntry 1 }\
\
       mip6HaGaGlobalAddressType  OBJECT-TYPE\
           SYNTAX      InetAddressType\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "The address type for the global address of the\
                    home agent that follows.\
                   "\
           ::= { mip6HaGlAddrEntry 2 }\
\
       mip6HaGaGlobalAddress  OBJECT-TYPE\
           SYNTAX      InetAddress\
           MAX-ACCESS  read-only\
           STATUS      current\
           DESCRIPTION\
                   "A global address of the home agent.\
\
                    The type of the address represented by this object\
                    is specified by the corresponding\
                    mip6HaGaGlobalAddressType object.\
                   "\
           ::= { mip6HaGlAddrEntry 3 }\
\
   --\
   -- Notifications\
   --\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 75]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnRegistered NOTIFICATION-TYPE\
           OBJECTS   {\
                       mip6BindingTimeRegistered,\
                       mip6BindingCOAType,\
                       mip6BindingCOA\
                     }\
           STATUS    current\
           DESCRIPTION\
                   "This notification is sent by a home agent when\
                    a mobile node registers with the home agent\
                    for the first time.\
                    Notifications will not be sent for subsequent\
                    updates and/or refreshes.\
                    The MO instances in the notifications will be\
                    identified by the mip6BindingHomeAddressType\
                    and mip6BindingHomeAddress for the mobile node\
                    in the mip6BindingCacheTable.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.1"\
           ::= { mip6Notifications 1 }\
\
       mip6MnDeRegistered NOTIFICATION-TYPE\
           OBJECTS   {\
                       mip6BindingTimeRegistered,\
                       mip6BindingCOAType,\
                       mip6BindingCOA\
                     }\
           STATUS    current\
           DESCRIPTION\
                   "This notification is sent by a home agent every\
                    time a mobile node de-registers with the home\
                    agent by sending a Binding Update that requests\
                    the home agent to delete a binding.\
                    The MO instances in the notifications will be\
                    identified by the mip6BindingHomeAddressType\
                    and mip6BindingHomeAddress for the mobile node\
                    in the mip6BindingCacheTable.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.2"\
           ::= { mip6Notifications 2 }\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 76]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnCOAChanged NOTIFICATION-TYPE\
           OBJECTS   {\
                       mip6BindingTimeRegistered,\
                       mip6BindingCOAType,\
                       mip6BindingCOA\
                     }\
           STATUS    current\
           DESCRIPTION\
                   "This notification is sent by a home agent every\
                    time a mobile node sends a Binding Update with\
                    a new care-of address (for an existing Binding\
                    Cache entry).\
                    Notifications will not be sent for subsequent\
                    updates and/or refreshes for the same Care-of\
                    address.\
                    The registration of a new care-of address may\
                    indicate that the mobile node has moved or that\
                    the primary care-of address of the mobile node\
                    has become deprecated.\
                    The MO instances in the notifications will be\
                    identified by the mip6BindingHomeAddressType\
                    and mip6BindingHomeAddress for the mobile node\
                    in the mip6BindingCacheTable.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 11.5.2, 11.7.1"\
           ::= { mip6Notifications 3 }\
\
       mip6MnBindingExpiredAtHA NOTIFICATION-TYPE\
           OBJECTS   {\
                       mip6BindingTimeRegistered,\
                       mip6BindingCOAType,\
                       mip6BindingCOA\
                     }\
           STATUS    current\
           DESCRIPTION\
                   "This notification is sent by a home agent when a\
                    binding for the mobile node at the home agent\
                    expired (no timely Binding Updates were received).\
                    The MO instances in the notifications will be\
                    identified by the mip6BindingHomeAddressType\
                    and mip6BindingHomeAddress for the mobile node\
                    in the mip6BindingCacheTable.\
                   "\
              REFERENCE\
                      "RFC 3775 : Section 10.3.2"\
           ::= { mip6Notifications 4 }\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 77]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6MnBindingExpiredAtCN NOTIFICATION-TYPE\
           OBJECTS   {\
                       mip6BindingTimeRegistered,\
                       mip6BindingCOAType,\
                       mip6BindingCOA\
                     }\
           STATUS    current\
           DESCRIPTION\
                   "This notification is sent by a correspondent node\
                    when a binding for the mobile node at the\
                    correspondent node expired (no timely Binding\
                    Updates were received).\
                    The MO instances in the notifications will be\
                    identified by the mip6BindingHomeAddressType\
                    and mip6BindingHomeAddress for the mobile node\
                    in the mip6BindingCacheTable.\
                   "\
           ::= { mip6Notifications 5 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 78]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       -- Conformance information\
      mip6Groups      OBJECT IDENTIFIER ::= { mip6Conformance 1 }\
      mip6Compliances OBJECT IDENTIFIER ::= { mip6Conformance 2 }\
\
       -- Units of conformance\
      mip6SystemGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6Capabilities,\
                     mip6Status\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for basic MIPv6\
                     monitoring."\
           ::= { mip6Groups 1 }\
\
      mip6BindingCacheGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6BindingCOAType,\
                     mip6BindingCOA,\
                     mip6BindingTimeRegistered,\
                     mip6BindingTimeGranted,\
                     mip6BindingTimeRemaining,\
                     mip6BindingMaxSeq,\
                     mip6BindingHomeRegn,\
                     mip6BindingUsageTS,\
                     mip6BindingUsageCount,\
                     mip6BindingAdminStatus\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring the\
                     Binding Cache.\
                   "\
           ::= { mip6Groups 2 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 79]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6BindingHstGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6BindingHstCOAType,\
                     mip6BindingHstCOA,\
                     mip6BindingHstTimeRegistered,\
                     mip6BindingHstTimeExpired,\
                     mip6BindingHstHomeRegn,\
                     mip6BindingHstUsageTS,\
                     mip6BindingHstUsageCount\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring the\
                     Binding History.  This can be used to monitor\
                     the movement of the mobile node.\
                   "\
           ::= { mip6Groups 3 }\
\
      mip6TotalTrafficGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6InOctets,\
                     mip6HCInOctets,\
                     mip6InPkts,\
                     mip6HCInPkts,\
                     mip6OutOctets,\
                     mip6HCOutOctets,\
                     mip6OutPkts,\
                     mip6HCOutPkts,\
                     mip6CounterDiscontinuityTime\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring the\
                     total MIPv6 traffic.\
                   "\
           ::= { mip6Groups 4 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 80]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6NodeTrafficGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6NodeInOctets,\
                     mip6HCNodeInOctets,\
                     mip6NodeInPkts,\
                     mip6HCNodeInPkts,\
                     mip6NodeOutOctets,\
                     mip6HCNodeOutOctets,\
                     mip6NodeOutPkts,\
                     mip6HCNodeOutPkts,\
                     mip6NodeCtrDiscontinuityTime\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring the\
                     MIPv6 traffic due to a mobile node.\
                   "\
           ::= { mip6Groups 5 }\
\
      mip6MnSystemGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6MnHomeAddressState\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for basic monitoring\
                     of the mobile node.\
                   "\
           ::= { mip6Groups 6 }\
\
      mip6MnConfGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6MnDiscoveryRequests,\
                     mip6MnDiscoveryReplies,\
                     mip6MnDiscoveryTimeouts,\
                     mip6MnPrefixSolicitationsSent,\
                     mip6MnPrefixAdvsRecd,\
                     mip6MnPrefixAdvsIgnored,\
                     mip6MnMovedToFN,\
                     mip6MnMovedToHN\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     the advertisement-related info on the\
                     mobile node.\
                   "\
           ::= { mip6Groups 7 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 81]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6MnRegistrationGroup  OBJECT-GROUP\
           OBJECTS {\
                     mip6MnBLCOAType,\
                     mip6MnBLCOA,\
                     mip6MnBLLifeTimeRequested,\
                     mip6MnBLLifeTimeGranted,\
                     mip6MnBLMaxSeq,\
                     mip6MnBLTimeSent,\
                     mip6MnBLAccepted,\
                     mip6MnBLAcceptedTime,\
                     mip6MnBLRetransmissions,\
                     mip6MnBLDontSendBUFlag,\
                  --\
                  -- Binding Update List\
                  --\
                     mip6MnMobilityMessagesSent,\
                     mip6MnMobilityMessagesRecd,\
                     mip6MnBUsToHA,\
                     mip6MnBUAcksFromHA,\
                     mip6MnBUsToCN,\
                     mip6MnBUAcksFromCN,\
                     mip6MnBindingErrorsFromCN,\
                     mip6MnICMPErrorsRecd,\
                     mip6MnBRRequestsRecd\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     the registration statistics for the mobile node.\
                   "\
           ::= { mip6Groups 8 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 82]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6CnStatsGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6CnBURequestsAccepted,\
                     mip6CnBURequestsRejected,\
                     mip6CnBCEntryCreationTime,\
                     mip6CnBUAcceptedTime,\
                     mip6CnBURejectionTime,\
                     mip6CnBURejectionCode,\
                     mip6CnCtrDiscontinuityTime\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     the control messages and corresponding\
                     statistics for each mobile node\
                     communicating with the correspondent\
                     node.\
                   "\
           ::= { mip6Groups 9 }\
\
      mip6HaSystemGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6HaAdvsRecd,\
                     mip6HaAdvsSent,\
                     mip6HaAdvPreference,\
                     mip6HaAdvLifetime,\
                     mip6HaPrefixAdv,\
                     mip6HaPrefixSolicitation,\
                     mip6HaMCastCtlMsgSupport\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     the advertisement-related parameters and\
                     statistics for the home agent.\
                   "\
           ::= { mip6Groups 10 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 83]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaListGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6HaPreference,\
                     mip6HaRecvLifeTime,\
                     mip6HaRecvTimeStamp,\
                     mip6HaGaGlobalAddressType,\
                     mip6HaGaGlobalAddress\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     the Home Agent List on the home agent.\
                   "\
           ::= { mip6Groups 11 }\
\
       mip6HaStatsGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6HaBURequestsAccepted,\
                     mip6HaBURequestsDenied,\
                     mip6HaBCEntryCreationTime,\
                     mip6HaBUAcceptedTime,\
                     mip6HaBURejectionTime,\
                     mip6HaRecentBURejectionCode,\
                     mip6HaCtrDiscontinuityTime\
\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     registration-related statistics on the home agent.\
                   "\
           ::= { mip6Groups 12 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 84]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6CnGlobalStatsGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6CnHomeTestInitsRecd,\
                     mip6CnHomeTestsSent,\
                     mip6CnCareOfTestInitsRecd,\
                     mip6CnCareOfTestsSent,\
                     mip6CnBUsRecd,\
                     mip6CnBUAcksSent,\
                     mip6CnBRsSent,\
                     mip6CnBindingErrors,\
                     mip6CnBUsAccepted,\
                     mip6CnBUsRejected,\
                     mip6CnReasonUnspecified,\
                     mip6CnInsufficientResource,\
                     mip6CnHomeRegnNotSupported,\
                     mip6CnSeqNumberOutOfWindow,\
                     mip6CnExpiredHomeNonceIndex,\
                     mip6CnExpiredCareOfNonceIndex,\
                     mip6CnExpiredNonce,\
                     mip6CnRegTypeChangeDisallowed\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     advertisement and registration statistics on\
                     a correspondent node.\
                   "\
           ::= { mip6Groups 13 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 85]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6HaGlobalStatsGroup   OBJECT-GROUP\
           OBJECTS {\
                     mip6HaHomeTestInitsRecd,\
                     mip6HaHomeTestsSent,\
                     mip6HaBUsRecd,\
                     mip6HaBUAcksSent,\
                     mip6HaBRAdviceSent,\
                     mip6HaBUsAccepted,\
                     mip6HaPrefDiscoverReqd,\
                     mip6HaReasonUnspecified,\
                     mip6HaAdmProhibited,\
                     mip6HaInsufficientResource,\
                     mip6HaHomeRegnNotSupported,\
                     mip6HaNotHomeSubnet,\
                     mip6HaNotHomeAgentForThisMN,\
                     mip6HaDupAddrDetectionFailed,\
                     mip6HaSeqNumberOutOfWindow,\
                     mip6HaExpiredHomeNonceIndex,\
                     mip6HaRegTypeChangeDisallowed\
\
          }\
           STATUS  current\
           DESCRIPTION\
                   " A collection of objects for monitoring\
                     advertisement and registration statistics on\
                     a home agent.\
                   "\
           ::= { mip6Groups 14 }\
\
       mip6BindingCacheCtlGroup    OBJECT-GROUP\
           OBJECTS {\
                     mip6BindingAdminStatus\
          }\
           STATUS  current\
           DESCRIPTION\
                   "A collection of objects for controlling the\
                    Binding Cache.\
                   "\
           ::= { mip6Groups 15 }\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 86]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
       mip6NotificationGroup   NOTIFICATION-GROUP\
           NOTIFICATIONS {\
                    mip6MnRegistered,\
                    mip6MnDeRegistered,\
                    mip6MnCOAChanged,\
                    mip6MnBindingExpiredAtHA,\
                    mip6MnBindingExpiredAtCN\
          }\
           STATUS  current\
           DESCRIPTION\
                   "A collection of notifications from a home agent\
                    or correspondent node to the Manager about the\
                    status of a mobile node.\
                   "\
           ::= { mip6Groups 16 }\
\
\
\
       -- Compliance statements\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 87]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6CoreCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB.\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6SystemGroup }\
\
           ::= { mip6Compliances 1 }\
\
      mip6Compliance2 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and support\
                   monitoring of the Binding Cache and the Total\
                   Traffic.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6SystemGroup,\
                                  mip6BindingCacheGroup,\
                                  mip6TotalTrafficGroup\
                                   }\
           ::= { mip6Compliances 2 }\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 88]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6Compliance3 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring of the Binding Cache,\
                   the Binding History, the total traffic, and\
                   the mobile node-wide traffic.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHstHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the\
                   --     mip6BindingHstHomeAddress object.\
                   --\
                   -- OBJECT      mip6BindingHstHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the\
                   --     mip6BindingHstHomeAddress object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6SystemGroup,\
                                  mip6BindingCacheGroup,\
                                  mip6BindingHstGroup,\
                                  mip6TotalTrafficGroup,\
                                  mip6NodeTrafficGroup\
                                 }\
\
\
\
Keeni, et al.               Standards Track                    [Page 89]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
           ::= { mip6Compliances 3 }\
\
\
      mip6CoreReadOnlyCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode).\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6SystemGroup }\
\
           OBJECT      mip6Status\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           ::= { mip6Compliances 4 }\
\
      mip6ReadOnlyCompliance2 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode) and\
                   support monitoring of the Binding Cache and Total\
                   Traffic.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
\
\
\
Keeni, et al.               Standards Track                    [Page 90]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
               MANDATORY-GROUPS { mip6SystemGroup,\
                                  mip6BindingCacheGroup,\
                                  mip6TotalTrafficGroup\
                                   }\
           OBJECT      mip6Status\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6BindingAdminStatus\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
           ::= { mip6Compliances 5 }\
\
      mip6ReadOnlyCompliance3 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode) and support\
                   monitoring of the Binding Cache, the Binding History,\
                   the total traffic, and the mobile node-wide traffic.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHstHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the\
                   --     mip6BindingHstHomeAddress object.\
                   --\
\
\
\
Keeni, et al.               Standards Track                    [Page 91]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   -- OBJECT      mip6BindingHstHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the\
                   --     mip6BindingHstHomeAddress object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6SystemGroup,\
                                  mip6BindingCacheGroup,\
                                  mip6BindingHstGroup,\
                                  mip6TotalTrafficGroup,\
                                  mip6NodeTrafficGroup\
                                 }\
           OBJECT      mip6Status\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6BindingAdminStatus\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
           ::= { mip6Compliances 6 }\
\
      mip6MnCoreCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring of the basic mobile node\
                   functionality.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6MnHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6MnHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6MnHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
\
\
\
Keeni, et al.               Standards Track                    [Page 92]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   --     ipv6 addresses for the mip6MnHomeAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6MnSystemGroup\
                                 }\
           ::= { mip6Compliances 7 }\
\
      mip6MnCompliance2 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring of the mobile node\
                   functionality specifically the Discovery- and\
                   Registration-related statistics,\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6MnHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6MnHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6MnHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6MnHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6MnBLNodeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6MnBLNodeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6MnBLNodeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6MnBLNodeAddress\
                   --     object.\
\
\
\
Keeni, et al.               Standards Track                    [Page 93]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6MnSystemGroup,\
                                  mip6MnConfGroup,\
                                  mip6MnRegistrationGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
           ::= { mip6Compliances 8 }\
\
      mip6CnCoreCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                   "The compliance statement for SNMP entities\
                    that implement the MOBILEIPV6-MIB and\
                    support monitoring of the basic correspondent node\
                    functionality.\
                   "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6CnGlobalStatsGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
           ::= { mip6Compliances 9 }\
\
      mip6CnCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring of the basic correspondent node\
                   functionality.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
\
\
\
Keeni, et al.               Standards Track                    [Page 94]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6CnGlobalStatsGroup,\
                                  mip6CnStatsGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
           ::= { mip6Compliances 10 }\
\
      mip6HaCoreCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                   "The compliance statement for SNMP entities\
                    that implement the MOBILEIPV6-MIB and\
                    support monitoring of the basic home agent\
                    functionality.\
                   "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup\
                                 }\
           ::= { mip6Compliances 11 }\
\
      mip6HaCompliance2 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring of the home agent\
                   functionality specifically the Home Agent List\
                   and the home-agent-registration-related statistics,\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddressType\
\
\
\
Keeni, et al.               Standards Track                    [Page 95]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   -- SYNTAX      InetAddressType { ipv6z(4) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddress\
                   -- SYNTAX      InetAddress (SIZE(20))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup,\
                                  mip6HaListGroup,\
                                  mip6HaStatsGroup,\
                                  mip6HaGlobalStatsGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
           ::= { mip6Compliances 12 }\
\
      mip6HaCompliance3 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support monitoring and control of the home agent\
                   functionality specifically the Home Agent List\
                   and the home-agent-registration-related statistics,\
\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
\
\
\
Keeni, et al.               Standards Track                    [Page 96]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddressType\
                   -- SYNTAX      InetAddressType { ipv6z(4) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddress\
                   -- SYNTAX      InetAddress (SIZE(20))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup,\
                                  mip6HaListGroup,\
                                  mip6HaStatsGroup,\
                                  mip6HaGlobalStatsGroup,\
                                  mip6BindingCacheCtlGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
           ::= { mip6Compliances 13 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 97]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6HaCoreReadOnlyCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode) and\
                   support monitoring of the basic home agent\
                   functionality.\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup\
                                 }\
           OBJECT      mip6HaAdvPreference\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaAdvLifetime\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixAdv\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixSolicitation\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaMCastCtlMsgSupport\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           ::= { mip6Compliances 14 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                    [Page 98]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6HaReadOnlyCompliance2 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode) and\
                   support monitoring of the home agent\
                   functionality specifically the Home Agent List\
                   and the home-agent-registration-related statistics.\
\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddressType\
                   -- SYNTAX      InetAddressType { ipv6z(4) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddress\
                   -- SYNTAX      InetAddress (SIZE(20))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup,\
                                  mip6HaListGroup,\
                                  mip6HaStatsGroup,\
                                  mip6HaGlobalStatsGroup,\
\
\
\
Keeni, et al.               Standards Track                    [Page 99]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                                  mip6TotalTrafficGroup\
                                 }\
\
           OBJECT      mip6HaAdvPreference\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaAdvLifetime\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixAdv\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixSolicitation\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaMCastCtlMsgSupport\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           ::= { mip6Compliances 15 }\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 100]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
      mip6HaReadOnlyCompliance3 MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB without support\
                   for read-write (i.e., in read-only mode) and\
                   support monitoring and control of the home agent\
                   functionality specifically the Home Agent List\
                   and the home-agent-registration-related statistics,\
\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddressType\
                   -- SYNTAX      InetAddressType { ipv6z(4) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6HaLinkLocalAddress\
                   -- SYNTAX      InetAddress (SIZE(20))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for local\
                   --     ipv6 addresses for the mip6HaLinkLocalAddress\
                   --     object.\
                   --\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6HaSystemGroup,\
                                  mip6HaListGroup,\
                                  mip6HaStatsGroup,\
                                  mip6HaGlobalStatsGroup,\
\
\
\
Keeni, et al.               Standards Track                   [Page 101]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                                  mip6BindingCacheCtlGroup,\
                                  mip6TotalTrafficGroup\
                                 }\
\
           OBJECT      mip6HaAdvPreference\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaAdvLifetime\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixAdv\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaPrefixSolicitation\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6HaMCastCtlMsgSupport\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           OBJECT      mip6BindingAdminStatus\
           MIN-ACCESS  read-only\
           DESCRIPTION\
                  "Write access is not required."\
\
           ::= { mip6Compliances 16 }\
\
       mip6NotificationCompliance MODULE-COMPLIANCE\
           STATUS  current\
           DESCRIPTION\
                  "The compliance statement for SNMP entities\
                   that implement the MOBILEIPV6-MIB and\
                   support Notification from home agent or\
                   correspondent node to management stations\
                   about the mobile node status.\
                   There are a number of INDEX objects that cannot be\
                   represented in the form of OBJECT clauses in SMIv2,\
                   but for which there are compliance requirements,\
                   expressed in OBJECT clause form in this description:\
\
\
\
Keeni, et al.               Standards Track                   [Page 102]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
                   -- OBJECT      mip6BindingHomeAddressType\
                   -- SYNTAX      InetAddressType { ipv6(2) }\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                   --\
                   -- OBJECT      mip6BindingHomeAddress\
                   -- SYNTAX      InetAddress (SIZE(16))\
                   -- DESCRIPTION\
                   --     This MIB module requires support for global\
                   --     ipv6 addresses for the mip6BindingHomeAddress\
                   --     object.\
                  "\
           MODULE  -- this module\
               MANDATORY-GROUPS { mip6NotificationGroup\
                                 }\
           ::= { mip6Compliances 17 }\
\
      END\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 103]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
6.  Security Considerations\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write.  Such objects may be\
   considered sensitive or vulnerable in some network environments.  The\
   support for SET operations in a non-secure environment without proper\
   protection can have a negative effect on network operations.  These\
   are the tables and objects and the corresponding\
   sensitivity/vulnerability:\
\
        mip6Status:  The value of this object is used to enable or\
                     disable the MIPv6 functionality on a MIPv6 entity.\
                     Access to this MO may be abused to disrupt the\
                     MIPv6 communication.\
        mip6HaAdvPreference: Access to this object may be abused to\
                     force MNs into selecting the wrong HA.\
        mip6HaAdvLifetime: Access to this object may be abused to set\
                     the advertised lifetime to incorrect values.  That\
                     will have an adverse impact on the MIPv6\
                     communication.\
        mip6BindingAdminStatus: The value of this object is used to\
                     control the status of a Binding Cache entry.\
                     Access to this object may be abused to deny Mobile\
                     IPv6 connectivity to a legitimate user or to\
                     grant Mobile IPv6 connectivity to an illegal user.\
        mip6HaPrefixAdv: The value of this object indicates whether\
                     the home agent will send ICMP Mobile Prefix\
                     Advertisements to the mobile node.\
                     Access to this object may be abused to send\
                     unwanted/wrong prefix information or to deny the\
                     mobile node from receiving information about the\
                     changes in the home prefixes.\
                     This may result in disruption of the Mobile IPv6\
                     connectivity.\
        mip6HaPrefixSolicitation: The value of this object indicates\
                     whether the home agent should respond to ICMP\
                     Mobile Prefix Solicitation messages from a mobile\
                     node.  Access to this object may be abused to deny\
                     the mobile node information about its home prefix.\
                     This may result in disruption of the Mobile IPv6\
                     connectivity.\
        mip6HaMCastCtlMsgSupport: The value of this object decides\
                     whether the home agent should process the\
                     multicast group membership control messages it\
                     receives from mobile nodes.  Access to this object\
                     may be used to subvert administrate policy on\
                     multicasting or to disrupt the multicast\
                     communication with the mobile node.\
\
\
\
Keeni, et al.               Standards Track                   [Page 104]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
   control even GET and/or NOTIFY access to these objects and possibly\
   to even encrypt the values of these objects when sending them over\
   the network via SNMP.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
    The address-related objects in this MIB may be considered to be\
    particularly sensitive and/or private.  The care-of-address-related\
    objects reveal the location and movement of the mobile node.  This\
    information may be considered to be private and sensitive and must\
    be carefully handled.\
        mip6BindingHstCOAType\
        mip6BindingHstCOA\
        mip6MnBLCOAType\
        mip6MnBLCOA\
\
    The mobile node's home-address- and home-agent-related information\
    may be considered to be sensitive too as these may provide clues to\
    a malicious party on ways to disrupt the mobile nodes communication\
    channels.\
        mip6BindingHstHomeAddressType,\
        mip6BindingHstHomeAddress,\
        mip6MnHomeAddressType,\
        mip6MnHomeAddress\
\
    The correspondent node's address-related MOs will reveal the nodes\
    with whom the mobile node is corresponding. This information may be\
    considered private and sensitive.\
        mip6MnBLNodeAddressType,\
        mip6MnBLNodeAddress\
\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPSec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.\
\
   It is RECOMMENDED that implementors consider the security features as\
   provided by the SNMPv3 framework (see [RFC3410], section 8),\
   including full support for the SNMPv3 cryptographic mechanisms (for\
   authentication and privacy).\
\
   Further, deployment of SNMP versions prior to SNMPv3 is NOT\
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\
   enable cryptographic security.  It is then a customer/operator\
\
\
\
Keeni, et al.               Standards Track                   [Page 105]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
   responsibility to ensure that the SNMP entity giving access to an\
   instance of this MIB module is properly configured to give access to\
   the objects only to those principals (users) that have legitimate\
   rights to indeed GET or SET (change/create/delete) them.\
\
7.  IANA Considerations\
\
   IANA has assigned a base arc in the 'mib-2' (standards track) OID\
   tree for the 'mip6MIB' MODULE-IDENTITY defined in the Mobile-IPv6\
   MIB.  The mib-2 number is 133 for mip6MIB.\
\
8.  References\
\
8.1.  Normative References\
\
   [RFC2119]    Bradner, S., "Key words for use in RFCs to Indicate\
                Requirements Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2578]    McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
                J., Rose, M., and S. Waldbusser, "Structure of\
                Management Information Version 2 (SMIv2)", STD 58, RFC\
                2578, April 1999.\
\
   [RFC2579]    McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
                J., Rose, M., and S. Waldbusser, "Textual Conventions\
                for SMIv2", STD 58, RFC 2579, April 1999.\
\
   [RFC2580]    McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
                J., Rose, M., and S. Waldbusser, "Conformance Statements\
                for SMIv2", STD 58, RFC 2580, April 1999.\
\
   [RFC3775]    Johnson, D., Perkins, C., and Arkko J., Mobility Support\
                in IPv6" RFC 3775, June 2004.\
\
   [RFC4293]    Routhier, S., Ed., "Management Information Base for the\
                Internet Protocol (IP)", RFC 4293, April 2006.\
\
   [RFC4001]    Daniele, M., Haberman, B., Routhier, S., and J.\
                Schoenwaelder, "Textual Conventions for Internet Network\
                Addresses", RFC 4001, February 2005.\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 106]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
8.2.  Informative References\
\
   [RFC3410]    Case, J., Mundy, R., Partain, D., and B. Stewart,\
                "Introduction and Applicability Statements for\
                Internet-Standard Management Framework", RFC 3410,\
                December 2002.\
\
   [RFC4087]    Thaler, D., "IP Tunnel MIB", RFC 4087, June 2005.\
\
9.  Acknowledgements\
\
   The following groups and individuals have contributed to this\
   document with discussions and comments:\
\
        WIDE-netman group\
        C.M. Heard\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 107]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
Authors' Addresses\
\
   Glenn Mansfield Keeni\
   Cyber Solutions Inc.\
   6-6-3 Minami Yoshinari\
   Aoba-ku, Sendai 989-3204\
   Japan\
\
   Phone: +81-22-303-4012\
   EMail: glenn@cysols.com\
\
\
   Kenichi Nagami\
   INTEC NetCore Inc.\
   1-3-3, Shin-suna\
   Koto-ku, Tokyo, 135-0075\
   Japan\
\
   Phone:  +81-3-5665-5069\
   EMail: nagami@inetcore.com\
\
\
   Kazuhide Koide\
   Tohoku University\
   2-1-1, Katahira\
   Aoba-ku, Sendai, 980-8577\
   Japan\
\
   Phone: +81-22-217-5454\
   EMail: koide@shiratori.riec.tohoku.ac.jp\
\
\
   Sri Gundavelli\
   Cisco Systems\
   170 W.Tasman Drive,\
   San Jose, CA 95134\
   USA\
\
   Phone: +1-408-527-6109\
   EMail: sgundave@cisco.com\
\
\
\
\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 108]\
\
RFC 4295                     MOBILEIPV6-MIB                   April 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Keeni, et al.               Standards Track                   [Page 109]\
\

doc 3
  field 0
    name titolo
    type string
    value rfc4290.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                         J. Klensin\
Request for Comments: 4290                                 December 2005\
Category: Informational\
\
\
                Suggested Practices for Registration of\
                  Internationalized Domain Names (IDN)\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
IESG Note\
\
   This RFC is not a candidate for any level of Internet Standard.  The\
   IETF disclaims any knowledge of the fitness of this RFC for any\
   purpose and notes that the decision to publish is not based on IETF\
   review apart from IESG review for conflict with IETF work.  The RFC\
   Editor has chosen to publish this document at its discretion.  See\
   RFC 3932 for more information.\
\
Abstract\
\
   This document explores the issues in the registration of\
   internationalized domain names (IDNs).  The basic IDN definition\
   allows a very large number of possible characters in domain names,\
   and this richness may lead to serious user confusion about similar-\
   looking names.  To avoid this confusion, the IDN registration process\
   must impose rules that disallow some otherwise-valid name\
   combinations.  This document suggests a set of mechanisms that\
   registries might use to define and implement such rules for a broad\
   range of languages, including adaptation of methods developed for\
   Chinese, Japanese, and Korean domain names.\
\
\
\
\
\
\
\
\
\
\
\
\
Klensin                      Informational                      [Page 1]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................3\
      1.1. Background .................................................3\
      1.2. The Nature and Status of these Recommendations .............4\
      1.3. Terminology ................................................5\
         1.3.1. Languages and Scripts .................................5\
         1.3.2. Characters, Variants, Registrations, and Other\
                Issues ................................................6\
         1.3.3. Confusion, Fraud, and Cybersquatting ..................9\
      1.4. A Review of the JET Guidelines .............................9\
         1.4.1. JET Model .............................................9\
         1.4.2. Reserved Names and Label Packages ....................10\
      1.5. Languages, Scripts, and Variants ..........................11\
         1.5.1. Languages versus Scripts .............................11\
         1.5.2. Variant Selection ....................................13\
      1.6. Variants are not a Universal Remedy .......................14\
      1.7. Reservations and Exclusions ...............................14\
         1.7.1. Sequence Exclusions for Valid Characters .............14\
         1.7.2. Character Pairing Issues .............................15\
      1.8. The Registration Bundle ...................................15\
         1.8.1. Definitions and Structure ............................15\
         1.8.2. Application of the Registration Bundle ...............16\
   2. Some Implications of This Approach .............................17\
   3. Possible Modifications of the JET Model ........................18\
   4. Conclusions and Recommendations About the General Approach .....18\
   5. A Model Table Format ...........................................19\
   6. A Model Label Registration Procedure: "CreateBundle" ...........20\
      6.1. Description of the CreateBundle Mechanism .................21\
      6.2. The "no-variants" Case ....................................22\
      6.3. CreateBundle and Nameprep Mapping .........................22\
   7. IANA Considerations ............................................23\
   8. Internationalization Considerations ............................24\
   9. Security Considerations ........................................24\
   10. Acknowledgements ..............................................25\
   11. Informative References ........................................26\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Klensin                      Informational                      [Page 2]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
1.  Introduction\
\
1.1.  Background\
\
   The IDNA (Internationalized Domain Names in Applications)\
   specification [RFC3490] defines the basic model for encoding non-\
   ASCII strings in the DNS.  Additional specifications [RFC3491]\
   [RFC3492] define the mechanisms and tables needed to support IDNA.\
   As work on these specifications neared completion, it became apparent\
   that it would be desirable for registries to impose additional\
   restrictions on the names that could actually be registered (e.g.,\
   see [IESG-IDN] and [ICANN-IDN]) to reduce potential confusion among\
   characters that were similar in some way.  This document explores\
   these IDN (international domain name) registration issues and\
   suggests a set of mechanisms that IDN registries might use.\
\
   Registration restrictions are part of a long tradition.  For example,\
   while the original DNS specifications [RFC1035] permitted any string\
   of octets in a DNS label, they also recommended the use of a much\
   more restricted subset.  This subset was derived from the much older\
   "hostname" rules [RFC952] and defined by the "LDH" convention (for\
   the three permitted types of characters: letters, digits, and the\
   hyphen).  Enforcement of this restricted subset in registrations was\
   the responsibility of the registry or domain administrator.  The\
   definition of the subset was embedded in the DNS protocol itself,\
   although some applications protocols, notably those concerned with\
   electronic mail, did impose and enforce similar rules.\
\
   If there are no constraints on registration in a zone, people can\
   register characters that increase the risk of misunderstandings,\
   cybersquatting, and other forms of confusion.  A similar situation\
   existed even before the introduction of IDNA, as exemplified by\
   domain names such as example.com and examp1e.com (note that the\
   latter domain contains the digit "1" instead of the letter "l").\
\
   For non-ASCII names (so-called "internationalized domain names" or\
   "IDNs"), the problem is more complicated.  In the earlier situation\
   that led to the LDH (hostname) rules, all protocols, hosts, and DNS\
   zones used ASCII exclusively in practice, so the LDH restriction\
   could reasonably be applied uniformly across the Internet.  Support\
   for IDNs introduces a very large character repertoire, different\
   geographical and political locations, and languages that require\
   different collections of characters.  The optimal registration\
   restrictions are no longer a global matter; they may be different in\
   different areas and, hence, in different DNS zones.\
\
\
\
\
\
\
Klensin                      Informational                      [Page 3]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   For some human writing systems, there are characters and/or strings\
   that have equivalent or near-equivalent usages.  If a name can be\
   registered with such a character or string, the registry might want\
   to automatically associate all of the names that have the same\
   meaning with the registered name.  The registry might also decide\
   whether the names that are associated with, or generated by, one\
   registration should, as a group or individually, go into the zone or\
   should be blocked from registration by different parties.\
\
   To date, the best-developed system for handling registration\
   restrictions for IDNs is the JET Guidelines for Chinese, Japanese,\
   and Korean [RFC3743], the so-called "CJK" languages.  The JET\
   Guidelines are limited to the CJK languages and, in particular, to\
   their common script base.  Those languages are also the best-known\
   and most widely-used examples of writing systems constructed on\
   "ideographic" or "pictographic" principles.  This document explores\
   the principles behind the JET guidelines.  It then examines some of\
   the issues that might arise in adapting them to alphabetic languages,\
   i.e., to languages whose characters primarily represent sounds rather\
   than meanings.\
\
   This document describes five things:\
\
   1.  The general background and considerations for non-ASCII scripts\
       in names.\
\
   2.  Suggested practices for describing character variants.\
\
   3.  A method for using a zone's character variants to determine which\
       names should be associated with a registration.\
\
   4.  A format for publishing a zone's table of character variants;\
       Such tables are referred to below simply as "language tables" or\
       simply "tables".\
\
   5.  A model algorithm for name registration given the presence of\
       language tables.\
\
1.2.  The Nature and Status of these Recommendations\
\
   The document makes recommendations for consideration by registries\
   and, where relevant, by those who coordinate them, and by those who\
   use their services.  None of the recommendations are intended to be\
   normative.  Instead, the intent of the document is to illustrate a\
   framework for developing variations to meet the needs of particular\
   registries and their processing of particular languages.  Of course,\
   if registries make similar decisions and utilize similar tools, costs\
\
\
\
\
Klensin                      Informational                      [Page 4]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   and confusion may be reduced -- both between registries and for users\
   and registrars who have relationships with more than one domain.\
\
   Just as the JET Guidelines contain some suggestions that may not be\
   applicable to alphabetic scripts, some of the suggestions here,\
   especially the more specific ones, may be applicable to some scripts\
   and not others.\
\
1.3.  Terminology\
\
1.3.1.  Languages and Scripts\
\
   This document uses the term "language" in what may be, to many\
   readers, an odd way.  Neither this specification, nor IDNA, nor the\
   DNS are directly concerned with natural language, but only with the\
   characters that make up a given label.  In some respects, the term\
   "script", used in the character coding community for a collection of\
   characters, might be more appropriate.  However, different subsets of\
   the same script may be used with different languages, and the same\
   language may be written using different characters (or even\
   completely different scripts) in different locations, so "script" is\
   not precisely correct either.\
\
   Long-standing confusion has also resulted from the fact that most\
   scripts are, informally at least, named after one of the languages\
   written in them.  "Chinese" describes both a language and a\
   collection of characters that are also used in writing Japanese,\
   Korean, and, at least historically, some other languages.  "Latin"\
   describes a language, the characters used to write that language,\
   and, often, characters used to write a number of contemporary\
   languages that are derived from or similar to those used to write the\
   Latin language.  The script used to write the Arabic language is\
   called "Arabic", but it is also used (typically with some additions\
   or deletions) to write a number of other languages.  Situations in\
   which a script has a clearly-defined name that is independent of the\
   name of a language are the exception, rather than the rule; examples\
   include Hangul, used to write Korean, Katakana and Hiragana, used to\
   write Japanese, and a few others.  Some scholars have historically\
   used "Roman" or "Roman-derived" for the script in an attempt to\
   distinguish between a script and the Latin language.\
\
   The term "language" is therefore used in this document in the\
   informal sense of a written language and is defined, for this\
   purpose, by the characters used to write it, i.e., as a language-\
   specific subset of a script.  In this context, a "language" is\
   defined by the combination of a code (see Section 1.4.1) and an\
   authority that has chosen to use that code and establish a\
   character-listing for it.  Authorities are normally TLD (top-level\
\
\
\
Klensin                      Informational                      [Page 5]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   domain) registries; see Section 7 and [IANA-language-registry].\
   However, it is expected that TLD registries will find appropriate\
   experts and that advice from language and script experts selected by\
   international neutral bodies will also become part of the\
   registration system.  In addition, as discussed below in Section 7,\
   registries may conclude that the best interests of registrants,\
   stakeholders, and the Internet community would be served by\
   constructing "language tables" that mix scripts and characters in\
   ways that conform to no known language.  Conventions should be\
   developed for such registrations that do not misleadingly reflect\
   specific language codes.\
\
1.3.2.  Characters, Variants, Registrations, and Other Issues\
\
   1.  Characters in this document are specified by their Unicode\
       codepoints in U+xxxx format, by their official names, or both.\
\
   2.  The following terms are used in this document.\
\
       *  String\
\
          A "string" is an sequence of one or more characters.\
\
       *  Base Character\
\
          This document discusses characters that may have equivalent or\
          near-equivalent characters or strings.  A "base character" is\
          a character that has zero or more equivalents.  In the JET\
          Guidelines, base characters are referred to as "valid\
          characters".  In a table with variants, as described in\
          Section 5, the base characters occupy the first column.\
          Normally (and always, if the recommendation of Section 6.3 is\
          adopted), the base characters will be the characters that\
          appear in registration requests from registrants; any other\
          character will invalidate the registration attempt.\
\
       *  Native Script\
\
          Native script is the form in which the relevant string would\
          normally be represented.  For example, it might use Lower\
          Slobbovian characters and the glyphs normally used to write\
          them.  It would not be punycode as a presentation form.\
\
       *  Variant Characters/Strings\
\
          The "variant(s)" are character(s) and/or string(s) that are\
          treated as equivalent to the base character.  Note that these\
          might not be exactly equivalent characters; a particular\
\
\
\
Klensin                      Informational                      [Page 6]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
          original character may be a base character with a mapping to a\
          particular variant character, but that variant character may\
          not have a mapping to the original base character.  Indeed,\
          the variant character may not appear in the base character\
          list, and hence may not be valid for use in a registration.\
          Usually, characters or strings to be designated as variants\
          are considered either equivalent or sufficiently similar (by\
          some registry-specific definition) that confusion between them\
          and the base character might occur.\
\
       *  Base Registration\
\
          The "base registration" is the single name that the registrant\
          requested from the registry.  The JET Guidelines use the term\
          "label string" for this concept.\
\
       *  Registered, Activated\
\
          A label (or "name") is described as "registered" if it is\
          actually entered into a domain (i.e., into a zone file) by the\
          registry, so that it can be accessed and resolved using\
          standard DNS tools.  The JET Guidelines describe a\
          "registered" label as "activated".  However, some domains use\
          a slightly different registration logic in which a name can be\
          registered with the registrar (if one is involved) and with\
          the registry, but not actually entered into the zone file\
          until an additional activation or delegation step occurs.\
          This document does not make that distinction, but is\
          compatible with it.\
\
          As specified in the IDNA Standard, the name actually placed in\
          the zone file is always the internal ("punycode") form.  There\
          is no provision for actually entering any other form of an IDN\
          into the DNS.  It remains controversial, with different\
          registrars and registries having adopted different policies,\
          as to whether the registration, as submitted by the\
          registrant, is in the form of:\
\
          o  The native-script name, either in UTF-8 or in some coding\
             specified by the registrar, or\
\
          o  the internal-form ("punycode") name, or\
\
          o  both forms of the name together, so that the registrar and\
             registry can verify the intended translation.\
\
\
\
\
\
\
Klensin                      Informational                      [Page 7]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
          If any of the approaches defined in this document is used, it\
          is almost certain to be necessary that the native-script form\
          of the requested string be available to the registry.\
\
       *  Registration Bundle\
\
          A "registration bundle" is the set of all labels that come\
          from expanding the base characters for a single name into\
          their variants.  The presence of a label in a registration\
          bundle does not imply that it is registered.  In the JET\
          Guidelines, a registration bundle is called an "IDN Package".\
\
       *  Reserved Label\
\
          A "reserved label" is a label in a registration bundle that is\
          not actually registered.\
\
       *  Registry"\
\
          A "registry" is the administrative authority for a DNS zone.\
          The registry is the body that enforces, and typically makes,\
          policies that are used in a particular zone in the DNS.\
\
       *  Coded Character Set\
\
          A "Coded Character Set" (CCS) is a list of characters and the\
          code positions assigned to them.  ASCII and Unicode are CCSs.\
\
       *  Language\
\
          A "language" is something spoken by humans, independent of how\
          it is written or coded.  ISO Standard 639 and IETF BCP 47 (RFC\
          3066) [RFC3066] list and define codes for identifying\
          languages.\
\
       *  Script\
\
          A "script" is a collection of characters (glyphs, independent\
          of coding) that are used together, typically to represent one\
          or more languages.  Note that the script for one language may\
          heavily overlap the script for another.  This does not imply\
          that they have identical scripts.\
\
       *  Charset\
\
          "Charset" is an IETF-invented term to describe, more or less,\
          the combination of a script, a CCS that encodes that script,\
\
\
\
\
Klensin                      Informational                      [Page 8]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
          and rules for serializing encoded bytes that are stored on a\
          computer or transmitted over the network.\
\
   The last four of these definitions are redundant with, but\
   deliberately somewhat less precise than, the definitions in\
   [RFC3536], which also provides sources.  The two sets of definitions\
   are intended to be consistent.\
\
1.3.3.  Confusion, Fraud, and Cybersquatting\
\
   The term "confusion" is used very generically in this document to\
   cover the entire range from accidental user misperception of the\
   relationship between characters with some characteristic in common\
   (typically appearance, sound, or meaning) to cybersquatting and\
   (other) deliberately fraudulent attempts to exploit those\
   relationships based on the nature of the characters.\
\
1.4.  A Review of the JET Guidelines\
\
1.4.1.  JET Model\
\
   In the JET Guidelines model, a prospective registrant approaches the\
   registry for a zone (perhaps through an intermediate registrar) with\
   a candidate base registration -- a proposed name to be registered --\
   and a list of languages in which that name is to be interpreted.  The\
   languages are defined according to the fairly high-resolution coding\
   of [RFC3066] or, if the registry considers it more appropriate, a\
   coding based on scripts such as those in [LTRU-Registry].  In this\
   way, Chinese as used on the mainland of the People's Republic of\
   China ("zh-cn") can, at registry option, consist of a somewhat\
   different list of characters (code points) and be represented by a\
   separate table compared to Chinese as used in Taiwan ("zh-tw").\
\
   The design of the JET Guidelines took one important constraint as a\
   basis: IDNA was treated as a firm standard.  A procedure that\
   modified some portion of the IDNA functions, or was a variant on\
   them, was considered a violation of those standards and should not be\
   encouraged (or, probably, even permitted).\
\
   Each registry is expected to construct (or obtain) a table for each\
   language it considers relevant and appropriate.  These tables list,\
   for the particular zone, the characters permitted for that language.\
   If a character does not appear as a base character (called a "valid\
   code point" in the JET document) in that table, then a name\
   containing it cannot be registered.  If multiple languages are listed\
   for the registration, then the character must appear in the tables\
   for each of those languages.\
\
\
\
\
Klensin                      Informational                      [Page 9]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   The tables may also contain columns that specify alternate or variant\
   forms of the valid character.  If these variants appear, they are\
   used to synthesize labels that are alternatives to the original one.\
   These labels are all reserved and can be registered or "activated"\
   (placed into the DNS) only by the action or request of the original\
   registrant; some (the "preferred variant labels") are typically\
   registered automatically.  The zone is expected to establish\
   appropriate policies for situations in which the variant forms of one\
   label conflict with already-reserved or already-registered labels.\
\
   Most of these concepts were introduced because of concerns about\
   specific issues with CJK characters, beginning from the requirement\
   that the use of Simplified Chinese by some registrants and\
   Traditional Chinese by others not be permitted to create confusion or\
   opportunities for fraud.  While they may be applicable to registry\
   tables constructed for alphabetic scripts, the translation should be\
   done with care, since many analogies are not exact.\
\
   Some of the important issues are discussed in the sections that\
   follow, especially Section 3.  The JET model may be considered as a\
   variation on, and inspiration for, the model and method presented by\
   the rest of this document, although the JET model has been completely\
   developed only for CJK characters.  Other languages or scripts,\
   especially alphabetic ones, may require other variations.\
\
1.4.2.  Reserved Names and Label Packages\
\
   A basic assumption of the JET model is that, if the evolution of\
   specific characters or the properties of Unicode [Unicode]\
   [Unicode32] or IDNA cause two strings to appear similar enough to\
   cause confusion, then both should be registered by the same party or\
   one of them should become unregisterable.  The definition of "appear\
   similar enough" will differ for different cultures and circumstance,\
   and hence DNS zones, but the principle is fairly general.  In the JET\
   model, all of the variant strings are identified, some are registered\
   into the DNS automatically, and others are simply reserved and can be\
   registered, if at all, only by the original registrant.  Other zones\
   might find other policies appropriate.  For example, a zone might\
   conclude that having similar strings registered in the DNS was\
   undesirable.  If so, the list of variant strings would be used only\
   to build a list of names that would be reserved and prohibited from\
   being registered.\
\
\
\
\
\
\
\
\
\
Klensin                      Informational                     [Page 10]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
1.5.  Languages, Scripts, and Variants\
\
1.5.1.  Languages versus Scripts\
\
   Conversations about scripts -- collections of characters associated\
   with particular languages -- are common when discussing character\
   sets and codes.  However, the boundaries between one script and\
   another are not well-defined.  The Unicode Standard ([Unicode],\
   [Unicode32]), for example, does not define script boundaries at all,\
   even though it is structured in terms of usually-related blocks of\
   characters.  The issue is complicated by the common origin of most\
   alphabetic scripts in use in the world today (see, for example,\
   [Drucker] or the more scholarly [Daniels]).\
\
   Because of that history, certain characters (or, more precisely,\
   symbols representing characters) appear in the scripts associated\
   with multiple languages, sometimes with very different sounds or\
   meanings.  This differs from the CJK situation in which, if a\
   character appears in more than one of the relevant languages, it will\
   usually have the same interpretation in each one.  For the subset of\
   characters that actually are ideographs or pictographs, pronunciation\
   is expected to vary widely while meaning is preserved.  At least in\
   part because of that similarity of meaning, it made sense in the JET\
   case to permit a registration to specify multiple languages, to\
   verify that the characters in the label string (the requested "Base\
   registration") were valid for each, and then to generate variant\
   labels using each language in turn.  For many alphabetic languages,\
   it may be more sensible to prohibit the label string submitted for\
   registration from being associated with more than one language.\
   Indeed, "one label, one language" has been suggested as an important\
   barrier against common sources of "look-alike" confusion.  For\
   example, the imposition of that rule in a zone would prevent the\
   insertion of a few Greek or Cyrillic characters with shapes identical\
   to the Latin ones into what was otherwise a Latin-based string.  For\
   a particular table, the list of base characters may be thought of as\
   the script associated with the relevant language, with the\
   understanding that the table design does not prevent the same\
   character from appearing in the tables for multiple languages.\
\
   Indeed, this notion of a script that is local and specifically\
   identified can be turned around: so-called "language tables" are\
   associated with languages only insofar as thinking about the\
   character structure and word forms associated with a given language\
   helps to inform the construction of the table.  A country like\
   Finland, for example, might select among:\
\
   o  One table each for Finnish, Swedish, and English characters and\
      conventions, permitting a string to be registered in one, two, or\
\
\
\
Klensin                      Informational                     [Page 11]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
      all three languages.  However, a three-language registration would\
      necessarily prohibit any characters that did not appear in all\
      three languages, since the label would make little sense\
      otherwise.\
\
   o  One table each, but with a "one label, one language" rule for the\
      zone.\
\
   o  A combined table based on the observation that all three writing\
      systems were based on Roman characters and that the possibilities\
      for confusion of interest to the registry would not be reduced by\
      "language" differentiation.  This option raises an interesting\
      issue about language labeling as described in Section 1.4.1; see\
      the discussion in Section 7 below.\
\
   Regardless of what decisions were made about those languages and\
   scripts, they might have a separate table for registration of labels\
   containing Cyrillic characters.  That table might contain some\
   Roman-derived characters (either as base characters or as variants),\
   just as some CJK tables do.  See also Section 2, below.\
\
   Tables that present multiple languages, as described above, have\
   introduced confusion and discomfort among those who have failed to\
   understand these definitions.  The consequence of these definitions\
   is that use of a language or script code in a registration is a\
   mnemonic, rather than a normative statement about the language or\
   script itself.  When that confusion is likely to occur, it is\
   appropriate to simply use the registry identifier and a sequence\
   number to identify the registration.\
\
   As the JET Guidelines stress, no tables or systems of this type --\
   even if identified with a language as a means of defining or\
   describing the table -- can assure linguistic or even syntactic\
   correctness of labels with regard to that language.  That assurance\
   may not be possible without human intervention or at least dictionary\
   lookups of complete proposed labels.  It may even not be desirable to\
   attempt that level of correctness (see Section 2).\
\
   Of course, if any language-based tests or constraints, including "one\
   label, one language", are to be applied to limit the associated\
   sources of confusion, each zone must have a table for each language\
   in which it expects to accept registrations.  The notion of a single\
   combined table for the zone is, in the general case, simply\
   unworkable.  One could use a single table for the zone if the intent\
   were to impose only minimal restrictions, e.g., to force alphabetic\
   and numeric characters only, excluding symbols and punctuation.  That\
   type of restriction might be useful in eliminating some problems,\
   such as those of unreadable labels, but it would be unlikely to be\
\
\
\
Klensin                      Informational                     [Page 12]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   very helpful with, e.g., confusion caused by similar-looking\
   characters.\
\
1.5.2.  Variant Selection\
\
   The area of character variants is rife with difficulties (and perhaps\
   opportunities).  There is no universal agreement about which base\
   characters have variants, or if they do, what those variants are.\
   For example, in some regions of the world and in some languages,\
   LATIN SMALL LETTER O WITH DIAERESIS (U+00F6) and LATIN SMALL LETTER O\
   WITH STROKE (U+00F8) are variants of each other, while in other\
   regions, most people would think that LATIN SMALL LETTER O WITH\
   STROKE has no variants.  In some cases, the list of variants is\
   difficult to enumerate.  For example, it required several years for\
   the Chinese language community to create variant tables for use with\
   IDNA, and it remains, at the time of this writing, questionable how\
   widely those tables will be accepted among users of Chinese from\
   areas of the world other than those represented by the groups that\
   created them.\
\
   Thus, the first thing a registry should ask is whether or not any of\
   the characters that they want to permit to be used have variants.  If\
   not, the registry's work is much simpler.  This is not to say that a\
   registry should ignore variants if they exist: adding variants after\
   a registry has started to take registrations will be nearly as\
   difficult administratively as removing characters from the list of\
   acceptable characters.  That is, if a registry later decides that two\
   characters are variants of each other, and there are actively-used\
   names in the zones that differ only on the new variants, the registry\
   might have to transfer ownership of one of the names to a different\
   owner, using some process that is certain to be controversial.\
\
   This situation in likely to be much easier for areas and zones that\
   use characters that previously did not occur in the DNS at all than\
   it will be for zones in which non-English labels have been registered\
   in ASCII characters for some time, presumably because the language of\
   interest uses additional "Latin" characters with some conventions\
   when only ASCII is available.  In the former case, the rules and\
   conventions can be established before any registrations occur.  In\
   the latter, there may be conflicts or opportunities for confusion\
   between existing registrations and now-permitted Roman-based\
   characters that do not appear in ASCII.  For example, a domain name\
   might exist today that uses the name of a city in Canada spelled as\
   "Montreal".  If the zone in which it occurs changes its rules to\
   permit the use of the character LATIN SMALL LETTER E WITH ACUTE\
   (U+00E9), does the name of the city, spelled (correctly) using that\
   character, conflict with the existing domain name registration?\
\
\
\
\
Klensin                      Informational                     [Page 13]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   Certainly, if both are permitted, and permitted to be registered by\
   separate parties, there are many opportunities for confusion.\
\
   Of course, zone managers should inform all current registrants when\
   the registration policy for the zone changes.  This includes the\
   times when IDN characters are first allowed in the zone, when\
   additional characters are permitted, and when any change occurs in\
   the character variant tables.\
\
   Many languages contain two variants for a character, one of which is\
   strongly preferred.  A registry might restrict the base registration\
   to the preferred form, or it might allow any form for the base\
   registration.  If the variant tables are created carefully, the\
   resulting bundles will be the same, but some registries will give\
   special status to the base registration such as its appearance in\
   "Whois" databases.\
\
1.6.  Variants are not a Universal Remedy\
\
   It is worth stressing that there are many obvious opportunities for\
   confusion that variant systems, by virtue of being based on\
   processing of individual characters, cannot address.  For example, if\
   a language can be written with more than one script, or\
   transliterations of the language into another script are common,\
   variant models are insufficient to prevent conflicting registration\
   of the related forms.  Avoiding those types of problems would require\
   different mechanisms, perhaps based on phonetic or natural language\
   processing techniques for the entire proposed base registration.\
\
1.7.  Reservations and Exclusions\
\
1.7.1.  Sequence Exclusions for Valid Characters\
\
   The JET Guidelines are based on processing only single characters.\
   Pairs or longer sequences of characters can, at the option of the\
   registry, be handled through what the Guidelines describe as\
   "additional processing".  These registry-specific string processing\
   procedures are specifically permitted by the guidelines to supplement\
   the per-character processing that generates the variants.\
\
   A different zone with different needs could use a modified version of\
   the table structure, or different types of additional processing, to\
   prohibit particular sequences of characters by marking them as\
   invalid, and to accept characters by marking them as valid.  Other\
   modifications or extensions might be designed to prevent certain\
   letters from appearing at the beginning or end of labels.  The use of\
   regular expressions in the "valid characters" column might be one way\
\
\
\
\
Klensin                      Informational                     [Page 14]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   to implement these types of restrictions, but there has been no\
   experience so far with that approach.\
\
   In particular, in some scripts derived from Roman characters,\
   sequences that have historically been typographically represented by\
   single "ligature" or "digraph" characters may also be represented by\
   the separate characters (e.g., "ae" for U+00E6 or "ij" for U+0133).\
   If it is desired to either prohibit these, or to treat them as\
   variants, some extensions to the single-character JET model may be\
   needed.  Some careful thinking about IDNA (especially nameprep) may\
   also be needed, since some of these combinations are excluded there).\
\
1.7.2.  Character Pairing Issues\
\
   Some character pairings -- the use of a character form (glyph) in one\
   language and a different form with the same properties in a related\
   one -- closely approximate the issues with mapping between\
   Traditional and Simplified Chinese, although the history is\
   different.  For example, it might be useful to have "o" with a stroke\
   (U+00F8) as a variant for "o" with diaeresis above it (U+00F6) (and\
   the equivalent upper-case pair) in a Swedish table, and vice versa in\
   a Norwegian one, or to prohibit one of these characters entirely in\
   each table.  In a German table, U+00F8 would presumably be\
   prohibited, while U+00F6 might have "oe" as a variant.  Obviously, if\
   the relevant language of registration is unknown, this type of\
   variant matching cannot be applied in any sensible way.\
\
1.8.  The Registration Bundle\
\
1.8.1.  Definitions and Structure\
\
   As one of its critical innovations, the JET model defines an "IDN\
   package", known in this document as a "registration bundle", which\
   consists of the primary registered string (which is used as the name\
   of the bundle), the information about the language table(s) used, the\
   variant labels for that string, and indications of which of those\
   labels are registered in the relevant zone file ("activated" in the\
   JET terminology).  Registration bundles are also atomic -- one can\
   not add or remove variant labels from one without unregistering the\
   entire package.  A label exists in only one registration bundle at a\
   time; if a new label is registered that would generate a variant that\
   matches one that appears in an existing package, that variant simply\
   is not included in the second package.  A subsequent de-registration\
   of the first package does not cause the variant to be added to the\
   second.  While it might be possible to change this in other models,\
   the JET conclusion was that other options would be far too complex to\
   implement and operate and would cause many new types of name\
   conflicts.\
\
\
\
Klensin                      Informational                     [Page 15]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
1.8.2.  Application of the Registration Bundle\
\
   A registry has three options for handling the case where the\
   registration bundle contains more than one label.  The policy options\
   are:\
\
   o  Register and resolve all labels in the zone, making the zone\
      information identical to that of the registered labels.  This\
      option will allow end users to find names with variants more\
      easily, but will result in larger zone files.  For some language\
      tables, the zone file could become so large that it could\
      negatively affect the ability of the registry to perform name\
      resolution.  If the base registration contains several characters\
      that have equivalents, the owner could end up having to take care\
      of large numbers of zones.  For instance, if DIGIT ONE is a\
      variant of LATIN SMALL LETTER L, the owner of the domain name all-\
      lollypops.example.com will have to manage 32 zones.  If the intent\
      is to keep the contents of those zones identical, the owner may\
      then face a significant administrative problem.  If other concerns\
      dictate short times to live and absolute consistency of DNS\
      responses, the challenges may be nearly impossible.\
\
   o  Block all labels other than the registered label so they cannot be\
      registered in the future.  This option does not increase the size\
      of the zone file and provides maximum safety against false\
      positives, but it may cause end users to not be able to find names\
      with variants that they would expect.  If the base registration\
      contains characters that have equivalents, Internet users who do\
      not know what base characters were used in the registration will\
      not know what character to type in to get a DNS response.  For\
      instance, if DIGIT ONE is a variant of LATIN SMALL LETTER L, and\
      LATIN SMALL LETTER L is a variant of DIGIT ONE, the user who sees\
      "pale.example.com" will not know whether to type a "1" or a "l"\
      after the "pa" in the first label.\
\
   o  Resolve some labels and block some other labels.  This option is\
      likely to cause the most confusion with users because including\
      some variants will cause a name to be found, but using other\
      variants will cause the name to be not found.  For example, even\
      if people understood that DIGIT ONE and LATIN SMALL LETTER L were\
      variants, a typical DNS user wouldn't know which character to type\
      because they wouldn't know whether this pair were used to register\
      or block the labels.  However, this option can be used to balance\
      the desires of the name owner (that every possible attempt to\
      enter their name will work) with the desires of the zone\
      administrator (to make the zone more manageable and possibly to be\
      compensated for greater amounts of work needed for a single\
\
\
\
\
Klensin                      Informational                     [Page 16]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
      registration).  For many circumstances, it may be the most\
      attractive option.\
\
   In all cases, at least the registered label should appear in the\
   zone.  It would be almost impossible to describe to name owners why\
   the name that they asked for is not in the zone, but some other name\
   that they now control is.  By implication, if the requested label is\
   already registered, the entire registration request must be rejected.\
\
2.  Some Implications of This Approach\
\
   Historically, DNS labels were considered to be arbitrary identifier\
   strings, without any inherent meaning.  Even in ASCII, there was no\
   requirement that labels form words.  Labels that could not possibly\
   represent words in any Romance or Germanic language (the languages\
   that have been written in "Latin" scripts since medieval times or\
   earlier) have actually been quite common.  In general, in those\
   languages, words contain at least one vowel and do not have embedded\
   numbers.  As a result, a string such as "bc345df" cannot possibly be\
   a "word" in these languages.  More generally, the more one moves\
   toward "language"-based registry restrictions, the less it is going\
   to be possible to construct labels out of fanciful strings.  While\
   fanciful strings are terrible candidates for "words", they may make\
   very good identifiers.  To take a trivial example using only ASCII\
   characters, "rtr32w", "rtr32x", and "rtr32z" might be very good DNS\
   labels for a particular zone and application.  However, given the\
   embedded digits and lack of vowels, they, like the "bc345df" example\
   given above, would fail even the most superficial of tests for valid\
   English (or German or French (etc.)) word forms.\
\
   It is worth noting that several DNS experts have suggested that a\
   number of problems could be solved by prohibiting meaningful names in\
   labels, requiring instead that the labels be random or nonsense\
   strings.  If methods similar to those discussed in this document were\
   used to force identifiers to be closer to meaningful words in real\
   languages, the result would be directly contradictory to those\
   "random name" approaches.\
\
   Interestingly, if one were trying to develop an "only words" system,\
   a rather different -- but very restrictive -- model could be\
   developed using lookups in a dictionary for the relevant language and\
   a listing of valid business names for the relevant area.  If a string\
   did not appear in either, it would not be permitted to be registered.\
   Models that require a prior national business listing (or\
   registration) that is identical to the proposed domain name label\
   have historically been used to restrict registrations in some\
   country-code top level domains, so this is not a new idea.  On the\
   other hand, if look-alike characters are a concern, even that type of\
\
\
\
Klensin                      Informational                     [Page 17]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   rule (or restriction) would still not avoid the need to consider\
   character variants.\
\
   Consequently, registries applying the principles outlined in this\
   document should be careful not to apply more severe restrictions than\
   are reasonable and appropriate while, at the same time, being aware\
   of how difficult it usually is to add restrictions at a later time.\
\
3.  Possible Modifications of the JET Model\
\
   The JET model was designed for CJK characters.  The discussion above\
   implies that some extensions to it may be needed to handle the\
   characteristics of various alphabetic scripts and the decisions that\
   might be made about them in different zones.  Those extensions might\
   include facilities to process:\
\
   o  Two-character (or more) sequences, such as ligatures and\
      typographic spelling conventions, as variants.\
\
   o  Regular expressions or some other mechanism for dealing with\
      string positions of characters (e.g., characters that must, or\
      must not, appear at the beginning or end of strings).\
\
   o  Delimiter breaks to permit multiple languages to be used,\
      separately, within the same label.  E.g., is it possible to define\
      a label as consisting of two or more components, each in a\
      different language, with some particular delimiter to define the\
      boundaries of the components?\
\
4.  Conclusions and Recommendations About the General Approach\
\
   After examining the implications of the potential use of the full\
   range of characters permitted by IDNA in DNS labels, multiple groups,\
   including IESG [IESG-IDN] and ICANN [ICANN-IDN] [ICANN-IDN2], have\
   concluded that some restrictions are needed to prevent many forms of\
   user confusion about the actual structure of a name or the word,\
   phrase, or term that it appears to spell out.  The best way to\
   approach such restrictions appears to draw from the language and\
   culture of the community of registrants and users in the relevant\
   zone: if particular characters are likely to be surprising or\
   unintelligible to both of those groups, it is probably wise to not\
   permit them to be used in registrations.  Registration restrictions\
   can be carried much further than restricting permitted characters to\
   a selected Unicode subset.  The idea of a reserved "bundle" of\
   related labels permits probably-confusing combinations or sets of\
   characters to be bound together, under the control of a single\
   registrant.  While that registrant might still use the package in a\
   way that confused his or her own users (the approach outlined here\
\
\
\
Klensin                      Informational                     [Page 18]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   will not prevent either ill-though-out ideas or stupidity), the\
   possibility of turning potential confusion into a hostile attack\
   would be considerably reduced.\
\
   At the same time, excessive restrictions may make DNS identifiers\
   less useful for their original purpose: identifying particular hosts\
   and similar resources on the network in an orderly way.  Registries\
   creating rules and policies about what can be registered in\
   particular zones -- whether those are based on the JET Guidelines or\
   the suggestions in this document -- should balance the need for\
   restrictions against the need for flexibility in constructing\
   identifiers.\
\
   The discussion above provides many options that could be selected,\
   defined, and applied in different ways in different registries\
   (zones).  Registrars and registrants would almost certainly prefer\
   systems in which they can predict, at least to a first order\
   approximation, the implications of a particular potential\
   registration.  Predictability of that sort probably requires more\
   standards, and less flexibility, than the model itself might suggest.\
\
5.  A Model Table Format\
\
   The format of the table is meant to be machine-readable but not\
   human-readable.  It is fairly trivial to convert the table into one\
   that can be read by people.\
\
   Each character in the table is given in the "U+" notation for Unicode\
   characters.  The lines of the table are terminated with either a\
   carriage return character (ASCII 0x0D), a linefeed character (ASCII\
   0x0A), or a sequence of carriage return followed by linefeed (ASCII\
   0x0D 0x0A).  The order of the lines in the table may or may not\
   matter, depending on how the table is constructed.\
\
   Comment lines in the table are preceded with a "#" character (ASCII\
   0x2C).\
\
   Each non-comment line in the table starts with the character that is\
   allowed in the registry and expected to be used in registrations,\
   which is also called the "base character".  If the base character has\
   any variants, the base character is followed by a vertical bar\
   character ("|", ASCII 0x7C) and the variant string.  If the base\
   character has more than one variant, the variants are separated by a\
   colon (":", ASCII 0x3A).  Strings are given with a hyphen ("-", ASCII\
   0x2D) between each character.  Comments beginning with a "#" (ASCII\
   0x2C), and may be preceded by spaces (" ", ASCII 0x20).\
\
\
\
\
\
Klensin                      Informational                     [Page 19]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   The following is an example of how a table might look.  The entries\
   in this table are purposely silly and should not be used by any\
   registry as the basis for choosing variants.  For the example, assume\
   that the registry:\
\
   o  allows the FOR ALL character (U+2200) with no variants\
\
   o  allows the COMPLEMENT character (U+2201) which has a single\
      variant of LATIN CAPITAL LETTER C (U+0043)\
\
   o  allows the PROPORTION character (U+2237) which has one variant\
      which is the string COLON (U+003A) COLON (U+003A)\
\
   o  allows the PARTIAL DIFFERENTIAL character (U+2202) which has two\
      variants: LATIN SMALL LETTER D (U+0064) and GREEK SMALL LETTER\
      DELTA (U+03B4)\
\
   The table contents (after any required header information, see\
   [IANA-language-registry] and the discussion in Section 7 below) would\
   look like:\
\
       # An example of a table\
       U+2200\
       U+2201|U+0043\
       U+2237|U+003A-U+003A # Note that the variant is a string\
       U+2202|U+0064:U+03B4 # Two variants for the same character\
\
   Implementers of table processors should remember that there are tens\
   of thousands of characters whose codepoints are greater than 0xFFFF.\
   Thus, any program that assumes that each character in the table is\
   represented in exactly six octets ("U", "+", and four octets\
   representing the character value) will fail with tables that use\
   characters whose value is greater than 0xFFFF.\
\
6.  A Model Label Registration Procedure: "CreateBundle"\
\
   This procedure has three inputs:\
\
   1.  the proposed base registration,\
\
   2.  the language (or script, if the registration is script-based, but\
       "language" is used for convenience below) for the proposed base\
       registration, and\
\
   3.  the processing table associated with that language.\
\
   The output of the process is either failure (the base registration\
   cannot be registered at all), or a registration bundle that contains\
\
\
\
Klensin                      Informational                     [Page 20]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   one or more labels (always including the base registration).  As\
   described earlier, the registration bundle should be stored with its\
   date of creation so that issues with overlapping elements between\
   bundles can later be resolved on a first-come, first-served basis.\
\
   There are two steps to processing the registration:\
\
   1.  Check whether the proposed base registration exists in any\
       bundle.  If it does, stop immediately with a failure.\
\
   2.  Process the base registration with the mechanism described as\
       "CreateBundle" in Section 6.1, below.\
\
   Note that the process must be executed only once.  The process must\
   not be performed on any output of the process, only on the proposed\
   base registration.\
\
6.1.  Description of the CreateBundle Mechanism\
\
   The CreateBundle mechanism determines whether a registration bundle\
   can be created and, if so, populates that bundle with valid labels.\
\
   During the processing, a "temporary bundle" contains partial labels,\
   that is, labels that are being built and are not complete labels.\
   The partial labels in the temporary bundle consist of strings.\
\
   The steps are:\
\
   1.  Split the base registration into individual characters, called\
       "candidate characters".  Compare every candidate character\
       against the base characters in the table.  If any candidate\
       character does not exist in the set of base characters, the\
       system must stop and not register any names (that is, it must not\
       register either the base registration or any labels that would\
       have come from character variants).\
\
   2.  Perform the steps in IDNA's ToASCII sequence for the base\
       registration.  If ToASCII fails for the base registration, the\
       system must stop and not register any label (that is, it must not\
       register either the base registration or labels that might have\
       been created from variants of characters contained in it).  If\
       ToASCII succeeds, place the base registration into the\
       registration bundle.\
\
   3.  For every candidate character in the base registration, do the\
       following:\
\
\
\
\
\
Klensin                      Informational                     [Page 21]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
       o  Create the set of characters that consists of the candidate\
          character and any variants.\
\
       o  For each character in the set from the previous step,\
          duplicate the temporary bundle that resulted from the previous\
          candidate character, and add the new character to the end of\
          each partial label.\
\
   4.  The temporary bundle now contains zero or more labels that\
       consist of Unicode characters.  For every label in the temporary\
       bundle, do the following:\
\
       o  Process the label with ToASCII to see if ToASCII succeeds.  If\
          it does, add the label to the registration bundle.  Otherwise,\
          do not process this label from the temporary bundle any\
          further; it will not go into the registration bundle.\
\
   The result of the processing outlined above is the registration\
   bundle with the base registration and possibly other labels.\
\
6.2.  The "no-variants" Case\
\
   It is clear that, for many scripts, registries will choose to create\
   tables without variants, either because variants are clearly not\
   necessary or because they are determined to cause more confusion and\
   overhead than is justified by the circumstances.  For those\
   situations the table model of Section 5 becomes a trivial listing of\
   base characters and only the first two steps of CreateBundle\
   (verifying that all candidate character are in the base ("valid")\
   character list and verifying that the resulting characters will\
   succeed in the ToASCII operation) are applicable.  Even the second of\
   those steps becomes pro forma if the advice in the next subsection is\
   followed.\
\
6.3.  CreateBundle and Nameprep Mapping\
\
   One of the functions of Nameprep, and IDNA more generally, is to map\
   a large number of Unicode characters (code points) into a smaller\
   number to avoid a different but overlapping set of confusion\
   problems.  For example, when a non-ASCII script makes distinctions\
   between "upper case" and "lower case", nameprep maps the upper case\
   characters to the lower case ones in order to simulate the DNS\
   protocol's rule that ASCII characters are interpreted in a case-\
   insensitive way.  Unicode also contains many code points that are\
   typographic variants on each other (e.g., forms with different widths\
   and code points that designate font variations for mathematical\
   uses), the Unicode standard explicitly identifies them that way, and\
   Nameprep maps these onto base characters.\
\
\
\
Klensin                      Informational                     [Page 22]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   While having these mapping functions available during lookup may be\
   quite helpful to users who type equivalent forms, registrations are\
   probably best performed in terms of the IDNA base characters only,\
   i.e., those characters that nameprep will not change.  This will have\
   two advantages.\
\
   o  Registrants will never find themselves in the rather confusing\
      position of having submitted one string for registration and\
      finding a different string in the registry database (which could\
      otherwise occur even if the relevant language table does not\
      contain variants).\
\
   o  Those who are interested in what characters are permitted by a\
      given registry will only need to examine the relevant tables,\
      rather than simulating the IDNA algorithm to determine the result\
      of processing particular characters.\
\
7.  IANA Considerations\
\
   Under ICANN (not IETF) direction and management, the IANA has created\
   a registry for language variant tables.  The authoritative\
   documentation for that registry is in [IANA-language-registry].\
   Since the registry exists and is being managed under ICANN direction,\
   the material that follows is a review of the theory of this registry,\
   rather than new instructions for IANA.\
\
   As described above and suggested in the JET Guidelines, the\
   registration rules generally require only that:\
\
   o  The application be submitted or endorsed by a TLD registry, to\
      ensure that someone cares about the particular table.\
\
   o  The table be identified by the following:\
\
      *  the name -- usually the top-level domain name -- of the\
         submitting or endorsing registry;\
\
      *  one of: a language designation (consistent with [RFC3066] or\
         with some other system approved by the IANA), a script\
         designation, a combination of the two, or a sequence number\
         acceptable to IANA for this purpose;\
\
      *  a version number; and\
\
      *  a date.\
\
   o  Characters listed in the table be identified by Unicode code\
      points, as discussed above.\
\
\
\
Klensin                      Informational                     [Page 23]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   o  The table format may correspond to that identified in [RFC3743],\
      or in Section 5 above, or may be some variation on those themes\
      appropriate to the local processing model (with or without\
      variants).\
\
   This raises some issues that will need to be worked out as\
   experiences accumulate.  For example, more standardization of table\
   formats would be desirable to allow processing by the same computer\
   tools for different registries and languages.  But standardization\
   seems premature at this time due to differences in languages,\
   processing, and requirements and lack of experience with them.\
   Similarly, if a registry concludes that it should use a table that\
   contains characters from several scripts, it is not clear how such a\
   table should be designated.  Identifying it with a language code\
   (either according to [RFC3066] or an independent code registered with\
   IANA) is likely to just introduce more confusion, especially given\
   other Internet uses of the language codes.  It appears that some\
   other convention will be needed for those cases, and it should be\
   developed (if it has not already been established by the time this\
   document is published).\
\
8.  Internationalization Considerations\
\
   This document specifies a model mechanism for registering\
   Internationalized Domain Names (IDNs) that can be used to reduce\
   confusion among similar-appearing names.  The proposal is designed to\
   facilitate internationalization while permitting a balance between\
   internationalization concerns and concerns about keeping the Internet\
   global and domain name system references unique in the perception of\
   the user as well as in practice.\
\
9.  Security Considerations\
\
   Registration of labels in the DNS that contain essentially\
   unrestricted sequences of arbitrary Unicode characters may introduce\
   opportunities for either attacks or simple confusion.  Some of these\
   risks, such as confusion about which character (of several that look\
   alike) is actually intended, may be associated with the presentation\
   form of DNS names.  Others may be linked to databases associated with\
   the DNS, e.g., with the difficulty of finding an entry in a "Whois\
   file" when it is not clear how to enter or to search for the\
   characters that make up a name.  This document discusses a family of\
   restrictions on the names that can be registered.  Restrictions of\
   the type described can be imposed by a DNS zone ("registry").  The\
   document also describes some possible tools for implementing such\
   restrictions.\
\
\
\
\
\
Klensin                      Informational                     [Page 24]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   While the increased number and types of characters made available by\
   Unicode considerably increases the scale of the potential problems,\
   the problems addressed by this document are not new.  No plausible\
   set of restrictions will eliminate all problems and sources of\
   confusion: for example, it has often been pointed out that, even in\
   ASCII, the characters digit-one ("1") and lower case L ("l") can\
   easily be confused in some display fonts.  But, to the degree to\
   which security may be aided by sensible risk reduction, these\
   techniques may be helpful.\
\
10.  Acknowledgements\
\
   Discussions in the process of developing the JET Guidelines were\
   vital in developing this document and all of the JET participants are\
   consequently acknowledged.  Attempts to explain some of the issues\
   uncovered there to, and feedback from, Vint Cerf, Wendy Rickard, and\
   members of the ICANN IDN Committee were also helpful in the thinking\
   leading up to this document.\
\
   An effort by Paul Hoffman to create a generic specification for\
   registration restrictions of this type helped to inspire this\
   document, which takes a somewhat different, more language-oriented,\
   approach than his initial draft.  While the initial version of that\
   draft indicated that multiple languages (or multiple language tables)\
   for a single zone were infeasible, more recent versions [Hoffman-reg]\
   shifted to inclusion of language-based approaches.  The current\
   version of this document incorporates considerable text, and even\
   more ideas, from those drafts, with Paul Hoffman's generous\
   permission.\
\
   Feedback was provided by several registry operators (of both country\
   code and generic TLDs), including Edmon Chung and Ram Mohan of\
   Afilias, and by ICANN and IANA staff, notably Tina Dam and Theresa\
   Swinehart.  This feedback about issues encountered in registering\
   tables and designing IDN implementations resulted in the addition of\
   significant clarifying text to the current version of the document.\
\
   The opinions expressed here are the sole responsibility of the\
   author.  Some of those whose ideas and comments are reflected in this\
   document may disagree with the conclusions the author has drawn from\
   them.  The first draft version of this document was posted in June\
   2003.\
\
\
\
\
\
\
\
\
\
Klensin                      Informational                     [Page 25]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
11.  Informative References\
\
   [Daniels]     P.T. Daniels and W. Bright, The World's Writing\
                 Systems, Oxford: Oxford University Press: 1996.\
\
   [Drucker]     Drucker, J., "The Alphabetic Labyrinth: The Letters in\
                 History and Imagination", 1995.\
\
   [Hoffman-reg] Hoffman, P., "A Method for Registering\
                 Internationalized Domain Names", Work in Progress,\
                 October 2003.\
\
   [IESG-IDN]    Internet Engineering Steering Group, IETF, "IESG\
                 Statement on IDN", IESG Statement available from\
                 http://www.ietf.org/IESG/STATEMENTS/IDNstatement.txt,\
                 February 2003.\
\
   [ICANN-IDN]   Internet Corporation for Assigned Names and Numbers\
                 (ICANN), "Guidelines for the Implementation of\
                 Internationalized Domain Names, Version 1.0", June\
                 2003.\
\
   [ICANN-IDN2]  Internet Corporation for Assigned Names and Numbers\
                 (ICANN), "Guidelines for the Implementation of\
                 Internationalized Domain Names, Version 2.0", September\
                 2005.\
\
   [IANA-language-registry]\
                 Internet Assigned Numbers Authority (IANA), "IDN\
                 Language Table Registry", April 2004.\
\
   [LTRU-Registry]\
                 Phillips, A., Ed. and M. Davis, Ed., "Tags for\
                 Identifying Languages", Work in Progress, October 2005.\
\
   [RFC952]      Harrenstien, K., Stahl, M., and E. Feinler, "DoD\
                 Internet host table specification", RFC 952, October\
                 1985.\
\
   [RFC1035]     Mockapetris, P., "Domain names - implementation and\
                 specification", STD 13, RFC 1035, November 1987.\
\
   [RFC3066]     Alvestrand, H., "Tags for the Identification of\
                 Languages", BCP 47, RFC 3066, January 2001.\
\
   [RFC3490]     Faltstrom, P., Hoffman, P., and A. Costello,\
                 "Internationalizing Domain Names in Applications\
                 (IDNA)", RFC 3490, March 2003.\
\
\
\
Klensin                      Informational                     [Page 26]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
   [RFC3491]     Hoffman, P. and M. Blanchet, "Nameprep: A Stringprep\
                 Profile for Internationalized Domain Names (IDN)", RFC\
                 3491, March 2003.\
\
   [RFC3492]     Costello, A., "Punycode: A Bootstring encoding of\
                 Unicode for Internationalized Domain Names in\
                 Applications (IDNA)", RFC 3492, March 2003.\
\
   [RFC3536]     Hoffman, P., "Terminology Used in Internationalization\
                 in the IETF", RFC 3536, May 2003.\
\
   [RFC3743]     Konishi, K., Huang, K., Qian, H., and Y. Ko, "Joint\
                 Engineering Team (JET) Guidelines for Internationalized\
                 Domain Names (IDN) Registration and Administration for\
                 Chinese, Japanese, and Korean", RFC 3743, April 2004.\
\
   [Unicode]     The Unicode Consortium, "The Unicode Standard --\
                 Version 3.0", January 2000.\
\
   [Unicode32]   The Unicode Consortium, "Unicode Standard Annex #28:\
                 Unicode 3.2", March 2002.\
\
Author's Address\
\
   John C Klensin\
   1770 Massachusetts Ave, #322\
   Cambridge, MA  02140\
   USA\
\
   Phone: +1 617 491 5735\
   EMail: john-ietf@jck.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Klensin                      Informational                     [Page 27]\
\
RFC 4290               IDN Registration Practices          December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78 and at www.rfc-editor.org/copyright.html, and\
   except as set forth therein, the authors retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Klensin                      Informational                     [Page 28]\
\

doc 4
  field 0
    name titolo
    type string
    value rfc4292.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                        B. Haberman\
Request for Comments: 4292                      Johns Hopkins University\
Obsoletes: 2096                                               April 2006\
Category: Standards Track\
\
\
                        IP Forwarding Table MIB\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document defines a portion of the Management Information Base\
   (MIB) for use with network management protocols in the Internet\
   community.  In particular, it describes managed objects related to\
   the forwarding of Internet Protocol (IP) packets in an IP version-\
   independent manner.  This document obsoletes RFC 2096.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Conventions Used In This Document ...............................2\
   3. The Internet-Standard Management Framework ......................2\
   4. Overview ........................................................2\
      4.1. Relationship to Other MIBs .................................3\
           4.1.1. RFC 1213 ............................................3\
           4.1.2. RFC 1354 ............................................3\
           4.1.3. RFC 2096 ............................................3\
           4.1.4. RFC 2011 and 2465 ...................................3\
   5. Definitions .....................................................3\
   6. Security Considerations ........................................30\
   7. Changes from RFC 2096 ..........................................31\
   8. Normative References ...........................................32\
   9. Informative References .........................................32\
   10. Authors and Acknowledgements ..................................33\
\
\
\
\
\
\
Haberman                    Standards Track                     [Page 1]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
1.  Introduction\
\
   This document defines a portion of the Management Information Base\
   (MIB) for use in managing objects related to the forwarding of\
   Internet Protocol (IP) packets in an IP version-independent manner.\
\
   It should be noted that the MIB definition described herein does not\
   support multiple instances based on the same address family type.\
   However, it does support an instance of the MIB per address family.\
\
2.  Conventions Used In This Document\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [RFC2119].\
\
3.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to section 7 of\
   RFC 3410 [RFC3410].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\
   [RFC2580].\
\
4.  Overview\
\
   The MIB consists of one current table and two current global objects.\
\
      1. The object inetCidrRouteNumber indicates the number of current\
         routes.  This is primarily to avoid having to read the table in\
         order to determine this number.\
\
      2. The object inetCidrRouteDiscards counts the number of valid\
         routes that were discarded from inetCidrRouteTable for any\
         reason.  This object replaces the ipRoutingDiscards and\
         ipv6DiscardedRoutes objects.\
\
      3. The inetCidrRouteTable provides the ability to display IP\
         version-independent multipath CIDR routes.\
\
\
\
\
\
Haberman                    Standards Track                     [Page 2]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
4.1.  Relationship to Other MIBs\
\
   This MIB definition contains several deprecated and obsolete tables\
   and objects.  The following subsections describe the relationship\
   between these objects and other MIB modules.\
\
4.1.1.  RFC 1213\
\
   The ipRouteTable object was originally defined in RFC 1213 [RFC1213].\
   It was updated by ipForwardTable in RFC 1354 [RFC1354].\
\
4.1.2.  RFC 1354\
\
   The ipForwardTable object replaced the ipRouteTable object from RFC\
   1213.  It was in turn obsoleted by the ipCidrRouteTable defined in\
   RFC 2096 [RFC2096].\
\
   In addition, RFC 1354 introduced ipForwardNumber.  This object\
   reflects the number of entries found in ipForwardTable.  It was\
   obsoleted by ipCidrRouteNumber, defined in RFC 2096.\
\
4.1.3.  RFC 2096\
\
   In RFC 2096, the ipCidrRouteTable and ipCidrRouteNumber were\
   introduced.  The ipCidrRouteTable object supports multipath IP routes\
   having the same network number but differing network masks.  The\
   number of entries in that table is reflected in ipCidrRouteNumber.\
   These objects are deprecated by the definitions contained in this MIB\
   definition.\
\
4.1.4.  RFC 2011 and 2465\
\
   RFC 2011 [RFC2011] contains the ipRoutingDiscards object, which\
   counts the number of valid routes that have been removed from the\
   ipCidrRouteTable object.  The corresponding ipv6DiscardedRoutes\
   object is defined in RFC 2465 [RFC2465].  These objects are\
   deprecated in favor of the version-independent object\
   inetCidrRouteDiscards defined in this MIB.\
\
5.  Definitions\
\
   IP-FORWARD-MIB DEFINITIONS ::= BEGIN\
\
   IMPORTS\
       MODULE-IDENTITY, OBJECT-TYPE,\
       IpAddress, Integer32, Gauge32,\
       Counter32                          FROM SNMPv2-SMI\
       RowStatus                          FROM SNMPv2-TC\
\
\
\
Haberman                    Standards Track                     [Page 3]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       MODULE-COMPLIANCE, OBJECT-GROUP    FROM SNMPv2-CONF\
       InterfaceIndexOrZero               FROM IF-MIB\
       ip                                 FROM IP-MIB\
       IANAipRouteProtocol                FROM IANA-RTPROTO-MIB\
       InetAddress, InetAddressType,\
       InetAddressPrefixLength,\
       InetAutonomousSystemNumber         FROM INET-ADDRESS-MIB;\
\
   ipForward MODULE-IDENTITY\
       LAST-UPDATED "200602010000Z"\
       ORGANIZATION\
              "IETF IPv6 Working Group\
               http://www.ietf.org/html.charters/ipv6-charter.html"\
       CONTACT-INFO\
              "Editor:\
               Brian Haberman\
               Johns Hopkins University - Applied Physics Laboratory\
               Mailstop 17-S442\
               11100 Johns Hopkins Road\
               Laurel MD,  20723-6099  USA\
\
               Phone: +1-443-778-1319\
               Email: brian@innovationslab.net\
\
               Send comments to <ipv6@ietf.org>"\
       DESCRIPTION\
              "The MIB module for the management of CIDR multipath IP\
               Routes.\
\
               Copyright (C) The Internet Society (2006).  This version\
               of this MIB module is a part of RFC 4292; see the RFC\
               itself for full legal notices."\
\
       REVISION      "200602010000Z"\
       DESCRIPTION\
              "IPv4/v6 version-independent revision.  Minimal changes\
               were made to the original RFC 2096 MIB to allow easy\
               upgrade of existing IPv4 implementations to the\
               version-independent MIB.  These changes include:\
\
               Adding inetCidrRouteDiscards as a replacement for the\
               deprecated ipRoutingDiscards and ipv6DiscardedRoutes\
               objects.\
\
               Adding a new conformance statement to support the\
               implementation of the IP Forwarding MIB in a\
               read-only mode.\
\
\
\
\
Haberman                    Standards Track                     [Page 4]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               The inetCidrRouteTable replaces the IPv4-specific\
               ipCidrRouteTable, its related objects, and related\
               conformance statements.\
\
               Published as RFC 4292."\
\
       REVISION      "199609190000Z"\
       DESCRIPTION\
              "Revised to support CIDR routes.\
               Published as RFC 2096."\
\
       REVISION      "199207022156Z"\
       DESCRIPTION\
              "Initial version, published as RFC 1354."\
       ::= { ip 24 }\
\
   inetCidrRouteNumber OBJECT-TYPE\
       SYNTAX     Gauge32\
       MAX-ACCESS read-only\
       STATUS     current\
       DESCRIPTION\
              "The number of current inetCidrRouteTable entries that\
               are not invalid."\
   ::= { ipForward 6 }\
\
   inetCidrRouteDiscards OBJECT-TYPE\
       SYNTAX     Counter32\
       MAX-ACCESS read-only\
       STATUS     current\
       DESCRIPTION\
              "The number of valid route entries discarded from the\
               inetCidrRouteTable.  Discarded route entries do not\
               appear in the inetCidrRouteTable.  One possible reason\
               for discarding an entry would be to free-up buffer space\
               for other route table entries."\
       ::= { ipForward 8 }\
\
   --  Inet CIDR Route Table\
\
   --  The Inet CIDR Route Table deprecates and replaces the\
   --  ipCidrRoute Table currently in the IP Forwarding Table MIB.\
   --  It adds IP protocol independence.\
\
   inetCidrRouteTable OBJECT-TYPE\
       SYNTAX     SEQUENCE OF InetCidrRouteEntry\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
\
\
\
Haberman                    Standards Track                     [Page 5]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
              "This entity's IP Routing table."\
       REFERENCE\
              "RFC 1213 Section 6.6, The IP Group"\
       ::= { ipForward 7 }\
\
   inetCidrRouteEntry OBJECT-TYPE\
       SYNTAX     InetCidrRouteEntry\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "A particular route to a particular destination, under a\
               particular policy (as reflected in the\
               inetCidrRoutePolicy object).\
\
               Dynamically created rows will survive an agent reboot.\
\
               Implementers need to be aware that if the total number\
               of elements (octets or sub-identifiers) in\
               inetCidrRouteDest, inetCidrRoutePolicy, and\
               inetCidrRouteNextHop exceeds 111, then OIDs of column\
               instances in this table will have more than 128 sub-\
               identifiers and cannot be accessed using SNMPv1,\
               SNMPv2c, or SNMPv3."\
       INDEX {\
           inetCidrRouteDestType,\
           inetCidrRouteDest,\
           inetCidrRoutePfxLen,\
           inetCidrRoutePolicy,\
           inetCidrRouteNextHopType,\
           inetCidrRouteNextHop\
           }\
       ::= { inetCidrRouteTable 1 }\
\
   InetCidrRouteEntry ::= SEQUENCE {\
           inetCidrRouteDestType     InetAddressType,\
           inetCidrRouteDest         InetAddress,\
           inetCidrRoutePfxLen       InetAddressPrefixLength,\
           inetCidrRoutePolicy       OBJECT IDENTIFIER,\
           inetCidrRouteNextHopType  InetAddressType,\
           inetCidrRouteNextHop      InetAddress,\
           inetCidrRouteIfIndex      InterfaceIndexOrZero,\
           inetCidrRouteType         INTEGER,\
           inetCidrRouteProto        IANAipRouteProtocol,\
           inetCidrRouteAge          Gauge32,\
           inetCidrRouteNextHopAS    InetAutonomousSystemNumber,\
           inetCidrRouteMetric1      Integer32,\
           inetCidrRouteMetric2      Integer32,\
           inetCidrRouteMetric3      Integer32,\
\
\
\
Haberman                    Standards Track                     [Page 6]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
           inetCidrRouteMetric4      Integer32,\
           inetCidrRouteMetric5      Integer32,\
           inetCidrRouteStatus       RowStatus\
       }\
\
   inetCidrRouteDestType OBJECT-TYPE\
       SYNTAX     InetAddressType\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "The type of the inetCidrRouteDest address, as defined\
               in the InetAddress MIB.\
\
               Only those address types that may appear in an actual\
               routing table are allowed as values of this object."\
       REFERENCE "RFC 4001"\
       ::= { inetCidrRouteEntry 1 }\
\
   inetCidrRouteDest OBJECT-TYPE\
       SYNTAX     InetAddress\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "The destination IP address of this route.\
\
               The type of this address is determined by the value of\
               the inetCidrRouteDestType object.\
\
               The values for the index objects inetCidrRouteDest and\
               inetCidrRoutePfxLen must be consistent.  When the value\
               of inetCidrRouteDest (excluding the zone index, if one\
               is present) is x, then the bitwise logical-AND\
               of x with the value of the mask formed from the\
               corresponding index object inetCidrRoutePfxLen MUST be\
               equal to x.  If not, then the index pair is not\
               consistent and an inconsistentName error must be\
               returned on SET or CREATE requests."\
\
       ::= { inetCidrRouteEntry 2 }\
\
   inetCidrRoutePfxLen OBJECT-TYPE\
       SYNTAX     InetAddressPrefixLength\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "Indicates the number of leading one bits that form the\
               mask to be logical-ANDed with the destination address\
               before being compared to the value in the\
\
\
\
Haberman                    Standards Track                     [Page 7]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               inetCidrRouteDest field.\
\
               The values for the index objects inetCidrRouteDest and\
               inetCidrRoutePfxLen must be consistent.  When the value\
               of inetCidrRouteDest (excluding the zone index, if one\
               is present) is x, then the bitwise logical-AND\
               of x with the value of the mask formed from the\
               corresponding index object inetCidrRoutePfxLen MUST be\
               equal to x.  If not, then the index pair is not\
               consistent and an inconsistentName error must be\
               returned on SET or CREATE requests."\
\
       ::= { inetCidrRouteEntry 3 }\
\
   inetCidrRoutePolicy OBJECT-TYPE\
       SYNTAX     OBJECT IDENTIFIER\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "This object is an opaque object without any defined\
               semantics.  Its purpose is to serve as an additional\
               index that may delineate between multiple entries to\
               the same destination.  The value { 0 0 } shall be used\
               as the default value for this object."\
       ::= { inetCidrRouteEntry 4 }\
\
   inetCidrRouteNextHopType OBJECT-TYPE\
       SYNTAX     InetAddressType\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "The type of the inetCidrRouteNextHop address, as\
               defined in the InetAddress MIB.\
\
               Value should be set to unknown(0) for non-remote\
               routes.\
\
               Only those address types that may appear in an actual\
               routing table are allowed as values of this object."\
       REFERENCE "RFC 4001"\
       ::= { inetCidrRouteEntry 5 }\
\
   inetCidrRouteNextHop OBJECT-TYPE\
       SYNTAX     InetAddress\
       MAX-ACCESS not-accessible\
       STATUS     current\
       DESCRIPTION\
              "On remote routes, the address of the next system en\
\
\
\
Haberman                    Standards Track                     [Page 8]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               route.  For non-remote routes, a zero length string.\
\
               The type of this address is determined by the value of\
               the inetCidrRouteNextHopType object."\
       ::= { inetCidrRouteEntry 6 }\
\
   inetCidrRouteIfIndex OBJECT-TYPE\
       SYNTAX     InterfaceIndexOrZero\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "The ifIndex value that identifies the local interface\
               through which the next hop of this route should be\
               reached.  A value of 0 is valid and represents the\
               scenario where no interface is specified."\
       ::= { inetCidrRouteEntry 7 }\
\
   inetCidrRouteType OBJECT-TYPE\
       SYNTAX     INTEGER {\
                   other    (1), -- not specified by this MIB\
                   reject   (2), -- route that discards traffic and\
                                 --   returns ICMP notification\
                   local    (3), -- local interface\
                   remote   (4), -- remote destination\
                   blackhole(5)  -- route that discards traffic\
                                 --   silently\
                }\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "The type of route.  Note that local(3) refers to a\
               route for which the next hop is the final destination;\
               remote(4) refers to a route for which the next hop is\
               not the final destination.\
\
               Routes that do not result in traffic forwarding or\
               rejection should not be displayed, even if the\
               implementation keeps them stored internally.\
\
               reject(2) refers to a route that, if matched, discards\
               the message as unreachable and returns a notification\
               (e.g., ICMP error) to the message sender.  This is used\
               in some protocols as a means of correctly aggregating\
               routes.\
\
               blackhole(5) refers to a route that, if matched,\
               discards the message silently."\
       ::= { inetCidrRouteEntry 8 }\
\
\
\
Haberman                    Standards Track                     [Page 9]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
\
   inetCidrRouteProto OBJECT-TYPE\
       SYNTAX     IANAipRouteProtocol\
       MAX-ACCESS read-only\
       STATUS     current\
       DESCRIPTION\
              "The routing mechanism via which this route was learned.\
               Inclusion of values for gateway routing protocols is\
               not intended to imply that hosts should support those\
               protocols."\
       ::= { inetCidrRouteEntry 9 }\
\
   inetCidrRouteAge OBJECT-TYPE\
       SYNTAX     Gauge32\
       MAX-ACCESS read-only\
       STATUS     current\
       DESCRIPTION\
              "The number of seconds since this route was last updated\
               or otherwise determined to be correct.  Note that no\
               semantics of 'too old' can be implied, except through\
               knowledge of the routing protocol by which the route\
               was learned."\
       ::= { inetCidrRouteEntry 10 }\
\
   inetCidrRouteNextHopAS OBJECT-TYPE\
       SYNTAX     InetAutonomousSystemNumber\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "The Autonomous System Number of the Next Hop.  The\
               semantics of this object are determined by the routing-\
               protocol specified in the route's inetCidrRouteProto\
               value.  When this object is unknown or not relevant, its\
               value should be set to zero."\
       DEFVAL { 0 }\
       ::= { inetCidrRouteEntry 11 }\
\
   inetCidrRouteMetric1 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "The primary routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's inetCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
\
\
\
Haberman                    Standards Track                    [Page 10]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       ::= { inetCidrRouteEntry 12 }\
\
   inetCidrRouteMetric2 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's inetCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { inetCidrRouteEntry 13 }\
\
   inetCidrRouteMetric3 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's inetCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { inetCidrRouteEntry 14 }\
\
   inetCidrRouteMetric4 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's inetCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { inetCidrRouteEntry 15 }\
\
   inetCidrRouteMetric5 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
\
\
\
Haberman                    Standards Track                    [Page 11]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               protocol specified in the route's inetCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { inetCidrRouteEntry 16 }\
\
   inetCidrRouteStatus OBJECT-TYPE\
       SYNTAX     RowStatus\
       MAX-ACCESS read-create\
       STATUS     current\
       DESCRIPTION\
              "The row status variable, used according to row\
               installation and removal conventions.\
\
               A row entry cannot be modified when the status is\
               marked as active(1)."\
       ::= { inetCidrRouteEntry 17 }\
\
   --  Conformance information\
\
   ipForwardConformance\
        OBJECT IDENTIFIER ::= { ipForward 5 }\
\
   ipForwardGroups\
        OBJECT IDENTIFIER ::= { ipForwardConformance 1 }\
\
   ipForwardCompliances\
        OBJECT IDENTIFIER ::= { ipForwardConformance 2 }\
\
   --  Compliance statements\
\
   ipForwardFullCompliance MODULE-COMPLIANCE\
       STATUS     current\
       DESCRIPTION\
              "When this MIB is implemented for read-create, the\
               implementation can claim full compliance.\
\
               There are a number of INDEX objects that cannot be\
               represented in the form of OBJECT clauses in SMIv2,\
               but for which there are compliance requirements,\
               expressed in OBJECT clause form in this description:\
\
               -- OBJECT      inetCidrRouteDestType\
               -- SYNTAX      InetAddressType (ipv4(1), ipv6(2),\
               --                              ipv4z(3), ipv6z(4))\
               -- DESCRIPTION\
               --     This MIB requires support for global and\
               --     non-global ipv4 and ipv6 addresses.\
\
\
\
Haberman                    Standards Track                    [Page 12]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               --\
               -- OBJECT      inetCidrRouteDest\
               -- SYNTAX      InetAddress (SIZE (4 | 8 | 16 | 20))\
               -- DESCRIPTION\
               --     This MIB requires support for global and\
               --     non-global IPv4 and IPv6 addresses.\
               --\
               -- OBJECT      inetCidrRouteNextHopType\
               -- SYNTAX      InetAddressType (unknown(0), ipv4(1),\
               --                              ipv6(2), ipv4z(3)\
               --                              ipv6z(4))\
               -- DESCRIPTION\
               --     This MIB requires support for global and\
               --     non-global ipv4 and ipv6 addresses.\
               --\
               -- OBJECT      inetCidrRouteNextHop\
               -- SYNTAX      InetAddress (SIZE (0 | 4 | 8 | 16 | 20))\
               -- DESCRIPTION\
               --     This MIB requires support for global and\
               --     non-global IPv4 and IPv6 addresses.\
               "\
\
      MODULE -- this module\
      MANDATORY-GROUPS { inetForwardCidrRouteGroup }\
\
      OBJECT        inetCidrRouteStatus\
      SYNTAX        RowStatus { active(1), notInService (2) }\
      WRITE-SYNTAX  RowStatus { active(1), notInService (2),\
                                createAndGo(4), destroy(6) }\
      DESCRIPTION  "Support for createAndWait is not required."\
\
      ::= { ipForwardCompliances 3 }\
\
   ipForwardReadOnlyCompliance MODULE-COMPLIANCE\
      STATUS     current\
      DESCRIPTION\
              "When this MIB is implemented without support for read-\
               create (i.e., in read-only mode), the implementation can\
               claim read-only compliance."\
      MODULE -- this module\
      MANDATORY-GROUPS { inetForwardCidrRouteGroup }\
\
      OBJECT      inetCidrRouteIfIndex\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteType\
\
\
\
Haberman                    Standards Track                    [Page 13]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteNextHopAS\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteMetric1\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteMetric2\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteMetric3\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteMetric4\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteMetric5\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      OBJECT      inetCidrRouteStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
         "Write access is not required."\
\
      ::= { ipForwardCompliances 4 }\
\
   -- units of conformance\
\
   inetForwardCidrRouteGroup OBJECT-GROUP\
       OBJECTS { inetCidrRouteDiscards,\
                 inetCidrRouteIfIndex, inetCidrRouteType,\
                 inetCidrRouteProto, inetCidrRouteAge,\
\
\
\
Haberman                    Standards Track                    [Page 14]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
                 inetCidrRouteNextHopAS, inetCidrRouteMetric1,\
                 inetCidrRouteMetric2, inetCidrRouteMetric3,\
                 inetCidrRouteMetric4, inetCidrRouteMetric5,\
                 inetCidrRouteStatus, inetCidrRouteNumber\
           }\
       STATUS     current\
       DESCRIPTION\
              "The IP version-independent CIDR Route Table."\
       ::= { ipForwardGroups 4 }\
\
   --  Deprecated Objects\
\
   ipCidrRouteNumber OBJECT-TYPE\
       SYNTAX     Gauge32\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "The number of current ipCidrRouteTable entries that are\
               not invalid.  This object is deprecated in favor of\
               inetCidrRouteNumber and the inetCidrRouteTable."\
       ::= { ipForward 3 }\
\
   --  IP CIDR Route Table\
\
   --  The IP CIDR Route Table obsoletes and replaces the ipRoute\
   --  Table current in MIB-I and MIB-II and the IP Forwarding Table.\
   --  It adds knowledge of the autonomous system of the next hop,\
   --  multiple next hops, policy routing, and Classless\
   --  Inter-Domain Routing.\
\
   ipCidrRouteTable OBJECT-TYPE\
       SYNTAX     SEQUENCE OF IpCidrRouteEntry\
       MAX-ACCESS not-accessible\
       STATUS     deprecated\
       DESCRIPTION\
              "This entity's IP Routing table.  This table has been\
               deprecated in favor of the IP version neutral\
               inetCidrRouteTable."\
       REFERENCE\
              "RFC 1213 Section 6.6, The IP Group"\
       ::= { ipForward 4 }\
\
   ipCidrRouteEntry OBJECT-TYPE\
       SYNTAX     IpCidrRouteEntry\
       MAX-ACCESS not-accessible\
       STATUS     deprecated\
       DESCRIPTION\
              "A particular route to a particular destination, under a\
\
\
\
Haberman                    Standards Track                    [Page 15]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               particular policy."\
       INDEX {\
           ipCidrRouteDest,\
           ipCidrRouteMask,\
           ipCidrRouteTos,\
           ipCidrRouteNextHop\
           }\
          ::= { ipCidrRouteTable 1 }\
\
   IpCidrRouteEntry ::= SEQUENCE {\
           ipCidrRouteDest       IpAddress,\
           ipCidrRouteMask       IpAddress,\
           ipCidrRouteTos        Integer32,\
           ipCidrRouteNextHop    IpAddress,\
           ipCidrRouteIfIndex    Integer32,\
           ipCidrRouteType       INTEGER,\
           ipCidrRouteProto      INTEGER,\
           ipCidrRouteAge        Integer32,\
           ipCidrRouteInfo       OBJECT IDENTIFIER,\
           ipCidrRouteNextHopAS  Integer32,\
           ipCidrRouteMetric1    Integer32,\
           ipCidrRouteMetric2    Integer32,\
           ipCidrRouteMetric3    Integer32,\
           ipCidrRouteMetric4    Integer32,\
           ipCidrRouteMetric5    Integer32,\
           ipCidrRouteStatus     RowStatus\
       }\
\
   ipCidrRouteDest OBJECT-TYPE\
       SYNTAX     IpAddress\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "The destination IP address of this route.\
\
               This object may not take a Multicast (Class D) address\
               value.\
\
               Any assignment (implicit or otherwise) of an instance\
               of this object to a value x must be rejected if the\
               bitwise logical-AND of x with the value of the\
               corresponding instance of the ipCidrRouteMask object is\
               not equal to x."\
       ::= { ipCidrRouteEntry 1 }\
\
   ipCidrRouteMask OBJECT-TYPE\
       SYNTAX     IpAddress\
       MAX-ACCESS read-only\
\
\
\
Haberman                    Standards Track                    [Page 16]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       STATUS     deprecated\
       DESCRIPTION\
              "Indicate the mask to be logical-ANDed with the\
               destination address before being compared to the value\
               in the ipCidrRouteDest field.  For those systems that\
               do not support arbitrary subnet masks, an agent\
               constructs the value of the ipCidrRouteMask by\
               reference to the IP Address Class.\
\
               Any assignment (implicit or otherwise) of an instance\
               of this object to a value x must be rejected if the\
               bitwise logical-AND of x with the value of the\
               corresponding instance of the ipCidrRouteDest object is\
               not equal to ipCidrRouteDest."\
       ::= { ipCidrRouteEntry 2 }\
\
   -- The following convention is included for specification\
   -- of TOS Field contents.  At this time, the Host Requirements\
   -- and the Router Requirements documents disagree on the width\
   -- of the TOS field.  This mapping describes the Router\
   -- Requirements mapping, and leaves room to widen the TOS field\
   -- without impact to fielded systems.\
\
   ipCidrRouteTos OBJECT-TYPE\
       SYNTAX     Integer32 (0..2147483647)\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "The policy specifier is the IP TOS Field.  The encoding\
               of IP TOS is as specified by the following convention.\
               Zero indicates the default path if no more specific\
               policy applies.\
\
               +-----+-----+-----+-----+-----+-----+-----+-----+\
               |                 |                       |     |\
               |   PRECEDENCE    |    TYPE OF SERVICE    |  0  |\
               |                 |                       |     |\
               +-----+-----+-----+-----+-----+-----+-----+-----+\
\
                            IP TOS                IP TOS\
                  Field     Policy      Field     Policy\
                  Contents    Code      Contents    Code\
                  0 0 0 0  ==>   0      0 0 0 1  ==>   2\
                  0 0 1 0  ==>   4      0 0 1 1  ==>   6\
                  0 1 0 0  ==>   8      0 1 0 1  ==>  10\
                  0 1 1 0  ==>  12      0 1 1 1  ==>  14\
                  1 0 0 0  ==>  16      1 0 0 1  ==>  18\
                  1 0 1 0  ==>  20      1 0 1 1  ==>  22\
\
\
\
Haberman                    Standards Track                    [Page 17]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
                  1 1 0 0  ==>  24      1 1 0 1  ==>  26\
                  1 1 1 0  ==>  28      1 1 1 1  ==>  30"\
       ::= { ipCidrRouteEntry 3 }\
\
   ipCidrRouteNextHop OBJECT-TYPE\
       SYNTAX     IpAddress\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "On remote routes, the address of the next system en\
               route; Otherwise, 0.0.0.0."\
       ::= { ipCidrRouteEntry 4 }\
\
   ipCidrRouteIfIndex OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "The ifIndex value that identifies the local interface\
               through which the next hop of this route should be\
               reached."\
       DEFVAL { 0 }\
       ::= { ipCidrRouteEntry 5 }\
\
   ipCidrRouteType OBJECT-TYPE\
       SYNTAX     INTEGER {\
                   other    (1), -- not specified by this MIB\
                   reject   (2), -- route that discards traffic\
                   local    (3), -- local interface\
                   remote   (4)  -- remote destination\
                }\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "The type of route.  Note that local(3) refers to a\
               route for which the next hop is the final destination;\
               remote(4) refers to a route for which the next hop is\
               not the final destination.\
\
               Routes that do not result in traffic forwarding or\
               rejection should not be displayed, even if the\
               implementation keeps them stored internally.\
\
               reject (2) refers to a route that, if matched,\
               discards the message as unreachable.  This is used in\
               some protocols as a means of correctly aggregating\
               routes."\
       ::= { ipCidrRouteEntry 6 }\
\
\
\
Haberman                    Standards Track                    [Page 18]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
\
   ipCidrRouteProto OBJECT-TYPE\
       SYNTAX     INTEGER {\
                   other     (1),  -- not specified\
                   local     (2),  -- local interface\
                   netmgmt   (3),  -- static route\
                   icmp      (4),  -- result of ICMP Redirect\
\
                           -- the following are all dynamic\
                           -- routing protocols\
                   egp        (5),  -- Exterior Gateway Protocol\
                   ggp        (6),  -- Gateway-Gateway Protocol\
                   hello      (7),  -- FuzzBall HelloSpeak\
                   rip        (8),  -- Berkeley RIP or RIP-II\
                   isIs       (9),  -- Dual IS-IS\
                   esIs       (10), -- ISO 9542\
                   ciscoIgrp  (11), -- Cisco IGRP\
                   bbnSpfIgp  (12), -- BBN SPF IGP\
                   ospf       (13), -- Open Shortest Path First\
                   bgp        (14), -- Border Gateway Protocol\
                   idpr       (15), -- InterDomain Policy Routing\
                   ciscoEigrp (16)  -- Cisco EIGRP\
                }\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "The routing mechanism via which this route was learned.\
               Inclusion of values for gateway routing protocols is\
               not intended to imply that hosts should support those\
               protocols."\
       ::= { ipCidrRouteEntry 7 }\
\
   ipCidrRouteAge OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-only\
       STATUS     deprecated\
       DESCRIPTION\
              "The number of seconds since this route was last updated\
               or otherwise determined to be correct.  Note that no\
               semantics of `too old' can be implied, except through\
               knowledge of the routing protocol by which the route\
               was learned."\
       DEFVAL  { 0 }\
       ::= { ipCidrRouteEntry 8 }\
\
   ipCidrRouteInfo OBJECT-TYPE\
       SYNTAX     OBJECT IDENTIFIER\
       MAX-ACCESS read-create\
\
\
\
Haberman                    Standards Track                    [Page 19]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       STATUS     deprecated\
       DESCRIPTION\
              "A reference to MIB definitions specific to the\
               particular routing protocol that is responsible for\
               this route, as determined by the value specified in the\
               route's ipCidrRouteProto value.  If this information is\
               not present, its value should be set to the OBJECT\
               IDENTIFIER { 0 0 }, which is a syntactically valid\
               object identifier, and any implementation conforming to\
               ASN.1 and the Basic Encoding Rules must be able to\
               generate and recognize this value."\
       ::= { ipCidrRouteEntry 9 }\
\
   ipCidrRouteNextHopAS OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "The Autonomous System Number of the Next Hop.  The\
               semantics of this object are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  When this object is unknown or not relevant, its\
               value should be set to zero."\
       DEFVAL { 0 }\
       ::= { ipCidrRouteEntry 10 }\
\
   ipCidrRouteMetric1 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "The primary routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { ipCidrRouteEntry 11 }\
\
   ipCidrRouteMetric2 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  If this metric is not used, its value should be\
\
\
\
Haberman                    Standards Track                    [Page 20]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
               set to -1."\
       DEFVAL { -1 }\
       ::= { ipCidrRouteEntry 12 }\
\
   ipCidrRouteMetric3 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { ipCidrRouteEntry 13 }\
\
   ipCidrRouteMetric4 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { ipCidrRouteEntry 14 }\
\
   ipCidrRouteMetric5 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipCidrRouteProto\
               value.  If this metric is not used, its value should be\
               set to -1."\
       DEFVAL { -1 }\
       ::= { ipCidrRouteEntry 15 }\
\
   ipCidrRouteStatus OBJECT-TYPE\
       SYNTAX     RowStatus\
       MAX-ACCESS read-create\
       STATUS     deprecated\
       DESCRIPTION\
\
\
\
Haberman                    Standards Track                    [Page 21]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
              "The row status variable, used according to row\
               installation and removal conventions."\
       ::= { ipCidrRouteEntry 16 }\
\
   -- compliance statements\
\
   ipForwardCompliance MODULE-COMPLIANCE\
       STATUS     deprecated\
       DESCRIPTION\
              "The compliance statement for SNMPv2 entities that\
               implement the ipForward MIB.\
\
               This compliance statement has been deprecated and\
               replaced with ipForwardFullCompliance and\
               ipForwardReadOnlyCompliance."\
\
      MODULE  -- this module\
      MANDATORY-GROUPS { ipForwardCidrRouteGroup }\
\
      ::= { ipForwardCompliances 1 }\
\
   -- units of conformance\
\
   ipForwardCidrRouteGroup OBJECT-GROUP\
       OBJECTS { ipCidrRouteNumber,\
                 ipCidrRouteDest, ipCidrRouteMask, ipCidrRouteTos,\
                 ipCidrRouteNextHop, ipCidrRouteIfIndex,\
                 ipCidrRouteType, ipCidrRouteProto, ipCidrRouteAge,\
                 ipCidrRouteInfo,ipCidrRouteNextHopAS,\
                 ipCidrRouteMetric1, ipCidrRouteMetric2,\
                 ipCidrRouteMetric3, ipCidrRouteMetric4,\
                 ipCidrRouteMetric5, ipCidrRouteStatus\
           }\
       STATUS     deprecated\
       DESCRIPTION\
              "The CIDR Route Table.\
\
               This group has been deprecated and replaced with\
               inetForwardCidrRouteGroup."\
       ::= { ipForwardGroups 3 }\
\
   -- Obsoleted Definitions - Objects\
\
   ipForwardNumber OBJECT-TYPE\
       SYNTAX     Gauge32\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
\
\
\
Haberman                    Standards Track                    [Page 22]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
              "The number of current ipForwardTable entries that are\
               not invalid."\
       ::= { ipForward 1 }\
\
   --  IP Forwarding Table\
\
   --  The IP Forwarding Table obsoletes and replaces the ipRoute\
   --  Table current in MIB-I and MIB-II.  It adds knowledge of\
   --  the autonomous system of the next hop, multiple next hop\
   --  support, and policy routing support.\
\
   ipForwardTable OBJECT-TYPE\
       SYNTAX     SEQUENCE OF IpForwardEntry\
       MAX-ACCESS not-accessible\
       STATUS     obsolete\
       DESCRIPTION\
              "This entity's IP Routing table."\
       REFERENCE\
              "RFC 1213 Section 6.6, The IP Group"\
       ::= { ipForward 2 }\
\
   ipForwardEntry OBJECT-TYPE\
       SYNTAX     IpForwardEntry\
       MAX-ACCESS not-accessible\
       STATUS     obsolete\
       DESCRIPTION\
              "A particular route to a particular destination, under a\
               particular policy."\
       INDEX {\
           ipForwardDest,\
           ipForwardProto,\
           ipForwardPolicy,\
           ipForwardNextHop\
           }\
       ::= { ipForwardTable 1 }\
\
   IpForwardEntry ::= SEQUENCE {\
           ipForwardDest       IpAddress,\
           ipForwardMask       IpAddress,\
           ipForwardPolicy     Integer32,\
           ipForwardNextHop    IpAddress,\
           ipForwardIfIndex    Integer32,\
           ipForwardType       INTEGER,\
           ipForwardProto      INTEGER,\
           ipForwardAge        Integer32,\
           ipForwardInfo       OBJECT IDENTIFIER,\
           ipForwardNextHopAS  Integer32,\
           ipForwardMetric1    Integer32,\
\
\
\
Haberman                    Standards Track                    [Page 23]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
           ipForwardMetric2    Integer32,\
           ipForwardMetric3    Integer32,\
           ipForwardMetric4    Integer32,\
           ipForwardMetric5    Integer32\
       }\
\
   ipForwardDest OBJECT-TYPE\
       SYNTAX     IpAddress\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
              "The destination IP address of this route.  An entry\
               with a value of 0.0.0.0 is considered a default route.\
\
               This object may not take a Multicast (Class D) address\
               value.\
\
               Any assignment (implicit or otherwise) of an instance\
               of this object to a value x must be rejected if the\
               bitwise logical-AND of x with the value of the\
               corresponding instance of the ipForwardMask object is\
               not equal to x."\
       ::= { ipForwardEntry 1 }\
\
   ipForwardMask OBJECT-TYPE\
       SYNTAX     IpAddress\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "Indicate the mask to be logical-ANDed with the\
               destination address before being compared to the value\
               in the ipForwardDest field.  For those systems that do\
               not support arbitrary subnet masks, an agent constructs\
               the value of the ipForwardMask by reference to the IP\
               Address Class.\
\
               Any assignment (implicit or otherwise) of an instance\
               of this object to a value x must be rejected if the\
               bitwise logical-AND of x with the value of the\
               corresponding instance of the ipForwardDest object is\
               not equal to ipForwardDest."\
       DEFVAL { '00000000'H }      -- 0.0.0.0\
       ::= { ipForwardEntry 2 }\
\
   -- The following convention is included for specification\
   -- of TOS Field contents.  At this time, the Host Requirements\
   -- and the Router Requirements documents disagree on the width\
   -- of the TOS field.  This mapping describes the Router\
\
\
\
Haberman                    Standards Track                    [Page 24]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
   -- Requirements mapping, and leaves room to widen the TOS field\
   -- without impact to fielded systems.\
\
   ipForwardPolicy OBJECT-TYPE\
       SYNTAX     Integer32 (0..2147483647)\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
              "The general set of conditions that would cause\
               the selection of one multipath route (set of\
               next hops for a given destination) is referred\
               to as 'policy'.\
\
               Unless the mechanism indicated by ipForwardProto\
               specifies otherwise, the policy specifier is\
               the IP TOS Field.  The encoding of IP TOS is as\
               specified by the following convention.  Zero\
               indicates the default path if no more specific\
               policy applies.\
\
               +-----+-----+-----+-----+-----+-----+-----+-----+\
               |                 |                       |     |\
               |   PRECEDENCE    |    TYPE OF SERVICE    |  0  |\
               |                 |                       |     |\
               +-----+-----+-----+-----+-----+-----+-----+-----+\
\
\
\
                            IP TOS                IP TOS\
                  Field     Policy      Field     Policy\
                  Contents    Code      Contents    Code\
                  0 0 0 0  ==>   0      0 0 0 1  ==>   2\
                  0 0 1 0  ==>   4      0 0 1 1  ==>   6\
                  0 1 0 0  ==>   8      0 1 0 1  ==>  10\
                  0 1 1 0  ==>  12      0 1 1 1  ==>  14\
                  1 0 0 0  ==>  16      1 0 0 1  ==>  18\
                  1 0 1 0  ==>  20      1 0 1 1  ==>  22\
                  1 1 0 0  ==>  24      1 1 0 1  ==>  26\
                  1 1 1 0  ==>  28      1 1 1 1  ==>  30\
\
               Protocols defining 'policy' otherwise must either\
               define a set of values that are valid for\
               this object or must implement an integer-instanced\
               policy table for which this object's\
               value acts as an index."\
       ::= { ipForwardEntry 3 }\
\
   ipForwardNextHop OBJECT-TYPE\
\
\
\
Haberman                    Standards Track                    [Page 25]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       SYNTAX     IpAddress\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
              "On remote routes, the address of the next system en\
               route; otherwise, 0.0.0.0."\
       ::= { ipForwardEntry 4 }\
\
   ipForwardIfIndex OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "The ifIndex value that identifies the local interface\
               through which the next hop of this route should be\
               reached."\
       DEFVAL { 0 }\
       ::= { ipForwardEntry 5 }\
\
   ipForwardType OBJECT-TYPE\
       SYNTAX     INTEGER {\
                   other    (1), -- not specified by this MIB\
                   invalid  (2), -- logically deleted\
                   local    (3), -- local interface\
                   remote   (4)  -- remote destination\
                }\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "The type of route.  Note that local(3) refers to a\
               route for which the next hop is the final destination;\
               remote(4) refers to a route for which the next hop is\
               not the final destination.\
\
               Setting this object to the value invalid(2) has the\
               effect of invalidating the corresponding entry in the\
               ipForwardTable object.  That is, it effectively\
               disassociates the destination identified with said\
               entry from the route identified with said entry.  It is\
               an implementation-specific matter as to whether the\
               agent removes an invalidated entry from the table.\
               Accordingly, management stations must be prepared to\
               receive tabular information from agents that\
               corresponds to entries not currently in use.  Proper\
               interpretation of such entries requires examination of\
               the relevant ipForwardType object."\
       DEFVAL { invalid }\
       ::= { ipForwardEntry 6 }\
\
\
\
Haberman                    Standards Track                    [Page 26]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
\
   ipForwardProto OBJECT-TYPE\
       SYNTAX     INTEGER {\
                   other     (1),  -- not specified\
                   local     (2),  -- local interface\
                   netmgmt   (3),  -- static route\
                   icmp      (4),  -- result of ICMP Redirect\
\
                           -- the following are all dynamic\
                           -- routing protocols\
                   egp       (5),  -- Exterior Gateway Protocol\
                   ggp       (6),  -- Gateway-Gateway Protocol\
                   hello     (7),  -- FuzzBall HelloSpeak\
                   rip       (8),  -- Berkeley RIP or RIP-II\
                   is-is     (9),  -- Dual IS-IS\
                   es-is     (10), -- ISO 9542\
                   ciscoIgrp (11), -- Cisco IGRP\
                   bbnSpfIgp (12), -- BBN SPF IGP\
                   ospf      (13), -- Open Shortest Path First\
                   bgp       (14), -- Border Gateway Protocol\
                   idpr      (15)  -- InterDomain Policy Routing\
                }\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
              "The routing mechanism via which this route was learned.\
               Inclusion of values for gateway routing protocols is\
               not intended to imply that hosts should support those\
               protocols."\
       ::= { ipForwardEntry 7 }\
\
   ipForwardAge OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-only\
       STATUS     obsolete\
       DESCRIPTION\
              "The number of seconds since this route was last updated\
               or otherwise determined to be correct.  Note that no\
               semantics of `too old' can be implied except through\
               knowledge of the routing protocol by which the route\
               was learned."\
       DEFVAL  { 0 }\
       ::= { ipForwardEntry 8 }\
\
   ipForwardInfo OBJECT-TYPE\
       SYNTAX     OBJECT IDENTIFIER\
       MAX-ACCESS read-create\
       STATUS     obsolete\
\
\
\
Haberman                    Standards Track                    [Page 27]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
       DESCRIPTION\
              "A reference to MIB definitions specific to the\
               particular routing protocol that is responsible for\
               this route, as determined by the value specified in the\
               route's ipForwardProto value.  If this information is\
               not present, its value should be set to the OBJECT\
               IDENTIFIER { 0 0 }, which is a syntactically valid\
               object identifier, and any implementation conforming to\
               ASN.1 and the Basic Encoding Rules must be able to\
               generate and recognize this value."\
       ::= { ipForwardEntry 9 }\
\
   ipForwardNextHopAS OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "The Autonomous System Number of the Next Hop.  When\
               this is unknown or not relevant to the protocol\
               indicated by ipForwardProto, zero."\
       DEFVAL { 0 }\
       ::= { ipForwardEntry 10 }\
\
   ipForwardMetric1 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "The primary routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipForwardProto value.\
               If this metric is not used, its value should be set to\
               -1."\
       DEFVAL { -1 }\
       ::= { ipForwardEntry 11 }\
\
   ipForwardMetric2 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipForwardProto value.\
               If this metric is not used, its value should be set to\
               -1."\
       DEFVAL { -1 }\
       ::= { ipForwardEntry 12 }\
\
\
\
Haberman                    Standards Track                    [Page 28]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
\
   ipForwardMetric3 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipForwardProto value.\
               If this metric is not used, its value should be set to\
               -1."\
       DEFVAL { -1 }\
       ::= { ipForwardEntry 13 }\
\
   ipForwardMetric4 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipForwardProto value.\
               If this metric is not used, its value should be set to\
               -1."\
       DEFVAL { -1 }\
       ::= { ipForwardEntry 14 }\
\
   ipForwardMetric5 OBJECT-TYPE\
       SYNTAX     Integer32\
       MAX-ACCESS read-create\
       STATUS     obsolete\
       DESCRIPTION\
              "An alternate routing metric for this route.  The\
               semantics of this metric are determined by the routing-\
               protocol specified in the route's ipForwardProto value.\
               If this metric is not used, its value should be set to\
               -1."\
       DEFVAL { -1 }\
       ::= { ipForwardEntry 15 }\
\
   -- Obsoleted Definitions - Groups\
   -- compliance statements\
\
   ipForwardOldCompliance MODULE-COMPLIANCE\
       STATUS     obsolete\
       DESCRIPTION\
              "The compliance statement for SNMP entities that\
               implement the ipForward MIB."\
\
\
\
Haberman                    Standards Track                    [Page 29]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
\
      MODULE  -- this module\
      MANDATORY-GROUPS { ipForwardMultiPathGroup }\
\
      ::= { ipForwardCompliances 2 }\
\
   ipForwardMultiPathGroup OBJECT-GROUP\
       OBJECTS { ipForwardNumber,\
                 ipForwardDest, ipForwardMask, ipForwardPolicy,\
                 ipForwardNextHop, ipForwardIfIndex, ipForwardType,\
                 ipForwardProto, ipForwardAge, ipForwardInfo,\
                 ipForwardNextHopAS,\
                 ipForwardMetric1, ipForwardMetric2, ipForwardMetric3,\
                 ipForwardMetric4, ipForwardMetric5\
           }\
       STATUS     obsolete\
       DESCRIPTION\
              "IP Multipath Route Table."\
       ::= { ipForwardGroups 2 }\
\
   END\
\
6.  Security Considerations\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write and/or read-create.  Such\
   objects may be considered sensitive or vulnerable in some network\
   environments.  The support for SET operations in a non-secure\
   environment without proper protection can have a negative effect on\
   network operations.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
      1. The inetCidrRouteTable contains routing and forwarding\
         information that is critical to the operation of the network\
         node (especially routers).  Allowing unauthenticated write\
         access to this table can compromise the validity of the\
         forwarding information.\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
   control even GET and/or NOTIFY access to these objects and possibly\
   to even encrypt the values of these objects when sending them over\
   the network via SNMP.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
      1. The inetCidrRouteTable contains routing and forwarding\
         information that can be used to compromise a network.\
\
\
\
Haberman                    Standards Track                    [Page 30]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
         Specifically, this table can be used to construct a map of the\
         network in preparation for a denial-of-service attack on the\
         network infrastructure.\
\
      2. The inetCidrRouteProto object identifies the routing protocols\
         in use within a network.  This information can be used to\
         determine how a denial-of-service attack should be launched.\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPSec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.\
\
   It is RECOMMENDED that implementers consider the security features as\
   provided by the SNMPv3 framework (see [RFC3410], section 8),\
   including full support for the SNMPv3 cryptographic mechanisms (for\
   authentication and privacy).\
\
   Further, deployment of SNMP versions prior to SNMPv3 is NOT\
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\
   enable cryptographic security.  It is then a customer/operator\
   responsibility to ensure that the SNMP entity giving access to an\
   instance of this MIB module is properly configured to give access to\
   the objects only to those principals (users) that have legitimate\
   rights to indeed GET or SET (change/create/delete) them.\
\
7.  Changes from RFC 2096\
\
   This document obsoletes RFC 2096 in the following ways:\
\
      1. Replaces ipCidrRouteTable with inetCidrRouteTable.  This\
         applies to corresponding objects and conformance statements.\
\
      2. Utilizes the InetAddress TC to support IP version-independent\
         implementations of the forwarding MIB.  This gives common\
         forwarding MIB support for IPv4 and IPv6.\
\
      3. Creates a read-only conformance statement to support\
         implementations that only wish to retrieve data.\
\
      4. Creates the inetCidrRouteDiscards object to replace the\
         deprecated ipRoutingDiscards and ipv6DiscardedRoutes objects.\
\
   The inetCidrRouteTable retains the logical structure of the\
   ipCidrRouteTable in order to allow the easy upgrade of existing IPv4\
   implementations to the version-independent MIB.\
\
\
\
\
Haberman                    Standards Track                    [Page 31]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
8.  Normative References\
\
   [RFC2119] Bradner, S., "Key words for use in RFCs to Indicate\
             Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2578] McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
             "Structure of Management Information Version 2 (SMIv2)",\
             STD 58, RFC 2578, April 1999.\
\
   [RFC2579] McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Textual\
             Conventions for SMIv2", STD 58, RFC 2579, April 1999.\
\
   [RFC2580] McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
             "Conformance Statements for SMIv2", STD 58, RFC 2580, April\
             1999.\
\
   [RFC2863] McCloghrie, K. and F. Kastenholz, "The Interfaces Group\
             MIB", RFC 2863, June 2000.\
\
   [RFC4001] Daniele, M., Haberman, B., Routhier, S., and J.\
             Schoenwaelder, "Textual Conventions for Internet Network\
             Addresses", RFC 4001, February 2005.\
\
   [RFC4293] Routhier, S., Ed., "Management Information Base for the\
             Internet Protocol (IP), RFC 4293, April 2006.\
\
   [RTPROTO] IANA, "IP Route Protocol MIB",\
             http://www.iana.org/assignments/ianaiprouteprotocol-mib,\
             September 2000.\
\
9.  Informative References\
\
   [RFC1213] McCloghrie, K. and M. Rose, "Management Information Base\
             for Network Management of TCP/IP-based internets: MIB-II",\
             RFC 1213, March 1991.\
\
   [RFC1354] Baker, F., "IP Forwarding Table MIB", RFC 1354, July 1992.\
\
   [RFC2011] McCloghrie, K., Editor, "SNMPv2 Management Information Base\
             for the Internet Protocol using SMIv2", RFC 2011, November\
             1996.\
\
   [RFC2096] Baker, F., "IP Forwarding Table MIB", RFC 2096, January\
             1997.\
\
   [RFC3410] Case, J., Mundy, R., Partain, D., and B. Stewart,\
             "Introduction and Applicability Statements for Internet-\
             Standard Management Framework", RFC 3410, December 2002.\
\
\
\
Haberman                    Standards Track                    [Page 32]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
   [RFC2465] Haskin, D. and S. Onishi, Management Information Base for\
             IP Version 6: Textual Conventions and General Group", RFC\
             2465, December 1998.\
\
\
10.  Authors and Acknowledgements\
\
   This document was based on RFC 2096 [RFC2096].\
\
   The following people provided text for this version of the document,\
   or were authors of previous versions:\
\
   Fred Baker, Cisco\
   Bill Fenner, AT&T Research\
   Brian Haberman, Johns Hopkins University - Applied Physics Laboratory\
   Juergen Schoenwalder, TU Braunschweig\
   Dave Thaler, Microsoft\
   Margaret Wasserman, Thingmagic\
\
   Dario Accornero, Mark Adam, Qing Li, and Shawn Routhier reviewed the\
   document and provided helpful feedback.\
\
   Mike Heard provided valuable feedback as the MIB Doctor for this\
   document.\
\
Editors' Contact Information\
\
   Comments or questions regarding this document should be sent to:\
\
   Brian Haberman\
   Johns Hopkins University - Applied Physics Laboratory\
   Mailstop 17-S442\
   11100 Johns Hopkins Road\
   Laurel MD,  20723-6099  USA\
\
   Phone: +1-443-778-1319\
   EMail: brian@innovationslab.net\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Haberman                    Standards Track                    [Page 33]\
\
RFC 4292                IP Forwarding Table MIB               April 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Haberman                    Standards Track                    [Page 34]\
\

doc 5
  field 0
    name titolo
    type string
    value rfc4297.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                         A. Romanow\
Request for Comments: 4297                                         Cisco\
Category: Informational                                         J. Mogul\
                                                                      HP\
                                                               T. Talpey\
                                                                  NetApp\
                                                               S. Bailey\
                                                               Sandburst\
                                                           December 2005\
\
\
      Remote Direct Memory Access (RDMA) over IP Problem Statement\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   Overhead due to the movement of user data in the end-system network\
   I/O processing path at high speeds is significant, and has limited\
   the use of Internet protocols in interconnection networks, and the\
   Internet itself -- especially where high bandwidth, low latency,\
   and/or low overhead are required by the hosted application.\
\
   This document examines this overhead, and addresses an architectural,\
   IP-based "copy avoidance" solution for its elimination, by enabling\
   Remote Direct Memory Access (RDMA).\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Romanow, et al.              Informational                      [Page 1]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. The High Cost of Data Movement Operations in Network I/O ........4\
      2.1. Copy avoidance improves processing overhead. ...............5\
   3. Memory bandwidth is the root cause of the problem. ..............6\
   4. High copy overhead is problematic for many key Internet\
      applications. ...................................................8\
   5. Copy Avoidance Techniques ......................................10\
      5.1. A Conceptual Framework: DDP and RDMA ......................11\
   6. Conclusions ....................................................12\
   7. Security Considerations ........................................12\
   8. Terminology ....................................................14\
   9. Acknowledgements ...............................................14\
   10. Informative References ........................................15\
\
1.  Introduction\
\
   This document considers the problem of high host processing overhead\
   associated with the movement of user data to and from the network\
   interface under high speed conditions.  This problem is often\
   referred to as the "I/O bottleneck" [CT90].  More specifically, the\
   source of high overhead that is of interest here is data movement\
   operations, i.e., copying.  The throughput of a system may therefore\
   be limited by the overhead of this copying.  This issue is not to be\
   confused with TCP offload, which is not addressed here.  High speed\
   refers to conditions where the network link speed is high, relative\
   to the bandwidths of the host CPU and memory.  With today's computer\
   systems, one Gigabit per second (Gbits/s) and over is considered high\
   speed.\
\
   High costs associated with copying are an issue primarily for large\
   scale systems.  Although smaller systems such as rack-mounted PCs and\
   small workstations would benefit from a reduction in copying\
   overhead, the benefit to smaller machines will be primarily in the\
   next few years as they scale the amount of bandwidth they handle.\
   Today, it is large system machines with high bandwidth feeds, usually\
   multiprocessors and clusters, that are adversely affected by copying\
   overhead.  Examples of such machines include all varieties of\
   servers: database servers, storage servers, application servers for\
   transaction processing, for e-commerce, and web serving, content\
   distribution, video distribution, backups, data mining and decision\
   support, and scientific computing.\
\
   Note that such servers almost exclusively service many concurrent\
   sessions (transport connections), which, in aggregate, are\
   responsible for > 1 Gbits/s of communication.  Nonetheless, the cost\
\
\
\
\
Romanow, et al.              Informational                      [Page 2]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   of copying overhead for a particular load is the same whether from\
   few or many sessions.\
\
   The I/O bottleneck, and the role of data movement operations, have\
   been widely studied in research and industry over the last\
   approximately 14 years, and we draw freely on these results.\
   Historically, the I/O bottleneck has received attention whenever new\
   networking technology has substantially increased line rates: 100\
   Megabit per second (Mbits/s) Fast Ethernet and Fibre Distributed Data\
   Interface [FDDI], 155 Mbits/s Asynchronous Transfer Mode [ATM], 1\
   Gbits/s Ethernet.  In earlier speed transitions, the availability of\
   memory bandwidth allowed the I/O bottleneck issue to be deferred.\
   Now however, this is no longer the case.  While the I/O problem is\
   significant at 1 Gbits/s, it is the introduction of 10 Gbits/s\
   Ethernet which is motivating an upsurge of activity in industry and\
   research [IB, VI, CGY01, Ma02, MAF+02].\
\
   Because of high overhead of end-host processing in current\
   implementations, the TCP/IP protocol stack is not used for high speed\
   transfer.  Instead, special purpose network fabrics, using a\
   technology generally known as Remote Direct Memory Access (RDMA),\
   have been developed and are widely used.  RDMA is a set of mechanisms\
   that allow the network adapter, under control of the application, to\
   steer data directly into and out of application buffers.  Examples of\
   such interconnection fabrics include Fibre Channel [FIBRE] for block\
   storage transfer, Virtual Interface Architecture [VI] for database\
   clusters, and Infiniband [IB], Compaq Servernet [SRVNET], and\
   Quadrics [QUAD] for System Area Networks.  These link level\
   technologies limit application scaling in both distance and size,\
   meaning that the number of nodes cannot be arbitrarily large.\
\
   This problem statement substantiates the claim that in network I/O\
   processing, high overhead results from data movement operations,\
   specifically copying; and that copy avoidance significantly decreases\
   this processing overhead.  It describes when and why the high\
   processing overheads occur, explains why the overhead is problematic,\
   and points out which applications are most affected.\
\
   The document goes on to discuss why the problem is relevant to the\
   Internet and to Internet-based applications.  Applications that\
   store, manage, and distribute the information of the Internet are\
   well suited to applying the copy avoidance solution.  They will\
   benefit by avoiding high processing overheads, which removes limits\
   to the available scaling of tiered end-systems.  Copy avoidance also\
   eliminates latency for these systems, which can further benefit\
   effective distributed processing.\
\
\
\
\
\
Romanow, et al.              Informational                      [Page 3]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   In addition, this document introduces an architectural approach to\
   solving the problem, which is developed in detail in [BT05].  It also\
   discusses how the proposed technology may introduce security concerns\
   and how they should be addressed.\
\
   Finally, this document includes a Terminology section to aid as a\
   reference for several new terms introduced by RDMA.\
\
2.  The High Cost of Data Movement Operations in Network I/O\
\
   A wealth of data from research and industry shows that copying is\
   responsible for substantial amounts of processing overhead.  It\
   further shows that even in carefully implemented systems, eliminating\
   copies significantly reduces the overhead, as referenced below.\
\
   Clark et al. [CJRS89] in 1989 shows that TCP [Po81] overhead\
   processing is attributable to both operating system costs (such as\
   interrupts, context switches, process management, buffer management,\
   timer management) and the costs associated with processing individual\
   bytes (specifically, computing the checksum and moving data in\
   memory).  They found that moving data in memory is the more important\
   of the costs, and their experiments show that memory bandwidth is the\
   greatest source of limitation.  In the data presented [CJRS89], 64%\
   of the measured microsecond overhead was attributable to data\
   touching operations, and 48% was accounted for by copying.  The\
   system measured Berkeley TCP on a Sun-3/60 using 1460 Byte Ethernet\
   packets.\
\
   In a well-implemented system, copying can occur between the network\
   interface and the kernel, and between the kernel and application\
   buffers; there are two copies, each of which are two memory bus\
   crossings, for read and write.  Although in certain circumstances it\
   is possible to do better, usually two copies are required on receive.\
\
   Subsequent work has consistently shown the same phenomenon as the\
   earlier Clark study.  A number of studies report results that data-\
   touching operations, checksumming and data movement, dominate the\
   processing costs for messages longer than 128 Bytes [BS96, CGY01,\
   Ch96, CJRS89, DAPP93, KP96].  For smaller sized messages, per-packet\
   overheads dominate [KP96, CGY01].\
\
   The percentage of overhead due to data-touching operations increases\
   with packet size, since time spent on per-byte operations scales\
   linearly with message size [KP96].  For example, Chu [Ch96] reported\
   substantial per-byte latency costs as a percentage of total\
   networking software costs for an MTU size packet on a SPARCstation/20\
\
\
\
\
\
Romanow, et al.              Informational                      [Page 4]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   running memory-to-memory TCP tests over networks with 3 different MTU\
   sizes.  The percentage of total software costs attributable to\
   per-byte operations were:\
\
      1500 Byte Ethernet 18-25%\
      4352 Byte FDDI     35-50%\
      9180 Byte ATM      55-65%\
\
   Although many studies report results for data-touching operations,\
   including checksumming and data movement together, much work has\
   focused just on copying [BS96, Br99, Ch96, TK95].  For example,\
   [KP96] reports results that separate processing times for checksum\
   from data movement operations.  For the 1500 Byte Ethernet size, 20%\
   of total processing overhead time is attributable to copying.  The\
   study used 2 DECstations 5000/200 connected by an FDDI network.  (In\
   this study, checksum accounts for 30% of the processing time.)\
\
2.1.  Copy avoidance improves processing overhead.\
\
   A number of studies show that eliminating copies substantially\
   reduces overhead.  For example, results from copy-avoidance in the\
   IO-Lite system [PDZ99], which aimed at improving web server\
   performance, show a throughput increase of 43% over an optimized web\
   server, and 137% improvement over an Apache server.  The system was\
   implemented in a 4.4BSD-derived UNIX kernel, and the experiments used\
   a server system based on a 333MHz Pentium II PC connected to a\
   switched 100 Mbits/s Fast Ethernet.\
\
   There are many other examples where elimination of copying using a\
   variety of different approaches showed significant improvement in\
   system performance [CFF+94, DP93, EBBV95, KSZ95, TK95, Wa97].  We\
   will discuss the results of one of these studies in detail in order\
   to clarify the significant degree of improvement produced by copy\
   avoidance [Ch02].\
\
   Recent work by Chase et al. [CGY01], measuring CPU utilization, shows\
   that avoiding copies reduces CPU time spent on data access from 24%\
   to 15% at 370 Mbits/s for a 32 KBytes MTU using an AlphaStation\
   XP1000 and a Myrinet adapter [BCF+95].  This is an absolute\
   improvement of 9% due to copy avoidance.\
\
   The total CPU utilization was 35%, with data access accounting for\
   24%.  Thus, the relative importance of reducing copies is 26%.  At\
   370 Mbits/s, the system is not very heavily loaded.  The relative\
   improvement in achievable bandwidth is 34%.  This is the improvement\
   we would see if copy avoidance were added when the machine was\
   saturated by network I/O.\
\
\
\
\
Romanow, et al.              Informational                      [Page 5]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   Note that improvement from the optimization becomes more important if\
   the overhead it targets is a larger share of the total cost.  This is\
   what happens if other sources of overhead, such as checksumming, are\
   eliminated.  In [CGY01], after removing checksum overhead, copy\
   avoidance reduces CPU utilization from 26% to 10%.  This is a 16%\
   absolute reduction, a 61% relative reduction, and a 160% relative\
   improvement in achievable bandwidth.\
\
   In fact, today's network interface hardware commonly offloads the\
   checksum, which removes the other source of per-byte overhead.  They\
   also coalesce interrupts to reduce per-packet costs.  Thus, today\
   copying costs account for a relatively larger part of CPU utilization\
   than previously, and therefore relatively more benefit is to be\
   gained in reducing them.  (Of course this argument would be specious\
   if the amount of overhead were insignificant, but it has been shown\
   to be substantial.  [BS96, Br99, Ch96, KP96, TK95])\
\
3.  Memory bandwidth is the root cause of the problem.\
\
   Data movement operations are expensive because memory bandwidth is\
   scarce relative to network bandwidth and CPU bandwidth [PAC+97].\
   This trend existed in the past and is expected to continue into the\
   future [HP97, STREAM], especially in large multiprocessor systems.\
\
   With copies crossing the bus twice per copy, network processing\
   overhead is high whenever network bandwidth is large in comparison to\
   CPU and memory bandwidths.  Generally, with today's end-systems, the\
   effects are observable at network speeds over 1 Gbits/s.  In fact,\
   with multiple bus crossings it is possible to see the bus bandwidth\
   being the limiting factor for throughput.  This prevents such an\
   end-system from simultaneously achieving full network bandwidth and\
   full application performance.\
\
   A common question is whether an increase in CPU processing power\
   alleviates the problem of high processing costs of network I/O.  The\
   answer is no, it is the memory bandwidth that is the issue.  Faster\
   CPUs do not help if the CPU spends most of its time waiting for\
   memory [CGY01].\
\
   The widening gap between microprocessor performance and memory\
   performance has long been a widely recognized and well-understood\
   problem [PAC+97].  Hennessy [HP97] shows microprocessor performance\
   grew from 1980-1998 at 60% per year, while the access time to DRAM\
   improved at 10% per year, giving rise to an increasing "processor-\
   memory performance gap".\
\
\
\
\
\
\
Romanow, et al.              Informational                      [Page 6]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   Another source of relevant data is the STREAM Benchmark Reference\
   Information website, which provides information on the STREAM\
   benchmark [STREAM].  The benchmark is a simple synthetic benchmark\
   program that measures sustainable memory bandwidth (in MBytes/s) and\
   the corresponding computation rate for simple vector kernels measured\
   in MFLOPS.  The website tracks information on sustainable memory\
   bandwidth for hundreds of machines and all major vendors.\
\
   Results show measured system performance statistics.  Processing\
   performance from 1985-2001 increased at 50% per year on average, and\
   sustainable memory bandwidth from 1975 to 2001 increased at 35% per\
   year, on average, over all the systems measured.  A similar 15% per\
   year lead of processing bandwidth over memory bandwidth shows up in\
   another statistic, machine balance [Mc95], a measure of the relative\
   rate of CPU to memory bandwidth (FLOPS/cycle) / (sustained memory\
   ops/cycle) [STREAM].\
\
   Network bandwidth has been increasing about 10-fold roughly every 8\
   years, which is a 40% per year growth rate.\
\
   A typical example illustrates that the memory bandwidth compares\
   unfavorably with link speed.  The STREAM benchmark shows that a\
   modern uniprocessor PC, for example the 1.2 GHz Athlon in 2001, will\
   move the data 3 times in doing a receive operation: once for the\
   network interface to deposit the data in memory, and twice for the\
   CPU to copy the data.  With 1 GBytes/s of memory bandwidth, meaning\
   one read or one write, the machine could handle approximately 2.67\
   Gbits/s of network bandwidth, one third the copy bandwidth.  But this\
   assumes 100% utilization, which is not possible, and more importantly\
   the machine would be totally consumed!  (A rule of thumb for\
   databases is that 20% of the machine should be required to service\
   I/O, leaving 80% for the database application.  And, the less, the\
   better.)\
\
   In 2001, 1 Gbits/s links were common.  An application server may\
   typically have two 1 Gbits/s connections: one connection backend to a\
   storage server and one front-end, say for serving HTTP [FGM+99].\
   Thus, the communications could use 2 Gbits/s.  In our typical\
   example, the machine could handle 2.7 Gbits/s at its theoretical\
   maximum while doing nothing else.  This means that the machine\
   basically could not keep up with the communication demands in 2001;\
   with the relative growth trends, the situation only gets worse.\
\
\
\
\
\
\
\
\
\
Romanow, et al.              Informational                      [Page 7]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
4.  High copy overhead is problematic for many key Internet\
    applications.\
\
   If a significant portion of resources on an application machine is\
   consumed in network I/O rather than in application processing, it\
   makes it difficult for the application to scale, i.e., to handle more\
   clients, to offer more services.\
\
   Several years ago the most affected applications were streaming\
   multimedia, parallel file systems, and supercomputing on clusters\
   [BS96].  In addition, today the applications that suffer from copying\
   overhead are more central in Internet computing -- they store,\
   manage, and distribute the information of the Internet and the\
   enterprise.  They include database applications doing transaction\
   processing, e-commerce, web serving, decision support, content\
   distribution, video distribution, and backups.  Clusters are\
   typically used for this category of application, since they have\
   advantages of availability and scalability.\
\
   Today these applications, which provide and manage Internet and\
   corporate information, are typically run in data centers that are\
   organized into three logical tiers.  One tier is typically a set of\
   web servers connecting to the WAN.  The second tier is a set of\
   application servers that run the specific applications usually on\
   more powerful machines, and the third tier is backend databases.\
   Physically, the first two tiers -- web server and application server\
   -- are usually combined [Pi01].  For example, an e-commerce server\
   communicates with a database server and with a customer site, or a\
   content distribution server connects to a server farm, or an OLTP\
   server connects to a database and a customer site.\
\
   When network I/O uses too much memory bandwidth, performance on\
   network paths between tiers can suffer.  (There might also be\
   performance issues on Storage Area Network paths used either by the\
   database tier or the application tier.)  The high overhead from\
   network-related memory copies diverts system resources from other\
   application processing.  It also can create bottlenecks that limit\
   total system performance.\
\
   There is high motivation to maximize the processing capacity of each\
   CPU because scaling by adding CPUs, one way or another, has\
   drawbacks.  For example, adding CPUs to a multiprocessor will not\
   necessarily help because a multiprocessor improves performance only\
   when the memory bus has additional bandwidth to spare.  Clustering\
   can add additional complexity to handling the applications.\
\
   In order to scale a cluster or multiprocessor system, one must\
   proportionately scale the interconnect bandwidth.  Interconnect\
\
\
\
Romanow, et al.              Informational                      [Page 8]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   bandwidth governs the performance of communication-intensive parallel\
   applications; if this (often expressed in terms of "bisection\
   bandwidth") is too low, adding additional processors cannot improve\
   system throughput.  Interconnect latency can also limit the\
   performance of applications that frequently share data between\
   processors.\
\
   So, excessive overheads on network paths in a "scalable" system both\
   can require the use of more processors than optimal, and can reduce\
   the marginal utility of those additional processors.\
\
   Copy avoidance scales a machine upwards by removing at least two-\
   thirds of the bus bandwidth load from the "very best" 1-copy (on\
   receive) implementations, and removes at least 80% of the bandwidth\
   overhead from the 2-copy implementations.\
\
   The removal of bus bandwidth requirements, in turn, removes\
   bottlenecks from the network processing path and increases the\
   throughput of the machine.  On a machine with limited bus bandwidth,\
   the advantages of removing this load is immediately evident, as the\
   host can attain full network bandwidth.  Even on a machine with bus\
   bandwidth adequate to sustain full network bandwidth, removal of bus\
   bandwidth load serves to increase the availability of the machine for\
   the processing of user applications, in some cases dramatically.\
\
   An example showing poor performance with copies and improved scaling\
   with copy avoidance is illustrative.  The IO-Lite work [PDZ99] shows\
   higher server throughput servicing more clients using a zero-copy\
   system.  In an experiment designed to mimic real world web conditions\
   by simulating the effect of TCP WAN connections on the server, the\
   performance of 3 servers was compared.  One server was Apache,\
   another was an optimized server called Flash, and the third was the\
   Flash server running IO-Lite, called Flash-Lite with zero copy.  The\
   measurement was of throughput in requests/second as a function of the\
   number of slow background clients that could be served.  As the table\
   shows, Flash-Lite has better throughput, especially as the number of\
   clients increases.\
\
              Apache              Flash         Flash-Lite\
              ------              -----         ----------\
   #Clients   Throughput reqs/s   Throughput    Throughput\
\
   0          520                 610           890\
   16         390                 490           890\
   32         360                 490           850\
   64         360                 490           890\
   128        310                 450           880\
   256        310                 440           820\
\
\
\
Romanow, et al.              Informational                      [Page 9]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   Traditional Web servers (which mostly send data and can keep most of\
   their content in the file cache) are not the worst case for copy\
   overhead.  Web proxies (which often receive as much data as they\
   send) and complex Web servers based on System Area Networks or\
   multi-tier systems will suffer more from copy overheads than in the\
   example above.\
\
5.  Copy Avoidance Techniques\
\
   There have been extensive research investigation and industry\
   experience with two main alternative approaches to eliminating data\
   movement overhead, often along with improving other Operating System\
   processing costs.  In one approach, hardware and/or software changes\
   within a single host reduce processing costs.  In another approach,\
   memory-to-memory networking [MAF+02], the exchange of explicit data\
   placement information between hosts allows them to reduce processing\
   costs.\
\
   The single host approaches range from new hardware and software\
   architectures [KSZ95, Wa97, DWB+93] to new or modified software\
   systems [BS96, Ch96, TK95, DP93, PDZ99].  In the approach based on\
   using a networking protocol to exchange information, the network\
   adapter, under control of the application, places data directly into\
   and out of application buffers, reducing the need for data movement.\
   Commonly this approach is called RDMA, Remote Direct Memory Access.\
\
   As discussed below, research and industry experience has shown that\
   copy avoidance techniques within the receiver processing path alone\
   have proven to be problematic.  The research special purpose host\
   adapter systems had good performance and can be seen as precursors\
   for the commercial RDMA-based adapters [KSZ95, DWB+93].  In software,\
   many implementations have successfully achieved zero-copy transmit,\
   but few have accomplished zero-copy receive.  And those that have\
   done so make strict alignment and no-touch requirements on the\
   application, greatly reducing the portability and usefulness of the\
   implementation.\
\
   In contrast, experience has proven satisfactory with memory-to-memory\
   systems that permit RDMA; performance has been good and there have\
   not been system or networking difficulties.  RDMA is a single\
   solution.  Once implemented, it can be used with any OS and machine\
   architecture, and it does not need to be revised when either of these\
   are changed.\
\
   In early work, one goal of the software approaches was to show that\
   TCP could go faster with appropriate OS support [CJRS89, CFF+94].\
   While this goal was achieved, further investigation and experience\
   showed that, though possible to craft software solutions, specific\
\
\
\
Romanow, et al.              Informational                     [Page 10]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   system optimizations have been complex, fragile, extremely\
   interdependent with other system parameters in complex ways, and\
   often of only marginal improvement [CFF+94, CGY01, Ch96, DAPP93,\
   KSZ95, PDZ99].  The network I/O system interacts with other aspects\
   of the Operating System such as machine architecture and file I/O,\
   and disk I/O [Br99, Ch96, DP93].\
\
   For example, the Solaris Zero-Copy TCP work [Ch96], which relies on\
   page remapping, shows that the results are highly interdependent with\
   other systems, such as the file system, and that the particular\
   optimizations are specific for particular architectures, meaning that\
   for each variation in architecture, optimizations must be re-crafted\
   [Ch96].\
\
   With RDMA, application I/O buffers are mapped directly, and the\
   authorized peer may access it without incurring additional processing\
   overhead.  When RDMA is implemented in hardware, arbitrary data\
   movement can be performed without involving the host CPU at all.\
\
   A number of research projects and industry products have been based\
   on the memory-to-memory approach to copy avoidance.  These include\
   U-Net [EBBV95], SHRIMP [BLA+94], Hamlyn [BJM+96], Infiniband [IB],\
   Winsock Direct [Pi01].  Several memory-to-memory systems have been\
   widely used and have generally been found to be robust, to have good\
   performance, and to be relatively simple to implement.  These include\
   VI [VI], Myrinet [BCF+95], Quadrics [QUAD], Compaq/Tandem Servernet\
   [SRVNET].  Networks based on these memory-to-memory architectures\
   have been used widely in scientific applications and in data centers\
   for block storage, file system access, and transaction processing.\
\
   By exporting direct memory access "across the wire", applications may\
   direct the network stack to manage all data directly from application\
   buffers.  A large and growing class that takes advantage of such\
   capabilities of applications has already emerged.  It includes all\
   the major databases, as well as network protocols such as Sockets\
   Direct [SDP].\
\
5.1.  A Conceptual Framework: DDP and RDMA\
\
   An RDMA solution can be usefully viewed as being comprised of two\
   distinct components: "direct data placement (DDP)" and "remote direct\
   memory access (RDMA) semantics".  They are distinct in purpose and\
   also in practice -- they may be implemented as separate protocols.\
\
   The more fundamental of the two is the direct data placement\
   facility.  This is the means by which memory is exposed to the remote\
   peer in an appropriate fashion, and the means by which the peer may\
   access it, for instance, reading and writing.\
\
\
\
Romanow, et al.              Informational                     [Page 11]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   The RDMA control functions are semantically layered atop direct data\
   placement.  Included are operations that provide "control" features,\
   such as connection and termination, and the ordering of operations\
   and signaling their completions.  A "send" facility is provided.\
\
   While the functions (and potentially protocols) are distinct,\
   historically both aspects taken together have been referred to as\
   "RDMA".  The facilities of direct data placement are useful in and of\
   themselves, and may be employed by other upper layer protocols to\
   facilitate data transfer.  Therefore, it is often useful to refer to\
   DDP as the data placement functionality and RDMA as the control\
   aspect.\
\
   [BT05] develops an architecture for DDP and RDMA atop the Internet\
   Protocol Suite, and is a companion document to this problem\
   statement.\
\
6.  Conclusions\
\
   This Problem Statement concludes that an IP-based, general solution\
   for reducing processing overhead in end-hosts is desirable.\
\
   It has shown that high overhead of the processing of network data\
   leads to end-host bottlenecks.  These bottlenecks are in large part\
   attributable to the copying of data.  The bus bandwidth of machines\
   has historically been limited, and the bandwidth of high-speed\
   interconnects taxes it heavily.\
\
   An architectural solution to alleviate these bottlenecks best\
   satisfies the issue.  Further, the high speed of today's\
   interconnects and the deployment of these hosts on Internet\
   Protocol-based networks leads to the desirability of layering such a\
   solution on the Internet Protocol Suite.  The architecture described\
   in [BT05] is such a proposal.\
\
7.  Security Considerations\
\
   Solutions to the problem of reducing copying overhead in high\
   bandwidth transfers may introduce new security concerns.  Any\
   proposed solution must be analyzed for security vulnerabilities and\
   any such vulnerabilities addressed.  Potential security weaknesses --\
   due to resource issues that might lead to denial-of-service attacks,\
   overwrites and other concurrent operations, the ordering of\
   completions as required by the RDMA protocol, the granularity of\
   transfer, and any other identified vulnerabilities -- need to be\
   examined, described, and an adequate resolution to them found.\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 12]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   Layered atop Internet transport protocols, the RDMA protocols will\
   gain leverage from and must permit integration with Internet security\
   standards, such as IPsec and TLS [IPSEC, TLS].  However, there may be\
   implementation ramifications for certain security approaches with\
   respect to RDMA, due to its copy avoidance.\
\
   IPsec, operating to secure the connection on a packet-by-packet\
   basis, seems to be a natural fit to securing RDMA placement, which\
   operates in conjunction with transport.  Because RDMA enables an\
   implementation to avoid buffering, it is preferable to perform all\
   applicable security protection prior to processing of each segment by\
   the transport and RDMA layers.  Such a layering enables the most\
   efficient secure RDMA implementation.\
\
   The TLS record protocol, on the other hand, is layered on top of\
   reliable transports and cannot provide such security assurance until\
   an entire record is available, which may require the buffering and/or\
   assembly of several distinct messages prior to TLS processing.  This\
   defers RDMA processing and introduces overheads that RDMA is designed\
   to avoid.  Therefore, TLS is viewed as potentially a less natural fit\
   for protecting the RDMA protocols.\
\
   It is necessary to guarantee properties such as confidentiality,\
   integrity, and authentication on an RDMA communications channel.\
   However, these properties cannot defend against all attacks from\
   properly authenticated peers, which might be malicious, compromised,\
   or buggy.  Therefore, the RDMA design must address protection against\
   such attacks.  For example, an RDMA peer should not be able to read\
   or write memory regions without prior consent.\
\
   Further, it must not be possible to evade memory consistency checks\
   at the recipient.  The RDMA design must allow the recipient to rely\
   on its consistent memory contents by explicitly controlling peer\
   access to memory regions at appropriate times.\
\
   Peer connections that do not pass authentication and authorization\
   checks by upper layers must not be permitted to begin processing in\
   RDMA mode with an inappropriate endpoint.  Once associated, peer\
   accesses to memory regions must be authenticated and made subject to\
   authorization checks in the context of the association and connection\
   on which they are to be performed, prior to any transfer operation or\
   data being accessed.\
\
   The RDMA protocols must ensure that these region protections be under\
   strict application control.  Remote access to local memory by a\
   network peer is particularly important in the Internet context, where\
   such access can be exported globally.\
\
\
\
\
Romanow, et al.              Informational                     [Page 13]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
8.  Terminology\
\
   This section contains general terminology definitions for this\
   document and for Remote Direct Memory Access in general.\
\
   Remote Direct Memory Access (RDMA)\
        A method of accessing memory on a remote system in which the\
        local system specifies the location of the data to be\
        transferred.\
\
   RDMA Protocol\
        A protocol that supports RDMA Operations to transfer data\
        between systems.\
\
   Fabric\
        The collection of links, switches, and routers that connect a\
        set of systems.\
\
   Storage Area Network (SAN)\
        A network where disks, tapes, and other storage devices are made\
        available to one or more end-systems via a fabric.\
\
   System Area Network\
        A network where clustered systems share services, such as\
        storage and interprocess communication, via a fabric.\
\
   Fibre Channel (FC)\
        An ANSI standard link layer with associated protocols, typically\
        used to implement Storage Area Networks. [FIBRE]\
\
   Virtual Interface Architecture (VI, VIA)\
        An RDMA interface definition developed by an industry group and\
        implemented with a variety of differing wire protocols. [VI]\
\
   Infiniband (IB)\
        An RDMA interface, protocol suite and link layer specification\
        defined by an industry trade association. [IB]\
\
9.  Acknowledgements\
\
   Jeff Chase generously provided many useful insights and information.\
   Thanks to Jim Pinkerton for many helpful discussions.\
\
\
\
\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 14]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
10.  Informative References\
\
   [ATM]      The ATM Forum, "Asynchronous Transfer Mode Physical Layer\
              Specification" af-phy-0015.000, etc.  available from\
              http://www.atmforum.com/standards/approved.html.\
\
   [BCF+95]   N. J. Boden, D. Cohen, R. E. Felderman, A. E. Kulawik, C.\
              L. Seitz, J. N. Seizovic, and W. Su. "Myrinet - A\
              gigabit-per-second local-area network", IEEE Micro,\
              February 1995.\
\
   [BJM+96]   G. Buzzard, D. Jacobson, M. Mackey, S. Marovich, J.\
              Wilkes, "An implementation of the Hamlyn send-managed\
              interface architecture", in Proceedings of the Second\
              Symposium on Operating Systems Design and Implementation,\
              USENIX Assoc., October 1996.\
\
   [BLA+94]   M. A. Blumrich, K. Li, R. Alpert, C. Dubnicki, E. W.\
              Felten, "A virtual memory mapped network interface for the\
              SHRIMP multicomputer", in Proceedings of the 21st Annual\
              Symposium on Computer Architecture, April 1994, pp. 142-\
              153.\
\
   [Br99]     J. C. Brustoloni, "Interoperation of copy avoidance in\
              network and file I/O", Proceedings of IEEE Infocom, 1999,\
              pp. 534-542.\
\
   [BS96]     J. C. Brustoloni, P. Steenkiste, "Effects of buffering\
              semantics on I/O performance", Proceedings OSDI'96,\
              USENIX, Seattle, WA October 1996, pp. 277-291.\
\
   [BT05]     Bailey, S. and T. Talpey, "The Architecture of Direct Data\
              Placement (DDP) And Remote Direct Memory Access (RDMA) On\
              Internet Protocols", RFC 4296, December 2005.\
\
   [CFF+94]   C-H Chang, D. Flower, J. Forecast, H. Gray, B. Hawe, A.\
              Nadkarni, K. K. Ramakrishnan, U. Shikarpur, K. Wilde,\
              "High-performance TCP/IP and UDP/IP networking in DEC\
              OSF/1 for Alpha AXP",  Proceedings of the 3rd IEEE\
              Symposium on High Performance Distributed Computing,\
              August 1994, pp. 36-42.\
\
   [CGY01]    J. S. Chase, A. J. Gallatin, and K. G. Yocum, "End system\
              optimizations for high-speed TCP", IEEE Communications\
              Magazine, Volume: 39, Issue: 4 , April 2001, pp 68-74.\
              http://www.cs.duke.edu/ari/publications/end-\
              system.{ps,pdf}.\
\
\
\
\
Romanow, et al.              Informational                     [Page 15]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   [Ch96]     H.K. Chu, "Zero-copy TCP in Solaris", Proc. of the USENIX\
              1996 Annual Technical Conference, San Diego, CA, January\
              1996.\
\
   [Ch02]     Jeffrey Chase, Personal communication.\
\
   [CJRS89]   D. D. Clark, V. Jacobson, J. Romkey, H. Salwen, "An\
              analysis of TCP processing overhead", IEEE Communications\
              Magazine, volume:  27, Issue: 6, June 1989, pp 23-29.\
\
   [CT90]     D. D. Clark, D. Tennenhouse, "Architectural considerations\
              for a new generation of protocols", Proceedings of the ACM\
              SIGCOMM Conference, 1990.\
\
   [DAPP93]   P. Druschel, M. B. Abbott, M. A. Pagels, L. L. Peterson,\
              "Network subsystem design", IEEE Network, July 1993, pp.\
              8-17.\
\
   [DP93]     P. Druschel, L. L. Peterson, "Fbufs: a high-bandwidth\
              cross-domain transfer facility", Proceedings of the 14th\
              ACM Symposium of Operating Systems Principles, December\
              1993.\
\
   [DWB+93]   C. Dalton, G. Watson, D. Banks, C. Calamvokis, A. Edwards,\
              J. Lumley, "Afterburner: architectural support for high-\
              performance protocols", Technical Report, HP Laboratories\
              Bristol, HPL-93-46, July 1993.\
\
   [EBBV95]   T. von Eicken, A. Basu, V. Buch, and W. Vogels, "U-Net: A\
              user-level network interface for parallel and distributed\
              computing", Proc. of the 15th ACM Symposium on Operating\
              Systems Principles, Copper Mountain, Colorado, December\
              3-6, 1995.\
\
   [FDDI]     International Standards Organization, "Fibre Distributed\
              Data Interface", ISO/IEC 9314, committee drafts available\
              from http://www.iso.org.\
\
   [FGM+99]   Fielding,  R., Gettys, J., Mogul, J., Frystyk, H.,\
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext\
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.\
\
   [FIBRE]    ANSI Technical Committee T10, "Fibre Channel Protocol\
              (FCP)" (and as revised and updated), ANSI X3.269:1996\
              [R2001], committee draft available from\
              http://www.t10.org/drafts.htm#FibreChannel\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 16]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   [HP97]     J. L. Hennessy, D. A. Patterson, Computer Organization and\
              Design, 2nd Edition, San Francisco: Morgan Kaufmann\
              Publishers, 1997.\
\
   [IB]       InfiniBand Trade Association, "InfiniBand Architecture\
              Specification, Volumes 1 and 2", Release 1.1, November\
              2002, available from http://www.infinibandta.org/specs.\
\
   [IPSEC]    Kent, S. and R. Atkinson, "Security Architecture for the\
              Internet Protocol", RFC 2401, November 1998.\
\
   [KP96]     J. Kay, J. Pasquale, "Profiling and reducing processing\
              overheads in TCP/IP", IEEE/ACM Transactions on Networking,\
              Vol 4, No. 6, pp.817-828, December 1996.\
\
   [KSZ95]    K. Kleinpaste, P. Steenkiste, B. Zill, "Software support\
              for outboard buffering and checksumming", SIGCOMM'95.\
\
   [Ma02]     K. Magoutis, "Design and Implementation of a Direct Access\
              File System (DAFS) Kernel Server for FreeBSD", in\
              Proceedings of USENIX BSDCon 2002 Conference, San\
              Francisco, CA, February 11-14, 2002.\
\
   [MAF+02]   K. Magoutis, S. Addetia, A. Fedorova, M.  I. Seltzer, J.\
              S. Chase, D. Gallatin, R. Kisley, R. Wickremesinghe, E.\
              Gabber, "Structure and Performance of the Direct Access\
              File System (DAFS)", in Proceedings of the 2002 USENIX\
              Annual Technical Conference, Monterey, CA, June 9-14,\
              2002.\
\
   [Mc95]     J. D. McCalpin, "A Survey of memory bandwidth and machine\
              balance in current high performance computers", IEEE TCCA\
              Newsletter, December 1995.\
\
   [PAC+97]   D. Patterson, T. Anderson, N. Cardwell, R. Fromm, K.\
              Keeton, C. Kozyrakis, R. Thomas, K. Yelick , "A case for\
              intelligient RAM: IRAM", IEEE Micro, April 1997.\
\
   [PDZ99]    V. S. Pai, P. Druschel, W. Zwaenepoel, "IO-Lite: a unified\
              I/O buffering and caching system", Proc. of the 3rd\
              Symposium on Operating Systems Design and Implementation,\
              New Orleans, LA, February 1999.\
\
   [Pi01]     J. Pinkerton, "Winsock Direct: The Value of System Area\
              Networks", May 2001, available from\
              http://www.microsoft.com/windows2000/techinfo/\
              howitworks/communications/winsock.asp.\
\
\
\
\
Romanow, et al.              Informational                     [Page 17]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
   [Po81]     Postel, J., "Transmission Control Protocol", STD 7, RFC\
              793, September 1981.\
\
   [QUAD]     Quadrics Ltd., Quadrics QSNet product information,\
              available from\
              http://www.quadrics.com/website/pages/02qsn.html.\
\
   [SDP]      InfiniBand Trade Association, "Sockets Direct Protocol\
              v1.0", Annex A of InfiniBand Architecture Specification\
              Volume 1, Release 1.1, November 2002, available from\
              http://www.infinibandta.org/specs.\
\
   [SRVNET]   R. Horst, "TNet: A reliable system area network", IEEE\
              Micro, pp. 37-45, February 1995.\
\
   [STREAM]   J. D. McAlpin, The STREAM Benchmark Reference Information,\
              http://www.cs.virginia.edu/stream/.\
\
   [TK95]     M. N. Thadani, Y. A. Khalidi, "An efficient zero-copy I/O\
              framework for UNIX", Technical Report, SMLI TR-95-39, May\
              1995.\
\
   [TLS]      Dierks, T. and C. Allen, "The TLS Protocol Version 1.0",\
              RFC 2246, January 1999.\
\
   [VI]       D. Cameron and G. Regnier, "The Virtual Interface\
              Architecture", ISBN 0971288704, Intel Press, April 2002,\
              more info at http://www.intel.com/intelpress/via/.\
\
   [Wa97]     J. R. Walsh, "DART: Fast application-level networking via\
              data-copy avoidance", IEEE Network, July/August 1997, pp.\
              28-38.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 18]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
Authors' Addresses\
\
   Stephen Bailey\
   Sandburst Corporation\
   600 Federal Street\
   Andover, MA  01810 USA\
\
   Phone: +1 978 689 1614\
   EMail: steph@sandburst.com\
\
\
   Jeffrey C. Mogul\
   HP Labs\
   Hewlett-Packard Company\
   1501 Page Mill Road, MS 1117\
   Palo Alto, CA  94304 USA\
\
   Phone: +1 650 857 2206 (EMail preferred)\
   EMail: JeffMogul@acm.org\
\
\
   Allyn Romanow\
   Cisco Systems, Inc.\
   170 W. Tasman Drive\
   San Jose, CA  95134 USA\
\
   Phone: +1 408 525 8836\
   EMail: allyn@cisco.com\
\
\
   Tom Talpey\
   Network Appliance\
   1601 Trapelo Road\
   Waltham, MA  02451 USA\
\
   Phone: +1 781 768 5329\
   EMail: thomas.talpey@netapp.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 19]\
\
RFC 4297             RDMA over IP Problem Statement        December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Romanow, et al.              Informational                     [Page 20]\
\

doc 6
  field 0
    name titolo
    type string
    value rfc4291.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          R. Hinden\
Request for Comments: 4291                                         Nokia\
Obsoletes: 3513                                               S. Deering\
Category: Standards Track                                  Cisco Systems\
                                                           February 2006\
\
\
                  IP Version 6 Addressing Architecture\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This specification defines the addressing architecture of the IP\
   Version 6 (IPv6) protocol.  The document includes the IPv6 addressing\
   model, text representations of IPv6 addresses, definition of IPv6\
   unicast addresses, anycast addresses, and multicast addresses, and an\
   IPv6 node's required addresses.\
\
   This document obsoletes RFC 3513, "IP Version 6 Addressing\
   Architecture".\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden                      Standards Track                     [Page 1]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. IPv6 Addressing .................................................2\
      2.1. Addressing Model ...........................................3\
      2.2. Text Representation of Addresses ...........................4\
      2.3. Text Representation of Address Prefixes ....................5\
      2.4. Address Type Identification ................................6\
      2.5. Unicast Addresses ..........................................6\
           2.5.1. Interface Identifiers ...............................7\
           2.5.2. The Unspecified Address .............................9\
           2.5.3. The Loopback Address ................................9\
           2.5.4. Global Unicast Addresses ............................9\
           2.5.5. IPv6 Addresses with Embedded IPv4 Addresses ........10\
           2.5.6. Link-Local IPv6 Unicast Addresses ..................11\
           2.5.7. Site-Local IPv6 Unicast Addresses ..................11\
      2.6. Anycast Addresses .........................................12\
           2.6.1. Required Anycast Address ...........................12\
      2.7. Multicast Addresses .......................................13\
           2.7.1. Pre-Defined Multicast Addresses ....................15\
      2.8. A Node's Required Addresses ...............................17\
   3. Security Considerations ........................................18\
   4. IANA Considerations ............................................18\
   5. Acknowledgements ...............................................18\
   6. References .....................................................18\
      6.1. Normative References ......................................18\
      6.2. Informative References ....................................18\
   Appendix A: Creating Modified EUI-64 Format Interface Identifiers .20\
   Appendix B: Changes from RFC 3513 .................................22\
\
1.  Introduction\
\
   This specification defines the addressing architecture of the IP\
   Version 6 protocol.  It includes the basic formats for the various\
   types of IPv6 addresses (unicast, anycast, and multicast).\
\
2.  IPv6 Addressing\
\
   IPv6 addresses are 128-bit identifiers for interfaces and sets of\
   interfaces (where "interface" is as defined in Section 2 of [IPV6]).\
   There are three types of addresses:\
\
    Unicast:   An identifier for a single interface.  A packet sent to a\
               unicast address is delivered to the interface identified\
               by that address.\
\
\
\
\
\
\
Hinden                      Standards Track                     [Page 2]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
    Anycast:   An identifier for a set of interfaces (typically\
               belonging to different nodes).  A packet sent to an\
               anycast address is delivered to one of the interfaces\
               identified by that address (the "nearest" one, according\
               to the routing protocols' measure of distance).\
\
    Multicast: An identifier for a set of interfaces (typically\
               belonging to different nodes).  A packet sent to a\
               multicast address is delivered to all interfaces\
               identified by that address.\
\
   There are no broadcast addresses in IPv6, their function being\
   superseded by multicast addresses.\
\
   In this document, fields in addresses are given a specific name, for\
   example, "subnet".  When this name is used with the term "ID" for\
   identifier after the name (e.g., "subnet ID"), it refers to the\
   contents of the named field.  When it is used with the term "prefix"\
   (e.g., "subnet prefix"), it refers to all of the address from the\
   left up to and including this field.\
\
   In IPv6, all zeros and all ones are legal values for any field,\
   unless specifically excluded.  Specifically, prefixes may contain, or\
   end with, zero-valued fields.\
\
2.1.  Addressing Model\
\
   IPv6 addresses of all types are assigned to interfaces, not nodes.\
   An IPv6 unicast address refers to a single interface.  Since each\
   interface belongs to a single node, any of that node's interfaces'\
   unicast addresses may be used as an identifier for the node.\
\
   All interfaces are required to have at least one Link-Local unicast\
   address (see Section 2.8 for additional required addresses).  A\
   single interface may also have multiple IPv6 addresses of any type\
   (unicast, anycast, and multicast) or scope.  Unicast addresses with a\
   scope greater than link-scope are not needed for interfaces that are\
   not used as the origin or destination of any IPv6 packets to or from\
   non-neighbors.  This is sometimes convenient for point-to-point\
   interfaces.  There is one exception to this addressing model:\
\
      A unicast address or a set of unicast addresses may be assigned to\
      multiple physical interfaces if the implementation treats the\
      multiple physical interfaces as one interface when presenting it\
      to the internet layer.  This is useful for load-sharing over\
      multiple physical interfaces.\
\
\
\
\
\
Hinden                      Standards Track                     [Page 3]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   Currently, IPv6 continues the IPv4 model in that a subnet prefix is\
   associated with one link.  Multiple subnet prefixes may be assigned\
   to the same link.\
\
2.2.  Text Representation of Addresses\
\
   There are three conventional forms for representing IPv6 addresses as\
   text strings:\
\
   1. The preferred form is x:x:x:x:x:x:x:x, where the 'x's are one to\
      four hexadecimal digits of the eight 16-bit pieces of the address.\
      Examples:\
\
         ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\
\
         2001:DB8:0:0:8:800:200C:417A\
\
      Note that it is not necessary to write the leading zeros in an\
      individual field, but there must be at least one numeral in every\
      field (except for the case described in 2.).\
\
   2. Due to some methods of allocating certain styles of IPv6\
      addresses, it will be common for addresses to contain long strings\
      of zero bits.  In order to make writing addresses containing zero\
      bits easier, a special syntax is available to compress the zeros.\
      The use of "::" indicates one or more groups of 16 bits of zeros.\
      The "::" can only appear once in an address.  The "::" can also be\
      used to compress leading or trailing zeros in an address.\
\
      For example, the following addresses\
\
         2001:DB8:0:0:8:800:200C:417A   a unicast address\
         FF01:0:0:0:0:0:0:101           a multicast address\
         0:0:0:0:0:0:0:1                the loopback address\
         0:0:0:0:0:0:0:0                the unspecified address\
\
      may be represented as\
\
         2001:DB8::8:800:200C:417A      a unicast address\
         FF01::101                      a multicast address\
         ::1                            the loopback address\
         ::                             the unspecified address\
\
   3. An alternative form that is sometimes more convenient when dealing\
      with a mixed environment of IPv4 and IPv6 nodes is\
      x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values of\
      the six high-order 16-bit pieces of the address, and the 'd's are\
\
\
\
\
Hinden                      Standards Track                     [Page 4]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
      the decimal values of the four low-order 8-bit pieces of the\
      address (standard IPv4 representation).  Examples:\
\
         0:0:0:0:0:0:13.1.68.3\
\
         0:0:0:0:0:FFFF:129.144.52.38\
\
      or in compressed form:\
\
         ::13.1.68.3\
\
         ::FFFF:129.144.52.38\
\
2.3.  Text Representation of Address Prefixes\
\
   The text representation of IPv6 address prefixes is similar to the\
   way IPv4 address prefixes are written in Classless Inter-Domain\
   Routing (CIDR) notation [CIDR].  An IPv6 address prefix is\
   represented by the notation:\
\
      ipv6-address/prefix-length\
\
   where\
\
      ipv6-address    is an IPv6 address in any of the notations listed\
                      in Section 2.2.\
\
      prefix-length   is a decimal value specifying how many of the\
                      leftmost contiguous bits of the address comprise\
                      the prefix.\
\
   For example, the following are legal representations of the 60-bit\
   prefix 20010DB80000CD3 (hexadecimal):\
\
      2001:0DB8:0000:CD30:0000:0000:0000:0000/60\
      2001:0DB8::CD30:0:0:0:0/60\
      2001:0DB8:0:CD30::/60\
\
   The following are NOT legal representations of the above prefix:\
\
      2001:0DB8:0:CD3/60   may drop leading zeros, but not trailing\
                           zeros, within any 16-bit chunk of the address\
\
      2001:0DB8::CD30/60   address to left of "/" expands to\
                           2001:0DB8:0000:0000:0000:0000:0000:CD30\
\
      2001:0DB8::CD3/60    address to left of "/" expands to\
                           2001:0DB8:0000:0000:0000:0000:0000:0CD3\
\
\
\
Hinden                      Standards Track                     [Page 5]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   When writing both a node address and a prefix of that node address\
   (e.g., the node's subnet prefix), the two can be combined as follows:\
\
      the node address      2001:0DB8:0:CD30:123:4567:89AB:CDEF\
      and its subnet number 2001:0DB8:0:CD30::/60\
\
      can be abbreviated as 2001:0DB8:0:CD30:123:4567:89AB:CDEF/60\
\
2.4.  Address Type Identification\
\
   The type of an IPv6 address is identified by the high-order bits of\
   the address, as follows:\
\
      Address type         Binary prefix        IPv6 notation   Section\
      ------------         -------------        -------------   -------\
      Unspecified          00...0  (128 bits)   ::/128          2.5.2\
      Loopback             00...1  (128 bits)   ::1/128         2.5.3\
      Multicast            11111111             FF00::/8        2.7\
      Link-Local unicast   1111111010           FE80::/10       2.5.6\
      Global Unicast       (everything else)\
\
   Anycast addresses are taken from the unicast address spaces (of any\
   scope) and are not syntactically distinguishable from unicast\
   addresses.\
\
   The general format of Global Unicast addresses is described in\
   Section 2.5.4.  Some special-purpose subtypes of Global Unicast\
   addresses that contain embedded IPv4 addresses (for the purposes of\
   IPv4-IPv6 interoperation) are described in Section 2.5.5.\
\
   Future specifications may redefine one or more sub-ranges of the\
   Global Unicast space for other purposes, but unless and until that\
   happens, implementations must treat all addresses that do not start\
   with any of the above-listed prefixes as Global Unicast addresses.\
\
2.5.  Unicast Addresses\
\
   IPv6 unicast addresses are aggregatable with prefixes of arbitrary\
   bit-length, similar to IPv4 addresses under Classless Inter-Domain\
   Routing.\
\
   There are several types of unicast addresses in IPv6, in particular,\
   Global Unicast, site-local unicast (deprecated, see Section 2.5.7),\
   and Link-Local unicast.  There are also some special-purpose subtypes\
   of Global Unicast, such as IPv6 addresses with embedded IPv4\
   addresses.  Additional address types or subtypes can be defined in\
   the future.\
\
\
\
\
Hinden                      Standards Track                     [Page 6]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   IPv6 nodes may have considerable or little knowledge of the internal\
   structure of the IPv6 address, depending on the role the node plays\
   (for instance, host versus router).  At a minimum, a node may\
   consider that unicast addresses (including its own) have no internal\
   structure:\
\
   |                           128 bits                              |\
   +-----------------------------------------------------------------+\
   |                          node address                           |\
   +-----------------------------------------------------------------+\
\
   A slightly sophisticated host (but still rather simple) may\
   additionally be aware of subnet prefix(es) for the link(s) it is\
   attached to, where different addresses may have different values for\
   n:\
\
   |          n bits               |           128-n bits            |\
   +-------------------------------+---------------------------------+\
   |       subnet prefix           |           interface ID          |\
   +-------------------------------+---------------------------------+\
\
   Though a very simple router may have no knowledge of the internal\
   structure of IPv6 unicast addresses, routers will more generally have\
   knowledge of one or more of the hierarchical boundaries for the\
   operation of routing protocols.  The known boundaries will differ\
   from router to router, depending on what positions the router holds\
   in the routing hierarchy.\
\
   Except for the knowledge of the subnet boundary discussed in the\
   previous paragraphs, nodes should not make any assumptions about the\
   structure of an IPv6 address.\
\
2.5.1.  Interface Identifiers\
\
   Interface identifiers in IPv6 unicast addresses are used to identify\
   interfaces on a link.  They are required to be unique within a subnet\
   prefix.  It is recommended that the same interface identifier not be\
   assigned to different nodes on a link.  They may also be unique over\
   a broader scope.  In some cases, an interface's identifier will be\
   derived directly from that interface's link-layer address.  The same\
   interface identifier may be used on multiple interfaces on a single\
   node, as long as they are attached to different subnets.\
\
   Note that the uniqueness of interface identifiers is independent of\
   the uniqueness of IPv6 addresses.  For example, a Global Unicast\
   address may be created with a local scope interface identifier and a\
   Link-Local address may be created with a universal scope interface\
   identifier.\
\
\
\
Hinden                      Standards Track                     [Page 7]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   For all unicast addresses, except those that start with the binary\
   value 000, Interface IDs are required to be 64 bits long and to be\
   constructed in Modified EUI-64 format.\
\
   Modified EUI-64 format-based interface identifiers may have universal\
   scope when derived from a universal token (e.g., IEEE 802 48-bit MAC\
   or IEEE EUI-64 identifiers [EUI64]) or may have local scope where a\
   global token is not available (e.g., serial links, tunnel end-points)\
   or where global tokens are undesirable (e.g., temporary tokens for\
   privacy [PRIV]).\
\
   Modified EUI-64 format interface identifiers are formed by inverting\
   the "u" bit (universal/local bit in IEEE EUI-64 terminology) when\
   forming the interface identifier from IEEE EUI-64 identifiers.  In\
   the resulting Modified EUI-64 format, the "u" bit is set to one (1)\
   to indicate universal scope, and it is set to zero (0) to indicate\
   local scope.  The first three octets in binary of an IEEE EUI-64\
   identifier are as follows:\
\
          0       0 0       1 1       2\
         |0       7 8       5 6       3|\
         +----+----+----+----+----+----+\
         |cccc|ccug|cccc|cccc|cccc|cccc|\
         +----+----+----+----+----+----+\
\
   written in Internet standard bit-order, where "u" is the\
   universal/local bit, "g" is the individual/group bit, and "c" is the\
   bits of the company_id.  Appendix A, "Creating Modified EUI-64 Format\
   Interface Identifiers", provides examples on the creation of Modified\
   EUI-64 format-based interface identifiers.\
\
   The motivation for inverting the "u" bit when forming an interface\
   identifier is to make it easy for system administrators to hand\
   configure non-global identifiers when hardware tokens are not\
   available.  This is expected to be the case for serial links and\
   tunnel end-points, for example.  The alternative would have been for\
   these to be of the form 0200:0:0:1, 0200:0:0:2, etc., instead of the\
   much simpler 0:0:0:1, 0:0:0:2, etc.\
\
   IPv6 nodes are not required to validate that interface identifiers\
   created with modified EUI-64 tokens with the "u" bit set to universal\
   are unique.\
\
   The use of the universal/local bit in the Modified EUI-64 format\
   identifier is to allow development of future technology that can take\
   advantage of interface identifiers with universal scope.\
\
\
\
\
\
Hinden                      Standards Track                     [Page 8]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   The details of forming interface identifiers are defined in the\
   appropriate "IPv6 over <link>" specification, such as "IPv6 over\
   Ethernet" [ETHER], and "IPv6 over FDDI" [FDDI].\
\
2.5.2.  The Unspecified Address\
\
   The address 0:0:0:0:0:0:0:0 is called the unspecified address.  It\
   must never be assigned to any node.  It indicates the absence of an\
   address.  One example of its use is in the Source Address field of\
   any IPv6 packets sent by an initializing host before it has learned\
   its own address.\
\
   The unspecified address must not be used as the destination address\
   of IPv6 packets or in IPv6 Routing headers.  An IPv6 packet with a\
   source address of unspecified must never be forwarded by an IPv6\
   router.\
\
2.5.3.  The Loopback Address\
\
   The unicast address 0:0:0:0:0:0:0:1 is called the loopback address.\
   It may be used by a node to send an IPv6 packet to itself.  It must\
   not be assigned to any physical interface.  It is treated as having\
   Link-Local scope, and may be thought of as the Link-Local unicast\
   address of a virtual interface (typically called the "loopback\
   interface") to an imaginary link that goes nowhere.\
\
   The loopback address must not be used as the source address in IPv6\
   packets that are sent outside of a single node.  An IPv6 packet with\
   a destination address of loopback must never be sent outside of a\
   single node and must never be forwarded by an IPv6 router.  A packet\
   received on an interface with a destination address of loopback must\
   be dropped.\
\
2.5.4.  Global Unicast Addresses\
\
   The general format for IPv6 Global Unicast addresses is as follows:\
\
   |         n bits         |   m bits  |       128-n-m bits         |\
   +------------------------+-----------+----------------------------+\
   | global routing prefix  | subnet ID |       interface ID         |\
   +------------------------+-----------+----------------------------+\
\
   where the global routing prefix is a (typically hierarchically-\
   structured) value assigned to a site (a cluster of subnets/links),\
   the subnet ID is an identifier of a link within the site, and the\
   interface ID is as defined in Section 2.5.1.\
\
\
\
\
\
Hinden                      Standards Track                     [Page 9]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   All Global Unicast addresses other than those that start with binary\
   000 have a 64-bit interface ID field (i.e., n + m = 64), formatted as\
   described in Section 2.5.1.  Global Unicast addresses that start with\
   binary 000 have no such constraint on the size or structure of the\
   interface ID field.\
\
   Examples of Global Unicast addresses that start with binary 000 are\
   the IPv6 address with embedded IPv4 addresses described in Section\
   2.5.5.  An example of global addresses starting with a binary value\
   other than 000 (and therefore having a 64-bit interface ID field) can\
   be found in [GLOBAL].\
\
2.5.5.  IPv6 Addresses with Embedded IPv4 Addresses\
\
   Two types of IPv6 addresses are defined that carry an IPv4 address in\
   the low-order 32 bits of the address.  These are the "IPv4-Compatible\
   IPv6 address" and the "IPv4-mapped IPv6 address".\
\
2.5.5.1.  IPv4-Compatible IPv6 Address\
\
   The "IPv4-Compatible IPv6 address" was defined to assist in the IPv6\
   transition.  The format of the "IPv4-Compatible IPv6 address" is as\
   follows:\
\
   |                80 bits               | 16 |      32 bits        |\
   +--------------------------------------+--------------------------+\
   |0000..............................0000|0000|    IPv4 address     |\
   +--------------------------------------+----+---------------------+\
\
   Note: The IPv4 address used in the "IPv4-Compatible IPv6 address"\
   must be a globally-unique IPv4 unicast address.\
\
   The "IPv4-Compatible IPv6 address" is now deprecated because the\
   current IPv6 transition mechanisms no longer use these addresses.\
   New or updated implementations are not required to support this\
   address type.\
\
2.5.5.2.  IPv4-Mapped IPv6 Address\
\
   A second type of IPv6 address that holds an embedded IPv4 address is\
   defined.  This address type is used to represent the addresses of\
   IPv4 nodes as IPv6 addresses.  The format of the "IPv4-mapped IPv6\
   address" is as follows:\
\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 10]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
\
   |                80 bits               | 16 |      32 bits        |\
   +--------------------------------------+--------------------------+\
   |0000..............................0000|FFFF|    IPv4 address     |\
   +--------------------------------------+----+---------------------+\
\
   See [RFC4038] for background on the usage of the "IPv4-mapped IPv6\
   address".\
\
2.5.6.  Link-Local IPv6 Unicast Addresses\
\
   Link-Local addresses are for use on a single link.  Link-Local\
   addresses have the following format:\
\
   |   10     |\
   |  bits    |         54 bits         |          64 bits           |\
   +----------+-------------------------+----------------------------+\
   |1111111010|           0             |       interface ID         |\
   +----------+-------------------------+----------------------------+\
\
   Link-Local addresses are designed to be used for addressing on a\
   single link for purposes such as automatic address configuration,\
   neighbor discovery, or when no routers are present.\
\
   Routers must not forward any packets with Link-Local source or\
   destination addresses to other links.\
\
2.5.7.  Site-Local IPv6 Unicast Addresses\
\
   Site-Local addresses were originally designed to be used for\
   addressing inside of a site without the need for a global prefix.\
   Site-local addresses are now deprecated as defined in [SLDEP].\
\
   Site-Local addresses have the following format:\
\
   |   10     |\
   |  bits    |         54 bits         |         64 bits            |\
   +----------+-------------------------+----------------------------+\
   |1111111011|        subnet ID        |       interface ID         |\
   +----------+-------------------------+----------------------------+\
\
   The special behavior of this prefix defined in [RFC3513] must no\
   longer be supported in new implementations (i.e., new implementations\
   must treat this prefix as Global Unicast).\
\
   Existing implementations and deployments may continue to use this\
   prefix.\
\
\
\
\
Hinden                      Standards Track                    [Page 11]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
2.6.  Anycast Addresses\
\
   An IPv6 anycast address is an address that is assigned to more than\
   one interface (typically belonging to different nodes), with the\
   property that a packet sent to an anycast address is routed to the\
   "nearest" interface having that address, according to the routing\
   protocols' measure of distance.\
\
   Anycast addresses are allocated from the unicast address space, using\
   any of the defined unicast address formats.  Thus, anycast addresses\
   are syntactically indistinguishable from unicast addresses.  When a\
   unicast address is assigned to more than one interface, thus turning\
   it into an anycast address, the nodes to which the address is\
   assigned must be explicitly configured to know that it is an anycast\
   address.\
\
   For any assigned anycast address, there is a longest prefix P of that\
   address that identifies the topological region in which all\
   interfaces belonging to that anycast address reside.  Within the\
   region identified by P, the anycast address must be maintained as a\
   separate entry in the routing system (commonly referred to as a "host\
   route"); outside the region identified by P, the anycast address may\
   be aggregated into the routing entry for prefix P.\
\
   Note that in the worst case, the prefix P of an anycast set may be\
   the null prefix, i.e., the members of the set may have no topological\
   locality.  In that case, the anycast address must be maintained as a\
   separate routing entry throughout the entire Internet, which presents\
   a severe scaling limit on how many such "global" anycast sets may be\
   supported.  Therefore, it is expected that support for global anycast\
   sets may be unavailable or very restricted.\
\
   One expected use of anycast addresses is to identify the set of\
   routers belonging to an organization providing Internet service.\
   Such addresses could be used as intermediate addresses in an IPv6\
   Routing header, to cause a packet to be delivered via a particular\
   service provider or sequence of service providers.\
\
   Some other possible uses are to identify the set of routers attached\
   to a particular subnet, or the set of routers providing entry into a\
   particular routing domain.\
\
2.6.1.  Required Anycast Address\
\
   The Subnet-Router anycast address is predefined.  Its format is as\
   follows:\
\
\
\
\
\
Hinden                      Standards Track                    [Page 12]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
\
   |                         n bits                 |   128-n bits   |\
   +------------------------------------------------+----------------+\
   |                   subnet prefix                | 00000000000000 |\
   +------------------------------------------------+----------------+\
\
   The "subnet prefix" in an anycast address is the prefix that\
   identifies a specific link.  This anycast address is syntactically\
   the same as a unicast address for an interface on the link with the\
   interface identifier set to zero.\
\
   Packets sent to the Subnet-Router anycast address will be delivered\
   to one router on the subnet.  All routers are required to support the\
   Subnet-Router anycast addresses for the subnets to which they have\
   interfaces.\
\
   The Subnet-Router anycast address is intended to be used for\
   applications where a node needs to communicate with any one of the\
   set of routers.\
\
2.7.  Multicast Addresses\
\
   An IPv6 multicast address is an identifier for a group of interfaces\
   (typically on different nodes).  An interface may belong to any\
   number of multicast groups.  Multicast addresses have the following\
   format:\
\
   |   8    |  4 |  4 |                  112 bits                   |\
   +------ -+----+----+---------------------------------------------+\
   |11111111|flgs|scop|                  group ID                   |\
   +--------+----+----+---------------------------------------------+\
\
      binary 11111111 at the start of the address identifies the address\
      as being a multicast address.\
\
                                    +-+-+-+-+\
      flgs is a set of 4 flags:     |0|R|P|T|\
                                    +-+-+-+-+\
\
         The high-order flag is reserved, and must be initialized to 0.\
\
         T = 0 indicates a permanently-assigned ("well-known") multicast\
         address, assigned by the Internet Assigned Numbers Authority\
         (IANA).\
\
         T = 1 indicates a non-permanently-assigned ("transient" or\
         "dynamically" assigned) multicast address.\
\
\
\
\
Hinden                      Standards Track                    [Page 13]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
         The P flag's definition and usage can be found in [RFC3306].\
\
         The R flag's definition and usage can be found in [RFC3956].\
\
      scop is a 4-bit multicast scope value used to limit the scope of\
      the multicast group.  The values are as follows:\
\
         0  reserved\
         1  Interface-Local scope\
         2  Link-Local scope\
         3  reserved\
         4  Admin-Local scope\
         5  Site-Local scope\
         6  (unassigned)\
         7  (unassigned)\
         8  Organization-Local scope\
         9  (unassigned)\
         A  (unassigned)\
         B  (unassigned)\
         C  (unassigned)\
         D  (unassigned)\
         E  Global scope\
         F  reserved\
\
         Interface-Local scope spans only a single interface on a node\
         and is useful only for loopback transmission of multicast.\
\
         Link-Local multicast scope spans the same topological region as\
         the corresponding unicast scope.\
\
         Admin-Local scope is the smallest scope that must be\
         administratively configured, i.e., not automatically derived\
         from physical connectivity or other, non-multicast-related\
         configuration.\
\
         Site-Local scope is intended to span a single site.\
\
         Organization-Local scope is intended to span multiple sites\
         belonging to a single organization.\
\
         scopes labeled "(unassigned)" are available for administrators\
         to define additional multicast regions.\
\
      group ID identifies the multicast group, either permanent or\
      transient, within the given scope.  Additional definitions of the\
      multicast group ID field structure are provided in [RFC3306].\
\
\
\
\
\
Hinden                      Standards Track                    [Page 14]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   The "meaning" of a permanently-assigned multicast address is\
   independent of the scope value.  For example, if the "NTP servers\
   group" is assigned a permanent multicast address with a group ID of\
   101 (hex), then\
\
      FF01:0:0:0:0:0:0:101 means all NTP servers on the same interface\
      (i.e., the same node) as the sender.\
\
      FF02:0:0:0:0:0:0:101 means all NTP servers on the same link as the\
      sender.\
\
      FF05:0:0:0:0:0:0:101 means all NTP servers in the same site as the\
      sender.\
\
      FF0E:0:0:0:0:0:0:101 means all NTP servers in the Internet.\
\
   Non-permanently-assigned multicast addresses are meaningful only\
   within a given scope.  For example, a group identified by the non-\
   permanent, site-local multicast address FF15:0:0:0:0:0:0:101 at one\
   site bears no relationship to a group using the same address at a\
   different site, nor to a non-permanent group using the same group ID\
   with a different scope, nor to a permanent group with the same group\
   ID.\
\
   Multicast addresses must not be used as source addresses in IPv6\
   packets or appear in any Routing header.\
\
   Routers must not forward any multicast packets beyond of the scope\
   indicated by the scop field in the destination multicast address.\
\
   Nodes must not originate a packet to a multicast address whose scop\
   field contains the reserved value 0; if such a packet is received, it\
   must be silently dropped.  Nodes should not originate a packet to a\
   multicast address whose scop field contains the reserved value F; if\
   such a packet is sent or received, it must be treated the same as\
   packets destined to a global (scop E) multicast address.\
\
2.7.1.  Pre-Defined Multicast Addresses\
\
   The following well-known multicast addresses are pre-defined.  The\
   group IDs defined in this section are defined for explicit scope\
   values.\
\
   Use of these group IDs for any other scope values, with the T flag\
   equal to 0, is not allowed.\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 15]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
      Reserved Multicast Addresses:   FF00:0:0:0:0:0:0:0\
                                      FF01:0:0:0:0:0:0:0\
                                      FF02:0:0:0:0:0:0:0\
                                      FF03:0:0:0:0:0:0:0\
                                      FF04:0:0:0:0:0:0:0\
                                      FF05:0:0:0:0:0:0:0\
                                      FF06:0:0:0:0:0:0:0\
                                      FF07:0:0:0:0:0:0:0\
                                      FF08:0:0:0:0:0:0:0\
                                      FF09:0:0:0:0:0:0:0\
                                      FF0A:0:0:0:0:0:0:0\
                                      FF0B:0:0:0:0:0:0:0\
                                      FF0C:0:0:0:0:0:0:0\
                                      FF0D:0:0:0:0:0:0:0\
                                      FF0E:0:0:0:0:0:0:0\
                                      FF0F:0:0:0:0:0:0:0\
\
   The above multicast addresses are reserved and shall never be\
   assigned to any multicast group.\
\
      All Nodes Addresses:    FF01:0:0:0:0:0:0:1\
                              FF02:0:0:0:0:0:0:1\
\
   The above multicast addresses identify the group of all IPv6 nodes,\
   within scope 1 (interface-local) or 2 (link-local).\
\
      All Routers Addresses:   FF01:0:0:0:0:0:0:2\
                               FF02:0:0:0:0:0:0:2\
                               FF05:0:0:0:0:0:0:2\
\
   The above multicast addresses identify the group of all IPv6 routers,\
   within scope 1 (interface-local), 2 (link-local), or 5 (site-local).\
\
      Solicited-Node Address:  FF02:0:0:0:0:1:FFXX:XXXX\
\
   Solicited-Node multicast address are computed as a function of a\
   node's unicast and anycast addresses.  A Solicited-Node multicast\
   address is formed by taking the low-order 24 bits of an address\
   (unicast or anycast) and appending those bits to the prefix\
   FF02:0:0:0:0:1:FF00::/104 resulting in a multicast address in the\
   range\
\
         FF02:0:0:0:0:1:FF00:0000\
\
   to\
\
         FF02:0:0:0:0:1:FFFF:FFFF\
\
\
\
\
Hinden                      Standards Track                    [Page 16]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   For example, the Solicited-Node multicast address corresponding to\
   the IPv6 address 4037::01:800:200E:8C6C is FF02::1:FF0E:8C6C.  IPv6\
   addresses that differ only in the high-order bits (e.g., due to\
   multiple high-order prefixes associated with different aggregations)\
   will map to the same Solicited-Node address, thereby reducing the\
   number of multicast addresses a node must join.\
\
   A node is required to compute and join (on the appropriate interface)\
   the associated Solicited-Node multicast addresses for all unicast and\
   anycast addresses that have been configured for the node's interfaces\
   (manually or automatically).\
\
2.8.  A Node's Required Addresses\
\
   A host is required to recognize the following addresses as\
   identifying itself:\
\
      o Its required Link-Local address for each interface.\
\
      o Any additional Unicast and Anycast addresses that have been\
        configured for the node's interfaces (manually or\
        automatically).\
\
      o The loopback address.\
\
      o The All-Nodes multicast addresses defined in Section 2.7.1.\
\
      o The Solicited-Node multicast address for each of its unicast and\
        anycast addresses.\
\
      o Multicast addresses of all other groups to which the node\
        belongs.\
\
   A router is required to recognize all addresses that a host is\
   required to recognize, plus the following addresses as identifying\
   itself:\
\
      o The Subnet-Router Anycast addresses for all interfaces for which\
        it is configured to act as a router.\
\
      o All other Anycast addresses with which the router has been\
        configured.\
\
      o The All-Routers multicast addresses defined in Section 2.7.1.\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 17]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
3.  Security Considerations\
\
   IPv6 addressing documents do not have any direct impact on Internet\
   infrastructure security.  Authentication of IPv6 packets is defined\
   in [AUTH].\
\
4.  IANA Considerations\
\
   The "IPv4-Compatible IPv6 address" is deprecated by this document.\
   The IANA should continue to list the address block containing these\
   addresses at http://www.iana.org/assignments/ipv6-address-space as\
   "Reserved by IETF" and not reassign it for any other purpose.  For\
   example:\
\
      0000::/8        Reserved by IETF        [RFC3513]      [1]\
\
   The IANA has added the following note and link to this address block.\
\
      [5]  0000::/96 was previously defined as the "IPv4-Compatible IPv6\
           address" prefix.  This definition has been deprecated by RFC\
           4291.\
\
   The IANA has updated the references for the IPv6 Address Architecture\
   in the IANA registries accordingly.\
\
5.  Acknowledgements\
\
   The authors would like to acknowledge the contributions of Paul\
   Francis, Scott Bradner, Jim Bound, Brian Carpenter, Matt Crawford,\
   Deborah Estrin, Roger Fajman, Bob Fink, Peter Ford, Bob Gilligan,\
   Dimitry Haskin, Tom Harsch, Christian Huitema, Tony Li, Greg\
   Minshall, Thomas Narten, Erik Nordmark, Yakov Rekhter, Bill Simpson,\
   Sue Thomson, Markku Savela, Larry Masinter, Jun-ichiro Itojun Hagino,\
   Tatuya Jinmei, Suresh Krishnan, and Mahmood Ali.\
\
6.  References\
\
6.1.  Normative References\
\
   [IPV6]    Deering, S. and R. Hinden, "Internet Protocol, Version 6\
             (IPv6) Specification", RFC 2460, December 1998.\
\
6.2.  Informative References\
\
   [AUTH]    Kent, S. and R. Atkinson, "IP Authentication Header", RFC\
             2402, November 1998.\
\
\
\
\
\
Hinden                      Standards Track                    [Page 18]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   [CIDR]    Fuller, V., Li, T., Yu, J., and K. Varadhan, "Classless\
             Inter-Domain Routing (CIDR): an Address Assignment and\
             Aggregation Strategy", RFC 1519, September 1993.\
\
   [ETHER]   Crawford, M., "Transmission of IPv6 Packets over Ethernet\
             Networks", RFC 2464, December 1998.\
\
   [EUI64]   IEEE, "Guidelines for 64-bit Global Identifier (EUI-64)\
             Registration Authority",\
             http://standards.ieee.org/regauth/oui/tutorials/EUI64.html,\
             March 1997.\
\
   [FDDI]    Crawford, M., "Transmission of IPv6 Packets over FDDI\
             Networks", RFC 2467, December 1998.\
\
   [GLOBAL]  Hinden, R., Deering, S., and E. Nordmark, "IPv6 Global\
             Unicast Address Format", RFC 3587, August 2003.\
\
   [PRIV]    Narten, T. and R. Draves, "Privacy Extensions for Stateless\
             Address Autoconfiguration in IPv6", RFC 3041, January 2001.\
\
   [RFC3513] Hinden, R. and S. Deering, "Internet Protocol Version 6\
             (IPv6) Addressing Architecture", RFC 3513, April 2005.\
\
   [RFC3306] Haberman, B. and D. Thaler, "Unicast-Prefix-based IPv6\
             Multicast Addresses", RFC 3306, August 2002.\
\
   [RFC3956] Savola, P. and B. Haberman, "Embedding the Rendezvous Point\
             (RP) Address in an IPv6 Multicast Address", RFC 3956,\
             November 2004.\
\
   [RFC4038] Shin, M-K., Hong, Y-G., Hagino, J., Savola, P., and E.\
             Castro, "Application Aspects of IPv6 Transition", RFC 4038,\
             March 2005.\
\
   [SLDEP]   Huitema, C. and B. Carpenter, "Deprecating Site Local\
             Addresses", RFC 3879, September 2004.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 19]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
Appendix A: Creating Modified EUI-64 Format Interface Identifiers\
\
   Depending on the characteristics of a specific link or node, there\
   are a number of approaches for creating Modified EUI-64 format\
   interface identifiers. This appendix describes some of these\
   approaches.\
\
   Links or Nodes with IEEE EUI-64 Identifiers\
\
   The only change needed to transform an IEEE EUI-64 identifier to an\
   interface identifier is to invert the "u" (universal/local) bit.  An\
   example is a globally unique IEEE EUI-64 identifier of the form:\
\
   |0              1|1              3|3              4|4              6|\
   |0              5|6              1|2              7|8              3|\
   +----------------+----------------+----------------+----------------+\
   |cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|\
   +----------------+----------------+----------------+----------------+\
\
   where "c" is the bits of the assigned company_id, "0" is the value of\
   the universal/local bit to indicate universal scope, "g" is\
   individual/group bit, and "m" is the bits of the manufacturer-\
   selected extension identifier.  The IPv6 interface identifier would\
   be of the form:\
\
   |0              1|1              3|3              4|4              6|\
   |0              5|6              1|2              7|8              3|\
   +----------------+----------------+----------------+----------------+\
   |cccccc1gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|\
   +----------------+----------------+----------------+----------------+\
\
   The only change is inverting the value of the universal/local bit.\
\
   Links or Nodes with IEEE 802 48-bit MACs\
\
   [EUI64] defines a method to create an IEEE EUI-64 identifier from an\
   IEEE 48-bit MAC identifier.  This is to insert two octets, with\
   hexadecimal values of 0xFF and 0xFE (see the Note at the end of\
   appendix), in the middle of the 48-bit MAC (between the company_id\
   and vendor-supplied id).  An example is the 48-bit IEEE MAC with\
   Global scope:\
\
   |0              1|1              3|3              4|\
   |0              5|6              1|2              7|\
   +----------------+----------------+----------------+\
   |cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|\
   +----------------+----------------+----------------+\
\
\
\
\
Hinden                      Standards Track                    [Page 20]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   where "c" is the bits of the assigned company_id, "0" is the value of\
   the universal/local bit to indicate Global scope, "g" is\
   individual/group bit, and "m" is the bits of the manufacturer-\
   selected extension identifier.  The interface identifier would be of\
   the form:\
\
   |0              1|1              3|3              4|4              6|\
   |0              5|6              1|2              7|8              3|\
   +----------------+----------------+----------------+----------------+\
   |cccccc1gcccccccc|cccccccc11111111|11111110mmmmmmmm|mmmmmmmmmmmmmmmm|\
   +----------------+----------------+----------------+----------------+\
\
   When IEEE 802 48-bit MAC addresses are available (on an interface or\
   a node), an implementation may use them to create interface\
   identifiers due to their availability and uniqueness properties.\
\
   Links with Other Kinds of Identifiers\
\
   There are a number of types of links that have link-layer interface\
   identifiers other than IEEE EUI-64 or IEEE 802 48-bit MACs.  Examples\
   include LocalTalk and Arcnet.  The method to create a Modified EUI-64\
   format identifier is to take the link identifier (e.g., the LocalTalk\
   8-bit node identifier) and zero fill it to the left.  For example, a\
   LocalTalk 8-bit node identifier of hexadecimal value 0x4F results in\
   the following interface identifier:\
\
   |0              1|1              3|3              4|4              6|\
   |0              5|6              1|2              7|8              3|\
   +----------------+----------------+----------------+----------------+\
   |0000000000000000|0000000000000000|0000000000000000|0000000001001111|\
   +----------------+----------------+----------------+----------------+\
\
   Note that this results in the universal/local bit set to "0" to\
   indicate local scope.\
\
   Links without Identifiers\
\
   There are a number of links that do not have any type of built-in\
   identifier.  The most common of these are serial links and configured\
   tunnels.  Interface identifiers that are unique within a subnet\
   prefix must be chosen.\
\
   When no built-in identifier is available on a link, the preferred\
   approach is to use a universal interface identifier from another\
   interface or one that is assigned to the node itself.  When using\
   this approach, no other interface connecting the same node to the\
   same subnet prefix may use the same identifier.\
\
\
\
\
Hinden                      Standards Track                    [Page 21]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
   If there is no universal interface identifier available for use on\
   the link, the implementation needs to create a local-scope interface\
   identifier.  The only requirement is that it be unique within a\
   subnet prefix.  There are many possible approaches to select a\
   subnet-prefix-unique interface identifier.  These include the\
   following:\
\
      Manual Configuration\
      Node Serial Number\
      Other Node-Specific Token\
\
   The subnet-prefix-unique interface identifier should be generated in\
   a manner such that it does not change after a reboot of a node or if\
   interfaces are added or deleted from the node.\
\
   The selection of the appropriate algorithm is link and implementation\
   dependent.  The details on forming interface identifiers are defined\
   in the appropriate "IPv6 over <link>" specification.  It is strongly\
   recommended that a collision detection algorithm be implemented as\
   part of any automatic algorithm.\
\
   Note: [EUI-64] actually defines 0xFF and 0xFF as the bits to be\
         inserted to create an IEEE EUI-64 identifier from an IEEE MAC-\
         48 identifier.  The 0xFF and 0xFE values are used when starting\
         with an IEEE EUI-48 identifier.  The incorrect value was used\
         in earlier versions of the specification due to a\
         misunderstanding about the differences between IEEE MAC-48 and\
         EUI-48 identifiers.\
\
         This document purposely continues the use of 0xFF and 0xFE\
         because it meets the requirements for IPv6 interface\
         identifiers (i.e., that they must be unique on the link), IEEE\
         EUI-48 and MAC-48 identifiers are syntactically equivalent, and\
         that it doesn't cause any problems in practice.\
\
Appendix B: Changes from RFC 3513\
\
   The following changes were made from RFC 3513, "IP Version 6\
   Addressing Architecture":\
\
    o The restrictions on using IPv6 anycast addresses were removed\
      because there is now sufficient experience with the use of anycast\
      addresses, the issues are not specific to IPv6, and the GROW\
      working group is working in this area.\
\
    o Deprecated the Site-Local unicast prefix.  Changes include the\
      following:\
\
\
\
\
Hinden                      Standards Track                    [Page 22]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
       - Removed Site-Local from special list of prefixes in Section\
         2.4.\
\
       - Split section titled "Local-use IPv6 Unicast Addresses" into\
         two sections, "Link-Local IPv6 Unicast Addresses" and "Site-\
         Local IPv6 Unicast Addresses".\
\
       - Added text to new section describing Site-Local deprecation.\
\
    o Changes to resolve issues raised in IAB response to Robert Elz\
      appeal.  Changes include the following:\
\
       - Added clarification to Section 2.5 that nodes should make no\
         assumptions about the structure of an IPv6 address.\
\
       - Changed the text in Section 2.5.1 and Appendix A to refer to\
         the Modified EUI-64 format interface identifiers with the "u"\
         bit set to one (1) as universal.\
\
       - Added clarification to Section 2.5.1 that IPv6 nodes are not\
         required to validate that interface identifiers created in\
         Modified EUI-64 format with the "u" bit set to one are unique.\
\
    o Changed the reference indicated in Section 2.5.4 "Global Unicast\
      Addresses" to RFC 3587.\
\
    o Removed mention of NSAP addresses in examples.\
\
    o Clarified that the "x" in the textual representation can be one to\
      four digits.\
\
    o Deprecated the "IPv6 Compatible Address" because it is not being\
      used in the IPv6 transition mechanisms.\
\
    o Added the "R" and "P" flags to Section 2.7 on multicast addresses,\
      and pointers to the documents that define them.\
\
    o Editorial changes.\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 23]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
Authors' Addresses\
\
   Robert M. Hinden\
   Nokia\
   313 Fairchild Drive\
   Mountain View, CA 94043\
   USA\
\
   Phone: +1 650 625-2004\
   EMail: bob.hinden@nokia.com\
\
\
   Stephen E. Deering\
   Cisco Systems, Inc.\
   170 West Tasman Drive\
   San Jose, CA 95134-1706\
   USA\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 24]\
\
RFC 4291              IPv6 Addressing Architecture         February 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Hinden                      Standards Track                    [Page 25]\
\

doc 7
  field 0
    name titolo
    type string
    value rfc4296.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          S. Bailey\
Request for Comments: 4296                                     Sandburst\
Category: Informational                                        T. Talpey\
                                                                  NetApp\
                                                           December 2005\
\
\
            The Architecture of Direct Data Placement (DDP)\
      and Remote Direct Memory Access (RDMA) on Internet Protocols\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document defines an abstract architecture for Direct Data\
   Placement (DDP) and Remote Direct Memory Access (RDMA) protocols to\
   run on Internet Protocol-suite transports.  This architecture does\
   not necessarily reflect the proper way to implement such protocols,\
   but is, rather, a descriptive tool for defining and understanding the\
   protocols.  DDP allows the efficient placement of data into buffers\
   designated by Upper Layer Protocols (e.g., RDMA).  RDMA provides the\
   semantics to enable Remote Direct Memory Access between peers in a\
   way consistent with application requirements.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 1]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Terminology ................................................2\
      1.2. DDP and RDMA Protocols .....................................3\
   2. Architecture ....................................................4\
      2.1. Direct Data Placement (DDP) Protocol Architecture ..........4\
           2.1.1. Transport Operations ................................6\
           2.1.2. DDP Operations ......................................7\
           2.1.3. Transport Characteristics in DDP ...................10\
      2.2. Remote Direct Memory Access (RDMA) Protocol Architecture ..12\
           2.2.1. RDMA Operations ....................................14\
           2.2.2. Transport Characteristics in RDMA ..................16\
   3. Security Considerations ........................................17\
      3.1. Security Services .........................................18\
      3.2. Error Considerations ......................................19\
   4. Acknowledgements ...............................................19\
   5. Informative References .........................................20\
\
1.  Introduction\
\
   This document defines an abstract architecture for Direct Data\
   Placement (DDP) and Remote Direct Memory Access (RDMA) protocols to\
   run on Internet Protocol-suite transports.  This architecture does\
   not necessarily reflect the proper way to implement such protocols,\
   but is, rather, a descriptive tool for defining and understanding the\
   protocols.  This document uses C language notation as a shorthand to\
   describe the architectural elements of DDP and RDMA protocols.  The\
   choice of C notation is not intended to describe concrete protocols\
   or programming interfaces.\
\
   The first part of the document describes the architecture of DDP\
   protocols, including what assumptions are made about the transports\
   on which DDP is built.  The second part describes the architecture of\
   RDMA protocols layered on top of DDP.\
\
1.1.  Terminology\
\
   Before introducing the protocols, certain definitions will be useful\
   to guide discussion:\
\
   o    Placement - writing to a data buffer.\
\
   o    Operation - a protocol message, or sequence of messages, which\
        provide an architectural semantic, such as reading or writing of\
        a data buffer.\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 2]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   o    Delivery - informing any Upper Layer or application that a\
        particular message is available for use.  Therefore, delivery\
        may be viewed as the "control" signal associated with a unit of\
        data.  Note that the order of delivery is defined more strictly\
        than it is for placement.\
\
   o    Completion - informing any Upper Layer or application that a\
        particular operation has finished.  A completion, for instance,\
        may require the delivery of several messages, or it may also\
        reflect that some local processing has finished.\
\
   o    Data Sink - the peer on which any placement occurs.\
\
   o    Data Source - the peer from which the placed data originates.\
\
   o    Steering Tag - a "handle" used to identify the buffer that is\
        the target of placement.  A "tagged" message is one that\
        references such a handle.\
\
   o    RDMA Write - an Operation that places data from a local data\
        buffer to a remote data buffer specified by a Steering Tag.\
\
   o    RDMA Read - an Operation that places data to a local data buffer\
        specified by a Steering Tag from a remote data buffer specified\
        by another Steering Tag.\
\
   o    Send - an Operation that places data from a local data buffer to\
        a remote data buffer of the data sink's choice.  Therefore,\
        sends are "untagged".\
\
1.2.  DDP and RDMA Protocols\
\
   The goal of the DDP protocol is to allow the efficient placement of\
   data into buffers designated by protocols layered above DDP (e.g.,\
   RDMA).  This is described in detail in [ROM].  Efficiency may be\
   characterized by the minimization of the number of transfers of the\
   data over the receiver's system buses.\
\
   The goal of the RDMA protocol is to provide the semantics to enable\
   Remote Direct Memory Access between peers in a way consistent with\
   application requirements.  The RDMA protocol provides facilities\
   immediately useful to existing and future networking, storage, and\
   other application protocols.  [FCVI, IB, MYR, SDP, SRVNET, VI]\
\
   The DDP and RDMA protocols work together to achieve their respective\
   goals.  DDP provides facilities to safely steer payloads to specific\
   buffers at the Data Sink.  RDMA provides facilities to Upper Layers\
   for identifying these buffers, controlling the transfer of data\
\
\
\
Bailey & Talpey              Informational                      [Page 3]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   between peers' buffers, supporting authorized bidirectional transfer\
   between buffers, and signalling completion.  Upper Layer Protocols\
   that do not require the features of RDMA may be layered directly on\
   top of DDP.\
\
   The DDP and RDMA protocols are transport independent.  The following\
   figure shows the relationship between RDMA, DDP, Upper Layer\
   Protocols, and Transport.\
\
          +--------------------------------------------------+\
          |               Upper Layer Protocol               |\
          +---------+------------+---------------------------+\
          |         |            |           RDMA            |\
          |         |            +---------------------------+\
          |         |                   DDP                  |\
          |         +----------------------------------------+\
          |                    Transport                     |\
          +--------------------------------------------------+\
\
2.  Architecture\
\
   The Architecture section is presented in two parts:  Direct Data\
   Placement Protocol architecture and Remote Direct Memory Access\
   Protocol architecture.\
\
2.1.  Direct Data Placement (DDP) Protocol Architecture\
\
   The central idea of general-purpose DDP is that a data sender will\
   supplement the data it sends with placement information that allows\
   the receiver's network interface to place the data directly at its\
   final destination without any copying.  DDP can be used to steer\
   received data to its final destination, without requiring layer-\
   specific behavior for each different layer.  Data sent with such DDP\
   information is said to be `tagged'.\
\
   The central components of the DDP architecture are the `buffer',\
   which is an object with beginning and ending addresses, and a method\
   (set()), which sets the value of an octet at an address.  In many\
   cases, a buffer corresponds directly to a portion of host user\
   memory.  However, DDP does not depend on this; a buffer could be a\
   disk file, or anything else that can be viewed as an addressable\
   collection of octets.  Abstractly, a buffer provides the interface:\
\
        typedef struct {\
          const address_t start;\
          const address_t end;\
          void            set(address_t a, data_t v);\
        } ddp_buffer_t;\
\
\
\
Bailey & Talpey              Informational                      [Page 4]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   address_t\
\
        a reference to local memory\
\
   data_t\
\
        an octet data value.\
\
   The protocol layering and in-line data flow of DDP is:\
\
                         DDP Client Protocol\
                  (e.g., RDMA or Upper Layer Protocol)\
                                |  ^\
              untagged messages |  | untagged message delivery\
                tagged messages |  | tagged message delivery\
                                v  |\
                                DDP+---> data placement\
                                 ^\
                                 | transport messages\
                                 v\
                             Transport\
                    (e.g., SCTP, DCCP, framed TCP)\
                                 ^\
                                 | IP datagrams\
                                 v\
                               . . .\
\
   In addition to in-line data flow, the client protocol registers\
   buffers with DDP, and DDP performs buffer update (set()) operations\
   as a result of receiving tagged messages.\
\
   DDP messages may be split into multiple, smaller DDP messages, each\
   in a separate transport message.  However, if the transport is\
   unreliable or unordered, messages split across transport messages may\
   or may not provide useful behavior, in the same way as splitting\
   arbitrary Upper Layer messages across unreliable or unordered\
   transport messages may or may not provide useful behavior.  In other\
   words, the same considerations apply to building client protocols on\
   different types of transports with or without the use of DDP.\
\
\
\
\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 5]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   A DDP message split across transport messages looks like:\
\
   DDP message:                Transport messages:\
\
     stag=s, offset=o,          message 1:\
     notify=y, id=i               |type=ddp  |\
     message=                     |stag=s    |\
       |aabbccddee|-------.       |offset=o  |\
       ~   ...    ~----.   \\      |notify=n  |\
       |vvwwxxyyzz|-.   \\   \\     |id=?      |\
                    |    \\   `--->|aabbccddee|\
                    |     \\       ~    ...   ~\
                    |      +----->|iijjkkllmm|\
                    |      |\
                    +      |    message 2:\
                     \\     |      |type=ddp  |\
                      \\    |      |stag=s    |\
                       \\   +      |offset=o+n|\
                        \\   \\     |notify=y  |\
                         \\   \\    |id=i      |\
                          \\   `-->|nnooppqqrr|\
                           \\      ~    ...   ~\
                            `---->|vvwwxxyyzz|\
\
   Although this picture suggests that DDP information is carried in-\
   line with the message payload, components of the DDP information may\
   also be in transport-specific fields, or derived from transport-\
   specific control information if the transport permits.\
\
2.1.1.  Transport Operations\
\
   For the purposes of this architecture, the transport provides:\
\
        void      xpt_send(socket_t s, message_t m);\
        message_t xpt_recv(socket_t s);\
        msize_t   xpt_max_msize(socket_t s);\
\
   socket_t\
\
        a transport address, including IP addresses, ports and other\
        transport-specific identifiers.\
\
   message_t\
\
        a string of octets.\
\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 6]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   msize_t (scalar)\
\
        a message size.\
\
   xpt_send(socket_t s, message_t m)\
\
        send a transport message.\
\
   xpt_recv(socket_t s)\
\
        receive a transport message.\
\
   xpt_max_msize(socket_t s)\
\
        get the current maximum transport message size.  Corresponds,\
        roughly, to the current path Maximum Transfer Unit (PMTU),\
        adjusted by underlying protocol overheads.\
\
   Real implementations of xpt_send() and xpt_recv() typically return\
   error indications, but that is not relevant to this architecture.\
\
2.1.2.  DDP Operations\
\
   The DDP layer provides:\
\
        void       ddp_send(socket_t s, message_t m);\
        void       ddp_send_ddp(socket_t s, message_t m, ddp_addr_t d,\
                                ddp_notify_t n);\
        void       ddp_post_recv(socket_t s, bdesc_t b);\
        ddp_ind_t  ddp_recv(socket_t s);\
        bdesc_t    ddp_register(socket_t s, ddp_buffer_t b);\
        void       ddp_deregister(bhand_t bh);\
        msizes_t   ddp_max_msizes(socket_t s);\
\
   ddp_addr_t\
\
        the buffer address portion of a tagged message:\
\
                typedef struct {\
                  stag_t stag;\
                  address_t offset;\
                } ddp_addr_t;\
\
   stag_t (scalar)\
\
        a Steering Tag.  A stag_t identifies the destination buffer for\
        tagged messages.  stag_ts are generated when the buffer is\
        registered, communicated to the sender by some client protocol\
\
\
\
Bailey & Talpey              Informational                      [Page 7]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
        convention and inserted in DDP messages.  stag_t values in this\
        DDP architecture are assumed to be completely opaque to the\
        client protocol, and implementation-dependent.  However,\
        particular implementations, such as DDP on a multicast transport\
        (see below), may provide the buffer holder some control in\
        selecting stag_ts.\
\
   ddp_notify_t\
\
        the notification portion of a DDP message, used to signal\
        that the message represents the final fragment of a\
        multi-segmented DDP message:\
\
                typedef struct {\
                  boolean_t notify;\
                  ddp_msg_id_t i;\
                } ddp_notify_t;\
\
   ddp_msg_id_t (scalar)\
\
        a DDP message identifier.  msg_id_ts are chosen by the DDP\
        message receiver (buffer holder), communicated to the sender by\
        some client protocol convention and inserted in DDP messages.\
        Whether a message reception indication is requested for a DDP\
        message is a matter of client protocol convention.  Unlike\
        stag_ts, the structure of msg_id_ts is opaque to DDP, and\
        therefore, it is completely in the hands of the client protocol.\
\
   bdesc_t\
\
        a description of a registered buffer:\
\
                typedef struct {\
                  bhand_t bh;\
                  ddp_addr_t a;\
                } bdesc_t;\
\
        `a.offset' is the starting offset of the registered buffer,\
        which may have no relationship to the `start' or `end' addresses\
        of that buffer.  However, particular implementations, such as\
        DDP on a multicast transport (see below), may allow some client\
        protocol control over the starting offset.\
\
   bhand_t\
\
        an opaque buffer handle used to deregister a buffer.\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 8]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   recv_message_t\
\
        a description of a completed untagged receive buffer:\
\
                typedef struct {\
                  bdesc_t b;\
                  length_t l;\
                } recv_message_t;\
\
   ddp_ind_t\
\
        an untagged message, a tagged message reception indication, or a\
        tagged message reception error:\
\
                typedef union {\
                  recv_message_t m;\
                  ddp_msg_id_t i;\
                  ddp_err_t e;\
                } ddp_ind_t;\
\
   ddp_err_t\
\
        indicates an error while receiving a tagged message, typically\
        `offset' out of bounds, or `stag' is not registered to the\
        socket.\
\
   msizes_t\
\
        The maximum untagged and tagged messages that fit in a single\
        transport message:\
\
                typedef struct {\
                  msize_t max_untagged;\
                  msize_t max_tagged;\
                } msizes_t;\
\
   ddp_send(socket_t s, message_t m)\
\
        send an untagged message.\
\
   ddp_send_ddp(socket_t s, message_t m, ddp_addr_t d, ddp_notify_t n)\
\
        send a tagged message to remote buffer address d.\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                      [Page 9]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   ddp_post_recv(socket_t s, bdesc_t b)\
\
        post a registered buffer to accept a single received untagged\
        message.  Each buffer is returned to the caller in a ddp_recv()\
        untagged message reception indication, in the order in which it\
        was posted.  The same buffer may be enabled on multiple sockets;\
        receipt of an untagged message into the buffer from any of these\
        sockets unposts the buffer from all sockets.\
\
   ddp_recv(socket_t s)\
\
        get the next received untagged message, tagged message reception\
        indication, or tagged message error.\
\
   ddp_register(socket_t s, ddp_buffer_t b)\
\
        register a buffer for DDP on a socket.  The same buffer may be\
        registered multiple times on the same or different sockets.  The\
        same buffer registered on different sockets may result in a\
        common registration.  Different buffers may also refer to\
        portions of the same underlying addressable object (buffer\
        aliasing).\
\
   ddp_deregister(bhand_t bh)\
\
        remove a registration from a buffer.\
\
   ddp_max_msizes(socket_t s)\
\
        get the current maximum untagged and tagged message sizes that\
        will fit in a single transport message.\
\
2.1.3.  Transport Characteristics in DDP\
\
   Certain characteristics of the transport on which DDP is mapped\
   determine the nature of the service provided to client protocols.\
   Fundamentally, the characteristics of the transport will not be\
   changed by the presence of DDP.  The choice of transport is therefore\
   driven not by DDP, but by the requirements of the Upper Layer, and\
   employing the DDP service.\
\
   Specifically, transports are:\
\
     o    reliable or unreliable,\
\
     o    ordered or unordered,\
\
     o    single source or multisource,\
\
\
\
Bailey & Talpey              Informational                     [Page 10]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
     o    single destination or multidestination (multicast or anycast).\
\
   Some transports support several combinations of these\
   characteristics.  For example, SCTP [SCTP] is reliable, single\
   source, single destination (point-to-point) and supports both ordered\
   and unordered modes.\
\
   DDP messages carried by transport are framed for processing by the\
   receiver, and may be further protected for integrity or privacy in\
   accordance with the transport capabilities.  DDP does not provide\
   such functions.\
\
   In general, transport characteristics equally affect transport and\
   DDP message delivery.  However, there are several issues specific to\
   DDP messages.\
\
   A key component of DDP is how the following operations on the\
   receiving side are ordered among themselves, and how they relate to\
   corresponding operations on the sending side:\
\
          o    set()s,\
\
          o    untagged message reception indications, and\
\
          o    tagged message reception indications.\
\
   These relationships depend upon the characteristics of the underlying\
   transport in a way that is defined by the DDP protocol.  For example,\
   if the transport is unreliable and unordered, the DDP protocol might\
   specify that the client protocol is subject to the consequences of\
   transport messages being lost or duplicated, rather than requiring\
   that different characteristics be presented to the client protocol.\
\
   Buffer access must be implemented consistently across endpoint IP\
   addresses on transports allowing multiple IP addresses per endpoint,\
   for example, SCTP.  In particular, the Steering Tag must be\
   consistently scoped and must address the same buffer across all IP\
   address associations belonging to the endpoint.  Additionally,\
   operation ordering relationships across IP addresses within an\
   association (set(), get(), etc.) depend on the underlying transport.\
   If the above consistency relationships cannot be maintained by a\
   transport endpoint, then the endpoint is unsuitable for a DDP\
   connection.\
\
   Multidestination data delivery is a transport characteristic that may\
   require specific consideration in a DDP protocol.  As mentioned\
   above, the basic DDP model assumes that buffer address values\
   returned by ddp_register() are opaque to the client protocol, and can\
\
\
\
Bailey & Talpey              Informational                     [Page 11]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   be implementation dependent.  The most natural way to map DDP to a\
   multidestination transport is to require that all receivers produce\
   the same buffer address when registering a multidestination\
   destination buffer.  Restriction of the DDP model to accommodate\
   multiple destinations involves engineering tradeoffs comparable to\
   those of providing non-DDP multidestination transport capability.\
\
   A registered buffer is identified within DDP by its stag_t, which in\
   turn is associated with a socket.  Therefore, this registration\
   grants a capability to the DDP peer, and the socket (using the\
   underlying properties of its chosen transport and possible security)\
   identifies the peer and authenticates the stag_t.\
\
   The same buffer may be enabled by ddp_post_recv() on multiple\
   sockets.  In this case any ddp_recv() untagged message reception\
   indication may be provided on a different socket from that on which\
   the buffer was posted.  Such indications are not ordered among\
   multiple DDP sockets.\
\
   When multiple sockets reference an untagged message reception buffer,\
   local interfaces are responsible for managing the mechanisms of\
   allocating posted buffers to received untagged messages, the handling\
   of received untagged messages when no buffer is available, and of\
   resource management among multiple sockets.  Where underprovisioning\
   of buffers on multiple sockets is allowed, mechanisms should be\
   provided to manage buffer consumption on a per-socket or group of\
   related sockets basis.\
\
   Architecturally, therefore, DDP is a flexible and general paradigm\
   that may be applied to any variety of transports.  Implementations of\
   DDP may, however, adapt themselves to these differences in ways\
   appropriate to each transport.  In all cases, the layering of DDP\
   must continue to express the transport's underlying characteristics.\
\
2.2.  Remote Direct Memory Access (RDMA) Protocol Architecture\
\
   Remote Direct Memory Access (RDMA) extends the capabilities of DDP\
   with two primary functions.\
\
   First, it adds the ability to read from buffers registered to a\
   socket (RDMA Read).  This allows a client protocol to perform\
   arbitrary, bidirectional data movement without involving the remote\
   client.  When RDMA is implemented in hardware, arbitrary data\
   movement can be performed without involving the remote host CPU at\
   all.\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 12]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   In addition, RDMA specifies a transport-independent untagged message\
   service (Send) with characteristics that are both very efficient to\
   implement in hardware, and convenient for client protocols.\
\
   The RDMA architecture is patterned after the traditional model for\
   device programming, where the client requests an operation using\
   Send-like actions (programmed I/O), the server performs the necessary\
   data transfers for the operation (DMA reads and writes), and notifies\
   the client of completion.  The programmed I/O+DMA model efficiently\
   supports a high degree of concurrency and flexibility for both the\
   client and server, even when operations have a wide range of\
   intrinsic latencies.\
\
   RDMA is layered as a client protocol on top of DDP:\
\
                      Client Protocol\
                           |  ^\
                     Sends |  | Send reception indications\
        RDMA Read Requests |  | RDMA Read Completion indications\
               RDMA Writes |  | RDMA Write Completion indications\
                           v  |\
                           RDMA\
                           |  ^\
         untagged messages |  | untagged message delivery\
           tagged messages |  | tagged message delivery\
                           v  |\
                           DDP+---> data placement\
                            ^\
                            | transport messages\
                            v\
                          . . .\
\
   In addition to in-line data flow, read (get()) and update (set())\
   operations are performed on buffers registered with RDMA as a result\
   of RDMA Read Requests and RDMA Writes, respectively.\
\
   An RDMA `buffer' extends a DDP buffer with a get() operation that\
   retrieves the value of the octet at address `a':\
\
           typedef struct {\
             const address_t start;\
             const address_t end;\
             void            set(address_t a, data_t v);\
             data_t          get(address_t a);\
           } rdma_buffer_t;\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 13]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
2.2.1.  RDMA Operations\
\
   The RDMA layer provides:\
\
        void        rdma_send(socket_t s, message_t m);\
        void        rdma_write(socket_t s, message_t m, ddp_addr_t d,\
                               rdma_notify_t n);\
        void        rdma_read(socket_t s, ddp_addr_t s, ddp_addr_t d);\
        void        rdma_post_recv(socket_t s, bdesc_t b);\
        rdma_ind_t  rdma_recv(socket_t s);\
        bdesc_t     rdma_register(socket_t s, rdma_buffer_t b,\
                               bmode_t mode);\
        void        rdma_deregister(bhand_t bh);\
        msizes_t    rdma_max_msizes(socket_t s);\
\
   Although, for clarity, these data transfer interfaces are\
   synchronous, rdma_read() and possibly rdma_send() (in the presence of\
   Send flow control) can require an arbitrary amount of time to\
   complete.  To express the full concurrency and interleaving of RDMA\
   data transfer, these interfaces should also be reentrant.  For\
   example, a client protocol may perform an rdma_send(), while an\
   rdma_read() operation is in progress.\
\
   rdma_notify_t\
\
        RDMA Write notification information, used to signal that the\
        message represents the final fragment of a multi-segmented RDMA\
        message:\
\
                typedef struct {\
                  boolean_t notify;\
                  rdma_write_id_t i;\
                } rdma_notify_t;\
\
        identical in function to ddp_notify_t, except that the type\
        rdma_write_id_t may not be equivalent to ddp_msg_id_t.\
\
   rdma_write_id_t (scalar)\
\
        an RDMA Write identifier.\
\
\
\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 14]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   rdma_ind_t\
\
        a Send message, or an RDMA error:\
\
                typedef union {\
                  recv_message_t m;\
                  rdma_err_t e;\
                } rdma_ind_t;\
\
   rdma_err_t\
\
        an RDMA protocol error indication.  RDMA errors include buffer\
        addressing errors corresponding to ddp_err_ts, and buffer\
        protection violations (e.g., RDMA Writing a buffer only\
        registered for reading).\
\
   bmode_t\
\
        buffer registration mode (permissions).  Any combination of\
        permitting RDMA Read (BMODE_READ) and RDMA Write (BMODE_WRITE)\
        operations.\
\
   rdma_send(socket_t s, message_t m)\
\
        send a message, delivering it to the next untagged RDMA buffer\
        at the remote peer.\
\
   rdma_write(socket_t s, message_t m, ddp_addr_t d, rdma_notify_t n)\
\
        RDMA Write to remote buffer address d.\
\
   rdma_read(socket_t s, ddp_addr_t s, length_t l, ddp_addr_t d)\
\
        RDMA Read l octets from remote buffer address s to local buffer\
        address d.\
\
   rdma_post_recv(socket_t s, bdesc_t b)\
\
        post a registered buffer to accept a single Send message, to be\
        filled and returned in-order to a subsequent caller of\
        rdma_recv().  As with DDP, buffers may be enabled on multiple\
        sockets, in which case ordering guarantees are relaxed.  Also as\
        with DDP, local interfaces must manage the mechanisms of\
        allocation and management of buffers posted to multiple sockets.\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 15]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   rdma_recv(socket_t s);\
\
        get the next received Send message, RDMA Write completion\
        identifier, or RDMA error.\
\
   rdma_register(socket_t s, rdma_buffer_t b, bmode_t mode)\
\
        register a buffer for RDMA on a socket (for read access, write\
        access or both).  As with DDP, the same buffer may be registered\
        multiple times on the same or different sockets, and different\
        buffers may refer to portions of the same underlying addressable\
        object.\
\
   rdma_deregister(bhand_t bh)\
\
        remove a registration from a buffer.\
\
   rdma_max_msizes(socket_t s)\
\
        get the current maximum Send (max_untagged) and RDMA Read or\
        Write (max_tagged) operations that will fit in a single\
        transport message.  The values returned by rdma_max_msizes() are\
        closely related to the values returned by ddp_max_msizes(), but\
        may not be equal.\
\
2.2.2.  Transport Characteristics in RDMA\
\
   As with DDP, RDMA can be used on transports with a variety of\
   different characteristics that manifest themselves directly in the\
   service provided by RDMA.  Also, as with DDP, the fundamental\
   characteristics of the transport will not be changed by the presence\
   of RDMA.\
\
   Like DDP, an RDMA protocol must specify how:\
\
          o    set()s,\
\
          o    get()s,\
\
          o    Send messages, and\
\
          o    RDMA Read completions\
\
   are ordered among themselves and how they relate to corresponding\
   operations on the remote peer(s).  These relationships are likely to\
   be a function of the underlying transport characteristics.\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 16]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   There are some additional characteristics of RDMA that may translate\
   poorly to unreliable or multipoint transports due to attendant\
   complexities in managing endpoint state:\
\
     o    Send flow control\
\
     o    RDMA Read\
\
   These difficulties can be overcome by placing restrictions on the\
   service provided by RDMA.  However, many RDMA clients, especially\
   those that separate data transfer and application logic concerns, are\
   likely to depend upon capabilities only provided by RDMA on a point-\
   to-point, reliable transport.  In other words, many potential Upper\
   Layers, which might avail themselves of RDMA services, are naturally\
   already biased toward these transport classes.\
\
3.  Security Considerations\
\
   Fundamentally, the DDP and RDMA protocols themselves should not\
   introduce additional vulnerabilities.  They are intermediate\
   protocols and so should not perform or require functions such as\
   authorization, which are the domain of Upper Layers.  However, the\
   DDP and RDMA protocols should allow mapping by strict Upper Layers\
   that are not permissive of new vulnerabilities; DDP and RDMAP\
   implementations should be prohibited from `cutting corners' that\
   create new vulnerabilities.  Implementations must ensure that only\
   `supplied' resources (i.e., buffers) can be manipulated by DDP or\
   RDMAP messages.\
\
   System integrity must be maintained in any RDMA solution.  Mechanisms\
   must be specified to prevent RDMA or DDP operations from impairing\
   system integrity.  For example, threats can include potential buffer\
   reuse or buffer overflow, and are not merely a security issue.  Even\
   trusted peers must not be allowed to damage local integrity.  Any DDP\
   and RDMA protocol must address the issue of giving end-systems and\
   applications the capabilities to offer protection from such\
   compromises.\
\
   Because a Steering Tag exports access to a buffer, one critical\
   aspect of security is the scope of this access.  It must be possible\
   to individually control specific attributes of the access provided by\
   a Steering Tag on the endpoint (socket) on which it was registered,\
   including remote read access, remote write access, and others that\
   might be identified.  DDP and RDMA specifications must provide both\
   implementation requirements relevant to this issue, and guidelines to\
   assist implementors in making the appropriate design decisions.\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 17]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   For example, it must not be possible for DDP to enable evasion of\
   buffer consistency checks at the recipient.  The DDP and RDMA\
   specifications must allow the recipient to rely on its consistent\
   buffer contents by explicitly controlling peer access to buffer\
   regions at appropriate times.\
\
   The use of DDP and RDMA on a transport connection may interact with\
   any security mechanism, and vice-versa.  For example, if the security\
   mechanism is implemented above the transport layer, the DDP and RDMA\
   headers may not be protected.  Therefore, such a layering may be\
   inappropriate, depending on requirements.\
\
3.1.  Security Services\
\
   The following end-to-end security services protect DDP and RDMAP\
   operation streams:\
\
     o    Authentication of the data source, to protect against peer\
          impersonation, stream hijacking, and man-in-the-middle attacks\
          exploiting capabilities offered by the RDMA implementation.\
\
          Peer connections that do not pass authentication and\
          authorization checks must not be permitted to begin processing\
          in RDMA mode with an inappropriate endpoint.  Once associated,\
          peer accesses to buffer regions must be authenticated and made\
          subject to authorization checks in the context of the\
          association and endpoint (socket) on which they are to be\
          performed, prior to any transfer operation or data being\
          accessed.  The RDMA protocols must ensure that these region\
          protections be under strict application control.\
\
     o    Integrity, to protect against modification of the control\
          content and buffer content.\
\
          While integrity is of concern to any transport, it is\
          important for the DDP and RDMAP protocols that the RDMA\
          control information carried in each operation be protected, in\
          order to direct the payloads appropriately.\
\
     o    Sequencing, to protect against replay attacks (a special case\
          of the above modifications).\
\
     o    Confidentiality, to protect the stream from eavesdropping.\
\
   IPsec, operating to secure the connection on a packet-by-packet\
   basis, is a natural fit to securing RDMA placement, which operates in\
   conjunction with transport.  Because RDMA enables an implementation\
   to avoid buffering, it is preferable to perform all applicable\
\
\
\
Bailey & Talpey              Informational                     [Page 18]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
   security protection prior to processing of each segment by the\
   transport and RDMA layers.  Such a layering enables the most\
   efficient secure RDMA implementation.\
\
   The TLS record protocol, on the other hand, is layered on top of\
   reliable transports and cannot provide such security assurance until\
   an entire record is available, which may require the buffering and/or\
   assembly of several distinct messages prior to TLS processing.  This\
   defers RDMA processing and introduces overheads that RDMA is designed\
   to avoid.  In addition, TLS length restrictions on records themselves\
   impose additional buffering and processing for long operations that\
   must span multiple records.  TLS therefore is viewed as potentially a\
   less natural fit for protecting the RDMA protocols.\
\
   Any DDP and RDMAP specification must provide the means to satisfy the\
   above security service requirements.\
\
   IPsec is sufficient to provide the required security services to the\
   DDP and RDMAP protocols, while enabling efficient implementations.\
\
3.2.  Error Considerations\
\
   Resource issues leading to denial-of-service attacks, overwrites and\
   other concurrent operations, the ordering of completions as required\
   by the RDMA protocol, and the granularity of transfer are all within\
   the required scope of any security analysis of RDMA and DDP.\
\
   The RDMA operations require checking of what is essentially user\
   information, explicitly including addressing information and\
   operation type (read or write), and implicitly including protection\
   and attributes.  The semantics associated with each class of error\
   resulting from possible failure of such checks must be clearly\
   defined, and the expected action to be taken by the protocols in each\
   case must be specified.\
\
   In some cases, this will result in a catastrophic error on the RDMA\
   association; however, in others, a local or remote error may be\
   signalled.  Certain of these errors may require consideration of\
   abstract local semantics.  The result of the error on the RDMA\
   association must be carefully specified so as to provide useful\
   behavior, while not constraining the implementation.\
\
4.  Acknowledgements\
\
   The authors wish to acknowledge the valuable contributions of Caitlin\
   Bestler, David Black, Jeff Mogul, and Allyn Romanow.\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 19]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
5.  Informative References\
\
   [FCVI]   ANSI Technical Committee T11, "Fibre Channel Standard\
            Virtual Interface Architecture Mapping", ANSI/NCITS 357-\
            2001, March 2001, available from\
            http://www.t11.org/t11/stat.nsf/fcproj.\
\
   [IB]     InfiniBand Trade Association, "InfiniBand Architecture\
            Specification Volumes 1 and 2", Release 1.1, November 2002,\
            available from http://www.infinibandta.org/specs.\
\
   [MYR]    VMEbus International Trade Association, "Myrinet on VME\
            Protocol Specification", ANSI/VITA 26-1998, August 1998,\
            available from http://www.myri.com/open-specs.\
\
   [ROM]    Romanow, A., Mogul, J., Talpey, T., and S. Bailey, "Remote\
            Direct Memory Access (RDMA) over IP Problem Statement", RFC\
            4297, December 2005.\
\
   [SCTP]   Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\
            Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M., Zhang,\
            L., and V. Paxson, "Stream Control Transmission Protocol",\
            RFC 2960, October 2000.\
\
   [SDP]    InfiniBand Trade Association, "Sockets Direct Protocol\
            v1.0", Annex A of InfiniBand Architecture Specification\
            Volume 1, Release 1.1, November 2002, available from\
            http://www.infinibandta.org/specs.\
\
   [SRVNET] R. Horst, "TNet: A reliable system area network", IEEE\
            Micro, pp. 37-45, February 1995.\
\
   [VI]     D. Cameron and G. Regnier, "The Virtual Interface\
            Architecture", ISBN 0971288704, Intel Press, April 2002,\
            more info at http://www.intel.com/intelpress/via/.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 20]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
Authors' Addresses\
\
   Stephen Bailey\
   Sandburst Corporation\
   600 Federal Street\
   Andover, MA  01810 USA\
   USA\
\
   Phone: +1 978 689 1614\
   EMail: steph@sandburst.com\
\
\
   Tom Talpey\
   Network Appliance\
   1601 Trapelo Road\
   Waltham, MA  02451 USA\
\
   Phone: +1 781 768 5329\
   EMail: thomas.talpey@netapp.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 21]\
\
RFC 4296               DDP and RDMA Architecture           December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Bailey & Talpey              Informational                     [Page 22]\
\

doc 8
  field 0
    name titolo
    type string
    value rfc4294.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                   J. Loughney, Ed.\
Request for Comments: 4294                                         Nokia\
Category: Informational                                       April 2006\
\
\
                         IPv6 Node Requirements\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document defines requirements for IPv6 nodes.  It is expected\
   that IPv6 will be deployed in a wide range of devices and situations.\
   Specifying the requirements for IPv6 nodes allows IPv6 to function\
   well and interoperate in a large number of situations and\
   deployments.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Requirement Language .......................................3\
      1.2. Scope of This Document .....................................3\
      1.3. Description of IPv6 Nodes ..................................3\
   2. Abbreviations Used in This Document .............................3\
   3. Sub-IP Layer ....................................................4\
      3.1. Transmission of IPv6 Packets over Ethernet Networks\
           - RFC 2464 .................................................4\
      3.2. IP version 6 over PPP - RFC 2472 ...........................4\
      3.3. IPv6 over ATM Networks - RFC 2492 ..........................4\
   4. IP Layer ........................................................5\
      4.1. Internet Protocol Version 6 - RFC 2460 .....................5\
      4.2. Neighbor Discovery for IPv6 - RFC 2461 .....................5\
      4.3. Path MTU Discovery and Packet Size .........................6\
      4.4. ICMP for the Internet Protocol Version 6 (IPv6) -\
           RFC 2463 ...................................................7\
      4.5. Addressing .................................................7\
      4.6. Multicast Listener Discovery (MLD) for IPv6 - RFC 2710 .....8\
   5. DNS and DHCP ....................................................8\
      5.1. DNS ........................................................8\
\
\
\
\
Loughney                     Informational                      [Page 1]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
      5.2. Dynamic Host Configuration Protocol for IPv6\
           (DHCPv6) - RFC 3315 ........................................9\
   6. IPv4 Support and Transition ....................................10\
      6.1. Transition Mechanisms .....................................10\
   7. Mobile IP ......................................................10\
   8. Security .......................................................10\
      8.1. Basic Architecture ........................................10\
      8.2. Security Protocols ........................................11\
      8.3. Transforms and Algorithms .................................11\
      8.4. Key Management Methods ....................................12\
   9. Router-Specific Functionality ..................................12\
      9.1. General ...................................................12\
   10. Network Management ............................................12\
      10.1. Management Information Base Modules (MIBs) ...............12\
   11. Security Considerations .......................................13\
   12. References ....................................................13\
      12.1. Normative References .....................................13\
      12.2. Informative References ...................................16\
   13. Authors and Acknowledgements ..................................18\
\
1.  Introduction\
\
   The goal of this document is to define the common functionality\
   required from both IPv6 hosts and routers.  Many IPv6 nodes will\
   implement optional or additional features, but this document\
   summarizes requirements from other published Standards Track\
   documents in one place.\
\
   This document tries to avoid discussion of protocol details, and\
   references RFCs for this purpose.  This document is informational in\
   nature and does not update Standards Track RFCs.\
\
   Although the document points to different specifications, it should\
   be noted that in most cases, the granularity of requirements are\
   smaller than a single specification, as many specifications define\
   multiple, independent pieces, some of which may not be mandatory.\
\
   As it is not always possible for an implementer to know the exact\
   usage of IPv6 in a node, an overriding requirement for IPv6 nodes is\
   that they should adhere to Jon Postel's Robustness Principle:\
\
      Be conservative in what you do, be liberal in what you accept from\
      others [RFC-793].\
\
\
\
\
\
\
\
\
Loughney                     Informational                      [Page 2]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
1.1.  Requirement Language\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [RFC-2119].\
\
1.2.  Scope of This Document\
\
   IPv6 covers many specifications.  It is intended that IPv6 will be\
   deployed in many different situations and environments.  Therefore,\
   it is important to develop the requirements for IPv6 nodes to ensure\
   interoperability.\
\
   This document assumes that all IPv6 nodes meet the minimum\
   requirements specified here.\
\
1.3.  Description of IPv6 Nodes\
\
   From the Internet Protocol, Version 6 (IPv6) Specification\
   [RFC-2460], we have the following definitions:\
\
      Description of an IPv6 Node\
\
         -  a device that implements IPv6.\
\
      Description of an IPv6 router\
\
         -  a node that forwards IPv6 packets not explicitly addressed\
            to itself.\
\
      Description of an IPv6 Host\
\
      -  any node that is not a router.\
\
2.  Abbreviations Used in This Document\
\
   ATM   Asynchronous Transfer Mode\
\
   AH    Authentication Header\
\
   DAD   Duplicate Address Detection\
\
   ESP   Encapsulating Security Payload\
\
   ICMP  Internet Control Message Protocol\
\
   IKE   Internet Key Exchange\
\
\
\
\
Loughney                     Informational                      [Page 3]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
   MIB   Management Information Base\
\
   MLD   Multicast Listener Discovery\
\
   MTU   Maximum Transfer Unit\
\
   NA    Neighbor Advertisement\
\
   NBMA  Non-Broadcast Multiple Access\
\
   ND    Neighbor Discovery\
\
   NS    Neighbor Solicitation\
\
   NUD   Neighbor Unreachability Detection\
\
   PPP   Point-to-Point Protocol\
\
   PVC   Permanent Virtual Circuit\
\
   SVC   Switched Virtual Circuit\
\
3.  Sub-IP Layer\
\
   An IPv6 node must include support for one or more IPv6 link-layer\
   specifications.  Which link-layer specifications are included will\
   depend upon what link-layers are supported by the hardware available\
   on the system.  It is possible for a conformant IPv6 node to support\
   IPv6 on some of its interfaces and not on others.\
\
   As IPv6 is run over new layer 2 technologies, it is expected that new\
   specifications will be issued.  This section highlights some major\
   layer 2 technologies and is not intended to be complete.\
\
3.1.  Transmission of IPv6 Packets over Ethernet Networks - RFC 2464\
\
   Nodes supporting IPv6 over Ethernet interfaces MUST implement\
   Transmission of IPv6 Packets over Ethernet Networks [RFC-2464].\
\
3.2.  IP version 6 over PPP - RFC 2472\
\
   Nodes supporting IPv6 over PPP MUST implement IPv6 over PPP\
   [RFC-2472].\
\
3.3.  IPv6 over ATM Networks - RFC 2492\
\
   Nodes supporting IPv6 over ATM Networks MUST implement IPv6 over ATM\
   Networks [RFC-2492].  Additionally, RFC 2492 states:\
\
\
\
Loughney                     Informational                      [Page 4]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
      A minimally conforming IPv6/ATM driver SHALL support the PVC mode\
      of operation.  An IPv6/ATM driver that supports the full SVC mode\
      SHALL also support PVC mode of operation.\
\
4.  IP Layer\
\
4.1.  Internet Protocol Version 6 - RFC 2460\
\
   The Internet Protocol Version 6 is specified in [RFC-2460].  This\
   specification MUST be supported.\
\
   Unrecognized options in Hop-by-Hop Options or Destination Options\
   extensions MUST be processed as described in RFC 2460.\
\
   The node MUST follow the packet transmission rules in RFC 2460.\
\
   Nodes MUST always be able to send, receive, and process fragment\
   headers.  All conformant IPv6 implementations MUST be capable of\
   sending and receiving IPv6 packets; the forwarding functionality MAY\
   be supported.\
\
   RFC 2460 specifies extension headers and the processing for these\
   headers.\
\
      A full implementation of IPv6 includes implementation of the\
      following extension headers: Hop-by-Hop Options, Routing (Type 0),\
      Fragment, Destination Options, Authentication and Encapsulating\
      Security Payload [RFC-2460].\
\
   An IPv6 node MUST be able to process these headers.  It should be\
   noted that there is some discussion about the use of Routing Headers\
   and possible security threats [IPv6-RH] that they cause.\
\
4.2.  Neighbor Discovery for IPv6 - RFC 2461\
\
   Neighbor Discovery SHOULD be supported.  [RFC-2461] states:\
\
      "Unless specified otherwise (in a document that covers operating\
      IP over a particular link type) this document applies to all link\
      types.  However, because ND uses link-layer multicast for some of\
      its services, it is possible that on some link types (e.g., NBMA\
      links) alternative protocols or mechanisms to implement those\
      services will be specified (in the appropriate document covering\
      the operation of IP over a particular link type).  The services\
      described in this document that are not directly dependent on\
      multicast, such as Redirects, Next-hop determination, Neighbor\
      Unreachability Detection, etc., are expected to be provided as\
\
\
\
\
Loughney                     Informational                      [Page 5]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
      specified in this document.  The details of how one uses ND on\
      NBMA links is an area for further study."\
\
   Some detailed analysis of Neighbor Discovery follows:\
\
   Router Discovery is how hosts locate routers that reside on an\
   attached link.  Router Discovery MUST be supported for\
   implementations.\
\
   Prefix Discovery is how hosts discover the set of address prefixes\
   that define which destinations are on-link for an attached link.\
   Prefix discovery MUST be supported for implementations.  Neighbor\
   Unreachability Detection (NUD) MUST be supported for all paths\
   between hosts and neighboring nodes.  It is not required for paths\
   between routers.  However, when a node receives a unicast Neighbor\
   Solicitation (NS) message (that may be a NUD's NS), the node MUST\
   respond to it (i.e., send a unicast Neighbor Advertisement).\
\
   Duplicate Address Detection MUST be supported on all links supporting\
   link-layer multicast (RFC 2462, Section 5.4, specifies DAD MUST take\
   place on all unicast addresses).\
\
   A host implementation MUST support sending Router Solicitations.\
\
   Receiving and processing Router Advertisements MUST be supported for\
   host implementations.  The ability to understand specific Router\
   Advertisement options is dependent on supporting the specification\
   where the RA is specified.\
\
   Sending and Receiving Neighbor Solicitation (NS) and Neighbor\
   Advertisement (NA) MUST be supported.  NS and NA messages are\
   required for Duplicate Address Detection (DAD).\
\
   Redirect functionality SHOULD be supported.  If the node is a router,\
   Redirect functionality MUST be supported.\
\
4.3.  Path MTU Discovery and Packet Size\
\
4.3.1.  Path MTU Discovery - RFC 1981\
\
   Path MTU Discovery [RFC-1981] SHOULD be supported, though minimal\
   implementations MAY choose to not support it and avoid large packets.\
   The rules in RFC 2460 MUST be followed for packet fragmentation and\
   reassembly.\
\
4.3.2.  IPv6 Jumbograms - RFC 2675\
\
   IPv6 Jumbograms [RFC-2675] MAY be supported.\
\
\
\
Loughney                     Informational                      [Page 6]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
4.4.  ICMP for the Internet Protocol Version 6 (IPv6) - RFC 2463\
\
   ICMPv6 [RFC-2463] MUST be supported.\
\
4.5.  Addressing\
\
4.5.1.  IP Version 6 Addressing Architecture - RFC 3513\
\
   The IPv6 Addressing Architecture [RFC-3513] MUST be supported as\
   updated by [RFC-3879].\
\
4.5.2.  IPv6 Stateless Address Autoconfiguration - RFC 2462\
\
   IPv6 Stateless Address Autoconfiguration is defined in [RFC-2462].\
   This specification MUST be supported for nodes that are hosts.\
   Static address can be supported as well.\
\
   Nodes that are routers MUST be able to generate link local addresses\
   as described in RFC 2462 [RFC-2462].\
\
   From 2462:\
\
      The autoconfiguration process specified in this document applies\
      only to hosts and not routers.  Since host autoconfiguration uses\
      information advertised by routers, routers will need to be\
      configured by some other means.  However, it is expected that\
      routers will generate link-local addresses using the mechanism\
      described in this document.  In addition, routers are expected to\
      successfully pass the Duplicate Address Detection procedure\
      described in this document on all addresses prior to assigning\
      them to an interface.\
\
   Duplicate Address Detection (DAD) MUST be supported.\
\
4.5.3.  Privacy Extensions for Address Configuration in IPv6 - RFC 3041\
\
   Privacy Extensions for Stateless Address Autoconfiguration [RFC-3041]\
   SHOULD be supported.  It is recommended that this behavior be\
   configurable on a connection basis within each application when\
   available.  It is noted that a number of applications do not work\
   with addresses generated with this method, while other applications\
   work quite well with them.\
\
4.5.4.  Default Address Selection for IPv6 - RFC 3484\
\
   The rules specified in the Default Address Selection for IPv6\
   [RFC-3484] document MUST be implemented.  It is expected that IPv6\
   nodes will need to deal with multiple addresses.\
\
\
\
Loughney                     Informational                      [Page 7]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
4.5.5.  Stateful Address Autoconfiguration\
\
   Stateful Address Autoconfiguration MAY be supported.  DHCPv6\
   [RFC-3315] is the standard stateful address configuration protocol;\
   see Section 5.3 for DHCPv6 support.\
\
   Nodes which do not support Stateful Address Autoconfiguration may be\
   unable to obtain any IPv6 addresses, aside from link-local addresses,\
   when it receives a router advertisement with the 'M' flag (Managed\
   address configuration) set and that contains no prefixes advertised\
   for Stateless Address Autoconfiguration (see Section 4.5.2).\
   Additionally, such nodes will be unable to obtain other configuration\
   information, such as the addresses of DNS servers when it is\
   connected to a link over which the node receives a router\
   advertisement in which the 'O' flag ("Other stateful configuration")\
   is set.\
\
4.6.  Multicast Listener Discovery (MLD) for IPv6 - RFC 2710\
\
   Nodes that need to join multicast groups SHOULD implement MLDv2\
   [RFC-3810].  However, if the node has applications that only need\
   support for Any-Source Multicast [RFC-3569], the node MAY implement\
   MLDv1 [RFC-2710] instead.  If the node has applications that need\
   support for Source-Specific Multicast [RFC-3569, SSM-ARCH], the node\
   MUST support MLDv2 [RFC-3810].\
\
   When MLD is used, the rules in the "Source Address Selection for the\
   Multicast Listener Discovery (MLD) Protocol" [RFC-3590] MUST be\
   followed.\
\
5.  DNS and DHCP\
\
5.1.  DNS\
\
   DNS is described in [RFC-1034], [RFC-1035], [RFC-3152], [RFC-3363],\
   and [RFC-3596].  Not all nodes will need to resolve names; those that\
   will never need to resolve DNS names do not need to implement\
   resolver functionality.  However, the ability to resolve names is a\
   basic infrastructure capability that applications rely on and\
   generally needs to be supported.  All nodes that need to resolve\
   names SHOULD implement stub-resolver [RFC-1034] functionality, as in\
   RFC 1034, Section 5.3.1, with support for:\
\
      -  AAAA type Resource Records [RFC-3596];\
\
      -  reverse addressing in ip6.arpa using PTR records [RFC-3152];\
\
\
\
\
\
Loughney                     Informational                      [Page 8]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
      -  EDNS0 [RFC-2671] to allow for DNS packet sizes larger than 512\
         octets.\
\
   Those nodes are RECOMMENDED to support DNS security extensions\
   [RFC-4033], [RFC-4034], and [RFC-4035].\
\
   Those nodes are NOT RECOMMENDED to support the experimental A6 and\
   DNAME Resource Records [RFC-3363].\
\
5.2.  Dynamic Host Configuration Protocol for IPv6 (DHCPv6) - RFC 3315\
\
5.2.1.  Managed Address Configuration\
\
   The method by which IPv6 nodes that use DHCP for address assignment\
   can obtain IPv6 addresses and other configuration information upon\
   receipt of a Router Advertisement with the 'M' flag set is described\
   in Section 5.5.3 of RFC 2462.\
\
   In addition, in the absence of a router, those IPv6 nodes that use\
   DHCP for address assignment MUST initiate DHCP to obtain IPv6\
   addresses and other configuration information, as described in\
   Section 5.5.2 of RFC 2462.  Those IPv6 nodes that do not use DHCP for\
   address assignment can ignore the 'M' flag in Router Advertisements.\
\
5.2.2.  Other Configuration Information\
\
   The method by which IPv6 nodes that use DHCP to obtain other\
   configuration information can obtain other configuration information\
   upon receipt of a Router Advertisement with the 'O' flag set is\
   described in Section 5.5.3 of RFC 2462.\
\
   Those IPv6 nodes that use DHCP to obtain other configuration\
   information initiate DHCP for other configuration information upon\
   receipt of a Router Advertisement with the 'O' flag set, as described\
   in Section 5.5.3 of RFC 2462.  Those IPv6 nodes that do not use DHCP\
   for other configuration information can ignore the 'O' flag in Router\
   Advertisements.\
\
   An IPv6 node can use the subset of DHCP (described in [RFC-3736]) to\
   obtain other configuration information.\
\
5.3.3.  Use of Router Advertisements in Managed Environments\
\
   Nodes using the Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\
   are expected to determine their default router information and on-\
   link prefix information from received Router Advertisements.\
\
\
\
\
\
Loughney                     Informational                      [Page 9]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
6.  IPv4 Support and Transition\
\
   IPv6 nodes MAY support IPv4.\
\
6.1.  Transition Mechanisms\
\
6.1.1.  Transition Mechanisms for IPv6 Hosts and Routers - RFC 2893\
\
   If an IPv6 node implements dual stack and tunneling, then [RFC-4213]\
   MUST be supported.\
\
7.  Mobile IP\
\
   The Mobile IPv6 [RFC-3775] specification defines requirements for the\
   following types of nodes:\
\
      -  mobile nodes\
\
      -  correspondent nodes with support for route optimization\
\
      -  home agents\
\
      -  all IPv6 routers\
\
   Hosts MAY support mobile node functionality described in Section 8.5\
   of [RFC-3775], including support of generic packet tunneling [RFC-\
   2473] and secure home agent communications [RFC-3776].\
\
   Hosts SHOULD support route optimization requirements for\
   correspondent nodes described in Section 8.2 of [RFC-3775].\
\
   Routers SHOULD support the generic mobility-related requirements for\
   all IPv6 routers described in Section 8.3 of [RFC-3775].  Routers MAY\
   support the home agent functionality described in Section 8.4 of\
   [RFC-3775], including support of [RFC-2473] and [RFC-3776].\
\
8.  Security\
\
   This section describes the specification of IPsec for the IPv6 node.\
\
8.1.  Basic Architecture\
\
   Security Architecture for the Internet Protocol [RFC-4301] MUST be\
   supported.\
\
\
\
\
\
\
\
Loughney                     Informational                     [Page 10]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
8.2.  Security Protocols\
\
   ESP [RFC-4303] MUST be supported.  AH [RFC-4302] MUST be supported.\
\
8.3.  Transforms and Algorithms\
\
   Current IPsec RFCs specify the support of transforms and algorithms\
   for use with AH and ESP: NULL encryption, DES-CBC, HMAC-SHA-1-96, and\
   HMAC-MD5-96.  However, "Cryptographic Algorithm Implementation\
   Requirements For ESP And AH" [RFC-4305] contains the current set of\
   mandatory to implement algorithms for ESP and AH.  It also specifies\
   algorithms that should be implemented because they are likely to be\
   promoted to mandatory at some future time.  IPv6 nodes SHOULD conform\
   to the requirements in [RFC-4305], as well as the requirements\
   specified below.\
\
   Since ESP encryption and authentication are both optional, support\
   for the NULL encryption algorithm [RFC-2410] and the NULL\
   authentication algorithm [RFC-4303] MUST be provided to maintain\
   consistency with the way these services are negotiated.  However,\
   while authentication and encryption can each be NULL, they MUST NOT\
   both be NULL.  The NULL encryption algorithm is also useful for\
   debugging.\
\
   The DES-CBC encryption algorithm [RFC-2405] SHOULD NOT be supported\
   within ESP.  Security issues related to the use of DES are discussed\
   in [DESDIFF], [DESINT], and [DESCRACK].  DES-CBC is still listed as\
   required by the existing IPsec RFCs, but updates to these RFCs will\
   be published in the near future.  DES provides 56 bits of protection,\
   which is no longer considered sufficient.\
\
   The use of the HMAC-SHA-1-96 algorithm [RFC-2404] within AH and ESP\
   MUST be supported.  The use of the HMAC-MD5-96 algorithm [RFC-2403]\
   within AH and ESP MAY also be supported.\
\
   The 3DES-CBC encryption algorithm [RFC-2451] does not suffer from the\
   same security issues as DES-CBC, and the 3DES-CBC algorithm within\
   ESP MUST be supported to ensure interoperability.\
\
   The AES-128-CBC algorithm [RFC-3602] MUST also be supported within\
   ESP.  AES-128 is expected to be a widely available, secure, and\
   efficient algorithm.  While AES-128-CBC is not required by the\
   current IPsec RFCs, it is expected to become required in the future.\
\
\
\
\
\
\
\
\
Loughney                     Informational                     [Page 11]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
8.4.  Key Management Methods\
\
   An implementation MUST support the manual configuration of the\
   security key and SPI.  The SPI configuration is needed in order to\
   delineate between multiple keys.\
\
   Key management SHOULD be supported.  Examples of key management\
   systems include IKEv2 [RFC-4306] and Kerberos; S/MIME and TLS include\
   key management functions.\
\
   Where key refresh, anti-replay features of AH and ESP, or on-demand\
   creation of Security Associations (SAs) is required, automated keying\
   MUST be supported.\
\
   Key management methods for multicast traffic are also being worked on\
   by the MSEC WG.\
\
9.  Router-Specific Functionality\
\
   This section defines general host considerations for IPv6 nodes that\
   act as routers.  Currently, this section does not discuss routing-\
   specific requirements.\
\
9.1.  General\
\
9.1.1.  IPv6 Router Alert Option - RFC 2711\
\
   The IPv6 Router Alert Option [RFC-2711] is an optional IPv6 Hop-by-\
   Hop Header that is used in conjunction with some protocols (e.g.,\
   RSVP [RFC-2205] or MLD [RFC-2710]).  The Router Alert option will\
   need to be implemented whenever protocols that mandate its usage are\
   implemented.  See Section 4.6.\
\
9.1.2.  Neighbor Discovery for IPv6 - RFC 2461\
\
   Sending Router Advertisements and processing Router Solicitation MUST\
   be supported.\
\
10.  Network Management\
\
   Network Management MAY be supported by IPv6 nodes.  However, for IPv6\
   nodes that are embedded devices, network management may be the only\
   possible way of controlling these nodes.\
\
10.1.  Management Information Base Modules (MIBs)\
\
   The following two MIBs SHOULD be supported by nodes that support an\
   SNMP agent.\
\
\
\
Loughney                     Informational                     [Page 12]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
10.1.1.  IP Forwarding Table MIB\
\
   IP Forwarding Table MIB [RFC-4292] SHOULD be supported by nodes that\
   support an SNMP agent.\
\
10.1.2.  Management Information Base for the Internet Protocol (IP)\
\
   IP MIB [RFC-4293] SHOULD be supported by nodes that support an SNMP\
   agent.\
\
11.  Security Considerations\
\
   This document does not affect the security of the Internet, but\
   implementations of IPv6 are expected to support a minimum set of\
   security features to ensure security on the Internet.  "IP Security\
   Document Roadmap" [RFC-2411] is important for everyone to read.\
\
   The security considerations in RFC 2460 state the following:\
\
      The security features of IPv6 are described in the Security\
      Architecture for the Internet Protocol [RFC-2401].\
\
   RFC 2401 has been obsoleted by RFC 4301, therefore refer RFC 4301 for\
   the security features of IPv6.\
\
12.  References\
\
12.1.  Normative References\
\
   [RFC-1035]     Mockapetris, P., "Domain names - implementation and\
                  specification", STD 13, RFC 1035, November 1987.\
\
   [RFC-1981]     McCann, J., Deering, S., and J. Mogul, "Path MTU\
                  Discovery for IP version 6", RFC 1981, August 1996.\
\
   [RFC-2104]     Krawczyk, H., Bellare, M., and R. Canetti, "HMAC:\
                  Keyed-Hashing for Message Authentication", RFC 2104,\
                  February 1997.\
\
   [RFC-2119]     Bradner, S., "Key words for use in RFCs to Indicate\
                  Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC-2403]     Madson, C. and R. Glenn, "The Use of HMAC-MD5-96\
                  within ESP and AH", RFC 2403, November 1998.\
\
   [RFC-2404]     Madson, C. and R. Glenn, "The Use of HMAC-SHA-1-96\
                  within ESP and AH", RFC 2404, November 1998.\
\
\
\
\
Loughney                     Informational                     [Page 13]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
   [RFC-2405]     Madson, C. and N. Doraswamy, "The ESP DES-CBC Cipher\
                  Algorithm With Explicit IV", RFC 2405, November 1998.\
\
   [RFC-2410]     Glenn, R. and S. Kent, "The NULL Encryption Algorithm\
                  and Its Use With IPsec", RFC 2410, November 1998.\
\
   [RFC-2411]     Thayer, R., Doraswamy, N., and R. Glenn, "IP Security\
                  Document Roadmap", RFC 2411, November 1998.\
\
   [RFC-2451]     Pereira, R. and R. Adams, "The ESP CBC-Mode Cipher\
                  Algorithms", RFC 2451, November 1998.\
\
   [RFC-2460]     Deering, S. and R. Hinden, "Internet Protocol, Version\
                  6 (IPv6) Specification", RFC 2460, December 1998.\
\
   [RFC-2461]     Narten, T., Nordmark, E., and W. Simpson, "Neighbor\
                  Discovery for IP Version 6 (IPv6)", RFC 2461, December\
                  1998.\
\
   [RFC-2462]     Thomson, S. and T. Narten, "IPv6 Stateless Address\
                  Autoconfiguration", RFC 2462, December 1998.\
\
   [RFC-2463]     Conta, A. and S. Deering, "Internet Control Message\
                  Protocol (ICMPv6) for the Internet Protocol Version 6\
                  (IPv6) Specification", RFC 2463, December 1998.\
\
   [RFC-2472]     Haskin, D. and E. Allen, "IP Version 6 over PPP", RFC\
                  2472, December 1998.\
\
   [RFC-2473]     Conta, A. and S. Deering, "Generic Packet Tunneling in\
                  IPv6 Specification", RFC 2473, December 1998.\
\
   [RFC-2671]     Vixie, P., "Extension Mechanisms for DNS (EDNS0)", RFC\
                  2671, August 1999.\
\
   [RFC-2710]     Deering, S., Fenner, W., and B. Haberman, "Multicast\
                  Listener Discovery (MLD) for IPv6", RFC 2710, October\
                  1999.\
\
   [RFC-2711]     Partridge, C. and A. Jackson, "IPv6 Router Alert\
                  Option", RFC 2711, October 1999.\
\
   [RFC-3041]     Narten, T. and R. Draves, "Privacy Extensions for\
                  Stateless Address Autoconfiguration in IPv6", RFC\
                  3041, January 2001.\
\
   [RFC-3152]     Bush, R., "Delegation of IP6.ARPA", BCP 49, RFC 3152,\
                  August 2001.\
\
\
\
Loughney                     Informational                     [Page 14]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
   [RFC-3315]     Droms, R., Bound, J., Volz, B., Lemon, T., Perkins,\
                  C., and M. Carney, "Dynamic Host Configuration\
                  Protocol for IPv6 (DHCPv6)", RFC 3315, July 2003.\
\
   [RFC-3363]     Bush, R., Durand, A., Fink, B., Gudmundsson, O., and\
                  T. Hain, "Representing Internet Protocol version 6\
                  (IPv6) Addresses in the Domain Name System (DNS)", RFC\
                  3363, August 2002.\
\
   [RFC-3484]     Frye, R., Levi, D., Routhier, S., and B. Wijnen,\
                  "Coexistence between Version 1, Version 2, and Version\
                  3 of the Internet-standard Network Management\
                  Framework", BCP 74, RFC 3584, August 2003.\
\
   [RFC-3513]     Hinden, R. and S. Deering, "Internet Protocol Version\
                  6 (IPv6) Addressing Architecture", RFC 3513, April\
                  2003.\
\
   [RFC-3590]     Haberman, B., "Source Address Selection for the\
                  Multicast Listener Discovery (MLD) Protocol", RFC\
                  3590, September 2003.\
\
   [RFC-3596]     Thomson, S., Huitema, C., Ksinant, V., and M. Souissi,\
                  "DNS Extensions to Support IP Version 6", RFC 3596,\
                  October 2003.\
\
   [RFC-3602]     Frankel, S., Glenn, R., and S. Kelly, "The AES-CBC\
                  Cipher Algorithm and Its Use with IPsec", RFC 3602,\
                  September 2003.\
\
   [RFC-3775]     Johnson, D., Perkins, C., and J. Arkko, "Mobility\
                  Support in IPv6", RFC 3775, June 2004.\
\
   [RFC-3776]     Arkko, J., Devarapalli, V., and F. Dupont, "Using\
                  IPsec to Protect Mobile IPv6 Signaling Between Mobile\
                  Nodes and Home Agents", RFC 3776, June 2004.\
\
   [RFC-3810]     Vida, R. and L. Costa, "Multicast Listener Discovery\
                  Version 2 (MLDv2) for IPv6", RFC 3810, June 2004.\
\
   [RFC-3879]     Huitema, C. and B. Carpenter, "Deprecating Site Local\
                  Addresses", RFC 3879, September 2004.\
\
   [RFC-4292]     Haberman, B., "IP Forwarding Table MIB", RFC 4292,\
                  April 2006.\
\
   [RFC-4293]     Routhier, S., Ed., "Management Information Base for\
                  the Internet Protocol (IP)", RFC 4293, April 2006.\
\
\
\
Loughney                     Informational                     [Page 15]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
   [RFC-4301]     Kent, S. and R. Atkinson, "Security Architecture for\
                  the Internet Protocol", RFC 4301, December 2005.\
\
   [RFC-4302]     Kent, S., "IP Authentication Header", RFC 4302,\
                  December 2005.\
\
   [RFC-4303]     Kent, S., "IP Encapsulating Security Payload (ESP)",\
                  RFC 4303, December 2005.\
\
   [RFC-4305]     Eastlake 3rd, D., "Cryptographic Algorithm\
                  Implementation Requirements for Encapsulating Security\
                  Payload (ESP) and Authentication Header (AH)", RFC\
                  4305, December 2005.\
\
12.2.  Informative References\
\
   [DESDIFF]      Biham, E., Shamir, A., "Differential Cryptanalysis of\
                  DES-like cryptosystems", Journal of Cryptology Vol 4,\
                  Jan 1991.\
\
   [DESCRACK]     Cracking DES, O'Reilly & Associates, Sebastapol, CA\
                  2000.\
\
   [DESINT]       Bellovin, S., "An Issue With DES-CBC When Used Without\
                  Strong Integrity", Proceedings of the 32nd IETF,\
                  Danvers, MA, April 1995.\
\
   [IPv6-RH]      P. Savola, "Security of IPv6 Routing Header and Home\
                  Address Options", Work in Progress.\
\
   [RFC-793]      Postel, J., "Transmission Control Protocol", STD 7,\
                  RFC 793, September 1981.\
\
   [RFC-1034]     Mockapetris, P., "Domain names - concepts and\
                  facilities", STD 13, RFC 1034, November 1987.\
\
   [RFC-2205]     Braden, R., Zhang, L., Berson, S., Herzog, S., and S.\
                  Jamin, "Resource ReSerVation Protocol (RSVP) --\
                  Version 1 Functional Specification", RFC 2205,\
                  September 1997.\
\
   [RFC-2464]     Crawford, M., "Transmission of IPv6 Packets over\
                  Ethernet Networks", RFC 2464, December 1998.\
\
   [RFC-2492]     Armitage, G., Schulter, P., and M. Jork, "IPv6 over\
                  ATM Networks", RFC 2492, January 1999.\
\
\
\
\
\
Loughney                     Informational                     [Page 16]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
   [RFC-2675]     Borman, D., Deering, S., and R. Hinden, "IPv6\
                  Jumbograms", RFC 2675, August 1999.\
\
   [RFC-4213]     Nordmark, E. and R. Gilligan, "Basic Transition\
                  Mechanisms for IPv6 Hosts and Routers", RFC 4213,\
                  October 2005.\
\
   [RFC-3569]     Bhattacharyya, S., "An Overview of Source-Specific\
                  Multicast (SSM)", RFC 3569, July 2003.\
\
   [RFC-3736]     Droms, R., "Stateless Dynamic Host Configuration\
                  Protocol (DHCP) Service for IPv6", RFC 3736, April\
                  2004.\
\
   [RFC-4001]     Daniele, M., Haberman, B., Routhier, S., and J.\
                  Schoenwaelder, "Textual Conventions for Internet\
                  Network Addresses", RFC 4001, February 2005.\
\
   [RFC-4033]     Arends, R., Austein, R., Larson, M., Massey, D., and\
                  S. Rose, "DNS Security Introduction and Requirements",\
                  RFC 4033, March 2005.\
\
   [RFC-4034]     Arends, R., Austein, R., Larson, M., Massey, D., and\
                  S. Rose, "Resource Records for the DNS Security\
                  Extensions", RFC 4034, March 2005.\
\
   [RFC-4035]     Arends, R., Austein, R., Larson, M., Massey, D., and\
                  S. Rose, "Protocol Modifications for the DNS Security\
                  Extensions", RFC 4035, March 2005.\
\
   [RFC-4306]     Kaufman, C., Ed., "Internet Key Exchange (IKEv2)\
                  Protocol", RFC 4306, December 2005.\
\
   [SSM-ARCH]     H. Holbrook, B. Cain, "Source-Specific Multicast for\
                  IP", Work in Progress.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Loughney                     Informational                     [Page 17]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
13.  Authors and Acknowledgements\
\
   This document was written by the IPv6 Node Requirements design team:\
\
   Jari Arkko\
   [jari.arkko@ericsson.com]\
\
   Marc Blanchet\
   [marc.blanchet@viagenie.qc.ca]\
\
   Samita Chakrabarti\
   [samita.chakrabarti@eng.sun.com]\
\
   Alain Durand\
   [alain.durand@sun.com]\
\
   Gerard Gastaud\
   [gerard.gastaud@alcatel.fr]\
\
   Jun-ichiro itojun Hagino\
   [itojun@iijlab.net]\
\
   Atsushi Inoue\
   [inoue@isl.rdc.toshiba.co.jp]\
\
   Masahiro Ishiyama\
   [masahiro@isl.rdc.toshiba.co.jp]\
\
   John Loughney\
   [john.loughney@nokia.com]\
\
   Rajiv Raghunarayan\
   [raraghun@cisco.com]\
\
   Shoichi Sakane\
   [shouichi.sakane@jp.yokogawa.com]\
\
   Dave Thaler\
   [dthaler@windows.microsoft.com]\
\
   Juha Wiljakka\
   [juha.wiljakka@Nokia.com]\
\
   The authors would like to thank Ran Atkinson, Jim Bound, Brian\
   Carpenter, Ralph Droms, Christian Huitema, Adam Machalek, Thomas\
   Narten, Juha Ollila, and Pekka Savola for their comments.\
\
\
\
\
\
Loughney                     Informational                     [Page 18]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
Editor's Contact Information\
\
   Comments or questions regarding this document should be sent to the\
   IPv6 Working Group mailing list (ipv6@ietf.org) or to:\
\
   John Loughney\
   Nokia Research Center\
   Itamerenkatu 11-13\
   00180 Helsinki\
   Finland\
\
   Phone: +358 50 483 6242\
   EMail: John.Loughney@Nokia.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Loughney                     Informational                     [Page 19]\
\
RFC 4294                 IPv6 Node Requirements               April 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Loughney                     Informational                     [Page 20]\
\

doc 9
  field 0
    name titolo
    type string
    value rfc4298.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                         J.-H. Chen\
Request for Comments: 4298                                        W. Lee\
Category: Standards Track                                     J. Thyssen\
                                                    Broadcom Corporation\
                                                           December 2005\
\
\
            RTP Payload Format for BroadVoice Speech Codecs\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document describes the RTP payload format for the BroadVoice(R)\
   narrowband and wideband speech codecs.  The narrowband codec, called\
   BroadVoice16, or BV16, has been selected by CableLabs as a mandatory\
   codec in PacketCable 1.5 and has a CableLabs specification.  The\
   document also provides specifications for the use of BroadVoice with\
   MIME and the Session Description Protocol (SDP).\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                     [Page 1]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Background ......................................................2\
   3. RTP Payload Format for BroadVoice16 Narrowband Codec ............3\
      3.1. BroadVoice16 Bit Stream Definition .........................4\
      3.2. Multiple BroadVoice16 Frames in an RTP Packet ..............5\
   4. RTP Payload Format for BroadVoice32 Wideband Codec ..............6\
      4.1. BroadVoice32 Bit Stream Definition .........................6\
      4.2. Multiple BroadVoice32 Frames in an RTP Packet ..............8\
   5. IANA Considerations .............................................8\
      5.1. MIME Registration of BroadVoice16 for RTP ..................9\
      5.2. MIME Registration of BroadVoice32 for RTP ..................9\
   6. Mapping to SDP Parameters ......................................10\
      6.1. Offer-Answer Model Considerations .........................11\
   7. Security Considerations ........................................11\
   8. Congestion Control .............................................11\
   9. Acknowledgements ...............................................11\
   10. References ....................................................12\
      10.1. Normative References .....................................12\
      10.2. Informative References ...................................12\
\
1.  Introduction\
\
   This document specifies the payload format for sending BroadVoice\
   encoded speech or audio signals using the Real-time Transport\
   Protocol (RTP) [1].  The sender may send one or more BroadVoice codec\
   data frames per packet, depending on the application scenario, based\
   on network conditions, bandwidth availability, delay requirements,\
   and packet-loss tolerance.\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [2].\
\
2.  Background\
\
   BroadVoice is a speech codec family developed for VoIP (Voice over\
   Internet Protocol) applications, including Voice over Cable, Voice\
   over DSL, and IP phone applications.  BroadVoice achieves high speech\
   quality with a low coding delay and relatively low codec complexity.\
\
   The BroadVoice codec family contains two codec versions.  The\
   narrowband version of BroadVoice, called BroadVoice16 [3], or BV16\
   for short, encodes 8 kHz-sampled narrowband speech at a bit rate of\
   16 kilobits/second, or 16 kbit/s.  The wideband version of\
   BroadVoice, called BroadVoice32, or BV32, encodes 16 kHz-sampled\
   wideband speech at a bit rate of 32 kbit/s.  The BV16 and BV32 use\
\
\
\
Chen, et al.                Standards Track                     [Page 2]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   very similar (but not identical) coding algorithms; they share most\
   of their algorithm modules.\
\
   To minimize the delay in real-time two-way communications, both the\
   BV16 and BV32 encode speech with a very small frame size of 5 ms\
   without using any look ahead.  By using a packet size as small as 5\
   ms if necessary, this allows VoIP systems based on BroadVoice to have\
   a very low end-to-end system delay.\
\
   BroadVoice also has relatively low codec complexity when compared\
   with ITU-T standard speech codecs based on CELP (Coded Excited Linear\
   Prediction), such as G.728, G.729, G.723.1, and G.722.2.  Full-duplex\
   implementations of the BV16 and BV32 take around 12 and 17 MIPS,\
   respectively, on general-purpose 16-bit fixed-point digital signal\
   processors (DSPs).  The total memory footprints of the BV16 and BV32,\
   including program size, data tables, and data RAM, are around 12\
   kwords each, or 24 kbytes.\
\
   The PacketCable(TM) project of Cable Television Laboratories, Inc.\
   (CableLabs(R)) has chosen the BV16 codec for use in VoIP telephone\
   services provided by cable operators.  More specifically, the BV16\
   codec was selected as one of the mandatory audio codecs in the\
   PacketCable(TM) 1.5 Audio/Video Codecs Specification [8] and has been\
   implemented by multiple vendors.  The wideband version (BV32) has\
   been developed by Broadcom but has not yet appeared in a public\
   specification; since it is technically very similar to BV16, its\
   payload format is also defined in this document.\
\
3.  RTP Payload Format for BroadVoice16 Narrowband Codec\
\
   The BroadVoice16 uses 5 ms frames and a sampling frequency of 8 kHz,\
   so the RTP timestamp MUST be in units of 1/8000 of a second.  The RTP\
   timestamp indicates the sampling instant of the oldest audio sample\
   represented by the frame(s) present in the payload.  The RTP payload\
   for the BroadVoice16 has the format shown in the figure below.  No\
   additional header specific to this payload format is required.\
\
    0                   1                   2                   3\
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |                      RTP Header [1]                           |\
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\
   |                                                               |\
   |             one or more frames of BroadVoice16                |\
   |                                                               |\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
\
\
\
\
Chen, et al.                Standards Track                     [Page 3]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   If BroadVoice16 is used for applications with silence compression,\
   the first BroadVoice16 packet after a silence period during which\
   packets have not been transmitted contiguously SHOULD have the marker\
   bit in the RTP data header set to one.  The marker bit in all other\
   packets is zero.  Applications without silence suppression MUST set\
   the marker bit to zero.\
\
   The assignment of an RTP payload type for this new packet format is\
   outside the scope of this document, and will not be specified here.\
   It is expected that the RTP profile for a particular class of\
   applications will assign a payload type for this encoding, or if that\
   is not done, then a payload type in the dynamic range shall be\
   chosen.\
\
3.1.  BroadVoice16 Bit Stream Definition\
\
   The BroadVoice16 encoder operates on speech frames of 5 ms\
   corresponding to 40 samples at a sampling rate of 8000 samples per\
   second.  For every 5 ms frame, the encoder encodes the 40 consecutive\
   audio samples into 80 bits, or 10 octets.  Thus, the 80-bit bit\
   stream produced by the BroadVoice16 for each 5 ms frame is octet-\
   aligned, and no padding bits are required.  The bit allocation for\
   the encoded parameters of the BroadVoice16 codec is listed in the\
   following table.\
\
      Encoded Parameter      Codeword     Number of bits per frame\
      ------------------------------------------------------------\
      Line Spectrum Pairs    L0,L1            7+7=14\
      Pitch Lag              PL                    7\
      Pitch Gain             PG                    5\
      Log-Gain               LG                    4\
      Excitation Vectors     V0,...,V9       5*10=50\
      ------------------------------------------------------------\
      Total:                                      80 bits\
\
   The mapping of the encoded parameters in an 80-bit BroadVoice16 data\
   frame is defined in the following figure.  This figure shows the bit\
   packing in "network byte order", also known as big-endian order.  The\
   bits of each 32-bit word are numbered 0 to 31, with the most\
   significant bit on the left and numbered 0.  The octets (bytes) of\
   each word are transmitted with the most significant octet first.  The\
   bits of the data field for each encoded parameter are numbered in the\
   same order, with the most significant bit on the left.\
\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                     [Page 4]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
    0                   1                   2                   3\
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |     L0      |     L1      |      PL     |   PG    |  LG   | V0|\
   |             |             |             |         |       |   |\
   |0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4 5 6|0 1 2 3 4|0 1 2 3|0 1|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   | V0  |    V1   |    V2   |    V3   |    V4   |    V5   |   V6  |\
   |     |         |         |         |         |         |       |\
   |2 3 4|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4|0 1 2 3|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |V|    V7   |    V8   |   V9    |\
   |6|         |         |         |\
   |4|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
                      Figure 1: BroadVoice16 bit packing\
\
3.2.  Multiple BroadVoice16 Frames in an RTP Packet\
\
   More than one BroadVoice16 frame MAY be included in a single RTP\
   packet by a sender.  Senders have the following additional\
   restrictions:\
\
      o  SHOULD NOT include more BroadVoice16 frames in a single RTP\
         packet than will fit in the MTU of the RTP.\
\
      o  MUST NOT split a BroadVoice16 frame between RTP packets.\
\
      o  BroadVoice16 frames in an RTP packet MUST be consecutive.\
\
   Since multiple BroadVoice16 frames in an RTP packet MUST be\
   consecutive, and since BroadVoice16 has a fixed frame size of 5 ms,\
   recovering the timestamps of all frames within a packet is easy.  The\
   oldest frame within an RTP packet has the same timestamp as the RTP\
   packet, as mentioned above.  To obtain the timestamp of the frame\
   that is N frames later than the oldest frame in the packet, one\
   simply adds 5*N ms worth of time units to the timestamp of the RTP\
   packet.\
\
   It is RECOMMENDED that the number of frames contained within an RTP\
   packet be consistent with the application.  For example, in a\
   telephony application where delay is important, the fewer frames per\
   packet, the lower the delay; whereas, for a delay insensitive\
   streaming or messaging application, many frames per packet would be\
   acceptable.\
\
\
\
\
\
Chen, et al.                Standards Track                     [Page 5]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   Information describing the number of frames contained in an RTP\
   packet is not transmitted as part of the RTP payload.  The only way\
   to determine the number of BroadVoice16 frames is to count the total\
   number of octets within the RTP payload, and divide the octet count\
   by 10.\
\
4.  RTP Payload Format for BroadVoice32 Wideband Codec\
\
   The BroadVoice32 uses 5 ms frames and a sampling frequency of 16 kHz,\
   so the RTP timestamp MUST be in units of 1/16000 of a second.  The\
   RTP timestamp indicates the sampling instant of the oldest audio\
   sample represented by the frame(s) present in the payload.  The RTP\
   payload for the BroadVoice32 has the format shown in the figure\
   below.  No additional header specific to this payload format is\
   required.\
\
    0                   1                   2                   3\
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |                      RTP Header [1]                           |\
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\
   |                                                               |\
   |             one or more frames of BroadVoice32                |\
   |                                                               |\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   If BroadVoice32 is used for applications with silence compression,\
   the first BroadVoice32 packet after a silence period during which\
   packets have not been transmitted contiguously SHOULD have the marker\
   bit in the RTP data header set to one.  The marker bit in all other\
   packets is zero.  Applications without silence suppression MUST set\
   the marker bit to zero.\
\
   The assignment of an RTP payload type for this new packet format is\
   outside the scope of this document, and will not be specified here.\
   It is expected that the RTP profile for a particular class of\
   applications will assign a payload type for this encoding, or if that\
   is not done, then a payload type in the dynamic range shall be\
   chosen.\
\
4.1.  BroadVoice32 Bit Stream Definition\
\
   The BroadVoice32 encoder operates on speech frames of 5 ms\
   corresponding to 80 samples at a sampling rate of 16000 samples per\
   second.  For every 5 ms frame, the encoder encodes the 80 consecutive\
   audio samples into 160 bits, or 20 octets.  Thus, the 160-bit bit\
   stream produced by the BroadVoice32 for each 5 ms frame is octet-\
   aligned, and no padding bits are required.  The bit allocation for\
\
\
\
Chen, et al.                Standards Track                     [Page 6]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   the encoded parameters of the BroadVoice32 codec is listed in the\
   following table.\
                                                        Number of bits\
      Encoded Parameter                  Codeword       per frame\
      ---------------------------------------------------------------\
      Line Spectrum Pairs                L0,L1,L2       7+5+5=17\
      Pitch Lag                          PL                    8\
      Pitch Gain                         PG                    5\
      Log-Gains (1st & 2nd subframes)    LG0,LG1          5+5=10\
      Excitation Vectors (1st subframe)  VA0,...,VA9     6*10=60\
      Excitation Vectors (2nd subframe)  VB0,...,VB9     6*10=60\
      ---------------------------------------------------------------\
      Total:                                                 160 bits\
\
   The mapping of the encoded parameters in a 160-bit BroadVoice32 data\
   frame is defined in the following figure.  This figure shows the bit\
   packing in "network byte order", also known as big-endian order.  The\
   bits of each 32-bit word are numbered 0 to 31, with the most\
   significant bit on the left and numbered 0.  The octets (bytes) of\
   each word are transmitted with the most significant octet first.  The\
   bits of the data field for each encoded parameter are numbered in the\
   same order, with the most significant bit on the left.\
\
    0                   1                   2                   3\
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |     L0      |    L1   |    L2   |       PL      |    PG   |LG0|\
   |             |         |         |               |         |   |\
   |0 1 2 3 4 5 6|0 1 2 3 4|0 1 2 3 4|0 1 2 3 4 5 6 7|0 1 2 3 4|0 1|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   | LG0 |   LG1   |    VA0    |    VA1    |    VA2    |    VA3    |\
   |     |         |           |           |           |           |\
   |2 3 4|0 1 2 3 4|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |    VA4    |    VA5    |    VA6    |    VA7    |    VA8    |VA9|\
   |           |           |           |           |           |   |\
   |0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   | VA9   |    VB0    |    VB1    |    VB2    |    VB3    |  VB4  |\
   |       |           |           |           |           |       |\
   |2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
   |VB4|    VB5    |    VB6    |    VB7    |    VB8    |   VB9     |\
   |   |           |           |           |           |           |\
   |4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|0 1 2 3 4 5|\
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
                  Figure 2: BroadVoice32 bit packing\
\
\
\
Chen, et al.                Standards Track                     [Page 7]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
4.2.  Multiple BroadVoice32 Frames in an RTP Packet\
\
   More than one BroadVoice32 frame MAY be included in a single RTP\
   packet by a sender.  Senders have the following additional\
   restrictions:\
\
      o  SHOULD NOT include more BroadVoice32 frames in a single RTP\
         packet than will fit in the MTU of the RTP.\
\
      o  MUST NOT split a BroadVoice32 frame between RTP packets.\
\
      o  BroadVoice32 frames in an RTP packet MUST be consecutive.\
\
   Since multiple BroadVoice32 frames in an RTP packet MUST be\
   consecutive, and since BroadVoice32 has a fixed frame size of 5 ms,\
   recovering the timestamps of all frames within a packet is easy.  The\
   oldest frame within an RTP packet has the same timestamp as the RTP\
   packet, as mentioned above.  To obtain the timestamp of the frame\
   that is N frames later than the oldest frame in the packet, one\
   simply adds 5*N ms worth of time units to the timestamp of the RTP\
   packet.\
\
   It is RECOMMENDED that the number of frames contained within an RTP\
   packet be consistent with the application.  For example, in a\
   telephony application where delay is important, the fewer frames per\
   packet, the lower the delay; whereas, for a delay insensitive\
   streaming or messaging application, many frames per packet would be\
   acceptable.\
\
   Information describing the number of frames contained in an RTP\
   packet is not transmitted as part of the RTP payload.  The only way\
   to determine the number of BroadVoice32 frames is to count the total\
   number of octets within the RTP payload, and divide the octet count\
   by 20.\
\
5.  IANA Considerations\
\
   Two new MIME sub-types, as described in this section, have been\
   registered.\
\
   The MIME names for the BV16 and BV32 codecs have been allocated from\
   the IETF tree since these two codecs are expected to be widely used\
   for Voice-over-IP applications, especially in Voice over Cable\
   applications.\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                     [Page 8]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
5.1.  MIME Registration of BroadVoice16 for RTP\
\
   MIME media type name: audio\
\
   MIME media subtype name: BV16\
\
   Required parameter: none\
\
   Optional parameters:\
      ptime:    Defined as usual for RTP audio (see RFC 2327 [4]).\
\
      maxptime: See RFC 3267 [7] for its definition.  The maxptime\
         SHOULD be a multiple of the duration of a single codec data\
         frame (5 ms).\
\
   Encoding considerations:\
      This type is defined for transferring BV16-encoded data via RTP\
      using the payload format specified in Section 3 of RFC 4298.\
      Audio data is binary data and must be encoded for non-binary\
      transport; the Base64 encoding is suitable for Email.\
\
   Security considerations:\
      See Section 7 "Security Considerations" of RFC 4298.\
\
   Public specification:\
      The BroadVoice16 codec has been specified in [3].\
\
   Intended usage:\
      COMMON.  It is expected that many VoIP applications, especially\
      Voice over Cable applications, will use this type.\
\
   Person & email address to contact for further information:\
      Juin-Hwey (Raymond) Chen\
      rchen@broadcom.com\
\
   Author/Change controller:\
      Author: Juin-Hwey (Raymond) Chen, rchen@broadcom.com\
      Change Controller: IETF Audio/Video Transport Working Group\
         delegated from the IESG\
\
5.2.  MIME Registration of BroadVoice32 for RTP\
\
   MIME media type name: audio\
\
   MIME media subtype name: BV32\
\
   Required parameter: none\
\
\
\
\
Chen, et al.                Standards Track                     [Page 9]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   Optional parameters:\
      ptime:    Defined as usual for RTP audio (see RFC 2327 [4]).\
\
      maxptime: See RFC 3267 [7] for its definition.  The maxptime\
         SHOULD be a multiple of the duration of a single codec data\
         frame (5 ms).\
\
   Encoding considerations:\
      This type is defined for transferring BV32-encoded data via RTP\
      using the payload format specified in Section 4 of RFC 4298.\
      Audio data is binary data and must be encoded for non-binary\
      transport; the Base64 encoding is suitable for Email.\
\
   Security considerations:\
      See Section 7 "Security Considerations" of RFC 4298.\
\
   Intended usage:\
      COMMON.  It is expected that many VoIP applications, especially\
      Voice over Cable applications, will use this type.\
\
   Person & email address to contact for further information:\
      Juin-Hwey (Raymond) Chen\
      rchen@broadcom.com\
\
   Author/Change controller:\
      Author: Juin-Hwey (Raymond) Chen, rchen@broadcom.com\
      Change Controller: IETF Audio/Video Transport Working Group\
         delegated from the IESG\
\
6.  Mapping to SDP Parameters\
\
   The information carried in the MIME media type specification has a\
   specific mapping to fields in the Session Description Protocol (SDP)\
   [4], which is commonly used to describe RTP sessions.  When SDP is\
   used to specify sessions employing the BroadVoice16 or BroadVoice32\
   codec, the mapping is as follows:\
\
      -  The MIME type ("audio") goes in SDP "m=" as the media name.\
\
      -  The MIME subtype (payload format name) goes in SDP "a=rtpmap"\
         as the encoding name.  The RTP clock rate in "a=rtpmap" MUST be\
         8000 for BV16 and 16000 for BV32.\
\
      -  The parameters "ptime" and "maxptime" go in the SDP "a=ptime"\
         and "a=maxptime" attributes, respectively.\
\
\
\
\
\
\
Chen, et al.                Standards Track                    [Page 10]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
   An example of the media representation in SDP for describing BV16\
   might be:\
\
      m=audio 49120 RTP/AVP 97\
      a=rtpmap:97 BV16/8000\
\
   An example of the media representation in SDP for describing BV32\
   might be:\
\
      m=audio 49122 RTP/AVP 99\
      a=rtpmap:99 BV32/16000\
\
6.1.  Offer-Answer Model Considerations\
\
   No special considerations are needed for using the SDP Offer/Answer\
   model [5] with the BV16 and BV32 RTP payload formats.\
\
7.  Security Considerations\
\
   RTP packets using the payload format defined in this specification\
   are subject to the security considerations discussed in the RTP\
   specification [1] and any appropriate profile (for example, [6]).\
   This implies that confidentiality of the media streams is achieved by\
   encryption.\
\
   A potential denial-of-service threat exists for data encoding using\
   compression techniques that have non-uniform receiver-end\
   computational load.  The attacker can inject pathological datagrams\
   into the stream that are complex to decode and cause the receiver to\
   become overloaded.  However, the encodings covered in this document\
   do not exhibit any significant non-uniformity.\
\
8.  Congestion Control\
\
   The general congestion control considerations for transporting RTP\
   data apply to BV16 and BV32 audio over RTP as well (see RTP [1]) and\
   any applicable RTP profile like AVP [6].  BV16 and BV32 do not have\
   any built-in mechanism for reducing the bandwidth.  Packing more\
   frames in each RTP payload can reduce the number of packets sent, and\
   hence the overhead from IP/UDP/RTP headers, at the expense of\
   increased delay and reduced error robustness against packet losses.\
\
9.  Acknowledgements\
\
   The authors would like to thank Magnus Westerlund, Colin Perkins,\
   Allison Mankin, and Jean-Francois Mule for their review of this\
   document.\
\
\
\
\
Chen, et al.                Standards Track                    [Page 11]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
10.  References\
\
10.1.  Normative References\
\
   [1] Schulzrinne, H.,  Casner, S., Frederick, R., and V. Jacobson,\
       "RTP: A Transport Protocol for Real-Time Applications", STD 64,\
       RFC 3550, July 2003.\
\
   [2] Bradner, S., "Key words for use in RFCs to Indicate Requirement\
       Levels", BCP 14, RFC 2119, March 1997.\
\
   [3] Cable Television Laboratories, Inc., BroadVoice(TM)16 Speech\
       Codec Specification, Revision 1.2, October 30, 2003.\
\
   [4] Handley, M. and V. Jacobson, "SDP: Session Description Protocol",\
       RFC 2327, April 1998.\
\
   [5] Rosenberg, J. and H. Schulzrinne, "An Offer/Answer Model with\
       Session Description Protocol (SDP)", RFC 3264, June 2002.\
\
   [6] Schulzrinne, H. and S. Casner, "RTP Profile for Audio and Video\
       Conferences with Minimal Control", STD 65, RFC 3551, July 2003.\
\
   [7] Sjoberg, J., Westerlund, M., Lakaniemi, A., and Q. Xie, "Real-\
       Time Transport Protocol (RTP) Payload Format and File Storage\
       Format for the Adaptive Multi-Rate (AMR) and Adaptive Multi-Rate\
       Wideband (AMR-WB) Audio Codecs", RFC 3267, June 2002.\
\
10.2.  Informative References\
\
   [8] Cable Television Laboratories, Inc., PacketCable(TM) 1.5\
       Audio/Video Codecs Specification, PKT-SP-CODEC1.5-I01-050128,\
       January 28, 2005.\
       http://www.cablelabs.com/specifications/archives/\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                    [Page 12]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
Authors' Addresses\
\
   Juin-Hwey (Raymond) Chen\
   Broadcom Corporation\
   Room A3020\
   16215 Alton Parkway\
   Irvine, CA 92618\
   USA\
\
   Phone: +1 949 926 6288\
   EMail: rchen@broadcom.com\
\
\
   Winnie Lee\
   Broadcom Corporation\
   Room A2012E\
   200-13711 International Place\
   Richmond, British Columbia V6V 2Z8\
   Canada\
\
   Phone: +1 604 233 8605\
   EMail: wlee@broadcom.com\
\
\
   Jes Thyssen\
   Broadcom Corporation\
   Room A3018\
   16215 Alton Parkway\
   Irvine, CA 92618\
   USA\
\
   Phone: +1 949 926 5768\
   EMail: jthyssen@broadcom.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                    [Page 13]\
\
RFC 4298           RTP Payload Format for BroadVoice       December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Chen, et al.                Standards Track                    [Page 14]\
\

doc 10
  field 0
    name titolo
    type string
    value rfc4324.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           D. Royer\
Request for Comments: 4324                               IntelliCal, LLC\
Category: Experimental                                         G. Babics\
                                                                  Oracle\
                                                              S. Mansour\
                                                                    eBay\
                                                           December 2005\
\
\
                     Calendar Access Protocol (CAP)\
\
Status of This Memo\
\
   This memo defines an Experimental Protocol for the Internet\
   community.  It does not specify an Internet standard of any kind.\
   Discussion and suggestions for improvement are requested.\
   Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   The Calendar Access Protocol (CAP) described in this memo permits a\
   Calendar User (CU) to utilize a Calendar User Agent (CUA) to access\
   an iCAL-based Calendar Store (CS).  At the time of this writing,\
   three vendors are implementing CAP, but it has already been\
   determined that some changes are needed.  In order to get\
   implementation experience, the participants felt that a CAP\
   specification is needed to preserve many years of work.  Many\
   properties in CAP which have had many years of debate, can be used by\
   other iCalendar protocols.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                      [Page 1]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................5\
      1.1. Formatting Conventions .....................................5\
      1.2. Related Documents ..........................................6\
      1.3. Definitions ................................................7\
   2. Additions to iCalendar .........................................11\
      2.1.  New Value Types (Summary) ................................14\
         2.1.1. New Parameters (summary) .............................14\
         2.1.2. New or Updated Properties (summary) ..................14\
         2.1.3. New Components (summary) .............................17\
      2.2.  Relationship of RFC-2446 (ITIP) to CAP ...................18\
   3. CAP Design .....................................................20\
      3.1. System Model ..............................................20\
      3.2. Calendar Store Object Model ...............................20\
      3.3. Protocol Model ............................................21\
         3.3.1. Use of BEEP, MIME, and iCalendar .....................22\
   4. Security Model .................................................23\
      4.1. Calendar User and UPNs ....................................23\
         4.1.1. UPNs and Certificates ................................24\
         4.1.2. Anonymous Users and Authentication ...................25\
         4.1.3. User Groups ..........................................25\
      4.2. Access Rights .............................................26\
         4.2.1. Access Control and NOCONFLICT ........................26\
         4.2.2. Predefined VCARs .....................................26\
         4.2.3. Decreed VCARs ........................................28\
      4.3. CAP Session Identity ......................................28\
   5. CAP URL and Calendar Address ...................................29\
   6. New Value Types ................................................30\
      6.1. Property Value Data Types .................................30\
         6.1.1. CAL-QUERY Value Type .................................30\
            6.1.1.1. [NOT] CAL-OWNERS() ..............................36\
            6.1.1.2. CURRENT-TARGET() ................................37\
            6.1.1.3. PARAM() .........................................37\
            6.1.1.4. SELF() ..........................................38\
            6.1.1.5. STATE() .........................................38\
            6.1.1.6. Use of Single Quote .............................38\
            6.1.1.7. Comparing DATE and DATE-TIME Values .............39\
            6.1.1.8. DTEND and DURATION ..............................40\
            6.1.1.9. [NOT] LIKE ......................................40\
            6.1.1.10. Empty vs. NULL .................................41\
            6.1.1.11. [NOT] IN .......................................41\
            6.1.1.12. DATE-TIME and TIME Values in a WHERE Clause ....42\
            6.1.1.13. Multiple Contained Components ..................43\
            6.1.1.14. Example, Query by UID ..........................43\
            6.1.1.15. Query by Date-Time Range .......................43\
            6.1.1.16. Query for All Unprocessed Entries ..............44\
            6.1.1.17. Query with Subset of Properties by Date/Time ...44\
\
\
\
Royer, et al.                 Experimental                      [Page 2]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
            6.1.1.18. Query with Components and Alarms in A Range ....45\
         6.1.2. UPN Value Type .......................................45\
         6.1.3. UPN-FILTER Value .....................................46\
   7. New Parameters .................................................48\
      7.1. ACTION Parameter ..........................................48\
      7.2. ENABLE Parameter ..........................................48\
      7.3. ID Parameter ..............................................49\
      7.4. LATENCY Parameter .........................................50\
      7.5. LOCAL Parameter ...........................................50\
      7.6. LOCALIZE Parameter ........................................51\
      7.7. OPTIONS Parameter .........................................52\
   8. New Properties .................................................52\
      8.1. ALLOW-CONFLICT Property ...................................52\
      8.2. ATT-COUNTER Property ......................................53\
      8.3. CALID Property ............................................54\
      8.4. CALMASTER Property ........................................54\
      8.5. CAP-VERSION Property ......................................55\
      8.6. CARID Property ............................................55\
      8.7. CAR-LEVEL Property ........................................56\
      8.8. COMPONENTS Property .......................................56\
      8.9. CSID Property .............................................58\
      8.10. DECREED Property .........................................58\
      8.11. DEFAULT-CHARSET Property .................................59\
      8.12. DEFAULT-LOCALE Property ..................................60\
      8.13. DEFAULT-TZID Property ....................................61\
      8.14. DEFAULT-VCARS Property ...................................62\
      8.15. DENY Property ............................................62\
      8.16. EXPAND property ..........................................63\
      8.17. GRANT Property ...........................................64\
      8.18. ITIP-VERSION Property ....................................64\
      8.19. MAX-COMP-SIZE Property ...................................65\
      8.20. MAXDATE Property .........................................65\
      8.21. MINDATE Property .........................................66\
      8.22. MULTIPART Property .......................................66\
      8.23. NAME Property ............................................67\
      8.24. OWNER Property ...........................................68\
      8.25. PERMISSION Property ......................................68\
      8.26. QUERY property ...........................................69\
      8.27. QUERYID property .........................................70\
      8.28. QUERY-LEVEL Property .....................................70\
      8.29. RECUR-ACCEPTED Property ..................................71\
      8.30. RECUR-LIMIT Property .....................................71\
      8.31. RECUR-EXPAND Property ....................................72\
      8.32. RESTRICTION Property .....................................72\
      8.33. SCOPE Property ...........................................73\
      8.34. STORES-EXPANDED Property .................................74\
      8.35. TARGET Property ..........................................74\
      8.36. TRANSP Property ..........................................75\
\
\
\
Royer, et al.                 Experimental                      [Page 3]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   9. New Components .................................................76\
      9.1. VAGENDA Component .........................................76\
      9.2. VCALSTORE Component .......................................78\
      9.3. VCAR Component ............................................80\
      9.4. VRIGHT Component ..........................................82\
      9.5. VREPLY Component ..........................................83\
      9.6. VQUERY Component ..........................................83\
   10. Commands and Responses ........................................85\
      10.1. CAP Commands (CMD) .......................................85\
      10.2. ABORT Command ............................................88\
      10.3. CONTINUE Command .........................................89\
      10.4. CREATE Command ...........................................90\
      10.5. DELETE Command ...........................................96\
      10.6. GENERATE-UID Command .....................................98\
      10.7. GET-CAPABILITY Command ..................................100\
      10.8. IDENTIFY Command ........................................103\
      10.9. MODIFY Command ..........................................105\
      10.10. MOVE Command ...........................................110\
      10.11. REPLY Response to a Command ............................112\
      10.12. SEARCH Command .........................................113\
      10.13. SET-LOCALE Command .....................................116\
      10.14. TIMEOUT Command ........................................118\
      10.15. Response Codes .........................................118\
   11. Object Registration ..........................................120\
      11.1. Registration of New and Modified Entities ...............120\
      11.2. Post the Item Definition ................................120\
      11.3. Allow a Comment Period ..................................120\
      11.4. Release a New RFC .......................................120\
   12. BEEP and CAP .................................................120\
      12.1. BEEP Profile Registration ...............................120\
      12.2. BEEP Exchange Styles ....................................123\
      12.3. BEEP Connection Details .................................123\
   13. IANA Considerations ..........................................125\
   14. Security Considerations ......................................125\
   Appendix A.  Acknowledgements ....................................127\
   Appendix B.  References ..........................................127\
       Appendix B.1.  Normative References ..........................127\
       Appendix B.2.  Informative References ........................128\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                      [Page 4]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
1.  Introduction\
\
   This document specifies the Calendar Access Protocol (CAP).  CAP\
   permits a Calendar User (CU) to utilize a Calendar User Agent (CUA)\
   to access an iCAL-based Calendar Store (CS) and manage calendar\
   information.  In particular, the document specifies how to query,\
   create, modify, and delete iCalendar components (e.g., events, to-\
   dos, or daily journal entries).  It further specifies how to search\
   for available busy time information.  Synchronization with CUAs is\
   not covered, but it is believed to be possible using CAP.\
\
   At the time of this writing, three vendors are implementing CAP.  It\
   has already been determined that some changes are needed.  In order\
   to get implementation experience, the participants felt that a CAP\
   specification is needed to preserve many years of work.  Many\
   properties in CAP can be used by other iCalendar protocols and have\
   had many years of debate.\
\
   CAP is specified as a BEEP (Block Extensible Exchange Protocol)\
   "profile" [BEEP] [BEEPGUIDE].  Many aspects of the protocol (e.g.,\
   authentication and privacy) are provided within BEEP.  The protocol\
   data units of CAP leverage the standard iCalendar format iCAL [iCAL]\
   to convey calendar-related information.\
\
   CAP can also be used to store and fetch iCalendar Transport-\
   Independent Interoperability Protocol (iTIP) objects [iTIP].  iTIP\
   objects used are exactly as defined in [iTIP].  When iCalendar\
   objects are transferred between the CUA and a CS, some additional\
   properties and parameters may be added; the CUA is responsible for\
   correctly generating iCalendar objects to non-CAP processes.\
\
   The definition of new components, properties, parameters, and value\
   types are broken into two parts.  The first part summarizes and\
   defines the new objects.  The second part provides detail and ABNF\
   for those objects.  The ABNF rules for CAP, as for other iCalendar\
   specifications, are order-independent.  That is, properties in a\
   component may occur in any order, and parameters in any property may\
   occur in any order.\
\
1.1.  Formatting Conventions\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this\
   document are to be interpreted as described in [RFC2119].\
\
   Calendaring and scheduling roles are referred to in quoted-strings of\
   text with the first character of each word in upper case.  For\
   example, "Organizer" refers to a role of a "Calendar User" (CU)\
\
\
\
Royer, et al.                 Experimental                      [Page 5]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   within the protocol defined by [iTIP].  Calendar components defined\
   by [iCAL] are referred to with capitalized, quoted-strings of text.\
   All iCalendar components should start with the letter "V".  For\
   example, "VEVENT" refers to the event calendar component, "VTODO"\
   refers to the to-do component, and "VJOURNAL" refers to the daily\
   journal component.\
\
   Scheduling methods defined by [iTIP] are referred to with\
   capitalized, quoted-strings of text.  For example, "REPLY" refers to\
   the method for replying to a "REQUEST".\
\
   CAP commands are referred to by upper-case, quoted-strings of text,\
   followed by the word "command".  For example, '"CREATE" command'\
   refers to the command for creating a calendar entry, '"SEARCH"\
   command' refers to the command for reading calendar components.  CAP\
   commands are named using the "CMD" property.\
\
   Properties defined by this memo are referred to with capitalized,\
   quoted-strings of text, followed by the word "property".  For\
   example, '"ATTENDEE" property' refers to the iCalendar property used\
   to convey the calendar address that has been invited to a "VEVENT" or\
   "VTODO" component.\
\
   Property parameters defined by this memo are referred to with\
   capitalized, quoted-strings of text, followed by the word\
   "parameter".  For example, "PARTSTAT" parameter refers to the\
   iCalendar property parameter used to specify the participation status\
   of an attendee.  Enumerated values defined by this memo are referred\
   to with capitalized text, either alone or followed by the word\
   "value".\
\
   Object states defined by this memo are referred to with capitalized,\
   quoted-strings of text, followed by the word "state".  For example,\
   '"BOOKED" state' refers to an object in the booked state.\
\
   Within a query, the different parts are referred to as a "clause" and\
   its value as "clause value" and the clause name will be in uppercase\
   enclosed in quotes, for example, 'The "SELECT" claus' or 'if the\
   "SELECT" clause value contains ...'.\
\
   In tables, the quoted-string text is specified without quotes in\
   order to minimize the table length.\
\
1.2.  Related Documents\
\
   Implementers will need to be familiar with several other memos that,\
   along with this one, describe the Internet calendaring and scheduling\
   standards.  These documents are as follows.\
\
\
\
Royer, et al.                 Experimental                      [Page 6]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      [iCAL] (RFC2445) specifies the objects, data types, properties and\
         property parameters used in the protocols, along with the\
         methods for representing and encoding them.\
\
      [iTIP] (RFC2446) specifies an interoperability protocol for\
         scheduling between different installations.\
\
      [iMIP] (RFC2447) specifies the Internet email binding for [iTIP].\
\
      [GUIDE] (RFC3283) is a guide to implementers and describes the\
         elements of a calendaring system, how they interact with each\
         other, how they interact with end users, and how the standards\
         and protocols are used.\
\
   This memo does not attempt to repeat the specification of concepts\
   and definitions from these earlier memos.  Where possible, references\
   are made to the memo that provides the specification of these\
   concepts and definitions.\
\
1.3  Definitions\
\
   UNPROCESSED, BOOKED, DELETED -  A conceptual state of an object in\
      the calendar store.  There are three conceptual states:\
      "UNPROCESSED" state, "BOOKED" state, and marked for deletion,\
      which is the "DELETED" state.  How the implementation stores the\
      state of any object is not a protocol issue and is not discussed.\
      An object can be said to be booked, unprocessed, or marked for\
      deletion.\
\
      1.  An "UNPROCESSED" state scheduling object has been stored in\
          the calendar store but has not been acted on by a CU or CUA.\
          All scheduled entries are [iTIP] objects.  No [iTIP] objects\
          in the store are in the "BOOKED" state.  To retrieve any\
          [iTIP] object, simply do a query asking for any objects that\
          are stored in the "UNPROCESSED" state.\
\
      2.  A "BOOKED" state entry is stored with the "CREATE" command.\
          It is an object that has been acted on by a CU or CUA and\
          there has been a decision to store an object.  To retrieve any\
          booked object, simply do a query asking for any objects that\
          were stored in the "BOOKED" state.\
\
      3.  A "DELETED" state entry is created by sending a "DELETE"\
          command with the "OPTION" parameter value set to "MARK".  To\
          retrieve any deleted object, simply do a query asking for any\
          objects that were stored in the "DELETED" state.  By default\
          objects marked for delete are not returned.  The CUA must\
          specifically ask for marked-for-deletion objects.  You cannot\
\
\
\
Royer, et al.                 Experimental                      [Page 7]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
          ask for components in the "DELETED" state and in other states\
          in the same "VQUERY" component, as there would be no way to\
          distinguish between them in the reply.\
\
   Calendar -  A collection of logically related objects or entities\
      each of which may be associated with a calendar date and possibly\
      time of day.  These entities can include calendar properties or\
      components.  In addition, a calendar might be related to other\
      calendars with the "RELATED-TO" property.  A calendar is\
      identified by its unique calendar identifier.  The [iCAL] defines\
      the initial calendar properties, calendar components and\
      properties that make up the contents of a calendar.\
\
   Calendar Access Protocol (CAP) -  The Internet protocol that permits\
      a CUA to access and manipulate calendars residing on a Calendar\
      Store.  (This memo.)\
\
   Calendar Access Rights (VCAR) -  The mechanism for specifying the CAP\
      operations ("PERMISSION") that a particular calendar user ("UPN",\
      defined below) is granted or denied permission to perform on a\
      given calendar object ("SCOPE").  The calendar access rights are\
      specified with a "VCAR" component.  (Section 9.3)\
\
   Calendar Address -  Also see Calendar URL, which is the same as a CAP\
      address.  The calendar address can also be the value to the\
      "ATTENDEE" and "ORGANIZER" properties, as defined in [iCAL].\
      Calendar URL -  A calendar URL is a URL, defined in this memo,\
      that specifies the address of a CS or Calendar.\
\
   Component -  Any object that conforms to the iCalendar object format\
      and that is either defined in an Internet Draft, registered with\
      IANA, or is an experimental object that is prefixed with "x-".\
      Some types of components include calendars, events, to-dos,\
      journals, alarms, and time zones.  A component consists of\
      properties and possibly other contained components.  For example,\
      an event may contain an alarm component.\
\
   Container -  This is a generic name for VCALSTORE or VAGENDA.\
\
   Properties -  An attribute of a particular component.  Some\
      properties are applicable to different types of components.  For\
      example, the "DTSTART" property is applicable to the "VEVENT",\
      "VTODO", and "VJOURNAL" components.  Other components are\
      applicable only to an individual type of calendar component.  For\
      example, the "TZURL" property may only be applicable to the\
      "VTIMEZONE" components.\
\
\
\
\
\
Royer, et al.                 Experimental                      [Page 8]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Calendar Identifier (CALID) -  A globally unique identifier\
      associated with a calendar.  Calendars reside within a CS.  See\
      Qualified Calendar Identifier and Relative Calendar Identifier.\
      All CALIDs start with "cap:".\
\
   Calendar Policy -  A CAP operational restriction on the access or\
      manipulation of a calendar.  These may be outside the scope of the\
      CAP protocol.  An example of an implementation or site policy is,\
      "events MUST be scheduled in unit intervals of one hour".\
\
   Calendar Property -  An attribute of a calendar ("VAGENDA").  The\
      attribute applies to the calendar, as a whole.  For example, the\
      "CALSCALE" property specifies the calendar scale (e.g., the\
      "GREGORIAN" value) for the all entries within the calendar.\
\
   Calendar Store (CS) -  The data and service model definitions for a\
      Calendar Store as defined in this memo.  This memo does not\
      specify how the CS is implemented.\
\
   Calendar Server -  An implementation of a Calendar Store (CS) that\
      manages one or more calendars.\
\
   Calendar Store Identifier (CSID) -  The globally unique identifier\
      for an individual CS.  A CSID consists of the host and port\
      portions of a "Common Internet Scheme Syntax" part of a URL, as\
      defined by [URL].  The CSID excludes any reference to a specific\
      calendar.  (Section 8.9)\
\
   Calendar Store Components -  Components maintained in a CS specify a\
      grouping of calendar store-wide information.\
\
   Calendar Store Properties -  Properties maintained in a Calendar\
      Store represent store-wide information.\
\
   Calendar User (CU) -  An entity (often biological) that uses a\
      calendaring system.\
\
   Calendar User Agent (CUA) -  The client application that a CU\
      utilizes to access and manipulate a calendar.\
\
   CAP Session -  An open communication channel between a CUA and a CS.\
      If the CAP session is authenticated, the CU is "authenticated" and\
      it is an "authenticated CAP session".\
\
   Contained Component / Contained Properties -  A component or property\
      that is contained inside of another component.  For example, a\
      "VALARM" component may be contained inside a "VEVENT" component,\
\
\
\
\
Royer, et al.                 Experimental                      [Page 9]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      and a "TRIGGER" property could be a contained property of a\
      "VALARM" component.\
\
   Delegate -  A CU (sometimes called the delegatee) who has been\
      assigned participation in a scheduled component (e.g., VEVENT) by\
      one of the attendees in the scheduled component (sometimes called\
      the delegator).  An example of a delegate is a team member told to\
      go to a particular meeting in place of another invitee who is\
      unable to attend.\
\
   Designate -  A CU who is authorized to act on behalf of another CU.\
      An example of a designate is an assistant.\
\
   Experimental -  The CUA and CS may implement experimental extensions\
      to the protocol.  They might also have experimental components,\
      properties, and parameters.  These extensions MUST start with "x-"\
      (or "X-") and should include a vendor prefix (such as "x-\
      myvendor-").  There is no guarantee that these experimental\
      extensions will interoperate with other implementations.  There is\
      no guarantee that they will not interact in unpredictable ways\
      with other vendor experimental extensions.  There is no guarantee\
      that the same specific experimental extension is not used by\
      multiple vendors in incompatible ways.  Implementations should\
      limit sending those extensions to other implementations.\
\
   Object -  A generic name for any component, property, parameter, or\
      value type to be used in iCalendar.\
\
   Overlapped Booking -  A policy that indicates whether or not\
      components with a "TRANSP" property not set to "TRANSPARENT-\
      NOCONFLICT" or "OPAQUE-NOCONFLICT" value can overlap one another.\
      When the policy is applied to a calendar it indicates whether or\
      not the time span of any component (VEVENT, VTODO, ...) in the\
      calendar can overlap the time span of any other component in the\
      same calendar.  When applied to an individual object, it indicates\
      whether or not any other component's time span can overlap that\
      individual component.  If the CS does not allow overlapped\
      booking, then the CS is unwilling to allow any overlapped bookings\
      within any calendar or entry in the CS.\
\
   Owner -  One or more CUs or UGs that are listed in the "OWNER"\
      property in a calendar.  There can be more than one owner.\
\
   Qualified Calendar Identifier (Qualified CALID) -  A CALID in which\
      both the scheme and CSID of the CAP URI are present.\
\
   Realm -  A collection of calendar user accounts, identified by a\
      string.  The name of the Realm is only used in UPNs.  In order to\
\
\
\
Royer, et al.                 Experimental                     [Page 10]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      avoid namespace conflict, the Realm SHOULD be postfixed with an\
      appropriate DNS domain name (e.g., the foobar Realm could be\
      called foobar.example.com).\
\
   Relative Calendar Identifier (Relative CALID) -  An identifier for an\
      individual calendar in a calendar store.  It MUST be unique within\
      a calendar store.  A Relative CALID consists of the "URL path" of\
      the "Common Internet Scheme Syntax" portion of a URL, as defined\
      by [URI] and [URLGUIDE].\
\
   Session Identity -  A UPN associated with a CAP session.  A session\
      gains an identity after successful authentication.  The identity\
      is used in combination with VCAR to determine access to data in\
      the CS.\
\
   User Group (UG) -  A collection of Calendar Users and/or User Groups.\
      These groups are expanded by the CS and may reside either locally\
      or in an external database or directory.  The group membership may\
      be fixed or dynamic over time.\
\
   Username -  A name that denotes a Calendar User within a Realm.  This\
      is part of a UPN.\
\
   User Principal Name (UPN) -  A unique identifier that denotes a CU or\
      a group of CUs.  (Section 6.1.2)\
\
2.  Additions to iCalendar\
\
   Several new components, properties, parameters, and value types are\
   added in CAP.  This section summarizes those new objects.\
\
   This memo extends the properties that can go into 'calprops' as\
   defined in [iCAL] section 4.6 page 51, to allow [iTIP] objects\
   transmitted between a CAP aware CUA and the CS to contain the\
   "TARGET" and "CMD" properties.  This memo also adds to the [iCAL]\
   ABNF to allow IANA and experimental extensions.  This memo does not\
   address how a CUA transmits [iTIP] or [iMIP] objects to non-CAP\
   programs.  What follows is ABNF, as described in [ABNF].\
\
      calprops= 2*(\
\
                    ; 'prodid' and 'version' are both REQUIRED,\
                    ; but MUST NOT occur more than once.\
                    ;\
                prodid /version /\
                    ;\
                    ; These are optional, but MUST NOT occur\
                    ; more than once.\
\
\
\
Royer, et al.                 Experimental                     [Page 11]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                    ;\
                calscale        /\
                method          /\
                cmd             /\
                    ;\
                    ; Target is optional, and may occur more\
                    ; than once.\
                    ;\
                target / other-props )\
                    ;\
      other-props  = *(x-prop) *(iana-prop) *(other-props)\
                    ;\
      iana-prop   = ; Any property registered by IANA directly or\
                    ; included in an RFC that may be applied to\
                    ; the component and within the rules published.\
                    ;\
      x-prop      = ; As defined in [iCAL].\
                    ;\
      methodp     = ; As defined in [iCAL].\
                    ;\
      prodid      = ; As defined in [iCAL].\
                    ;\
      calscale    = ; As defined in [iCAL].\
                    ;\
\
   Another change is that the 'component' part of the 'icalbody' ABNF as\
   described in [iCAL] section 4.6 is optional when sending a command,\
   as shown in the following updated ABNF:\
\
      icalbody = calprops component\
\
                ; If the "VCALENDAR" component contains the "CMD"\
                ; property then the 'component' is optional:\
                ;\
                / calprops     ; Which MUST include a "CMD" property\
                ;\
      component = ; As defined in [iCAL].\
\
   In addition, a problem exists with the control of "VALARM" components\
   and their "TRIGGER" properties.  A CU may wish to set its own alarms\
   (local alarms) on components.  These local alarms are not to be\
   forwarded to other CUs, CUAs, or CSs.  Similarly, the "SEQUENCE"\
   property and the "ENABLE" parameter in local alarms are not to be\
   forwarded to other CUs, CUAs, or CSs.  Therefore, for the protocol\
   between a CUA and a CS, the following changes from [iCAL] section\
   4.6.6 page 67 apply to the CAP protocol:\
\
        alarmc     = "BEGIN" ":" "VALARM" CRLF\
\
\
\
Royer, et al.                 Experimental                     [Page 12]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                     alarm-seq\
                     other-props\
                     (audioprop / dispprop / emailprop / procprop)\
                     "END" ":" "VALARM" CRLF\
                     ;\
       emailprop   = ; As defined in [iCAL]\
                     ;\
       procprop    = ; As defined in [iCAL]\
                     ;\
       dispprop    = ; As defined in [iCAL]\
                     ;\
       audioprop   = ; As defined in [iCAL]\
                     ;\
       alarm-seq   = "SEQUENCE" alarmseqparams ":" posint0 CRLF\
                     ;\
       alarmseqparams = other-params [";" local-param] other-params\
                     ;\
                     ; Where DIGIT is defined in [iCAL]\
                     ;\
       posint0     = 1*DIGIT\
       posint1     = posintfirst 1*DIGIT\
                     ;\
                     ; A number starting with 1 through 9.\
                     ;\
       posintfirst = %x31-39\
                     ;\
       other-params = *(";" xparam) *(";" iana-params)\
                                    *(";" other-params)\
                     ;\
       iana-params = ; Any parameter registered by IANA directly or\
                     ; included in an RFC that may be applied to\
                     ; the property and within the rules published.\
                     ;\
       xparam        ; As defined in [iCAL].\
                     ;\
\
   The CUA adds a "SEQUENCE" property to each "VALARM" component as it\
   books the component.  This property, along with the "LOCAL" and\
   "ENABLE" parameters, allows the CUA to uniquely identify any VALARM\
   in any component.  The CUA should remove those before forwarding to\
   non-CAP-aware CUAs.\
\
   In addition, if a CUA wished to ignore a "TRIGGER" property in a\
   "VALARM" component that was supplied to it by the "Organizer", the\
   CUA needs a common way to tag that trigger as disabled.  So the\
   following is a modification to [iCAL] section 4.8.6.3 page 127:\
\
      trigger    = "TRIGGER" 1*(";" enable-param) (trigrel / trigabs)\
\
\
\
Royer, et al.                 Experimental                     [Page 13]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                   ;\
      trigrel    = ; As defined in [iCAL].\
                   ;\
      trigabs    = ; As defined in [iCAL].\
\
   See Section 7.2 and Section 7.5.\
\
2.1.  New Value Types (Summary)\
\
   UPN: The UPN value type is a text value type restricted to only UPN\
      values (see Section 6.1.2).\
\
   UPN-FILTER: Like the UPN value type, but also includes filter rules\
      that allow wildcards (see Section 6.1.3).\
\
   CALQUERY: The "CAL-QUERY" value type is a query syntax that is used\
      by the CUA to specify the rules that apply to a CAP command (see\
      Section 6.1.1).\
\
2.1.1.  New Parameters (summary)\
\
   ACTION -  The "ACTION" parameter informs the endpoint if it should\
         abort or ask to continue on timeout.  (Section 7.1)\
\
   ENABLE -  The "ENABLE" parameter in CAP is used to tag a property in\
      a component as disabled or enabled.  (Section 7.2)\
\
   ID -  The "ID" parameter specifies a unique identifier to be used for\
      any outstanding commands.\
\
   LATENCY -  The "LATENCY" parameter supplies the timeout value for\
      command completion to the other endpoint.  (Section 7.4)\
\
   LOCAL -  The "LOCAL" parameter in CAP is used to tag a property in a\
      component to signify that the component is local or to be\
      distributed.  (Section 7.5)\
\
   LOCALIZE -  The "LOCALIZE" parameter specifies the locale to be used\
      in error and warning messages.\
\
   OPTIONS -  The "OPTIONS" parameter passes optional information for\
      the command being sent.\
\
2.1.2.  New or Updated Properties (summary)\
\
   ALLOW-CONFLICT -  Some entries in a calendar might not be valid if\
      other entries were allowed to overlap the same time span.\
      (Section 8.1)\
\
\
\
Royer, et al.                 Experimental                     [Page 14]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   ATT-COUNTER -  When storing a "METHOD" property with the "COUNTER"\
      method, there needs to be a way to remember the "ATTENDEE" value\
      that sent the COUNTER.  (Section 8.2)\
\
   CAP-VERSION -  The version of CAP that the implementation supports.\
      (Section 8.5)\
\
   CAR-LEVEL -  The level of calendar access supported.  (Section 8.7)\
\
   COMPONENTS -  The list of components supported.  (Section 8.8)\
\
   CSID -  The Calendar Store IDentifier (CSID) uniquely identifies a\
      CAP server.  (Section 8.9)\
\
   CALID -  Each calendar within a CS needs to be uniquely identifiable.\
      The "CALID" property identifies a unique calendar within a CS.  It\
      can be a full CALID or a relative CALID.  (Section 8.3)\
\
   CALMASTER -  The "CALMASTER" property specifies the contact\
      information for the CS.  (Section 8.4)\
\
   CARID -  Access rights can be saved and fetched by unique ID - the\
      "CARID" property.  (Section 8.6)\
\
   CMD -  The CAP commands, as well as replies are transmitted using the\
      "CMD" property.  (Section 10.1)\
\
   DECREED -  Some access rights are not changeable by the CUA.  When\
      that is the case, the "DECREED" property value in the "VCAR"\
      component will be "TRUE".  (Section 8.10)\
\
   DEFAULT-CHARSET -  The list of charsets supported by the CS.  The\
      first entry is the default for the CS.  (Section 8.11)\
\
   DEFAULT-LOCALE -  The list of locales supported by the CS.  The first\
      entry in the list is the default locale.  (Section 8.12)\
\
   DEFAULT-TZID -  This is the list of known timezones supported.  The\
      first entry is the default.  (Section 8.13)\
\
   DEFAULT-VCARS -  A list of the "CARID" properties that will be used\
      to create new calendars.  (Section 8.14)\
\
   DENY -  The UPNs listed in the "DENY" property of a "VCAR" component\
      will be denied access, as described in the "VRIGHT" component.\
      (Section 8.15)\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 15]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   EXPAND -  This property tells the CS if the query reply should expand\
      components into multiple instances.  The default is "FALSE" and is\
      ignored for CSs that cannot expand recurrence rules.  (Section\
      8.16)\
\
   GRANT -  The UPNs listed in the "GRANT" property of a "VCAR"\
      component will be allowed access as described in the "VRIGHT"\
      component.  (Section 8.17)\
\
   ITIP-VERSION -  The version of [iTIP] supported.  (Section 8.18)\
\
   MAXDATE -  The maximum date supported by the CS.  (Section 8.20)\
\
   MAX-COMP-SIZE -  The largest component size allowed in the\
      implementation including attachments in octets.  (Section 8.19)\
\
   MINDATE -  The minimum date supported by the CS.  (Section 8.21)\
\
   MULTIPART -  Passed in the capability messages to indicate which MIME\
      multipart types the sender supports.  (Section 8.22)\
\
   NAME -  The "NAME" property is used to add locale-specific\
      descriptions into components.  (Section 8.23)\
\
   OWNER -  Each calendar has at least one "OWNER" property.  (xref\
      target="OWNER"/>) Related to the "CAL-OWNERS()" query clause.\
      (Section 6.1.1.1)\
\
   PERMISSION -  This property specifies the permission being granted or\
      denied.  Examples are the "SEARCH" and "MODIFY" values.  (Section\
      8.25)\
\
   QUERY -  Used to hold the CAL-QUERY (Section 8.26) for the component.\
\
   QUERYID -  A unique id for a stored query.  (Section 8.27)\
\
   QUERY-LEVEL -  The level of the query language supported.  (Section\
      8.28)\
\
   RECUR-ACCEPTED -  If the implementation support recurrence rules.\
      (Section 8.29)\
\
   RECUR-EXPAND -  If the implementation support expanding recurrence\
      rules.  (Section 8.31)\
\
   RECUR-LIMIT -  Any maximum limit on the number of instances the\
      implementation will expand recurring objects.  (Section 8.30)\
\
\
\
\
Royer, et al.                 Experimental                     [Page 16]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   REQUEST-STATUS -  The [iCAL] "REQUEST-STATUS" property is extended to\
      include new error numbers.\
\
   RESTRICTION -  In the final check when granting calendar access\
      requests, the CS test the results of a command for the value of\
      the "RESTRICTION" property in the corresponding "VRIGHT"\
      component, to determine if the access meets that restriction.\
      (Section 8.32)\
\
   SCOPE -  The "SCOPE" property is used in "VRIGHT"s component to\
      select the subset of data that may be acted upon when checking\
      access rights.  (Section 8.33)\
\
   SEQUENCE -  When the "SEQUENCE" property is used in a "VALARM"\
      component, it uniquely identifies the instances of the "VALARM"\
      within that component.\
\
   STORES-EXPANDED -  Specifies if the implementation stores recurring\
      objects expanded or not.  (Section 8.34)\
\
   TARGET -  The new "VCALENDAR" component property "TARGET" (Section\
      8.35) is used to specify which calendar(s) will be the subject of\
      the CAP command.\
\
   TRANSP -  This is a modification of the [iCAL] "TRANSP" property and\
      it allows more values.  The new values are related to conflict\
      control.  (Section 8.36)\
\
2.1.3.  New Components (summary)\
\
   VAGENDA -  CAP allows the fetching and storing of the entire contents\
      of a calendar.  The "VCALENDAR" component is not sufficient to\
      encapsulate all of the needed data that describes a calendar.  The\
      "VAGENDA" component is the encapsulating object for an entire\
      calendar.  (Section 9.1)\
\
   VCALSTORE -  Each CS contains one or more calendars (VAGENDAs), the\
      "VCALSTORE" component is the encapsulating object that can hold\
      all of the "VAGENDA" components along with any components and\
      properties that are unique to the store level.  (Section 9.2)\
\
   VCAR -  Calendar Access Rights are specified and encapsulated in the\
      new iCalendar "VCAR" component.  The "VCAR" component holds some\
      new properties and at least one "VRIGHT" component.  (Section 9.3)\
\
      VRIGHT -  This component encapsulates a set of instructions to the\
      CS to define the rights or restrictions needed.  (Section 9.4)\
\
\
\
\
Royer, et al.                 Experimental                     [Page 17]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   VREPLY -  This component encapsulates a set of data that can consist\
      of an arbitrary number of properties and components.  Its contents\
      are dependent on the command that was issued.  (Section 9.5)\
\
   VQUERY -  The search operation makes use of a new component, called\
      "VQUERY" and a new value type "CAL-QUERY" (Section 6.1.1).  The\
      "VQUERY" component is used to fetch objects from the CS.  (Section\
      9.6)\
\
2.2.  Relationship of RFC-2446 (ITIP) to CAP\
\
   [iTIP] describes scheduling methods that result in indirect\
   manipulation of components.  In CAP, the "CREATE" command is used to\
   deposit entities into the store.  Other CAP commands, such as\
   "DELETE", "MODIFY", and "MOVE" command values, provide direct\
   manipulation of components.  In the CAP calendar store model,\
   scheduling messages are conceptually kept separate from other\
   components by their state.\
\
   All scheduling operations are as defined in [iTIP].  This memo makes\
   no changes to any of the methods or procedures described in [iTIP].\
   In this memo, referring to the presence of the "METHOD" property in\
   an object is the same as saying an [iTIP] object.\
\
   A CUA may create a "BOOKED" state object by depositing an iCalendar\
   object into the store.  This is done by depositing an object that\
   does not have a "METHOD" property.  The CS then knows to set the\
   state of the object to the "BOOKED" state.  If the object has a\
   "METHOD" property, then the object is stored in the "UNPROCESSED"\
   state.\
\
   If existing "UNPROCESSED" state objects exist in the CS for the same\
   UID (UID is defined in [iCAL]), then a CUA may wish to consolidate\
   the objects into one "BOOKED" state object.  The CUA would fetch the\
   "UNPROCESSED" state objects for that UID and process them in the CUA\
   as described in [iTIP].  Then, if the CUA wished to book the UID, the\
   CUA would issue a "CREATE" command to create the new "BOOKED" state\
   object in the CS, followed by a "DELETE" command to remove any\
   related old [iTIP] objects from the CS.  It might also involve the\
   CUA sending some [iMIP] objects or contacting other CSs and\
   performing CAP operations on those CSs.\
\
   The CUA could also decide not to book the object.  In this case, the\
   "UNPROCESSED" state objects could be removed from the CS, or the CUA\
   could set those objects to the marked-for-delete state.  The CUA\
   could also ignore objects for later processing.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 18]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   The marked-for-delete state is used to keep the object around so that\
   the CUA can process duplicate requests automatically.  If a duplicate\
   [iTIP] object is deposited into the CS and there exists identical\
   marked-for-delete objects, then a CUA acting on behalf of the "OWNER"\
   can silently drop those duplicate entries.\
\
   Another purpose for the marked-for-delete state is so that, when a CU\
   decides they do not wish to have the object show in their calendar,\
   the CUA can book the object by changing the "PARTSTAT" parameter to\
   "DECLINED" in the "ATTENDEE" property that corresponds to their UPN.\
   Then the CUA can perform [iTIP] processing such as sending back a\
   decline, and then mark that object as marked-fo-delete.  The CUA\
   might be configurable to automatically drop any updates for that\
   object, knowing the CU has already declined.\
\
   When synchronizing with multiple CUAs, the marked-for-delete state\
   could be used to inform the synchronization process that an object is\
   to be deleted.  How synchronization is done is not specified in this\
   memo.\
\
   Several "UNPROCESSED" state entries can be in the CS for the same\
   UID.  However, once consolidated, only one object exists in the CS\
   and that is the booked object.  The other objects MUST be removed or\
   have their state changed to "DELETED".\
\
   There MUST NOT be more than one "BOOKED" state object in a calendar\
   for the same "UID".  The "ADD" method value may create multiple\
   objects in the "BOOKED" state for the same UID; however, for the\
   purpose of this memo, they are the same object and simply have\
   multiple "VCALENDAR" components.\
\
   For example, if you were on vacation, you could have received a\
   "REQUEST" method to attend a meeting and several updates to that\
   meeting.  Your CUA would have to issue "SEARCH" commands to find them\
   in the CS using CAP, process them, and determine the final state of\
   the object from a possible combination of user input and programmed\
   logic.  Then the CUA would instruct the CS to create a new booked\
   object from the consolidated results.  Finally, the CUA could do a\
   "DELETE" command to remove the related "UNPROCESSED" state objects.\
   See [iTIP] for details on resolving multiple [iTIP] scheduling\
   entries.\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 19]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
3.  CAP Design\
\
3.1.  System Model\
\
   The system model describes the high level components of a calendar\
   system and how they interact with each other.\
\
   CAP is used by a CUA to send commands to, and receive responses from,\
   a CS.\
\
   The CUA prepares a [MIME] encapsulated message, sends it to the CS,\
   and receives a [MIME] encapsulated response.  The calendaring-related\
   information within these messages are represented by iCalendar\
   objects.  In addition, the "GET-CAPABILITY" command can be sent from\
   the CS to the CUA.\
\
   There are two distinct protocols in operation to accomplish this\
   exchange.  [BEEP] is the transport protocol used to move these\
   encapsulations between a CUA and a CS.  CAP's [BEEP] profile defines\
   the application protocol that specifies the content and semantics of\
   the messages sent between the CUA and the CS.\
\
3.2.  Calendar Store Object Model\
\
   [iCAL] describes components such as events, todos, alarms, and\
   timezones.  CAP requires additional object infrastructure, in\
   particular, detailed definitions of the containers for events and\
   todos (calendars), access control objects, and a query language.\
\
   The conceptual model for a calendar store is shown below.  The\
   calendar store (VCALSTORE - Section 9.2) contains "VCAR"s, "VQUERY"s,\
   "VTIMEZONE"s, "VAGENDA"s and calendar store properties.\
\
   Calendars (VAGENDAs) contain "VEVENT"s, "VTODO"s, "VJOURNAL"s,\
   "VCAR"s, "VTIMEZONE"s, "VFREEBUSY", "VQUERY"s, and calendar\
   properties.\
\
   The component "VCALSTORE" is used to denote the root of the calendar\
   store and contains all of the calendars.\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 20]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Calendar Store\
\
         VCALSTORE\
         |\
         +-- properties\
         +-- VCARs\
         +-- VQUERYs\
         +-- VTIMEZONEs\
         +-- VAGENDA\
         |     |\
         |     +--properties\
         |     +--VEVENTs\
         |     |    |\
         |     |    +--VALARMs\
         |     +--VTODOs\
         |     |    |\
         |     |    +--VALARMs\
         |     +--VJOURNALs\
         |     +--VCARs\
         |     +--VTIMEZONEs\
         |     +--VQUERYs\
         |     +--VFREEBUSYs\
         |     |\
         |     |   ...\
         .\
         .\
         +-- VAGENDA\
         .     .\
         .     .\
         .     .\
\
   Calendars within a Calendar Store are identified by their unique\
   Relative CALID.\
\
3.3.  Protocol Model\
\
   CAP uses [BEEP] as the transport and authentication protocol.\
\
   The initial charset MUST be UTF-8 for a session in an unknown locale.\
   If the CS supplied the [BEEP] 'localize' attribute in the [BEEP]\
   'greeting', then the CUA may tell the CS to switch locales for the\
   session by issuing the "SET-LOCALE" CAP command and supplying one of\
   the locales supplied by the [BEEP] 'localize' attribute.  If a locale\
   is supplied, the first locale in the [BEEP] 'localize' attribute is\
   the default locale of the CS.  The locale is switched only after a\
   successful reply.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 21]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   The "DEFAULT-CHARSET" property of the CS contains the list of\
   charsets supported by the CS with the first value being the default\
   for new calendars.  If the CUA wishes to switch to one of those\
   charsets for the session, the CUA issues the "SET-LOCALE" command.\
   The CUA would have to first perform a "GET-CAPABILITY" command on the\
   CS to get the list of charsets supported by the CS.  The charset is\
   switched only after a successful reply.\
\
   The CUA may switch locales and charsets as needed.  There is no\
   requirement that a CS support multiple locales or charsets.\
\
3.3.1.  Use of BEEP, MIME, and iCalendar\
\
   CAP uses the [BEEP] application protocol over TCP.  Refer to [BEEP]\
   and [BEEPTCP] for more information.  The default port on which the CS\
   listens for connections is user port 1026.\
\
   The [BEEP] data exchanged in CAP is a iCalendar MIME content that\
   fully conforms to [iCAL] iCalendar format.\
\
   This example tells the CS to generate and return 10 UIDs to be used\
   by the CUA.  Note that throughout this memo, 'C:' refers to what the\
   CUA sends, 'S:' refers to what the CS sends, 'I:' refers to what the\
   initiator sends, and 'L:' refers to what the listener sends.  Here\
   initiator and listener are used as defined in [BEEP].\
\
      C: MSG 1 2 . 432 62\
      C: Content-Type: text/calendar\
      C:\
      C: BEGIN:VCALENDAR\
      C: VERSION:2.0\
      C: PRODID:-//someone's prodid\
      C: CMD;ID=unique-per-cua-123;OPTIONS=10:GENERATE-UID\
      C: END:VCALENDAR\
\
   NOTE: The following examples will not include the [BEEP] header and\
   footer information.  Only the iCalendar objects that are sent between\
   the CUA and CS will be shown because the [BEEP] payload boundaries\
   are independent of CAP.\
\
   The commands listed below are used to manipulate or access the data\
   on the calendar store:\
\
   ABORT -  Sent to halt the processing of some of the commands.\
      (Section 10.2)\
\
   CONTINUE -  Sent to continue processing a command that has reached\
      its specified timeout time.  (Section 10.3)\
\
\
\
Royer, et al.                 Experimental                     [Page 22]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   CREATE -  Create a new object on the CS.  Initiated only by the CUA.\
      (Section 10.4)\
\
   SET-LOCALE -  Tell the CS to use any named locale and charset\
      supplied.  Initiated by the CUA only.  (Section 10.13)\
\
   DELETE -  Delete objects from the CS.  Initiated only by the CUA.\
      Can also be used to mark an object for deletion.  (Section 10.5)\
\
   GENERATE-UID -  Generate one or more unique ids.  Initiated only by\
      the CUA.  (Section 10.6)\
\
   GET-CAPABILITY - Query the capabilities of the other end point of the\
      session.  (Section 10.7)\
\
   IDENTIFY -  Set a new identity for the session.  Initiated only by\
      the CUA.  (Section 10.8)\
\
   MODIFY -  Modify components.  Initiated by the CUA only.  (Section\
      10.9)\
\
   MOVE -  Move components to another container.  Initiated only by the\
      CUA.  (Section 10.10)\
\
   REPLY -  When replying to a command, the "CMD" value will be set to\
      "REPLY" so that it will not be confused with a new command.\
      (Section 10.11)\
\
   SEARCH -  Search for components.  Initiated only by the CUA.\
      (Section 10.12)\
\
   TIMEOUT -  Sent when a specified amount of time has lapsed and a\
      command has not finished.  (Section 10.14)\
\
4.  Security Model\
\
   BEEP transport performs all session authentication.\
\
4.1.  Calendar User and UPNs\
\
   A CU is an entity that can be authenticated.  It is represented in\
   CAP as a UPN, which is a key part of access rights.  The UPN\
   representation is independent of the authentication mechanism used\
   during a particular CUA/CS interaction.  This is because UPNs are\
   used within VCARs.  If the UPN were dependent on the authentication\
   mechanism, a VCAR could not be consistently evaluated.  A CU may use\
   one mechanism while using one CUA, but the same CU may use a\
\
\
\
\
Royer, et al.                 Experimental                     [Page 23]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   different authentication mechanism when using a different CUA, or\
   while connecting from a different location.\
\
   The user may also have multiple UPNs for various purposes.\
\
   Note that the immutability of the user's UPN may be achieved by using\
   SASL's authorization identity feature.  The transmitted authorization\
   identity may be different than the identity in the client's\
   authentication credentials [SASL, section 3].  This also permits a CU\
   to authenticate using their own credentials, yet request the access\
   privileges of the identity for which they are proxying SASL.  Also,\
   the form of authentication identity supplied by a service like TLS\
   may not correspond to the UPNs used to express a server's access\
   rights, requiring a server-specific mapping to be done.  The method\
   by which a server determines a UPN, based on the authentication\
   credentials supplied by a client, is implementation-specific.  See\
   [BEEP] for authentication details; [BEEP] relies on SASL.\
\
4.1.1.  UPNs and Certificates\
\
   When using X.509 certificates for purposes of CAP authentication, the\
   UPN should appear in the certificate.  Unfortunately, there is no\
   single correct guideline for which field should contain the UPN.\
\
   Quoted from RFC-2459, section 4.1.2.6 (Subject):\
\
         If subject naming information is present only in the\
         subjectAlt-Name extension (e.g., a key bound only to an email\
         address or URI), then the subject name MUST be an empty\
         sequence and the subjectAltName extension MUST be critical.\
\
         Implementations of this specification MAY use these comparison\
         rules to process unfamiliar attribute types (i.e., for name\
         chaining).  This allows implementations to process certificates\
         with unfamiliar attributes in the subject name.\
\
         In addition, legacy implementations exist where an RFC 2822\
         name [RFC2822] is embedded in the subject distinguished name as\
         an EmailAddress attribute.  The attribute value for\
         EmailAddress is of type IA5String to permit inclusion of the\
         character '@', which is not part of the PrintableString\
         character set.  EmailAddress attribute values are not case\
         sensitive (e.g., "fanfeedback@redsox.example.com" is the same\
         as "FANFEEDBACK@REDSOX.EXAMPLE.COM").\
\
         Conforming implementations generating new certificates with\
         electronic mail addresses MUST use the rfc822Name in the\
         subject alternative name field (see sec. 4.2.1.7 of [X509CRL])\
\
\
\
Royer, et al.                 Experimental                     [Page 24]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         to describe such identities.  Simultaneous inclusion of the\
         EmailAddress attribute in the subject distinguished name to\
         support legacy implementations is deprecated but permitted.\
\
   Since no single method of including the UPN in the certificate will\
   work in all cases, CAP implementations MUST support the ability to\
   configure what the mapping will be by the CS administrator.\
   Implementations MAY support multiple mapping definitions, for\
   example, the UPN may be found in either the subject alternative name\
   field, or the UPN may be embedded in the subject distinguished name\
   as an EmailAddress attribute.\
\
   Note: If a CS or CUA is validating data received via [iMIP], if the\
   "ORGANIZER" or "ATTENDEE" properties said, for example,\
   "ATTENDEE;CN=Joe Random User:MAILTO:juser@example.com", then the\
   email address should be checked against the UPN.  This is so the\
   "ATTENDEE" property cannot be changed to something misleading like\
   "ATTENDEE;CN=Joe Rictus User:MAILTO:jrictus@example.com" and have it\
   pass validation.  Note that it is the email addresses that\
   miscompare, the CN miscompare is irrelevant.\
\
4.1.2.  Anonymous Users and Authentication\
\
   Anonymous access is often desirable.  For example, an organization\
   may publish calendar information that does not require any access\
   control for viewing or login.  Conversely, a user may wish to view\
   unrestricted calendar information without revealing their identity.\
\
4.1.3.  User Groups\
\
   A User Group is used to represent a collection of CUs or other UGs\
   that can be referenced in VCARs.  A UG is represented in CAP as a\
   UPN.  The CUA cannot distinguish between a UPN that represents a CU\
   or a UG.\
\
   UGs are expanded as necessary by the CS.  The CS MAY expand a UG\
   (including nested UGs) to obtain a list of unique CUs.  Duplicate\
   UPNs are filtered during expansion.\
\
   How the UG expansion is maintained across commands is\
   implementation-specific.  A UG may reference a static list of\
   members, or it may represent a dynamic list.  Operations SHOULD\
   recognize changes to UG membership.\
\
   CAP does not define commands or methods for managing UGs.\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 25]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
4.2.  Access Rights\
\
   Access rights are used to grant or deny access to calendars,\
   components, properties, and parameters in a CS to a CU.  CAP defines\
   a new component type called a Calendar Access Right (VCAR).\
   Specifically, a "VCAR" component grants, or denies, UPNs the right to\
   search and write components, properties, and parameters on calendars\
   within a CS.\
\
   The "VCAR" component model does not put any restriction on the\
   sequence in which the object and access rights are created.  That is,\
   an object associated with a particular "VCAR" component might be\
   created before or after the actual "VCAR" component is defined.  In\
   addition, the "VCAR" and "VEVENT" components might be created in the\
   same iCalendar object and passed together in a single object.\
\
   All rights MUST be denied unless specifically granted.\
\
   If two rights specified in "VCAR" components are in conflict, the\
   right that denies access always takes precedence over the right that\
   grants access.  Any attempt to create a "VCAR" component that\
   conflicts with a "VCAR" components with a "DECREED" property set to\
   the "TRUE" value must fail.\
\
4.2.1.  Access Control and NOCONFLICT\
\
   The "TRANSP" property can take on values -- "TRANSPARENT-NOCONFLICT"\
   and "OPAQUE-NOCONFLICT" -- that prohibit other components from\
   overlapping it.  This setting overrides access.  The "ALLOW-CONFLICT"\
   CS, Calendar or component setting may also prevent overlap, returning\
   an error code "6.3".\
\
4.2.2.  Predefined VCARs\
\
   The predefined calendar access CARIDs that MUST be implemented are:\
\
      CARID:READBUSYTIMEINFO -  Specifies the "GRANT" and "DENY" rules\
         that allow UPNs to search "VFREEBUSY" components.  An example\
         definition for this VCAR is:\
\
            BEGIN:VCAR\
            CARID:READBUSYTIMEINFO\
            BEGIN:VRIGHT\
            GRANT:*\
            PERMISSION:SEARCH\
            SCOPE:SELECT * FROM VFREEBUSY WHERE STATE() = 'BOOKED'\
            END:VRIGHT\
            END:VCAR\
\
\
\
Royer, et al.                 Experimental                     [Page 26]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      CARID:REQUESTONLY -  Specifies the "GRANT" and "DENY" rules to\
         UPNs other than the owner of the calendar and specifies the\
         ability to write new objects with the "METHOD" property set to\
         the "REQUEST" value.  This CARID allows the owner to specify\
         which UPNs are allowed to make scheduling requests.  An example\
         definition for this VCAR is:\
\
            BEGIN:VCAR\
            CARID:REQUESTONLY\
            BEGIN:VRIGHT\
            GRANT:NON CAL-OWNERS()\
            PERMISSION:CREATE\
            RESTRICTION:SELECT VEVENT FROM VAGENDA\
                WHERE METHOD = 'REQUEST'\
            RESTRICTION:SELECT VTODO FROM VAGEND\
                WHERE METHOD = 'REQUEST'\
            RESTRICTION:SELECT VJOURNAL FROM VAGEND\
                WHERE METHOD = 'REQUEST'\
            END:VRIGHT\
            END:VCAR\
\
      CARID:UPDATEPARTSTATUS -  Grants authenticated users the right to\
         modify the instances of the "ATTENDEE" property set to one of\
         their calendar addresses in any components for any booked\
         component containing an "ATTENDEE" property.  This allows (or\
         denies) a CU the ability to update their own participation\
         status in a calendar where they might not otherwise have\
         "MODIFY" command access.  They are not allowed to change the\
         "ATTENDEE" property value.  An example definition for this VCAR\
         (only affecting the "VEVENT" components) is:\
\
            BEGIN:VCAR\
            CARID:UPDATEPARTSTATUS\
            BEGIN:VRIGHT\
            GRANT:*\
            PERMISSION:MODIFY\
            SCOPE:SELECT ATTENDEE FROM VEVENT\
             WHERE ATTENDEE = SELF()\
             AND ORGANIZER = CURRENT-TARGET()\
             AND STATE() = 'BOOKED'\
            RESTRICTION:SELECT * FROM VEVENT\
             WHERE ATTENDEE = SELF()\
            END:VRIGHT\
            END:VCAR\
\
      CARID:DEFAULTOWNER -  Grants to any owner the permission they have\
         for the target.  An example definition for this VCAR is:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 27]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
            BEGIN:VCAR\
            CARID:DEFAULTOWNER\
            BEGIN:VRIGHT\
            GRANT:CAL-OWNERS()\
            PERMISSION:*\
            SCOPE:SELECT * FROM VAGENDA\
            END:VRIGHT\
            END:VCAR\
\
4.2.3.  Decreed VCARs\
\
   A CS MAY choose to implement and allow persistent immutable VCARs\
   that may be configured by the CS administrator.  A reply from the CS\
   may dynamically create "VCAR" components that are decreed depending\
   on the implementation.  To the CUA, any "VCAR" component with the\
   "DECREED" property set to "TRUE" cannot be changed by the currently\
   authenticated UPN, and, depending on the implementation and other\
   "VCAR" components, might not be able to be changed by any UPN using\
   CAP (never when the CUA gets a "DECREED:TRUE" VCAR).\
\
   When a user attempts to modify or override a decreed "VCAR" component\
   rules, an error will be returned indicating that the user has\
   insufficient authorization to perform the operation.  The reply to\
   the CUA MUST be the same as if a non-decreed VCAR caused the failure.\
\
   The CAP protocol does not define the semantics used to initially\
   create a decreed VCAR.  This administrative task is outside the scope\
   of the CAP protocol.\
\
   For example, an implementation or a CS administrator may wish to\
   define a VCAR that will always allow the calendar owners to have full\
   access to their own calendars.\
\
   Decreed "VCAR" components MUST be readable by the calendar owner in\
   standard "VCAR" component format.\
\
4.3.  CAP Session Identity\
\
   A [BEEP] session has an associated set of authentication credentials,\
   from which is derived a UPN.  This UPN is the identity of the CAP\
   session, and is used to determine access rights for the session.\
\
   The CUA may change the identity of a CAP session by calling the\
   "IDENTIFY" command.  The CS only permits the operation if the\
   session's authentication credentials are good for the requested\
   identity.  The method of checking this permission is implementation-\
   dependent, but it may be thought of as a mapping from authentication\
   credentials to UPNs.  The "IDENTIFY" command allows a single set of\
\
\
\
Royer, et al.                 Experimental                     [Page 28]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   authentication credentials to choose from multiple identities, and\
   allows multiple sets of authentication credentials to assume the same\
   identity.\
\
   For anonymous access, the identity of the session is "@".  A UPN with\
   a null Username and null Realm is anonymous.  A UPN with a null\
   Username but non-null Realm (e.g.,"@example.com") may be used to mean\
   any identity from that Realm.  This is useful to grant access rights\
   to all users in a given Realm.  A UPN with a non-null Username and\
   null Realm (e.g., "bob@") could be a security risk and MUST NOT be\
   used.\
\
   Because the UPN includes Realm information, it may be used to govern\
   calendar store access rights across Realms.  However, governing\
   access rights across Realms is only useful if login access is\
   available.  This could be done through a trusted server relationship\
   or a temporary account.  Note that trusted server relationships are\
   outside the scope of CAP.\
\
   The "IDENTIFY" command also provides for a weak group implementation.\
   By allowing multiple sets of authentication credentials belonging to\
   different users to identify as the same UPN, that UPN essentially\
   identifies a group of people, and may be used for group calendar\
   ownership, or the granting of access rights to a group.\
\
5.  CAP URL and Calendar Address\
\
   The CAP URL scheme is used to designate both calendar stores and\
   calendars accessible using the CAP protocol.\
\
   The CAP URL scheme conforms to the generic URL syntax defined in RFC\
   2396 and follows the Guidelines for URL Schemes set forth in RFC\
   2718.\
\
   A CAP URL begins with the protocol prefix "cap" and is defined by the\
   following grammar.\
\
      capurl   = "cap://" csidpart [ "/" relcalid ]\
                      ;\
      csidpart = hostport   ; As defined in Section 3.2.2 of RFC 2396\
                            ;\
      relcalid = *uric      ; As defined in Section 2 of RFC 2396\
\
   A 'relcalid' is an identifier that uniquely identifies a calendar on\
   a particular calendar store.  There is no implied structure in a\
   Relative CALID (relcalid).  It may refer to the calendar of a user or\
   of a resource such as a conference room.  It MUST be unique within\
   the calendar store.\
\
\
\
Royer, et al.                 Experimental                     [Page 29]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Here are some examples:\
\
      cap://cal.example.com\
      cap://cal.example.com/Company/Holidays\
      cap://cal.example.com/abcd1234Usr\
\
   A 'relcalid' is permitted and is resolved according to the rules\
   defined in Section 5 of RFC 2396.\
\
   Examples of valid relative CAP URLs:\
\
      opqaueXzz123String\
      UserName/Personal\
\
   Calendar addresses can be described as qualified or relative CAP\
   URLs.\
\
   For a user currently authenticated to the CS on cal.example.com,\
   these two example calendar addresses refer to the same calendar:\
\
      cap://cal.example.com/abcd1234USR\
      abcd1234USR\
\
6.  New Value Types\
\
   The following sections contains new components, properties,\
   parameters, and value definitions.\
\
   The purpose of these is to extend the iCalendar objects in a\
   compatible way so that existing iCalendar "VERSION" property "2.0"\
   value parsers can still parse the objects without modification.\
\
6.1.  Property Value Data Types\
\
6.1.1.  CAL-QUERY Value Type\
\
   Subject: Registration of text/calendar MIME value type CAL-QUERY\
\
   Value Name: CAL-QUERY\
\
   Value Type Purpose: This value type is used to identify values and\
      contains query statements targeted at locating those values.  This\
      is based on [SQL92] and [SQLCOM].\
\
      1.  For the purpose of a query, all components should be handled\
          as tables, and the properties of those components should be\
          handled as columns.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 30]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      2.  All VAGENDAs and CSs look like tables for the purpose of a\
          QUERY, and all of their properties look like columns in those\
          tables.\
\
      3.  You MUST NOT do any cross-component-type joins.  That means\
          you can ONLY have one component OR one "VAGENDA" component OR\
          one "VCALSTORE" component in the "FROM" clause.\
\
      4.  Everything in the "SELECT" clause and "WHERE" clauses MUST be\
          from the same component type or "VAGENDA" component OR\
          "VCALSTORE" component in the "FROM" clause.\
\
      5.  When multiple "QUERY" properties are supplied in a single\
          "VQUERY" component, the results returned are the same as the\
          results returned for multiple "VQUERY" components that each\
          have a single "QUERY" property.\
\
      6.  The '.' is used to separate the table name (component) and\
          column name (property or component) when selecting a property\
          that is contained inside a component that is targeted in the\
          TARGET property.\
\
      7.  A contained component without a '.' is not the same as\
          "component-name.*".  If given as "component-name" (no dot),\
          the encapsulating BEGIN/END statement will be supplied for\
          "component-name".\
\
   In the following example, '.' is used to separate the "TRIGGER"\
   property from its contained component (VALARM), which is contained in\
   any "VEVENT" component in the selected "TARGET" property value (a\
   relcalid).  All "TRIGGER" properties in any "VEVENT" component in\
   relcalid would be returned.\
\
      TARGET:relcalid\
      QUERY:SELECT VALARM.TRIGGER FROM VEVENT\
      SELECT VALARM FROM VEVENT WHERE UID = "123"\
\
   This returns one BEGIN/END "VALARM" component for each "VALARM"\
   component in the matching "VEVENT" component.  As there is no '.'\
   (dot) in the VALARM after the SELECT above, it returns:\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 31]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      BEGIN:VALARM\
      TRIGGER;RELATED=END:PT5M\
      REPEAT:4\
      ...\
      END:VALARM\
      BEGIN:VALARM\
      TRIGGER;RELATED=START:PT5M\
      DURATION:PT10M\
      ...\
      END:VALARM\
      ...\
      ...\
\
  If the SELECT parameter is provided as "component-name.*", then only\
  the properties and any contained components will be returned.  The\
  example:\
\
     SELECT VALARM.* FROM VEVENT WHERE UID = "123"\
\
  will return all of the properties in each "VALARM" component in the\
  matching "VEVENT" component:\
\
      TRIGGER;RELATED=END:PT5M\
      REPEAT:4\
      ...\
      TRIGGER;RELATED=START:PT5M\
      DURATION:PT10M\
      ...\
      ...\
\
  In the following SELECT clauses:\
\
     (a) SELECT <a-property-name> FROM VEVENT\
\
     (b) SELECT VALARM FROM VEVENT\
\
     (c) SELECT VALARM.* FROM VEVENT\
\
     (d) SELECT * FROM VEVENT\
\
     (e) SELECT * FROM VEVENT WHERE\
             VALARM.TRIGGER < '20020201T000000Z'\
             AND VALARM.TRIGGER > '20020101T000000Z'\
\
  Clause (a) elects all instances of <a-property-name> from all "VEVENT"\
  components.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 32]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
  Clauses (b) and (c) select all "VALARM" components from all "VEVENT"\
  components. (b) would return them in BEGIN/END VALARM tags. (c) would\
  return all of the properties without BEGIN/END VALARM tags.\
\
  Clause (d) selects every property and every component that is in any\
  "VEVENT" component, with each "VEVENT" component wrapped in a\
  BEGIN/END VEVENT tags.\
\
  Clause (e) selects all properties and all contained components in all\
  "VEVENT" components that have a "VALARM" component with a "TRIGGER"\
  property value between the provided dates and times, with each\
  "VEVENT" component wrapped in BEGIN/END VEVENT tags.\
\
   Here are two invalid SELECT clauses:\
\
      (f) SELECT VEVENT.VALARM.TRIGGER FROM VEVENT\
\
      (g) SELECT DTSTART,UID FROM VEVENT\
            WHERE VTODO.SUMMERY = "Fix typo in CAP"\
\
   Clause (f) is invalid because it contains two '.' characters.\
\
   Clause (g) Is invalid because it mixes VEVENT\
   and VTODO properties in the same VQUERY.\
\
   Formal Definition: The value type is defined by the following\
   notation:\
\
     cal-query  = "SELECT"   SP   cap-val  SP\
                  "FROM"     SP   comp-name SP\
                  "WHERE"    SP   cap-expr\
\
                / "SELECT" SP cap-cols SP\
                  "FROM"   SP comp-name\
                  ;\
     cap-val    = cap-cols / param\
                / ( cap-val "," cap-val )\
\
                  ; NOTE: there is NO space around the "," on\
                  ; the next line\
     cap-cols   = cap-col / ( cap-cols "," cap-col)\
                  / "*"\
                  / "*.*" ; only valid when the target is a "VAGENDA"\
                  ;\
                  ; A 'cap-col' is:\
                  ;\
                  ; Any property name ('cap-prop') found in the\
                  ; component named in the 'comp-name' used in the\
\
\
\
Royer, et al.                 Experimental                     [Page 33]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                  ; "FROM" clause.\
                  ;\
                  ;   SELECT ORGANIZER FROM VEVENT ...\
                  ;\
                  ; OR\
                  ;\
                  ; A component name ('comp-name') of an existing\
                  ; component contained inside of the 'comp-name'\
                  ; used in the "FROM" clause.\
                  ;\
                  ;   SELECT VALARM FROM VEVENT ...\
                  ;\
                  ; OR\
                  ;\
                  ; A component name ('comp-name') of an existing\
                  ; component contained inside of the 'comp-name' used\
                  ; in the "FROM" clause followed by a property\
                  ; name ('cap-prop') to be selected from that\
                  ; component.\
                  ; (comp-name "." cap-prop)\
\
                  ;   SELECT VALARM.TRIGGER FROM VEVENT ...\
\
     cap-col    = comp-name\
                / comp-name "." cap-prop\
                / cap-prop\
\
     comp-name  = "VEVENT"  / "VTODO"     / "VJOURNAL" / "VFREEBUSY"\
                / "VALARM"  / "DAYLIGHT"  / "STANDARD" / "VAGENDA"\
                / "VCAR"    / "VCALSTORE" / "VQUERY"   / "VTIMEZONE"\
                / "VRIGHT"  / x-comp    / iana-comp\
\
     cap-prop   = ; A property that may be in the 'cap-comp' named\
                  ; in the "SELECT" clause.\
\
     cap-expr   = "(" cap-expr ")"\
                / cap-term\
\
     cap-term   = cap-expr SP cap-logical SP cap-expr\
                / cap-factor\
\
     cap-logical= "AND" / "OR"\
\
     cap-factor = cap-colval SP cap-oper SP col-value\
                / cap-colval SP "LIKE" SP col-value\
                / cap-colval SP "NOT LIKE" SP col-value\
                / cap-colval SP "IS NULL"\
                / cap-colval SP "IS NOT NULL"\
\
\
\
Royer, et al.                 Experimental                     [Page 34]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                / col-value SP "IN" cap-colval\
                / col-value SP "NOT IN" cap-colval\
                / "STATE()" "=" ( "BOOKED"\
                                 / "UNPROCESSED"\
                                 / "DELETED"\
                                 / iana-state\
                                 / x-state )\
                  ;\
     iana-state = ; Any state registered by IANA directly or\
                  ; included in an RFC that may be applied to\
                  ; the component and within the rules published.\
                  ;\
     x-state    = ; Any experimental state that starts with\
                  ; "x-" or "X-".\
\
     cap-colval = cap-col /  param\
                  ;\
     param      = "PARAM(" cap-col "," cap-param ")"\
                  ;\
     cap-param  = ; Any parameter that may be contained in the cap-col\
                  ; in the supplied PARAM() function\
\
     col-value  = col-literal\
                / "SELF()"\
                / "CAL-OWNERS()"\
                / "CAL-OWNERS(" cal-address ")"\
                / "CURRENT-TARGET()"\
                   ;\
     cal-address = ; A CALID as define by CAP\
                   ;\
     col-literal = "'" literal-data "'"\
                   ;\
     literal-data = ; Any data that matches the value type of the\
                   ; column that is being compared.  That is, you\
                   ; cannot compare PRIORITY to "some string" because\
                   ; PRIORITY has a value type of integer.  If it is\
                   ; not preceded by the LIKE element, any '%' and '_'\
                   ; characters in the literal data are not treated as\
                   ; wildcard characters and do not have to be\
                   ; backslash-escaped.\
                   ;\
                   ; OR\
                   ;\
                   ; If the literal-data is preceded by the LIKE\
                   ; element it may also contain the '%' and '_'\
                   ; wildcard characters.  And, if the literal data\
                   ; that is comparing contains any '%' or '_'\
                   ; characters, they MUST be backslash-escaped as\
\
\
\
Royer, et al.                 Experimental                     [Page 35]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                   ; described in the notes below, in order for them\
                   ; not to be treated as wildcard characters.\
                   ;\
                   ; And, if the literal data contains any characters\
                   ; that would have to be backslash-escaped if\
                   ; a property or parameter value, then they must\
                   ; be backslash-escaped in the literal-data.\
                   ; Also, the quote character (') must be backslash\
                   ; escaped.  Example:\
                   ;\
                   ; ... WHERE SUBJECT = 'It\\'s time to ski'\
                   ;\
     cap-oper    = "="\
                 / "!="\
                 / "<"\
                 / ">"\
                 / "<="\
                 / ">="\
                   ;\
     SP          = ; A single white space ASCII character\
                   ; (value in HEX %x20).\
                   ;\
     x-comp      = ; As defined in [iCAL] section 4.6.\
                   ;\
     iana-comp   = ; As defined in [iCAL] section 4.6.\
\
6.1.1.1.  [NOT] CAL-OWNERS()\
\
   This function returns the list of "OWNER" properties for the named\
   calendar when used in the "SELECT" clause.\
\
   If called as 'CAL-OWNERS()', it is equivalent to the comma-separated\
   list of all of the owners of the calendar that match the provided\
   "TARGET" property value.  If the target is a "VCALSTORE", it returns\
   the "CALMASTER" property.\
\
   If called as 'CAL-OWNERS(cal-address)', then it is the equivalent to\
   the comma-separated list of owners for the named calendar id.  If\
   'cal-address' is a CS, it returns the "CALMASTER" property.\
\
   If used in the "WHERE" clause, it returns true if the currently\
   authenticated UPN is an owner of the currently selected object\
   matched in the provided "TARGET" property.  Used in a CAL-QUERY\
   "WHERE" clause and in the UPN-FILTER.\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 36]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
6.1.1.2.  CURRENT-TARGET()\
\
   This is equivalent to the value of the "TARGET" property in the\
   current command.  It is used in a CAL-QUERY "WHERE" clause.\
\
6.1.1.3.  PARAM()\
\
   This is used in a CAL-QUERY.  It returns or tests for the value of\
   the named parameter from the named property.\
\
6.1.1.3.1.  PARAM() in SELECT\
\
   When used in a "SELECT" clause, it returns the entire property and\
   all of that property's parameters; the result is not limited to the\
   supplied parameter.  If the property does not contain the named\
   parameter, then the property is not returned.  However, it could be\
   returned as a result of another "SELECT" clause value.  If multiple\
   properties of the supplied name have the named parameter, all\
   properties with that named parameter are returned.  If multiple\
   PARAM() clauses in a single "SELECT" CLAUSE match the same property,\
   then the single matching property is returned only once.\
\
   Also, note that many parameters have default values defined in [iCAL]\
   that must be treated as existing with their default value in the\
   properties, as defined in [iCAL], even when not explicitly present.\
   For example, if a query were performed with PARAM(ATTENDEE,ROLE) then\
   ALL "ATTENDEE" properties would match because, even when they do not\
   explicitly contain the "ROLE" parameter, it has a default value and\
   therefore must match.\
\
   Therefore, when PARAM() is used in a "SELECT" clause, it is more\
   accurate to say that it means return the property, if it contains the\
   named parameter explicitly in the property or simply because the\
   parameter has a default for that property.\
\
6.1.1.3.2.  PARAM() in WHERE\
\
   When PARAM() is used in the "WHERE" clause, a match is true when the\
   parameter value matches the compare clause (according to the supplied\
   WHERE values).  If multiple named properties contain the named\
   parameter, then each parameter value is compared in turn to the\
   condition; if any match, the results would be true for that condition\
   the same as if only one had existed.  Each matching property or\
   component is returned only once.\
\
   Because a parameter may be multi-valued, the comparison might need to\
   be done with an "IN" or "NOT IN" comparator.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 37]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Given the following query:\
\
      ATTENDEE;PARTSTAT=ACCEPTED:cap://host.com/joe\
\
      SELECT VEVENT FROM VAGENDA\
       WHERE PARAM(ATTENDEE,PARTSTAT) = 'ACCEPTED'\
\
   Thus, all "VEVENT" components that contain one or more "ATTENDEE"\
   properties that have a "PARTSTAT" parameter with a "ACCEPTED" value\
   would be returned.  Also, each uniquely matching VEVENT would be\
   returned only once, no matter how many "ATTENDEE" properties had\
   matching roles, in each unique "VEVENT" component.\
\
   Also note that many parameters have default values defined in [iCAL].\
   Therefore, if the following query were performed on the "ATTENDEE"\
   property in the above example:\
\
      SELECT VEVENT FROM VAGENDA\
       WHERE PARAM(ATTENDEE,ROLE) = 'REQ-PARTICIPANT'\
\
   It would return the "ATTENDEE" property shown above because the\
   default value for the "ROLE" parameter is "REQ-PARTICIPANT".\
\
6.1.1.4.  SELF()\
\
   Used in a CAL-QUERY "WHERE" clause.  Returns the UPN of the currently\
   authenticated UPN or their current UPN as a result of an IDENTIFY\
   command.\
\
6.1.1.5.  STATE()\
\
   Returns one of three values, "BOOKED", "UNPROCESSED", or "DELETED"\
   depending on the state of the object.  "DELETED" is a component in\
   the marked-for-delete state.  Components that have been removed from\
   the store are never returned.\
\
   If not specified in a query then both "BOOKED" and "UNPROCESSED" data\
   is returned.  Each unique "METHOD" property must be in a separate\
   MIME object, per the [iCAL] section 3.2 restriction.\
\
6.1.1.6.  Use of Single Quote\
\
   All literal values are surrounded by single quotes ('), not double\
   quotes ("), and not without any quotes.  If the value contains quotes\
   or any other ESCAPED-CHAR, they MUST be backslash-escaped as\
   described in section 4.3.11 "Text" of [iCAL].  Any "LIKE" clause\
   wildcard characters that are part of any literal data that is\
   preceded by a "LIKE" clause or "NOT LIKE" clause and is not intended\
\
\
\
Royer, et al.                 Experimental                     [Page 38]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   to mean wildcard search MUST be escaped as described in note (7)\
   below.\
\
6.1.1.7.  Comparing DATE and DATE-TIME Values\
\
   When comparing "DATE-TIME" values to "DATE" values and when comparing\
   "DATE" values to "DATE-TIME" values, the result will be true if the\
   "DATE" value is on the same day as the "DATE-TIME" value.  They are\
   compared in UTC no matter what time zone the data may have been\
   stored in.\
\
   Local time event, as described in section 4.2.19 of [iCAL], must be\
   considered to be in the CUA default timezone that was supplied by the\
   CUA in the "CAPABILITY" exchange.\
\
      VALUE-1             VALUE-2            Compare Results\
\
      20020304            20020304T123456    TRUE\
      (in UTC-3)          (in UTC-3)\
\
      20020304            20020304T003456    FALSE\
      (in UTC)            (in UTC-4)\
\
      20020304T003456Z    20020205T003456    FALSE\
      (in UTC-0)          (in UTC-7)\
\
   When "DATE" values and "DATE-TIME" values are compared with the\
   "LIKE" clause, the comparison will be done as if the value is a\
   [iCAL] DATE or DATE-TIME string value.\
\
      LIKE '2002%' will match anything in the year 2002.\
\
      LIKE '200201%' will match anything in January 2002.\
\
      LIKE '%T000000' will match anything at midnight.\
\
      LIKE '____01__T%' will match anything for any year or\
                    time that is in January.\
                    (Four '_', '01', two '_' 'T%').\
\
   Using a "LIKE" clause value of "%00%", would return any value that\
   contained two consecutive zeros.\
\
   All comparisons will be done in UTC.\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 39]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
6.1.1.8.  DTEND and DURATION\
\
   The "DTEND" property value is not included in the time occupied by\
   the component.  That is, a "DTEND" property value of 20030614T12000\
   includes all of the time up to, but not including, noon on that day.\
\
   The "DURATION" property value end time is also not inclusive.  So an\
   object with a "DTSTART" property value of 20030514T110000 and a\
   "DURATION" property value of "1H" does not include noon on that day.\
\
   When a "QUERY" property value contains a "DTEND" value, then the CS\
   MUST also evaluate any existing "DURATION" property value and\
   determine if it has an effective end time that matches the "QUERY"\
   property supplied "DTEND" value or any range of values supplied by\
   the "QUERY" property.\
\
   When a "QUERY" property contains a "DURATION" value, then the CS MUST\
   also evaluate any existing "DTEND" property values and determine if\
   they have an effective duration that matches the value, or any range\
   of values, supplied by the "QUERY" property.\
\
6.1.1.9.  [NOT] LIKE\
\
   The pattern matching characters are the '%' that matches zero or more\
   characters, and '_' that matches exactly one character (where\
   character does not always mean octet).\
\
   "LIKE" clause pattern matches always cover the entire string.  To\
   match a pattern anywhere within a string, the pattern must start and\
   end with a percent sign.\
\
   To match a '%' or '_' in the data and not have it interpreted as a\
   wildcard character, they MUST be backslash-escaped.  Thus, to search\
   for a '%' or '_' in the string:\
\
      LIKE '%\\%%'    Matches any string with a '%' in it.\
      LIKE '%\\_%'    Matches any string with a '_' in it.\
\
   Strings compared using the "LIKE" clause MUST be performed using case\
   insensitive comparisoison assumes 'a' = 'A').\
\
   If the "LIKE" clause is preceded by 'NOT' then there is a match when\
   the string compare fails.\
\
   Some property values (such as the 'recur' value type), contain commas\
   and are not multi-valued.  The CS must understand the objects being\
   compared and understand how to determine how any multi-valued or\
   multi-instances properties or parameter values are separated, quoted,\
\
\
\
Royer, et al.                 Experimental                     [Page 40]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   and backslash-escaped.  THE CS must perform the comparisons as if\
   each value existed by itself and was not quoted or backslash-escaped,\
   when comparing using the LIKE element.\
\
   See related examples in Section 6.1.1.11.\
\
6.1.1.10.  Empty vs. NULL\
\
   When used in a CAL-QUERY value, "NULL" means that the property or\
   parameter is not present in the object.  Paramaters that are not\
   provided and have a default value in the property are considered to\
   exist with their default value and will not be "NULL".\
\
      If the property exists but has no value, then "NULL" MUST NOT\
      match.\
\
      If the parameter exists but has no value, then "NULL" MUST NOT\
      match.\
\
      If the parameter not present and has a default value, then "NULL"\
      MUST NOT match.\
\
      If the property (or parameter) exists but has no value, then it\
      matches the empty string '' (quote quote).\
\
6.1.1.11.  [NOT] IN\
\
   This is similar to the "LIKE" clause, except it does value matching\
   and not string comparison matches.\
\
   Some iCalendar objects can be multi-instance and multi-valued.  The\
   "IN" clause will return a match if the literal value supplied as part\
   of the "IN" clause is contained in the value of any instance of the\
   named property or parameter, or is in any of the multiple values in\
   the named property or parameter.  Unlike the "LIKE" clause, the '%'\
   and '_' matching characters are not used with the "IN" clause and\
   have no special meaning.\
\
             BEGIN:A-COMPONENT\
      (a)      property:value1,value2        One property, two values.\
      (b)      property:"value1,value2"      One property, one value.\
      (c)      property:parameter=1,2:x      One parameter, two values.\
      (d)      property:parameter="1,2",3:y  One parameter, one value.\
      (e)      property:parameter=",":z      One parameter, one value.\
      (f)      property:x,y,z                One property, three values\
             END:A-COMPONENT\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 41]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   In this example:\
\
      'value1' IN property          would match (a) only.\
      'value1,value2' IN property   would match (b) only.\
      'value%'  IN property         would NOT match any.\
      ',' IN property               would NOT match any.\
      '%,%' IN property             would NOT match any.\
      'x' IN property               would match (f) and (c).\
      '2' IN parameter              would match (c) only.\
      '1,2' IN parameter            would match (d) only.\
      ',' IN parameter              would match (e) only.\
      '%,%' IN parameter            would NOT match any.\
\
      property  LIKE 'value1%'      would match (a) and (b).\
      property  LIKE 'value%'       would match (a) and (b).\
      property  LIKE 'x'            would match (f) and (c).\
      parameter LIKE '1%'           would match (c) and (d).\
      parameter LIKE '%2%'          would match (c) and (d).\
      parameter LIKE ','            would match (e) only.\
\
   Some property values (such as the "RECUR" value type), contain commas\
   and are not multi-valued.  The CS must understand the objects being\
   compared and understand how to determine how any multi-valued or\
   multi-instance properties or parameter values are separated, quoted,\
   and backslash-escaped and perform the comparisons as if each value\
   existed by itself and not quoted or backslash-escaped when comparing\
   using the IN element.\
\
   If the "IN" clause is preceded by 'NOT', then there is a match when\
   the value does not exist in the property or parameter value.\
\
6.1.1.12.  DATE-TIME and TIME Values in a WHERE Clause\
\
   All "DATE-TIME" and "TIME" literal values supplied in a "WHERE"\
   clause MUST be terminated with 'Z'.  That means that the CUA MUST\
   supply the values in UTC.\
\
   Valid:\
\
      WHERE alarm.TRIGGER < '20020201T000000Z'\
      AND alarm.TRIGGER > '20020101T000000Z'\
\
   Not valid; it is a syntax error and the CS MUST reject the QUERY:\
\
      WHERE alarm.TRIGGER < '20020201T000000'\
      AND alarm.TRIGGER > '20020101T000000'\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 42]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
6.1.1.13.  Multiple Contained Components\
\
   If a query references a component and a component or property\
   contained in the component, any clauses referring to the contained\
   component or property must be evaluated on all of the contained\
   components or properties.  If any of the contained components or\
   properties match the query, and the conditions on the containing\
   component are also true, the component matches the query.\
\
   For example, in the query below, if a BOOKED VEVENT contains multiple\
   VALARMs, and the VALARM.TRIGGER clause is true for any of the VALARMs\
   in the VEVENT, then the UID, SUMMARY, and DESCRIPTION of this VEVENT\
   would be included in the QUERY results.\
\
      BEGIN:VQUERY\
      EXPAND:TRUE\
      QUERY:SELECT UID,SUMMARY,DESCRIPTION FROM VEVENT\
      WHERE VALARM.TRIGGER >= '20000101T030405Z'\
      AND VALARM.TRIGGER <= '20001231T235959Z'\
      AND STATE() = 'BOOKED'\
      END:VQUERY\
\
6.1.1.14.  Example, Query by UID\
\
   The following example would match the entire content of a "VEVENT" or\
   "VTODO" component with the "UID" property equal to "uid123" , and it\
   would not expand any multiple instances of the component.  If the CUA\
   does not know  if "uid123" was a "VEVENT", "VTODO", "VJOURNAL", or\
   any other component, then all components that the CUA supports MUST\
   be supplied in a QUERY property.  This example assumes the CUA is\
   only interested in "VTODO" and "VEVENT" components.\
\
   If the results were empty it could also mean that "uid123" was a\
   property in a component other than a VTODO or VEVENT.\
\
      BEGIN:VQUERY\
      QUERY:SELECT * FROM VTODO WHERE UID = 'uid123'\
      QUERY:SELECT * FROM VEVENT WHERE UID = 'uid123'\
      END:VQUERY\
\
6.1.1.15.  Query by Date-Time Range\
\
      This query selects the entire content of every booked "VEVENT"\
      component that has an instance greater than or equal to July 1,\
      2000 00:00:00 UTC and less than or equal to July 30, 2000 23:59:59\
      UTC.  This includes single instance "VEVENT" components that do\
      not explicitly contain any recurrence properties or "RECURRENCE-\
      ID" properties.  This works only for CSs that have the "RECUR-\
\
\
\
Royer, et al.                 Experimental                     [Page 43]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      EXPAND" property value set to "TRUE" in the "GET-CAPABILITY"\
      exchange.\
\
      BEGIN:VQUERY\
      EXPAND:TRUE\
      QUERY:SELECT * FROM VEVENT\
      WHERE RECURRENCE-ID >= '20000701T000000Z'\
      AND RECURRENCE-ID <= '20000730T235959Z'\
      AND STATE() = 'BOOKED'\
      END:VQUERY\
\
6.1.1.16.  Query for All Unprocessed Entries\
\
   The following example selects the entire contents of all non-booked\
   "VTODO" and "VEVENT" components in the "UNPROCESSED" state.  The\
   default for the "EXPAND" property is "FALSE", so the recurrence rules\
   will not be expanded.\
\
      BEGIN:VQUERY\
      QUERYID:Fetch VEVENT and VTODO iTIP components\
      QUERY:SELECT * FROM VEVENT WHERE STATE() = 'UNPROCESSED'\
      QUERY:SELECT * FROM VTODO WHERE STATE() = 'UNPROCESSED'\
      END:VQUERY\
\
   The following example fetches all "VEVENT" and "VTODO" components in\
   the "BOOKED" state.\
\
      BEGIN:VQUERY\
      QUERYID:Fetch All Booked VEVENT and VTODO components\
      QUERY:SELECT * FROM VEVENT WHERE STATE() = 'BOOKED'\
      QUERY:SELECT * FROM VTODO WHERE STATE() = 'BOOKED'\
      END:VQUERY\
\
   The following fetches the "UID" property for all "VEVENT" and "VTODO"\
   components that have been marked for delete.\
\
      BEGIN:VQUERY\
      QUERYID:Fetch UIDs of marked-for-delete VEVENTs and VTODOs\
      QUERY:SELECT UID FROM VEVENT WHERE STATE() = 'DELETED'\
      QUERY:SELECT UID FROM VTODO WHERE STATE() = 'DELETED'\
      END:VQUERY\
\
6.1.1.17.  Query with Subset of Properties by Date/Time\
\
   In this example, only the named properties will be selected, and all\
   booked and non-booked components have a "DTSTART" value from February\
   1st to February 10th 2000 (in UTC) will also be selected.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 44]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      BEGIN:VQUERY\
      QUERY:SELECT UID,DTSTART,DESCRIPTION,SUMMARY FROM VEVENT\
      WHERE DTSTART >= '20000201T000000Z'\
      AND DTSTART <= '20000210T235959Z'\
      END:VQUERY\
\
6.1.1.18.  Query with Components and Alarms in A Range\
\
   This example fetches all booked "VEVENT" components with an alarm\
   that triggers within the specified time range.  In this case only the\
   "UID", "SUMMARY", and "DESCRIPTION" properties will be selected for\
   all booked "VEVENTS" components that have an alarm between the two\
   date-times supplied.\
\
      BEGIN:VQUERY\
      EXPAND:TRUE\
      QUERY:SELECT UID,SUMMARY,DESCRIPTION FROM VEVENT\
      WHERE VALARM.TRIGGER >= '20000101T030405Z'\
      AND VALARM.TRIGGER <= '20001231T235959Z'\
      AND STATE() = 'BOOKED'\
      END:VQUERY\
\
6.1.2.  UPN Value Type\
\
   Value Name: UPN\
\
   Purpose: This value type is used to identify values that contain user\
      principal name of a CU or a group of CUs.\
\
   Formal Definition: The value type is defined by the following\
      notation:\
\
                   ;\
         upn        = "@"\
                 / [ dot-atom-text ] "@" dot-atom-text\
                   ;\
                   ; dot-atom-text is defined in RFC 2822 [RFC2822]\
                   ;\
                   ;\
         dot-atom-text = ; As defined in [iCAL].\
\
   Description: This data type is an identifier that denotes a CU or a\
      group of CU.  A UPN is an RFC 2822-compliant email address\
      [RFC2822], with exceptions listed below, and in most cases it is\
      deliverable to the CU.  In some cases it is identical to the CU's\
      well known email address.  A CU's UPN MUST never be an e-mail\
      address that is deliverable to a different person.  And there is\
      no requirement that a person's UPN MUST be their e-mail address.\
\
\
\
Royer, et al.                 Experimental                     [Page 45]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      A UPN is formatted as a user name followed by "@", followed by a\
      Realm in the form of a valid and unique DNS domain name.  The user\
      name MUST be unique within the Realm.  In its simplest form it\
      looks like "user@example.com".\
\
      In certain cases a UPN will not be RFC 2822-compliant.  When\
      anonymous authentication is used, or anonymous authorization is\
      being defined, the special UPN "@" will be used.  When\
      authentication MUST be used, but unique identity MUST be obscured,\
      a UPN of the form @DNS-domain-name may be used.  For example,\
      "@example.com".\
\
   Example:\
\
      The following is a UPN for a CU:\
\
         jdoe@example.com\
\
      The following is an example of a UPN that could be for a group of\
      CU:\
\
         staff@example.com\
\
      The following is a UPN for an anonymous CU that belongs to a\
      specific realm.  When used as a UPN-FILTER, it applies to all UPNs\
      in a specific realm:\
\
         @example.com\
\
      The following is a UPN for an anonymous CU:\
\
         @\
\
6.1.3.  UPN-FILTER Value\
\
   Value Name: UPN-FILTER\
\
   Purpose: This value type is used to identify values that contain a\
      user principal name filter.\
\
   Formal Definition: The value type is defined by the following\
      notation:\
\
                      ;\
                      ; NOTE: "CAL-OWNERS(cal-address)"\
                      ;       and "NOT CAL-OWNERS(cal-address)"\
                      ;       are both NOT allowed below.\
                      ;\
\
\
\
Royer, et al.                 Experimental                     [Page 46]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         upn-filter    = "CAL-OWNERS()" /\
                         "NOT CAL-OWNERS()" /\
                         "*" /\
                   [ "*" / dot-atom-text ] "@" ( "*" / dot-atom-text )\
                      ;\
                      ; dot-atom-text is defined in RFC 2822\
\
   Description: The value is used to match user principal names (UPNs).\
   For "CAL-OWNERS()" and "NOT CAL-OWNERS()", see Section 8.24.\
\
      *           Matches all UPNs.\
\
      @           Matches the UPN of anonymous CUs\
                  belonging to the null realm\
\
      @*          Matches the UPN of anonymous CUs\
                  belonging to any non-null realm\
\
      @realm      Matches the UPN of anonymous CUs\
                  belonging to the specified realm.\
\
      *@*         Matches the UPN of non-anonymous CUs\
                  belonging to any non-null realm\
\
      *@realm     Matches the UPN of non-anonymous CUs\
                  belonging to the specified realm\
\
      user@realm  Matches the UPN of the specified CU\
                  belonging to the specified realm\
\
      user@*      Not allowed.\
\
      user@       Not allowed.\
\
   Example: The following are examples of this value type:\
\
      DENY:NON CAL-OWNERS()\
      DENY:@hackers.example.com\
      DENY:*@hackers.example.com\
      GRANT:sam@example.com\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 47]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
7.  New Parameters\
\
7.1.  ACTION Parameter\
\
   Parameter Name: ACTION\
\
   Purpose: This parameter indicates the action to be taken when a\
      timeout occurs.\
\
   Value Type: TEXT\
\
   Conformance: This property can be specified in the "CMD" property.\
\
      When present in a "CMD" property, the "ACTION" parameter specifies\
      the action to be taken when the command timeout expires.\
\
   Formal Definition: The parameter is defined by the following\
      notation:\
\
         action-param     = ";" "ACTION" "=" ( "ASK" / "ABORT" )\
                             ; If 'action-param' is supplied then\
                             ; 'latency-param' MUST be supplied.\
\
   Example:\
\
         CMD;LATENCY=10;ACTION=ASK:CREATE\
\
7.2.  ENABLE Parameter\
\
   Parameter Name: ENABLE\
\
   Purpose: This parameter indicates whether or not the property should\
      be ignored.  For example, it can indicate that a "TRIGGER"\
      property in a "VALARM" component should be ignored.\
\
   Value Type: BOOLEAN\
\
   Conformance: This property can be specified in the "TRIGGER"\
      properties.\
\
   Description: When a non owner sends an [iTIP] "REQUEST" to a calendar\
      that object might contain a "VALARM" component.  The owner may\
      wish to have local control over their own CUA and when or how\
      alarms are triggered.\
\
      A CUA may add the "ENABLE" parameter to any "TRIGGER" property\
      before booking the component.  If the "ENABLE" parameter is set to\
      "FALSE", then the alarm will be ignored by the CUA.  If set to\
\
\
\
Royer, et al.                 Experimental                     [Page 48]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      "TRUE", or if the "ENABLE" property is not in the "TRIGGER"\
      property, the alarm is enabled.  This parameter may not be known\
      by pre-CAP implementations, but this should not be an issue as it\
      conforms to an 'ianaparam' [iCAL].\
\
   Formal Definition: The property is defined by the following notation:\
\
         enable-param       = "ENABLE" "=" boolean\
                              ;\
         boolean            = ; As defined in [iCAL].\
\
   Example: The following is an example of this property for a "VAGENDA"\
      component:\
\
         TRIGGER;ENABLE=FALSE;RELATED=END:PT5M\
\
7.3.  ID Parameter\
\
   Parameter Name: ID\
\
   Purpose: When used in a "CMD" component, it provides a unique\
      identifier.\
\
   Value Type: TEXT\
\
   Conformance: This parameter can be specified in the "CMD" property.\
\
   Description: If more than one command is sent, then the "ID"\
      parameter is used to uniquely identify the command.\
\
      A CUA may add the "ID" parameter to any "CMD" property before\
      sending the command.  There must not be more than one outstanding\
      command tagged with the same "ID" parameter value.\
\
   Formal Definition: The property is defined by the following notation:\
\
         id-param         = ";" "ID" "=" unique-id\
                          ; The text value supplied is a unique value\
                          ; shared between the CUA and CS to uniquely\
                          ; identify the instance of command in the\
                          ; the current CUA session.  The value has\
                          ; no meaning to other CUAs or other sessions.\
                          ;\
         unique-id        = ; text\
                          ;\
         text             = ; As defined in [iCAL].\
\
      Example: The following is an example of this parameter component:\
\
\
\
Royer, et al.                 Experimental                     [Page 49]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         CMD;UD=some-unique-value:CREATE\
\
7.4.  LATENCY Parameter\
\
   Parameter Name: LATENCY\
\
   Purpose: This parameter indicates time in seconds for when a timeout\
      occurs.\
\
   Value Type: TEXT\
\
   Conformance: This property can be specified in the "CMD" property.\
\
   When present in a "CMD" property, the "LATENCY" parameter specifies\
      the time in seconds when the command timeout expires.\
\
   Formal Definition: The parameter is defined by the following\
      notation:\
\
         latency-param    = ";" "LATENCY" "=" latency-sec\
                          ; The value supplied in the time in seconds.\
                          ; If 'latency-param' is supplied then\
                          ; 'action-param' MUST be supplied.\
                          ;\
         latency-sec      = posint1\
\
                          ; Default is zero (0) meaning no timeout.\
\
   Example: The following is an example of this parameter:\
\
         CMD;LATENCY=10;ACTION=ASK:CREATE\
\
7.5.  LOCAL Parameter\
\
   Parameter Name: LOCAL\
\
   Purpose: Indicates if the named component should be exported to any\
      non-organizer calendar.\
\
   Value Type: BOOLEAN\
\
   Conformance: This parameter can be specified in the "SEQUENCE"\
      properties in a "VALARM" component.\
\
   Description: When a non-owner sends an [iTIP] "REQUEST" to a calendar\
      that object might contain a "VALARM" component.  The owner may\
      wish to have local control over their own CUA and when or how\
      alarms are triggered.\
\
\
\
Royer, et al.                 Experimental                     [Page 50]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      A CUA may add the "LOCAL" parameter to the "SEQUENCE" property\
      before booking the component.  If the "LOCAL" parameter is set to\
      "TRUE", then the alarm MUST NOT be forwarded to any other\
      calendar.  If set to "FALSE", or if the "LOCAL" parameter is not\
      in the "SEQUENCE" property, the alarm is global.\
\
   Formal Definition: The property is defined by the following notation:\
\
         local-param        = "LOCAL" "=" boolean\
\
      Example: The following is an example of this parameter:\
\
         SEQUENCE;LOCAL=TRUE:4\
\
7.6.  LOCALIZE Parameter\
\
   Parameter Name: LOCALIZE\
\
   Purpose: If provided, specifies the desired language for error and\
      warning messages.\
\
   Value Type: TEXT\
\
   Conformance: This parameter can be specified in the "CMD" properties.\
\
      When the "LOCALIZE" parameter is supplied, its value MUST be one\
      of the values listed in the initial [BEEP] greeting 'localize'\
      attribute.\
\
      A CUA may add the "LOCALIZE" parameter to the "CMD" property to\
      specify the language of any error or warning messages.\
\
   Formal Definition: The property is defined by the following notation:\
\
         localize-param   = ";" "LOCALIZE" "=" beep-localize\
                          ;\
         beep-localize    = text ; As defined in [BEEP]\
                          ; The value supplied MUST be one value from\
                          ; the initial [BEEP] greeting 'localize'\
                          ; attribute, specifying the locale to use\
                          ; for error messages during\
                          ; this instance of the command.\
\
   Example: The following is an example of this parameter:\
\
         CMD;LOCALIZE=fr_CA:CREATE\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 51]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
7.7.  OPTIONS Parameter\
\
   Parameter Name: OPTIONS\
\
   Purpose: If provided the "OPTIONS" parameter specifies some "CMD"\
      property-specific options.\
\
   Value Type: TEXT\
\
   Conformance: This parameter can be specified in the "CMD" properties.\
\
      A CUA adds the "OPTIONS" parameter to the "CMD" property when the\
      command needs extra values.\
\
   Formal Definition: The property is defined by the following notation:\
\
         option-param     = ";" "OPTIONS" "=" cmd-specific\
                            ;\
         cmd-specific     = ; The value supplied is dependent on the\
                            ; CMD value.  See the specific CMDs for the\
                            ; correct values to use for each CMD.\
\
   Example: The following is an example of this parameter:\
\
         CMD;OPTIONS=10:GENERATE-UID\
\
8.  New Properties\
\
8.1.  ALLOW-CONFLICT Property\
\
   Property Name: ALLOW-CONFLICT\
\
   Purpose: This property indicates whether or not the calendar and CS\
      supports component conflicts.  That is, whether or not any of the\
      components in the calendar can overlap.\
\
   Value Type: BOOLEAN\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VAGENDA" and\
      "VCALSTORE" component.\
\
   Description: This property is used to indicate whether components may\
      conflict, that is, whether their expanded instances may share the\
      same time or overlap the same time periods.  If it has a value of\
\
\
\
\
Royer, et al.                 Experimental                     [Page 52]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      "TRUE", then conflicts are allowed.  If "FALSE", the no two\
      components may conflict.\
\
      If "FALSE" in the "VCALSTORE" component, then all "VAGENDA"\
      component "ALLOW-CONFLICT" property values MUST be "FALSE" in the\
      CS.\
\
   Formal Definition: The property is defined by the following notation:\
\
         allow-conflict     = "ALLOW-CONFLICT" other-params ":" boolean\
      CRLF\
\
   Example: The following is an example of this property for a "VAGENDA"\
      component:\
\
         ALLOW-CONFLICT:FALSE\
\
8.2.  ATT-COUNTER Property\
\
   Property Name: ATT-COUNTER\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property MUST be specified in an iCalendar object\
      that specifies a counter proposal to a group-scheduled calendar\
      entity.  When storing a "METHOD" property with the "COUNTER"\
      method, there needs to be a way to remember who sent the COUNTER.\
      The ATT-COUNTER property MUST be added to all "COUNTER" [iTIP]\
      components by the CUA before storing in a CS.\
\
   Description: This property is used to identify the CAL-ADDRESS of the\
      entity that sent the "COUNTER" [iTIP] object.\
\
   Formal Definition: The property is defined by the following notation:\
\
         attcounter   = "ATT-COUNTER" other-params ":" cal-address CRLF\
\
   Examples:\
\
            ATT-COUNTER:cap:example.com/Doug\
            ATT-COUNTER:mailto:Doug@Example.com\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 53]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
8.3.  CALID Property\
\
   Property Name: CALID\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in the "VAGENDA"\
      component.\
\
   Description: This property is used to specify a fully-qualified\
      CALID.\
\
   Formal Definition: The property is defined by the following notation:\
\
         calid   = "CALID" other-params ":" relcalid CRLF\
\
   Example:\
\
         CALID:cap://cal.example.com/sdfifgty4321\
\
8.4.  CALMASTER Property\
\
   Property Name: CALMASTER\
\
   Purpose: The property specifies an e-mail address of a person\
   responsible for the calendar store.\
\
   Value Type: URI\
\
   Property Parameters: Non-standard property parameters can be\
   specified on this property.\
\
   Conformance: The property can be specified in a "VCALSTORE"\
   component.\
\
   Description: The parameter value SHOULD be a MAILTO URI as defined in\
   [URL].  It MUST be a contact URI such as a MAILTO URI and not a home\
   page or file URI that describes how to contact the calmasters.\
\
   Formal Definition: The property is defined by the following notation:\
\
      calmaster = "CALMASTER" other-params ":" uri CRLF\
                ;\
      uri       = ; IANA registered uri as defined in [iCAL].\
\
   Example: The following is an example of this property:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 54]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         CALMASTER:mailto:administrator@example.com\
\
8.5.  CAP-VERSION Property\
\
   Property Name: CAP-VERSION\
\
   Purpose: This property specifies the version of CAP supported.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property is specified in the "VREPLY" component\
      that is sent in response to a "GET-CAPABILITY" command.\
\
   Description: This specifies the version of CAP that the endpoint\
      supports.  The list is a comma-separated list of supported RFC\
      numbers.  The list MUST contain at least 4324.\
\
   Formal Definition: The property is defined by the following notation:\
\
         cap-version   = "CAP-VERSION" other-params ":" text CRLF\
\
   Example: The following are examples of this property:\
\
         CAP-VERSION:4324\
\
8.6.  CARID Property\
\
   Property Name: CARID\
\
   Purpose: This property specifies the identifier for an access right\
      component.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property MUST be specified once in a "VCAR"\
      component.\
\
   Description: This property is used in the "VCAR" component to specify\
      an identifier.  A "CARID" property value is unique per container.\
\
   Formal Definition: The property is defined by the following notation:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 55]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         carid      = "CARID" other-params ":" text CRLF\
\
   Example: The following are examples of this property:\
\
         CARID:xyzzy-007\
         CARID:User Rights\
\
8.7.  CAR-LEVEL Property\
\
   Property Name: CAR-LEVEL\
\
   Purpose: The property specifies the level of VCAR supported.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in a "VREPLY" component\
      that is sent in response to a "GET-CAPABILITY" command.\
\
   Description: The value is one from a list of "CAR-NONE", "CAR-MIN",\
      or "CAR-FULL-1".  If "CAR-FULL-1" is supplied, then "CAR-MIN" is\
      also available.  A "CAR-MIN" implementation only supported the\
      "DEFAULT-VCARS" property values listed in the "VCALSTORE"\
      component, and a "CAR-MIN" implementation does not support the\
      creation or modification of "VCAR" components from the CUA.\
\
   Formal Definition: The property is defined by the following notation:\
\
         car-level        = "CAR-LEVEL" ":" other-params ":"\
                                                car-level-values\
\
         car-level-values = ( "CAR-NONE" / "CAR-MIN" / "CAR-FULL-1"\
                              / other-levels )\
\
         other-levels     = ; Any name published in an RFC for a\
                            ; "CAR-LEVEL" property value.\
\
   Example: The following is an example of this property:\
\
            CAR-LEVEL:CAR-FULL-1\
\
8.8.  COMPONENTS Property\
\
   Property Name: COMPONENTS\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 56]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Purpose: The property specifies a the list of components supported by\
      the endpoint.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in a "VREPLY" component in\
      response to a "GET-CAPABILITY" command.\
\
   Description: A comma-separated list of components that are supported\
      by the endpoint.  A component that is not in the list sent from\
      the endpoint is not supported by that endpoint.  Sending an\
      unsupported component results in unpredictable results.  This\
      includes any components inside of other components (VALARM for\
      example).  The recommended list is\
      "VCALSTORE,VCALENDAR,VREPLY,VAGENDA,\
      VEVENT,VALARM,VTIMEZONE,VJOURNAL,VTODO,VALARM,\
      DAYLIGHT,STANDARD,VCAR,VRIGHT,VQUERY".\
\
   Formal Definition: The property is defined by the following notation:\
\
      components     = "COMPONENTS" other-params ":" comp-list CRLF\
                     ;\
                     ; All of these MUST be supplied only once.\
                     ;\
      comp-list-req  = "VCALSTORE" "," "VCALENDAR" "," "VTIMEZONE" ","\
                       "VREPLY"    "," "VAGENDA"   "," "STANDARD"  ","\
                       "DAYLIGHT"\
                     ; At least one MUST be supplied. The same value\
                     ; MUST NOT occur more than once.\
                     ;\
      comp-list-min  = ( "," "VEVENT")\
                     / ( "," "VTODO")\
                     / ( "," "VJOURNAL" )\
                     ; The same value MUST NOT occur\
                     ; more than once.  If "VCAR" is supplied then\
                     ; "VRIGHT" must be supplied.\
                     ;\
      comp-list-opt  = ( "," "VFREEBUSY" ) / ( "," "VALARM" )\
                       / ( "," "VCAR" )    / ( "," "VRIGHT" )\
                       / ( "," "VQUERY")   / ( "," x-comp )\
                       / ( "," iana-comp )\
                     ;\
      comp-list      = comp-list-req 1*3comp-list-min *(comp-list-opt)\
\
   Example: The following is an example of this property:\
\
\
\
Royer, et al.                 Experimental                     [Page 57]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         COMPONENTS:VCALSTORE,VCALENDAR,VREPLY,VAGENDA,\
         VEVENT,VALARM,VTIMEZONE,VJOURNAL,VTODO,\
         DAYLIGHT,STANDARD,VFREEBUSY,VCAR,VRIGHT,VQUERY\
\
8.9.  CSID Property\
\
   Property Name: CSID\
\
   Purpose: The property specifies a globally unique identifier for the\
      calendar store.\
\
   Value Type: URI\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in a "VCALSTORE"\
      component.\
\
   Description: The identifier MUST be globally unique.  Each CS needs\
      its own unique identifier.  The "CSID" property is the official\
      unique identifier for the CS.  If the BEEP 'serverName' attribute\
      was supplied in the BEEP 'start' message, then the CSID will be\
      mapped to the virtual host name supplied, and the host name part\
      of the CSID MUST be the same as the 'serverName' value.  This\
      allows one CS implementation to service multiple virtual hosts.\
      CS's are not required to support virtual hosting.  If a CS does\
      not support virtual hosting, then it must ignore the BEEP\
      'serverName' attribute.\
\
   Formal Definition: The property is defined by the following notation:\
\
         csid = "CSID" other-params ":" capurl CRLF\
\
   Example: The following is an example of this property:\
\
         CSID:cap://calendar.example.com\
\
8.10.  DECREED Property\
\
   Property Name: DECREED\
\
   Purpose: This property specifies if an access right calendar\
      component is decreed or not.\
\
   Value Type: BOOLEAN\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 58]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property MAY be specified once in a "VCAR"\
      component.\
\
   Description: This property is used in the "VCAR" component to specify\
      whether the component is decreed or not.  If the "DECREED"\
      property value is "TRUE" then the CUA will be unable to change the\
      contents of the "VCAR" component and any attempt will fail with an\
      error.\
\
   Formal Definition: The property is defined by the following notation:\
\
         decreed      = "DECREED" other-params ":" boolean CRLF\
\
   Example: The following is an example of this property:\
\
         DECREED:TRUE\
\
8.11.  DEFAULT-CHARSET Property\
\
   Property Name: DEFAULT-CHARSET\
\
   Purpose: This property indicates the default charset.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VAGENDA" and\
      "VCALSTORE" calendar component.\
\
   Description: In a "VAGENDA" component this property is used to\
      indicate the charset of calendar.  If not specified, the default\
      is the first value in the "VCALSTORE" components "DEFAULT-CHARSET"\
      property value list.  The value MUST be an IANA registered\
      character set as defined in [CHARREG].\
\
   In a "VCALSTORE" component it is a comma-separated list of charsets\
      supported by the CS.  The first entry is the default entry for all\
      newly created "VAGENDA" components.  The "UTF-8" value MUST be in\
      the "VCALSTORE" component "DEFAULT-CHARSET" property list.  All\
      compliant\
\
      CAP implementations (CS and CUA) MUST support at least the "UTF-8"\
      charset.\
\
\
\
Royer, et al.                 Experimental                     [Page 59]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      If a charset name contains a comma (,), that comma must be\
      backslash-escaped in the value.\
\
   Formal Definition: The property is defined by the following notation:\
\
         default-charset     = "DEFAULT-CHARSET" other-params ":" text\
         *( "," text) CRLF\
\
   Example: The following is an example of this property for a "VAGENDA"\
   component:\
\
      DEFAULT-CHARSET:Shift_JIS,UTF-8\
\
8.12.  DEFAULT-LOCALE Property\
\
   Property Name: DEFAULT-LOCALE\
\
   Purpose: This property specifies the default language for text\
      values.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VAGENDA" and\
      "VCALSTORE" components.\
\
   Description: In a "VAGENDA" component, the "DEFAULT-LOCALE" property\
      is used to indicate the locale of the calendar.  The full locale\
      SHOULD be used.  The default and minimum locale is POSIX (aka the\
      'C' locale).\
\
      In a "VCALSTORE" component, it is a comma-separated list of\
      locales supported by the CS.  The first value in the list is the\
      default for all newly created VAGENDAs.  "POSIX" MUST be in the\
      list.\
\
   Formal Definition: The property is defined by the following notation:\
\
         default-locale     = "DEFAULT-LOCALE" other-params ":" language\
                               *( "," language) CRLF\
                    ;\
         language = ; Text identifying a locale, as defined in [CHARPOL]\
\
   Example: The following is an example of this property:\
\
      DEFAULT-LOCALE:en-US.iso-8859-1,POSIX\
\
\
\
Royer, et al.                 Experimental                     [Page 60]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
8.13.  DEFAULT-TZID Property\
\
   Property Name: DEFAULT-TZID\
\
   Purpose: This property specifies the text value that specifies the\
      time zones.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property may be specified once in a "VAGENDA" and\
      "VCALSTORE" components.\
\
   Description: A multi-valued property that lists the known time zones.\
      The first is the default.  Here "TZID" property values are the\
      same as the "TZID" property defined in [iCAL].\
\
      If used in a "VCALSTORE" component, it is a comma-separated list\
      of TZIDs known to the CS.  The entry is used as the default TZID\
      list for all newly created calendars.  The list MUST contain at\
      least "UTC".  A "VCALSTORE" components MUST contain one\
      "VTIMEZONE" component for each value in the "DEFAULT-TZID"\
      property value.\
\
      If used in a "VAGENDA" component, it is a comma-separated list of\
      "TZID" property values naming the time zones known to the\
      calendar.  The first time zone in the list is the default and is\
      used as the localtime for objects that contain a date or date-time\
      value without a time zone.  All "VAGENDA" components MUST have one\
      "VTIMEZONE" component contained for each value in the "DEFAULT-\
      TZID" property value.\
\
      If a "TZID" property value contains a comma (,), the comma must be\
      backslash-escaped.\
\
   Formal Definition: This property is defined by the following\
      notation:\
\
         default-tzid       = "DEFAULT-TZID" other-params\
                              ":" [tzidprefix] text\
                              *("," [tzidprefix] text) CRLF\
                              ;\
         txidprefix         = ; As defined in [iCAL].\
\
   Example: The following is an example of this property:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 61]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      DEFAULT-TZID:US/Mountain,UTC\
\
8.14.  DEFAULT-VCARS Property\
\
   Property Name: DEFAULT-VCARS\
\
   Purpose: This property is used to specify the "CARID" property ids of\
      the default "VCAR" components for newly created "VAGENDA"\
      components.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property MUST be specified in "VCALSTORE" calendar\
      component and MUST at least specify the following values:\
      "READBUSYTIMEINFO", "REQUESTONLY", "UPDATEPARTSTATUS", and\
      "DEFAULTOWNER".\
\
   Description: This property is used in the "VCALSTORE" component to\
      specify the "CARID" value of the "VCAR" components that MUST be\
      copied into now "VAGENDA" components at creation time by the CS.\
      All "DEFAULT-VCAR" values must have "VCARS" components stored in\
      the "VCALSTORE".\
\
   Formal Definition: The property is defined by the following notation:\
\
         defautl-vcars      = "DEFAULT-VCARS" other-params ":" text\
         *( "," text ) CRLF\
\
   Example: The following is an example of this property:\
\
         DEFAULT-VCARS:READBUSYTIMEINFO,REQUESTONLY,\
          UPDATEPARTSTATUS,DEFAULTOWNER\
\
8.15.  DENY Property\
\
   Property Name: DENY\
\
   Purpose: This property identifies the UPN(s) being denied access in\
      the "VRIGHT" component.\
\
   Value Type: UPN-FILTER\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 62]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Conformance: This property can be specified in "VRIGHT" components.\
\
   Description: This property is used in the "VRIGHT" component to\
      define the CU or UG being denied access.\
\
   Formal Definition: The property is defined by the following notation:\
\
         deny       = "DENY" other-params ":" upn-filter CRLF\
\
   Example: The following are examples of this property:\
\
         DENY:*\
\
         DENY:bob@example.com\
\
8.16.  EXPAND property\
\
   Property Name: EXPAND\
\
   Purpose: This property is used to notify the CS whether to expand any\
      component with recurrence rules into multiple instances, in a\
      query reply.\
\
   Value Type: BOOLEAN\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VQUERY" components.\
\
   Description: If a CUA wishes to see all of the instances of a\
      recurring component, the CUA sets EXPAND=TRUE in the "VQUERY"\
      component.  If not specified, the default is "FALSE".  Note that\
      if the CS has its "RECUR-EXPAND" CS property value set to "FALSE",\
      then the "EXPAND" property will be ignored and the result will be\
      as if the "EXPAND" value was set to "FALSE".  The results will be\
      bounded by any date range or other limits in the query.\
\
   Formal Definition: The property is defined by the following notation:\
\
         expand     = "EXPAND" other-params ":" ("TRUE" / "FALSE") CRLF\
\
   Example: The following are examples of this property:\
\
         EXPAND:FALSE\
         EXPAND:TRUE\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 63]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
8.17.  GRANT Property\
\
   Property Name: GRANT\
\
   Purpose: This property identifies the UPN(s) being granted access in\
      the "VRIGHT" component.\
\
   Value Type: UPN-FILTER\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VRIGHT" calendar\
      components.\
\
   Description: This property is used in the "VRIGHT" component to\
      specify the CU or UG being granted access.\
\
   Formal Definition: The property is defined by the following notation:\
\
         grant     = "GRANT" other-params ":" upn-filter CRLF\
\
   Example: The following are examples of this property:\
\
         GRANT:*\
\
         GRANT:bob@example.com\
\
8.18.  ITIP-VERSION Property\
\
   Property Name: ITIP-VERSION\
\
   Purpose: This property specifies the version of ITIP supported.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property is specified in the "VREPLY" component\
      that is sent in response to a "GET-CAPABILITY" command.\
\
   Description: This specifies the version of ITIP that the endpoint\
      supports.  The list is a comma-separated list of supported RFC\
      numbers.  The list MUST contain at least 2446, which is [iTIP]\
\
   Formal Definition: The property is defined by the following notation:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 64]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         itip-version   = "ITIP-VERSION" other-params ":" text CRLF\
\
   Example: The following are examples of this property:\
\
         ITIP-VERSION:2446\
\
8.19.  MAX-COMP-SIZE Property\
\
   Property Name: MAX-COMP-SIZE\
\
   Purpose: This property specifies the largest size of any object\
      accepted.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property is specified in the "VREPLY" component\
      that is sent in response to a "GET-CAPABILITY" command.\
\
   Description: A positive integer value that specifies the size of the\
      largest iCalendar object that can be accepted in octets.  Objects\
      larger than this will be rejected.  A value of zero (0) means no\
      limit.  This is also the maximum value of any [BEEP] payload that\
      will be accepted or sent.\
\
   Formal Definition: The property is defined by the following notation:\
\
         max-comp-size   = "MAX-COMP-SIZE" other-params ":" posint0 CRLF\
\
   Example: The following are examples of this property:\
\
         MAX-COMP-SIZE:1024\
\
8.20.  MAXDATE Property\
\
   Property Name: MAXDATE\
\
   Purpose: This property specifies the date/time in the future, beyond\
      which the CS or CUA cannot represent.\
\
   Value Type: DATE-TIME\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 65]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Conformance: The property can be specified in the "VCALSTORE"\
      component.\
\
   Description: The date and time MUST be a UTC value and end with 'Z'.\
\
   Formal Definition: The property is defined by the following notation:\
\
         maxdate    = "MAXDATE" other-params ":" date-time CRLF\
\
   Example: The following is an example of this property:\
\
         MAXDATE:20990101T000000Z\
\
8.21.  MINDATE Property\
\
   Property Name: MINDATE\
\
   Purpose: This property specifies the date/time in the past, prior to\
      which the server cannot represent.\
\
   Value Type: DATE-TIME\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in the "VCALSTORE"\
      component.\
\
   Description: The date and time MUST be a UTC value and end with 'Z'.\
\
   Formal Definition: The property is defined by the following notation:\
\
         mindate    = "MINDATE" other-params ":" date-time CRLF\
\
         date-time = ; As defined in [iCAL].\
\
   Example: The following is an example of this property:\
\
         MINDATE:19710101T000000Z\
\
8.22.  MULTIPART Property\
\
   Property Name: MULTIPART\
\
   Purpose: This property provides a comma-separated list of supported\
      MIME multipart types supported by the sender.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 66]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property is specified in the "VREPLY" component\
      that is sent in response to a "GET-CAPABILITY" command.\
\
   Description: This property is used in the in the "GET-CAPABILITY"\
      command reply to indicate the MIME multipart types supported.  A\
      CS and CUA SHOULD support all registered MIME multipart types.\
\
   Formal Definition: The property is defined by the following notation:\
\
         multipart = "MULTIPART" other-params ":" text *( "," text) CRLF\
\
   Example: The following is an example of this property:\
\
         MULTIPART:related,alternate,mixed\
\
8.23.  NAME Property\
\
   Property Name: NAME\
\
   Purpose: This property provides a localizable display name for a\
      component.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in a component.\
\
   Description: This property is used in the component to specify a\
      localizable display name.  If more than one "NAME" properties are\
      in a component, then they MUST have unique "LANG" parameters.  If\
      the "LANG" parameter is not supplied, then it defaults to the\
      "VAGENDA" component's "DEFAULT-LOCALE" first value.  If the\
      component is a "VAGENDA", then the default value is the "VAGENDA"s\
      component's "DEFAULT-LOCALE" first value.  A "VCALSTORE"\
      component's "DEFAULT-LOCALE" first value is the default if the\
      component is stored at the "VCALSTORE" level.\
\
   Formal Definition: The property is defined by the following notation:\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 67]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         name          = "NAME" nameparam ":" text CRLF\
                         ;\
         nameparam     = other-params [ ";" languageparam ] other-params\
                         ;\
         languageparam = ; As defined in [iCAL].\
\
   Example: The following is an example of this property:\
\
         NAME:Restrict Guests From Creating VALARMs On VEVENTs\
\
8.24.  OWNER Property\
\
   Property Name: OWNER\
\
   Purpose: The property specifies an owner of the component.\
\
   Value Type: UPN\
\
   Property Parameters: Non-standard, alternate text representation and\
      language property parameters can be specified on this property.\
\
   Conformance: The property MUST be specified in a "VAGENDA" component.\
\
   Description: A multi-instanced property indicating the calendar\
      owner.\
\
   Formal Definition: The property is defined by the following notation:\
\
         owner = "OWNER" other-params ":" upn CRLF\
\
   Example: The following is an example of this property:\
\
         OWNER:jsmith@example.com\
         OWNER:jdough@example.com\
\
8.25.  PERMISSION Property\
\
   Property Name: PERMISSION\
\
   Purpose: This property defines a permission that is granted or denied\
      in a "VRIGHT" component.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VRIGHT" components.\
\
\
\
Royer, et al.                 Experimental                     [Page 68]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Description: This property is used in the "VRIGHT" component to\
      define a permission that is granted or denied.\
\
   Formal Definition: The property is defined by the following notation:\
\
         permission  = "PERMISSION" other-params ":" permvalue CRLF\
                       ;\
         permvalue = ( "SEARCH" / "CREATE" / "DELETE"\
                     / "MODIFY" / "MOVE" / all\
                     / iana-cmd / x-cmd )\
                       ;\
         all         = "*"\
                       ;\
         iana-cmd    = ; Any command registered by IANA directly or\
                       ; included in an RFC that may be applied as\
                       ; a command.\
                       ;\
         x-cmd       = ; Any experimental command that starts with\
                       ; "x-" or "X-".\
\
   Example: The following is an example of this property:\
\
      PERMISSION:SEARCH\
\
8.26.  QUERY property\
\
   Property Name: QUERY\
\
   Purpose: Specifies the query for the component.\
\
   Value Type: CAL-QUERY\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VQUERY" components.\
\
   Description: A "QUERY" is used to specify the "CAL-QUERY" (Section\
      6.1.1 for the query.\
\
   Formal Definition: The property is defined by the following notation:\
\
         query      = "QUERY" other-params ":" cal-query CRLF\
\
   Example: The following is an example of this property:\
\
         QUERY:SELECT * FROM VEVENT\
\
\
\
\
Royer, et al.                 Experimental                     [Page 69]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
8.27.  QUERYID property\
\
   Property Name: QUERYID\
\
   Purpose: Specifies a unique ID for a query in the targeted container.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters are specified\
      on this property.\
\
   Conformance: This property can be specified in "VQUERY" components.\
\
   Description: A "QUERYID" property is used to specify the unique id\
      for a query.  A "QUERYID" property value is unique per container.\
\
   Formal Definition: The property is defined by the following notation:\
\
         queryid      = "QUERYID" other-params ":" text CRLF\
\
   Example: The following are examples of this property:\
\
      QUERYID:Any Text String\
      QUERYID:fetchUnProcessed\
\
8.28.  QUERY-LEVEL Property\
\
   Property Name: QUERY-LEVEL\
\
   Purpose: This property specifies the level of query supported.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in the "VREPLY" component\
      in response to a "GET-CAPABILITY" command.\
\
   Description: Indicates level of query support.  CAL-QL-NONE is for\
      CS's that allow ITIP methods only to be deposited and nothing\
      else.\
\
   Formal Definition: The property is defined by the following notation:\
\
         query-level = "QUERY-LEVEL" other-params\
                         ":" ( "CAL-QL-1" / "CAL-QL-NONE") CRLF\
\
\
\
\
Royer, et al.                 Experimental                     [Page 70]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Example: The following is an example of this property:\
\
         QUERY-LEVEL:CAL-QL-1\
\
8.29.  RECUR-ACCEPTED Property\
\
   Property Name: RECUR-ACCEPTED\
\
   Purpose: This property specifies if the endpoint supports recurring\
      instances.\
\
   Value Type: BOOLEAN\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in the "VREPLY" component\
      in response to a "GET-CAPABILITY" command.\
\
   Description: Indicates if recurrence rules are supported.  If "FALSE"\
      then the endpoint cannot process any kind of recurring rules.\
\
   Formal Definition: The property is defined by the following notation:\
\
         recur-accepted = "RECUR-ACCEPTED" other-params ":" boolean CRLF\
\
   Example: The following is an example of this property:\
\
         RECUR-ACCEPTED:TRUE\
         RECUR-ACCEPTED:FALSE\
\
8.30.  RECUR-LIMIT Property\
\
   Property Name: RECUR-LIMIT\
\
   Purpose: This property specifies the maximum number of instances the\
      endpoint will expand instances at query or storage time.\
\
   Value Type: INTEGER\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in the "VREPLY" component\
      in response to a "GET-CAPABILITY" command.\
\
   Description: For implementations that have the "STORES-EXPANDED"\
      value set to "TRUE", this value specifies the maximum number of\
\
\
\
Royer, et al.                 Experimental                     [Page 71]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      instances that will be stored and fetched.  For all\
      implementations, this is the maximum number of instances that will\
      be returned when the "EXPAND" parameter is specified as "TRUE" and\
      the results contain an infinite or large number of recurring\
      instances.\
\
   Formal Definition: The property is defined by the following notation:\
\
         recur-limit = "RECUR-LIMIT" other-params ":" posint1 CRLF\
\
   Example: The following is an example of this property:\
\
         RECUR-LIMIT:1000\
\
8.31.  RECUR-EXPAND Property\
\
   Property Name: RECUR-EXPAND\
\
   Purpose: This property specifies if the endpoint can expand\
      recurrences into multiple objects.\
\
   Value Type: BOOLEAN\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: The property can be specified in the "VREPLY" component\
      in response to a "GET-CAPABILITY" command.\
\
   Description: If "TRUE", then the endpoint can expand an object into\
      multiple instances as defined by its recurrence rules when the\
      "EXPAND" property is supplied.  If "FALSE", then the endpoint\
      ignores the "EXPAND" property.\
\
   Formal Definition: The property is defined by the following notation:\
\
         recur-expand = "RECUR-EXPAND" other-params ":" boolean CRLF\
\
   Example: The following is an example of this property:\
\
         RECUR-EXPAND:TRUE\
         RECUR-EXPAND:FALSE\
\
8.32.  RESTRICTION Property\
\
   Property Name: RESTRICTION\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 72]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Purpose: This property defines restrictions on the result value of\
      new or existing components.\
\
   Value Type: CAL-QUERY\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VRIGHT" components,\
      but only when the "PERMISSION" property is set to "CREATE",\
      "MODIFY", or "*" property value.\
\
   Description: This property is used in the "VRIGHT" component to\
      define restrictions on the components that can be written (i.e.,\
      by using the "CREATE" or "MOVE" commands) as well as on the values\
      that may take existent calendar store properties, calendar\
      properties, components, and properties (i.e., by using the\
      "MODIFY" command).  Accepted values MUST match any specified\
      "RESTRICTION" property values.\
\
   Formal Definition: The property is defined by the following notation:\
\
         restriction  = "RESTRICTION" other-params ":" cal-query CRLF\
\
   Example: The following are examples of this property:\
\
         RESTRICTION:SELECT * FROM VCALENDAR WHERE METHOD = 'REQUEST'\
\
         RESTRICTION:SELECT * FROM VEVENT WHERE\
         SELF() IN ORGANIZER\
\
         RESTRICTION:SELECT * FROM VEVENT WHERE 'BUSINESS' IN\
         CATEGORIES\
\
8.33.  SCOPE Property\
\
   Property Name: SCOPE\
\
   Purpose: This property identifies the objects in the CS to which the\
      access rights apply.\
\
   Value Type: CAL-QUERY\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in "VRIGHT" components.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 73]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Description: This property is used in the "VRIGHT" component to\
      define the set of objects, subject to the access right being\
      defined.\
\
   Formal Definition: The property is defined by the following notation:\
\
         scope    = "SCOPE" other-params ":" cal-query CRLF\
\
   Example: The following is an example of this property:\
\
         SCOPE:SELECT DTSTART,DTEND FROM VEVENT WHERE CLASS = 'PUBLIC'\
\
8.34.  STORES-EXPANDED Property\
\
   Property Name: STORES-EXPANDED\
\
   Purpose: This property specifies if the sending endpoint expands\
      recurrence rules prior to storing them into the CS.\
\
   Value Type: BOOLEAN\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in a "VREPLY" component\
      in response to a "GET-CAPABILITY" command.\
\
   Description: If the value is "TRUE", then the endpoint expands\
      recurrence rules and stores the results into the CS.  If this is\
      "TRUE", then the "RECUR-LIMIT" property is significant because an\
      infinitely-recurring appointment will store no more than "RECUR-\
      LIMIT" property values into the CS and all other instances will be\
      lost.\
\
   Formal Definition: The property is specified by the following\
      notation:\
\
         stores-expanded   = "STORES-EXPANDED" other-params ":" boolean\
      CRLF\
\
   The following is an example of this property:\
\
         STORES-EXPANDED:TRUE\
         STORES-EXPANDED:FALSE\
\
8.35.  TARGET Property\
\
   Property Name: TARGET\
\
\
\
Royer, et al.                 Experimental                     [Page 74]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Purpose: This property defines the container that the issued command\
      will act upon.  Its value is a capurl, as defined in Section 5.\
\
   Value Type: URI\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in a command component.\
\
   Description: This property value is used to specify the container\
      that the command will effect.  When used in a command, the command\
      will be performed on the container that has a capurl matching the\
      value.\
\
   Formal Definition: The property is specified by the following\
      notation:\
\
         target   = "TARGET" other-params ":" ( capurl / relcalid ) CRLF\
\
   Example: The following is an example of this property:\
\
         TARGET:cap://mycal.example.com\
         TARGET:SomeRelCalid\
\
8.36.  TRANSP Property\
\
   Property Name: TRANSP\
\
   Purpose: This property defines whether a component is transparent or\
      not to busy-time searches.  This is a modification to [iCAL]\
      "TRANSP" property, in that it adds some values.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard property parameters can be\
      specified on this property.\
\
   Conformance: This property can be specified in a component.\
\
   Description: Time Transparency is the characteristic of an object\
      that determines whether it appears to consume time on a calendar.\
      Objects that consume actual time for the individual or resource\
      associated with the calendar SHOULD be recorded as "OPAQUE",\
      allowing them to be detected by free-busy time searches.  Other\
      objects, which do not take up the individual's (or resource's)\
      time SHOULD be recorded as "TRANSPARENT", making them invisible to\
      free/busy time searches.\
\
\
\
Royer, et al.                 Experimental                     [Page 75]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Formal Definition: The property is specified by the following\
      notation:\
\
         transp    = "TRANSP" other-params ":" transvalue CRLF\
                     ;\
         transvalue = "OPAQUE" ;Blocks or opaque on busy time searches.\
\
                   / "TRANSPARENT"\
                           ; Transparent on busy time searches.\
\
                   / "TRANSPARENT-NOCONFLICT"\
                           ; Transparent on busy time searches,\
                           ; and no other OPAQUE or OPAQUE-\
                           ; NOCONFLICT objects can overlap it.\
                           ;\
                   / "OPAQUE-NOCONFLICT"\
                           ; Opaque on busy time searches, and\
                           ; no other OPAQUE or OPAQUE-NOCONFLICT\
                           ; objects can overlap it.\
                           ;\
                           ; Default value is OPAQUE\
\
      The following is an example of this property for an object that is\
      opaque or blocks on free/busy time searches, and no other object\
      can overlap it:\
\
         TRANSP:OPAQUE-NOCONFLICT\
\
9.  New Components\
\
9.1.  VAGENDA Component\
\
   Component Name: VAGENDA\
\
   Purpose: Provide a grouping of properties that defines an agenda.\
\
   Formal Definition: There are two formats of the "VAGENDA" component.\
      (1) When it is being created, and (2) how it exists in the\
      "VCALSTORE" component.\
\
      A "VAGENDA" component in a "VCALSTORE" component is defined by the\
      following notes and ABNF notation:\
\
         CALSCALE -  The value MUST be from the "VCALSTORE" "CALSCALE"\
            property list.  The default is the first entry in the\
            VCALSTORE CALSCALE list.\
\
         CREATED -  The timestamp of the calendar's create date.  This\
\
\
\
Royer, et al.                 Experimental                     [Page 76]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
            is a READ ONLY property in a "VAGENDA".\
\
         LAST-MODIFIED - The timestamp of any change to the "VAGENDA"\
            properties or when any component was last created, modified,\
            or deleted.\
\
      agenda      = "BEGIN" ":" "VAGENDA" CRLF\
                    agendaprop\
                    *(icalobject)     ; as defined in [iCAL]\
                    "END" ":" "VAGENDA" CRLF\
\
      agendaprop  = *(\
                    ; The following MUST occur exactly once.\
                    ;\
                      allow-conflict / relcalid / calscale / created\
                    / default-charset / default-locale\
                    / default-tzid / last-mod\
                    ;\
                    ; The following MUST occur at least once.\
                    ; and the value MUST NOT be empty.\
                    ;\
                    / owner\
                    ;\
                    ; The following are optional,\
                    ; and MAY occur more than once.\
                    ;\
                    / name / related-to / other-props / x-comp\
                  )\
\
      icalobject = ; As defined in [iCAL].\
                   ;\
      created    = ; As defined in [iCAL].\
                   ;\
      related-to = ; As defined in [iCAL].\
\
   When creating a VAGENDA, use the following notation:\
\
      agendac     = "BEGIN" ":" "VAGENDA" CRLF\
                    agendacprop\
                    *(icalobject)     ; as defined in [iCAL].\
                    "END" ":" "VAGENDA" CRLF\
\
      agendacprop  = *(\
                     ; The following MUST occur exactly once.\
                     ;\
                       allow-conflict / relcalid / calscale\
                     / default-charset / default-locale\
                     / default-tzid\
\
\
\
Royer, et al.                 Experimental                     [Page 77]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                     ;\
                     ; The following MUST occur at least once.\
                     ; and the value MUST NOT be empty.\
                     ;\
                     / owner\
                     ;\
                     ; The following are optional,\
                     ; and MAY occur more than once.\
                     ;\
                     / name / related-to / other-props / x-comp\
                    )\
\
   To fetch all of the properties from the targeted "VAGENDA" component\
   but do not fetch any components, use:\
\
      SELECT * FROM VAGENDA\
\
   To fetch all of the properties from the targeted VAGENDA and all of\
   the contained components, use the special '*.*' value:\
\
      SELECT *.* FROM VAGENDA\
\
9.2.  VCALSTORE Component\
\
   Component Name: VCALSTORE\
\
   Purpose: Provide a grouping of properties that defines a calendar\
      store.\
\
   Formal Definition: A "VCALSTORE" component is defined by the\
      following table and ABNF notation.  The creation of a "VCALSTORE"\
      component is an administrative task and not part of the CAP\
      protocol.\
\
      The following are notes to some of the properties in the\
      "VCALSTORE" component.\
\
         CALSCALE -  A comma-separated list of CALSCALEs supported by\
            this CS.  All "VAGENDA" component calendar CALSCALE\
            properties MUST be from this list.  This list MUST contain\
            at least "GREGORIAN".  The default for newly created\
            "VAGENDA" components is the first entry.\
\
         RELATED-TO -  This is a multiple-instance property.  There MUST\
            be a "RELATED-TO" property for each of the "VAGENDA"\
            components contained in the "VCALSTORE" component, each with\
            the "RELTYPE" parameter value set to "CHILD".  Other\
            "RELATED-TO" properties may be included.\
\
\
\
Royer, et al.                 Experimental                     [Page 78]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         CREATED -  The timestamp of the CS creation time.  This is a\
            READ ONLY property.\
\
         CSID -  The CSID of this calendar store.  This MUST NOT be\
            empty.  How this property is set in the VCALSTORE is an\
            administrative or implementation-specific issue and is not\
            covered in CAP.  This is a READ ONLY property.  A suggested\
            value is the fully-qualified host name or a fully-qualified\
            virtual host name supported by the system.\
\
         LAST-MODIFIED -  The timestamp when the Properties of the\
            "VCALSTORE" component were last updated or calendars were\
            created or deleted.  This is a READ ONLY PROPERTY.\
\
      calstorec     = "BEGIN" ":" "VCALSTORE" CRLF\
                   calstoreprop\
                   *(vagendac)\
                   "END" ":" "VCALSTORE" CRLF\
                        ;\
      calstoreprop  = *(\
                        ; the following MUST occur exactly once\
                        ;\
                          allow-conflict / calscale / calmaster\
                        / created / csid / default-charset\
                        / default-locale / default-vcars\
                        / default-tzid / last-mod / maxdate / mindate\
                        ;\
                        ; the following are optional,\
                        ; and MAY occur more than once\
                        ;\
                        / name / related-to / other-props / x-comp\
                       )\
                     ;\
\
      vagendac     = ; As defined in [iCAL].\
                     ;\
      last-mod     = ; As defined in [iCAL].\
\
   To fetch all of the properties from the targeted VCALSTORE and not\
   fetch the calendars that it contains, use:\
\
      SELECT * FROM VCALSTORE\
\
   To fetch all of the properties from the targeted "VCALSTORE"\
   component and all of the contained calendars and all of those\
   calendars' contained properties and components, use the special '*.*'\
   value:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 79]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      SELECT *.* FROM VCALSTORE\
\
9.3.  VCAR Component\
\
   Component Name: VCAR\
\
   Purpose: Provide a grouping of calendar access rights.\
\
   Formal Definition: A "VCAR" component is defined by the following\
      notation:\
\
         carc    =  "BEGIN" ":" "VCAR" CRLF\
                    carprop 1*rightc\
                    "END" ":" "VCAR" CRLF\
                 ;\
         carprop = 1*(\
                 ;\
                 ; 'carid' is REQUIRED,\
                 ; but MUST NOT occur more than once\
                 ;\
                  carid /\
                 ;\
                 ; the following are OPTIONAL,\
                 ; and MAY occur more than once\
                 ;\
          name / decreed / other-props\
         )\
\
   Description: A "VCAR" component is a grouping of properties, and\
      "VRIGHT" components, that represents access rights granted or\
      denied to UPNs.\
\
      The "CARID" property specifies the local identifier for the "VCAR"\
      component.  The "NAME" property specifies a localizable display\
      name.\
\
   Example: In the following example, the UPN "foo@example.com" is given\
      search access to the "DTSTART" and "DTEND" VEVENT properties.  No\
      other access is specified:\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 80]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         BEGIN:VCAR\
         CARID:View Start and End Times\
         NAME:View Start and End Times\
         BEGIN:VRIGHT\
         GRANT:foo@example.com\
         PERMISSION:SEARCH\
         SCOPE:SELECT DTSTART,DTEND FROM VEVENT\
         END:VRIGHT\
         END:VCAR\
\
      In this example, all UPNs are given search access to "DTSTART" and\
      "DTEND" properties of VEVENT components.  "All CUs and UGs" are\
      specified by the UPN value "*".  Note that this enumerated UPN\
      value is not in quotes:\
\
         BEGIN:VCAR\
         CARID:ViewStartEnd2\
         NAME:View Start and End Times 2\
         BEGIN:VRIGHT\
         GRANT:*\
         PERMISSION:SEARCH\
         SCOPE:SELECT DTSTART,DTEND FROM VEVENT\
         END:VRIGHT\
         END:VCAR\
\
      In these examples, full calendar access rights are given to the\
      CAL-OWNERS(), and a hypothetical administrator is given access\
      rights to specify calendar access rights.  If no other rights are\
      specified, only these two UPNs can specify calendar access rights:\
\
         BEGIN:VCAR\
         CARID:some-id-3\
         NAME:Only OWNER or ADMIN Settable VCARs\
         BEGIN:VRIGHT\
         GRANT:CAL-OWNERS()\
         PERMISSION:*\
         SCOPE:SELECT * FROM VAGENDA\
         END:VRIGHT\
         BEGIN:VRIGHT\
         GRANT:cal-admin@example.com\
         PERMISSION:*\
         SCOPE:SELECT * FROM VCAR\
         RESTRICTION:SELECT * FROM VCAR\
         END:VRIGHT\
         END:VCAR\
\
      In this example, rights to write, search, modify or delete\
      calendar access are denied to all UPNs.  This example would\
\
\
\
Royer, et al.                 Experimental                     [Page 81]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      disable providing different access rights to the calendar store or\
      calendar.  This calendar access right should be specified with\
      great care, as it removes the ability to change calendar access;\
      even for the owner or administrator.  It could be used by small\
      devices that do not support changing any VCAR:\
\
         BEGIN:VCAR\
         CARID:VeryRestrictiveVCAR-2\
         NAME:No CAR At All\
         BEGIN:VRIGHT\
         DENY:*\
         PERMISSION:*\
         SCOPE:SELECT * FROM VCAR\
         END:VRIGHT\
         END:VCAR\
\
9.4.  VRIGHT Component\
\
   Component Name: "VRIGHT"\
\
   Purpose: Provide a grouping of properties that describe an access\
      right (granted or denied).\
\
   Formal Definition: A "VRIGHT" component is defined by the following\
      notation:\
\
         rightc    = "BEGIN" ":" "VRIGHT" CRLF\
                     rightprop\
                     "END" ":" "VRIGHT" CRLF\
                   ;\
         rightprop = 2*(\
                   ;\
                   ; either 'grant' or 'deny' MUST\
                   ; occur at least once\
                   ; and MAY occur more than once\
                   ;\
                    grant / deny /\
                   ;\
                   ; 'permission' MUST occur at least once\
                   ; and MAY occur more than once\
                   ;\
                    permission /\
                   ;\
                   ; the following are optional,\
                   ; and MAY occur more than once\
                   ;\
                    scope / restriction / other-props\
                )\
\
\
\
Royer, et al.                 Experimental                     [Page 82]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Description: A "VRIGHT" component is a grouping of calendar access\
      right properties.\
\
      The "GRANT" property specifies the UPN that is being granted\
      access.  The "DENY" property specifies the UPN that is being\
      denied access.  The "PERMISSION" property specifies the actual\
      permission being set.  The "SCOPE" property identifies the\
      calendar store properties, calendar properties, components, or\
      properties to which the access right applies.  The "RESTRICTION"\
      property specifies restrictions on commands and results.  If the\
      command does not match the restrictions, or if the results of the\
      command do not match the restrictions, then it is an access\
      violation.\
\
9.5.  VREPLY Component\
\
   Component Name: "VREPLY"\
\
   Purpose: Provide a grouping of arbitrary properties and components\
      that are the data set result from an issued command.\
\
   Formal Definition: A "VREPLY" component is defined by the following\
      notation:\
\
      replyc           =  "BEGIN" ":" "VREPLY" CRLF\
                          any-prop-or-comp\
                          "END" ":" "VREPLY" CRLF\
                       ;\
      any-prop-or-comp = ; Zero or more iana or experimental\
                         ; properties and components, in any order.\
\
\
   Description: Provide a grouping of arbitrary properties and\
      components that are the data set result from an issued command.\
\
      A query can return a predictable set of arbitrary properties and\
      components.  This component is used by query and other commands to\
      return data that does not fit into any other component.  It may\
      contain any valid property or component, even if they are not\
      registered.\
\
9.6.  VQUERY Component\
\
   Component Name: VQUERY\
\
   Purpose: A component describes a set of objects to be acted upon.\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 83]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Formal Definition: A "VQUERY" component is defined by the following\
      notation:\
\
      queryc    =  "BEGIN" ":" "VQUERY" CRLF\
                   queryprop\
                   "END" ":" "VCAR" CRLF\
                ;\
      queryprop = 1*(\
                ;\
                ; 'queryid' is OPTIONAL but MUST NOT occur\
                ; more than once. If the "TARGET" property\
                ; is supplied then the "QUERYID" property\
                ; MUST be supplied.\
                ;\
                 queryid / target\
                ;\
                ; 'expand' is OPTIONAL but MUST NOT occur\
                ; more than once.\
                ;\
                 expand\
                ;\
                ; the following are OPTIONAL, and MAY occur\
                ; more than once\
                ;\
                / name / other-props\
                ;\
                ; the following MUST occur at least once if\
                ; queryid is not supplied.\
                ;\
                / query\
              )\
\
   Description: A "VQUERY" contains properties that describe which\
      properties and components the CS is requested to act upon.\
\
      The "QUERYID" property specifies the local identifier for a\
      "VQUERY" component.\
\
      For a search, if the "TARGET" property is supplied in a "VQUERY"\
      component, then the CS is to search for the query in the CALID\
      supplied by the "TARGET" property value.\
\
      For a create, the "TARGET" property MUST NOT be supplied because\
      the destination container is already supplied in the "TARGET"\
      property of the "VCALENDAR" component.\
\
   Examples: see Section 6.1.1.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 84]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
10.  Commands and Responses\
\
   CAP commands and responses are described in this section.\
\
10.1.  CAP Commands (CMD)\
\
   All commands are sent using the CMD property.\
\
   Property Name: CMD\
\
   Purpose: This property defines the command to be sent.\
\
   Value Type: TEXT\
\
   Property Parameters: Non-standard, id, localize, latency, action or\
      options.\
\
   Conformance: This property is the method used to specify the commands\
      to a CS; it can exist in any object sent to the CS.\
\
   Description: All of the commands to the CS are supplied in this\
      property.  The "OPTIONS" parameter is overloaded and its meaning\
      is dependent on the CMD value supplied.\
\
      Formal Definition: The property is defined by the following\
      notation:\
\
         cmd              = "CMD" (\
                            abort-cmd\
                          / continue-cmd\
                          / create-cmd\
                          / delete-cmd\
                          / generate-uid-cmd\
                          / get-capability-cmd\
                          / identify-cmd\
                          / modify-cmd\
                          / move-cmd\
                          / reply-cmd\
                          / search-cmd\
                          / set-locale-cmd\
                          / iana-cmd\
                          / x-cmd\
                           ) CRLF\
                         ;\
         option-value    = "OPTION" "=" paramtext\
                         ;\
         paramtext       ; As defined in [iCAL].\
\
\
\
\
Royer, et al.                 Experimental                     [Page 85]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Calendaring commands allow a CUA to directly manipulate a calendar.\
\
   Calendar access rights can be granted or denied for any commands.\
\
10.1.1.  Bounded Latency\
\
   A CAP command can have an associated maximum latency time by\
   specifying the "LATENCY" parameter.  If the command is unable to be\
   completed in the specified amount of time (as specified by the\
   "LATENCY" parameter value with an "ACTION" parameter set to the "ASK"\
   value), then a "TIMEOUT" command MUST be sent on the same channel".\
   The reply MUST be a an "ABORT" or a "CONTINUE" command.  If the CUA\
   initiated the original command, then the CS would issue the "TIMEOUT"\
   command and the CUA would then have to issue an "ABORT" or "CONTINUE"\
   command.  If the CS initiated the original command then the CUA would\
   have to issue the "TIMEOUT" and the CS would send the "ABORT" or\
   "CONTINUE".\
\
   Upon receiving an "ABORT" command, the command must then be\
   terminated.  Only the "ABORT", "TIMEOUT", "REPLY, and "CONTINUE"\
   commands cannot be aborted.  The "ABORT", "TIMEOUT", and "REPLY"\
   commands MUST NOT have latency set.\
\
   Upon receiving a "CONTINUE" command the work continues as if it had\
   not been delayed or stopped.  Note that a new latency time MAY be\
   included in a "CONTINUE" command indicating to continue the original\
   command until the "LATENCY" parameter value expires or the results of\
   the original command can be returned.\
\
   Both the "LATENCY" parameter and the "ACTION" parameter MUST be\
   supplied to any "CMD" property, or nether can be added to the "CMD"\
   property.  The "LATENCY" parameter MUST be set to the maximum latency\
   time in seconds.  The "ACTION" parameter accepts the following\
   values: "ASK" and "ABORT" parameters.\
\
   If the maximum latency time is exceeded and the "ACTION" parameter is\
   set to the "ASK" value, then "TIMEOUT" command MUST be sent.\
   Otherwise, if the "ACTION" parameter is set to the "ABORT" value,\
   then the command MUST be terminated and return a REQUEST-STATUS code\
   of 2.0.3 for the original command.\
\
   If a CS can both start sending the reply to a command and guarantee\
   that all of the results can be sent from a command (short of\
   something like network or power failure) prior to the "LATENCY"\
   timeout value, then the "LATENCY" time has not expired.\
\
   Example:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 86]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   In this example the initiator asks for the listeners capabilities.\
\
      I: Content-Type: text/calendar\
      I:\
      I: BEGIN:VCALENDAR\
      I: VERSION:2.0\
      I: PRODID:The CUA's PRODID\
      I: CMD;ID=xyz12346;LATENCY=3;ACTION=ask:GET-CAPABILITY\
      I: END:VCALENDAR\
\
   # After 3 seconds\
\
      L: Content-Type: text/calendar\
      L:\
      L: BEGIN:VCALENDAR\
      L: PRODID:-//someone's prodid\
      L: VERSION:2.0\
      L: CMD;ID=xyz12346:TIMEOUT\
      L: END:VCALENDAR\
\
   In order to continue and give the CS more time, the CUA would issue a\
   "CONTINUE" command:\
\
      I: Content-Type: text/calendar\
      I:\
      I: BEGIN:VCALENDAR\
      I: VERSION:2.0\
      I: PRODID:-//someone's prodid\
      I: CMD;ID=xyz12346;LATENCY=3;ACTION=ask:CONTINUE\
      I: END:VCALENDAR\
\
      L: Content-Type: text/calendar\
      L:\
      L: BEGIN:VCALENDAR\
      L: VERSION:2.0\
      L: PRODID:-//someone's prodid\
      L: CMD;ID=xyz12346:REPLY\
      L: BEGIN:VREPLY\
      L: REQUEST-STATUS:2.0.3;Continued for 3 more seconds\
      L: END:VREPLY\
      L: END:VCALENDAR\
\
   Here the "2.0.3" status is returned because it is not an error, it is\
   a progress status sent in reply to the "CONTINUE" command.\
\
   To abort the command and not wait any further, issue an "ABORT"\
   command:\
\
\
\
\
Royer, et al.                 Experimental                     [Page 87]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      I: Content-Type: text/calendar\
      I:\
      I: BEGIN:VCALENDAR\
      I: VERSION:2.0\
      I: PRODID:-//someone's prodid\
      I: CMD;ID=xyz12346:ABORT\
      I: END:VCALENDAR\
\
   # Which would result in a 2.0.3 reply.\
\
      L: Content-Type: text/calendar\
      L:\
      L: BEGIN:VCALENDAR\
      L: VERSION:2.0\
      L: PRODID:-//someone's prodid\
      L: CMD;ID=xyz12346:REPLY\
      L: BEGIN:VREPLY\
      L: REQUEST-STATUS:2.0.3;Aborted As Requested.\
      L: END:VREPLY\
      L: END:VCALENDAR\
\
   If the "ACTION" value had been set to "ABORT", then the listner would\
   send a "7.0" error on timeout in the reply to the command that\
   initiated the command that timed out.\
\
10.2.  ABORT Command\
\
   CMD: ABORT\
\
   Purpose: The "ABORT" command is sent to request that the named or the\
      only in-process command be aborted.  Latency MUST not be supplied\
      with the "ABORT" command.\
\
   Formal Definition: An "ABORT" command is defined by the following\
      notation:\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 88]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         abort-cmd    = abortparam ":" "ABORT"\
                      ;\
         abortparam   = *(\
                      ;\
                      ; the following are optional,\
                      ; but MUST NOT occur more than once\
                      ;\
                        id-param\
                      / localize-param\
                      ;\
                      ; the following is optional,\
                      ; and MAY occur more than once\
                      ;\
                      / other-params\
                      )\
\
         The REPLY of any "ABORT" command is:\
\
         abort-reply  = "BEGIN" ":" "VCALENDAR" CRLF\
                         calprops\
                         abort-vreply\
                        "END" ":" "VCALENDAR" CRLF\
                      ;\
         abort-vreply = "BEGIN" ":" "VREPLY" CRLF\
                         rstatus\
                         other-props\
                         "END" ":" "VREPLY" CRLF\
\
10.3.  CONTINUE Command\
\
   CMD: CONTINUE\
\
   Purpose: The "CONTINUE" command is only sent after a "TIMEOUT"\
      command has been received to inform the other end of the session\
      to resume working on a command.\
\
   Formal Definition: A "CONTINUE" command is defined by the following\
      notation:\
\
         continue-cmd   = continueparam ":" "CONTINUE"\
                      ;\
         continueparam  = *(\
                      ;\
                      ; the following are optional,\
                      ; but MUST NOT occur more than once\
                      ;\
                           id-param\
                         / localize-param\
\
\
\
Royer, et al.                 Experimental                     [Page 89]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                         / latency-param\
                      ;\
                      ; the following MUST occur exactly once and only\
                      ; when the latency-param has been supplied and\
                      ; MUST NOT be supplied if the latency-param is\
                      ; not supplied.\
                      ;\
                         / action-param\
                      ;\
                      ; the following are optional,\
                      ; and MAY occur more than once\
                      ;\
                         / other-params\
                         )\
\
      The REPLY of any "CONTINUE" command is:\
\
         continue-reply   = "BEGIN" ":" "VCALENDAR" CRLF\
                            calprops\
                            continue-vreply\
                            "END" ":" "VCALENDAR" CRLF\
                          ;\
         continue-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                            rstatus\
                            other-props\
                            "END" ":" "VREPLY" CRLF\
\
10.4.  CREATE Command\
\
   CMD: CREATE\
\
   Purpose:  The "CREATE" command is used to create one or more\
      iCalendar objects in the store in the "BOOKED" or "UNPROCESSED"\
      state.\
\
      A CUA MAY send a "CREATE" command to a CS.  The "CREATE" command\
      MUST be implemented by all CSs.\
\
      The CS MUST NOT send a "CREATE" command to any CUA.\
\
   Formal Definition: A "CREATE" command is defined by the following\
      notation and the hierarchy restrictions, as defined in Section\
      3.2:\
\
         create-cmd     = createparam ":" "CREATE"\
                      ;\
         createparam    = *(\
                      ;\
\
\
\
Royer, et al.                 Experimental                     [Page 90]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                      ; the following are optional,\
                      ; but MUST NOT occur more than once\
                      ;\
                          id-param\
                        / localize-param\
                        / latency-param\
                      ;\
                      ; the following MUST occur exactly once and only\
                      ; when the latency-param has been supplied and\
                      ; MUST NOT be supplied if the latency-param is\
                      ; not supplied.\
                      ;\
                        / action-param\
                      ;\
                      ; the following is optional,\
                      ; and MAY occur more than once\
                      ;\
                        / other-params\
                       )\
\
   Response:\
\
      One iCalendar object per TARGET property MUST be returned.\
\
      The REPLY of any "CREATE" command is limited to the restriction\
      tables defined in [iTIP] for iTIP objects, in addition to this\
      ABNF:\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                     [Page 91]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      create-reply   = "BEGIN" ":" "VCALENDAR" CRLF\
                        creply-props\
                        1*(create-vreply)\
                        "END" ":" "VCALENDAR" CRLF\
\
                     ;\
      create-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                       created-id\
                       rstatus\
                       other-props\
                       "END" ":" "VREPLY" CRLF\
                     ;\
                     ; Where the id is appropriate for the\
                     ; type of object created:\
                     ;\
                     ; VAGENDA = relcalid\
                     ; VALARM = sequence\
                     ; VCAR = carid\
                     ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid\
                     ; VQUERY = queryid\
                     ; VTIMEZONE = tzid\
                     ; x-comp = x-id\
                     ;\
      created-id    = ( relcalid / carid / uid / queryid /\
                        tzid / sequence / x-id)\
                      ;\
      tzid          = ; As defined in [iCAL].\
                      ;\
      sequence      = ; As defined in [iCAL].\
                      ;\
      uid           = ; As defined in [iCAL].\
                      ;\
      x-id          = ; An ID for an x-component.\
                      ;\
      creply-props  = 4*(\
                      ; These are REQUIRED and MUST NOT occur\
                      ; more than once.\
                      ;\
                       prodid /version / target / reply-cmd\
                      ;\
                      ; These are optional, and may occur more\
                      ; than once.\
                      ;\
                       other-props )\
\
      For a "CREATE" command, the "TARGET" property specifies the\
      containers where the components will be created.\
\
\
\
\
Royer, et al.                 Experimental                     [Page 92]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      If the iCalendar object being created does not have a "METHOD"\
      property, then its state is "BOOKED" and it is not an [iTIP]\
      scheduling object.  Use the "DELETE" command to set the state of\
      an object to the "DELETED" state (tagged for deletion).  A CUA\
      cannot use the "CREATE" command to create an object in the\
      "DELETED" state.\
\
      If the intention is to book an [iTIP] object, then the "METHOD"\
      property MUST NOT be supplied.  Otherwise, any [iTIP] object MUST\
      have a valid [iTIP] "METHOD" property value and it is a scheduling\
      request being deposited into the CS with its state set to\
      "UNPROCESSED".\
\
   Format Definition: ABNF for a "CREATE" object is:\
\
      create-object = "BEGIN" ":" "VCALENDAR" CRLF\
                ; If 'calprops' contain the "METHOD" property\
                ; then this 'create-object' component MUST\
                ; conform to [iTIP] restrictions.\
                ;\
                ; calprops MUST include 'create-cmd'\
                ;\
                      calprops\
                      other-props\
                      1*(create-comp)\
                      "END" ":" "VCALENDAR" CRLF\
\
                ; NOTE: The 'VCALSTORE' component is not included in\
                ; 'create-comp' as it is out of scope for CAP to create\
                ; a new CS.\
                ;\
       create-comp =  agendac / carc / queryc\
                     / timezonec / freebusyc\
                     / eventc / todoc / journalc\
                     / iana-comp / x-comp\
                     ;\
      freebusyc    = ; As defined in [iCAL].\
                     ;\
      eventc       = ; As defined in [iCAL].\
                     ;\
      journalc     = ; As defined in [iCAL].\
                     ;\
      timezonec    = ; As defined in [iCAL].\
                     ;\
      todoc        = ; As defined in [iCAL].\
\
   In the following example, two new top level "VAGENDA" components are\
   created.  Note that the "CSID" value of the server is\
\
\
\
Royer, et al.                 Experimental                     [Page 93]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   cal.example.com, which is where the new "VAGENDA" components are\
   going to be created.\
\
      C: Content-Type: text/calendar\
      C:\
      C: BEGIN:VCALENDAR\
      C: PRODID:-//someone's prodid\
      C: VERSION:2.0\
      C: CMD;ID=creation01:CREATE\
      C: TARGET:cal.example.com\
      C: BEGIN:VAGENDA                 <- data for 1st new calendar\
      C: CALID:relcalz1\
      C: NAME;LANGUAGE=en_US:Bill's Soccer Team\
      C: OWNER:bill\
      C: CALMASTER:mailto:bill@example.com\
      C: TZID:US/Pacific\
      C: END:VAGENDA\
      C: BEGIN:VAGENDA                 <- data for 2nd new calendar\
      C: CALID:relcalz2\
      C: NAME;LANGUAGE=EN-us:Mary's personal calendar\
      C: OWNER:mary\
      C: CALMASTER:mailto:mary@example.com\
      C: TZID:US/Pacific\
      C: END:VAGENDA\
      C: END:VCALENDAR\
\
      S: Content-Type: text/calendar\
      S:\
      S: BEGIN:VCALENDAR\
      S: VERSION:2.0\
      S: PRODID:-//someone's prodid\
      S: CMD;ID=creation01:REPLY\
      S: TARGET:cal.example.com\
      S: BEGIN:VREPLY                <- Reply for 1st calendar create\
      S: CALID:relcalz1\
      S: REQUEST-STATUS:2.0\
      S: END:REPLY\
      S: BEGIN:VREPLY                <- Reply for 2nd calendar create\
      S: CALID:relcalz2\
      S: REQUEST-STATUS:2.0\
      S: END:VREPLY\
      S: END:VCALENDAR\
\
      To create a new component in multiple containers, simply name all\
      of the containers in the "TARGET" in the create command.  A new\
      "VEVENT" component is created in two TARGET components.  In this\
      example, the "VEVENT" component is one new [iTIP] "REQUEST" to be\
\
\
\
\
Royer, et al.                 Experimental                     [Page 94]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      stored in two calendars.  The results would be iCalendar objects\
      that conform to the [iTIP] replies as defined in [iTIP].\
\
      This example shows two [iTIP] "VEVENT" components being created in\
      each of the two supplied "TARGET" properties.  As it contains the\
      "METHOD" property, they will be stored in the "UNPROCESSED" state:\
\
      C: Content-Type: text/calendar\
      C:\
      C: BEGIN:VCALENDAR\
      C: VERSION:2.0\
      C: PRODID:-//someone's prodid\
      C: CMD;ID=creation02:CREATE\
      C: METHOD:REQUEST\
      C: TARGET:relcalz1\
      C: TARGET:relcalz2\
      C: BEGIN:VEVENT\
      C: DTSTART:20030307T180000Z\
      C: UID:FirstInThisExample-1\
      C: DTEND:20030307T190000Z\
      C: SUMMARY:Important Meeting\
      C: END:VEVENT\
      C: BEGIN:VEVENT\
      C: DTSTART:20040307T180000Z\
      C: UID:SecondInThisExample-2\
      C: DTEND:20040307T190000Z\
      C: SUMMARY:Important Meeting\
      C: END:VEVENT\
      C: END:VCALENDAR\
\
      The CS sends the "VREPLY" commands in separate MIME objects, one\
      per supplied "TARGET" property value.\
\
      S: Content-Type: text/calendar\
      S:\
      S: BEGIN:VCALENDAR\
      S: VERSION:2.0\
      S: PRODID:-//someone's prodid\
      S: CMD;ID=creation02:REPLY\
      S: TARGET:relcalz1  <- 1st TARGET listed.\
      S: BEGIN:REPLY      <- Reply for 1st VEVENT create in 1st TARGET.\
      S: UID:FirstInThisExample-1\
      S: REQUEST-STATUS:2.0\
      S: END:VREPLY\
      S: BEGIN:REPLY        <- Reply for 2nd VEVENT crate in 1st TARGET.\
      S: UID:SecondInThisExample-2\
      S: REQUEST-STATUS:2.0\
      S: END:VREPLY\
\
\
\
Royer, et al.                 Experimental                     [Page 95]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      S: END:VCALENDAR\
\
   And the second reply for the 2nd TARGET:\
\
      S: Content-Type: text/calendar\
      S:\
      S: BEGIN:VCALENDAR\
      S: VERSION:2.0\
      S: PRODID:-//someone's prodid\
      S: CMD;ID=creation02:REPLY\
      S: TARGET:relcalz2  <- 2nd TARGET listed\
      S: BEGIN:REPLY      <- Reply for 1st VEVENT create in 2nd TARGET.\
      S: UID:FirstInThisExample-1\
      S: REQUEST-STATUS:2.0\
      S: END:VREPLY\
      S: BEGIN:REPLY      <- Reply for 2nd VEVENT crate in 2nd TARGET.\
      S: UID:SecondInThisExample-2\
      S: REQUEST-STATUS:2.0\
      S: END:VREPLY\
      S: END:VCALENDAR\
\
10.5.  DELETE Command\
\
   CMD: DELETE\
\
   Purpose: The "DELETE" command physically removes the QUERY result\
      from the store or marks it for deletion.\
\
      A CUA MAY send a "DELETE" command to a CS.  The "DELETE" command\
      MUST be implemented by all CSs.\
\
      The CS MUST NOT send a "DELETE" command to any CUA.\
\
   Formal Definition: A "DELETE" command is defined by the following\
      notation:\
\
         delete-cmd   = deleteparam ":" "DELETE"\
                  ;\
         deleteparam  = *(\
                  ;\
                  ; the following are optional,\
                  ; but MUST NOT occur more than once\
                  ;\
                       id-param\
                      / localize-param\
                      / latency-param\
                      / option-param "MARK"\
                  ;\
\
\
\
Royer, et al.                 Experimental                     [Page 96]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                  ; The following MUST occur exactly once and\
                  ; only when the latency-param has been supplied.\
                  ; It MUST NOT be supplied if the latency-param\
                  ; is not supplied.\
                  ;\
                      / action-param\
                  ;\
                  ; the following is optional,\
                  ; and MAY occur more than once\
                  ;\
                      / other-params\
                     )\
\
      The "DELETE" command is used to delete calendars or components.\
      The included "VQUERY" component(s) specifies the container(s) to\
      delete.\
\
      To mark a component for delete without physically removing it,\
      include the "OPTIONS" parameter with its value set to the "MARK"\
      value in order to alter its state to "DELETED".\
\
      When components are deleted, only the top-most component\
      "REQUEST-STATUS" properties are returned.  No "REQUEST-STATUS"\
      properties are returned for components inside of the selected\
      components.  There MUST be one "VREPLY" component returned for\
      each object that is deleted or marked for delete.  Note that if no\
      "VREPLY" components are returned, then nothing matched and nothing\
      was deleted.\
\
      Restriction Table for the "REPLY" command for any "DELETE"\
      command.\
\
         delete-reply   = "BEGIN" ":" "VCALENDAR" CRLF\
                          calprops   ; MUST include 'reply-cmd'\
                          *(delete-vreply)\
                          "END" ":" "VCALENDAR" CRLF\
                        ;\
         delete-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                          deleted-id\
                          rstatus\
                          "END" ":" "VREPLY" CRLF\
                        ;\
                        ; Where the id is appropriate for the\
                        ; type of object deleted:\
                        ;\
                        ; VAGENDA = relcalid\
                        ; VCAR = carid\
                        ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid\
\
\
\
Royer, et al.                 Experimental                     [Page 97]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                        ; VQUERY = queryid\
                        ; ALARM = sequence\
                        ; VTIMEZONE = tzid\
                        ; x-comp = x-id\
                        ; An instance = uid recurid\
                        ;\
         deleted-id    = ( relcalid / carid / uid / uid recurid\
                        / queryid / tzid / sequence / x-id )\
\
   Example: to delete a "VEVENT" component with "UID" value of\
      "abcd12345" from the calendar "relcalid-22" from the current CS:\
\
         C: Content-Type: text/calendar\
         C:\
         C: BEGIN:VCALENDAR\
         C: TARGET:relcalid-22\
         C: CMD;ID:"random but unique per CUA":DELETE\
         C: BEGIN:VQUERY\
         C: QUERY:SELECT VEVENT FROM VAGENDA WHERE UID = 'abcd12345'\
         C: END:VQUERY\
         C: END:VCALENDAR\
\
         S: BEGIN:VCALENDAR\
         S: TARGET:relcalid-22\
         S: CMD;ID:"random but unique per CUA":REPLY\
         S: BEGIN:VREPLY\
         S: UID:abcd12345\
\
         S: REQUEST-STATUS:3.0\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
      One or more iCalendar objects will be returned that contain\
      "REQUEST-STATUS" properties for the deleted components.  More than\
      one component could have been deleted.  Any booked component and\
      any number of unprocessed [iTIP] scheduling components that\
      matched the QUERY value in the above example will be returned.\
      Each unique "METHOD" property value that was deleted from the\
      store MUST be in a separate iCalendar object.  This is because\
      only one "METHOD" property is allowed in a single "VCALENDAR"\
      BEGIN/END block.\
\
10.6.  GENERATE-UID Command\
\
   CMD: GENERATE-UID\
\
   Purpose: The "GENERATE-UID" command returns one or more unique\
      identifiers that MUST be globally unique.\
\
\
\
Royer, et al.                 Experimental                     [Page 98]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      The "GENERATE-UID" command MAY be sent to any CS.  The "GENERATE-\
      UID" command MUST be implemented by all CSs.\
\
      The "GENERATE-UID" command MUST NOT be sent to a CUA.\
\
   Formal Definition: A "GENERATE-UID" command is defined by the\
      following notation:\
\
         generate-uid-cmd   = genuidparam ":" "GENERATE-UID"\
                        ;\
         genuidparam        = *(\
                        ;\
                        ; The following are optional,\
                        ; but MUST NOT occur more than once.\
                            ;\
                              id-param\
                            / localize-param\
                            / latency-param\
                        ;\
                        ; The following MUST occur exactly once and\
                        ; only when the latency-param has been supplied.\
                        ; It MUST NOT be supplied if the latency-param\
                        ; is not supplied.\
                        ;\
                            / action-param\
                        ;\
                        ; The following is optional,\
                        ; and MAY occur more than once.\
                        ;\
                            / other-params\
                        ;\
                        ; The following MUST be supplied exactly once.\
                        ; The value specifies the number of UIDs to\
                        ; be returned.\
                        ;\
                            / option-param posint1\
                          )\
\
   Response:\
\
         gen-reply   = "BEGIN" ":" "VCALENDAR" CRLF\
         calprops              ; Which MUST include 'reply-cmd'\
         1*(gen-vreply)\
         "END" ":" "VCALENDAR" CRLF\
\
         gen-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                       1*(uid)\
                       rstatus\
\
\
\
Royer, et al.                 Experimental                     [Page 99]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                       "END" ":" "VREPLY" CRLF\
         {%%%IS THIS RIGHT%%%?]\
\
   Example:\
\
         C: BEGIN:VCALENDAR\
         C: VERSION:2.0\
         C: PRODID:-//someone's prodid\
         C: CMD;ID=unique-per-cua-124;OPTIONS=5:GENERATE-UID\
         C: END:VCALENDAR\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: VERSION:2.0\
         S: PRODID:-//someone's prodid\
         S: CMD;ID=unique-per-cua-124:REPLY\
         S: BEGIN:VREPLY\
         S: UID:20011121T120000Z-12340@cal.example.com\
         S: UID:20011121T120000Z-12341@cal.example.com\
         S: UID:20011121T120000Z-12342@cal.example.com\
         S: UID:20011121T120000Z-12343@cal.example.com\
         S: UID:20011121T120000Z-12344@cal.example.com\
         S: REQUEST-STATUS:2.0\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
10.7.  GET-CAPABILITY Command\
\
   CMD: GET-CAPABILITY\
\
   Purpose: The "GET-CAPABILITY" command returns the capabilities of the\
      other end point of the session.\
\
      A CUA MUST send a "GET-CAPABILITY" command to a CS after the\
      initial connection.  A CS MUST send a "GET-CAPABILITY" command to\
      a CUA after the initial connection.  The "GET-CAPABILITY" command\
      and reply MUST be implemented by all CSs and CUAs.\
\
   Formal Definition: A "GET-CAPABILITY" command is defined by the\
      following notation:\
\
         get-capability-cmd   = capabilityparam ":" "GET-CAPABILITY"\
\
         capabilityparam     = *(\
\
                       ; the following are optional,\
                       ; but MUST NOT occur more than once\
\
\
\
Royer, et al.                 Experimental                    [Page 100]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                       ;\
                             id-param / localize-param / latency-param\
                       ;\
                       ; the following MUST occur exactly once and only\
                       ; when the latency-param has been supplied and\
                       ; MUST NOT be supplied if the latency-param is\
                       ; not supplied.\
                       ;\
                            / action-param\
                       ;\
                       ; the following is optional,\
                       ; and MAY occur more than once\
                       ;\
                            / other-params\
                            )\
\
      Response:\
\
      The "GET-CAPABILITY" command returns information about the\
      implementation at the other end of the session.  The values\
      returned may differ depending on current user identify and the\
      security level of the connection.\
\
      Client implementations SHOULD NOT require any capability element\
      beyond those defined in this specification or future RFC\
      publications.  They MAY ignore any nonstandard, experimental\
      capability elements.  The "GET-CAPABILITY" reply may return\
      different results, depending on the UPN and if the UPN is\
      authenticated.\
\
      When sending a reply to a "GET-CAPABILITY" command, all of these\
      MUST be supplied.  The following properties are returned in\
      response to a "GET-CAPABILITY" command:\
\
         cap-vreply     = "BEGIN" ":" "VCALENDAR" CRLF\
                        ; The following properties may be in any order.\
                        ;\
                        rodid\
                        version\
                        reply-cmd\
                        other-props\
\
                        "BEGIN" ":" "VREPLY" CRLF\
                        ; The following properties may be in any order.\
                        ;\
                        cap-version\
                        car-level\
                        components\
\
\
\
Royer, et al.                 Experimental                    [Page 101]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                        stores-expanded\
                        maxdate\
                        mindate\
                        itip-version\
                        max-comp-size\
                        multipart\
                        query-level\
                        recur-accepted\
                        recur-expand\
                        recur-limit\
                        other-props\
                       "END" ":" "VREPLY" CRLF\
                       "END" ":" "VCALENDAR" CRLF\
\
   Example:\
\
         I: Content-Type: text/calendar\
         I:\
         I: BEGIN:VCALENDAR\
         I: VERSION:2.0\
         I: PRODID:-//someone's prodid\
         I: CMD;ID=unique-per-cua-125:GET-CAPABILITY\
         I: END:VCALENDAR\
\
         L: Content-Type: text/calendar\
         L:\
         L: BEGIN:VCALENDAR\
         L: VERSION:2.0\
         L: PRODID:-//someone's prodid\
         L: CMD;ID=unique-per-cua-125:REPLY\
         L: BEGIN:VREPLY\
         L: CAP-VERSION:1.0\
         L: PRODID:The CS prodid\
         L: QUERY-LEVEL:CAL-QL-1\
         L: CAR-LEVEL:CAR-FULL-1\
         L: MAXDATE:99991231T235959Z\
         L: MINDATE:00000101T000000Z\
         L: MAX-COMPONENT-SIZE:0\
         L: COMPONENTS:VCALENDAR,VTODO,VJOURNAL,VEVENT,VCAR,\
         L: VALARM,VFREEBUSY,VTIMEZONE,STANDARD,DAYLIGHT,VREPLY\
         L: ITIP-VERSION:2446\
         L: RECUR-ACCEPTED:TRUE\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 102]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         L: RECUR-EXPAND:TRUE\
         L: RECUR-LIMIT:0\
         L: STORES-EXPANDED:FALSE\
         L: X-INET-PRIVATE-COMMANDS:1.0\
         L: END:VREPLY\
         L: END:VCALENDAR\
\
10.8.  IDENTIFY Command\
\
   CMD: IDENTIFY\
\
   Purpose: The "IDENTIFY" command allows the CUA to set a new identity\
      to be used for calendar access.\
\
      A CUA MAY send an "IDENTIFY" command to a CS.  The "IDENTIFY"\
      command MUST be implemented by all CSs.  A CS implementation MAY\
      reject all "IDENTIFY" commands.\
\
      The CS MUST NOT send an "IDENTIFY" command to any CUA.\
\
   Formal Definition: An "IDENTIFY" command is defined by the following\
      notation:\
\
         identify-cmd    = identifyparam ":" "IDENTIFY"\
                       ;\
         identifyparam   = *(\
                       ;\
                       ; the following are optional,\
                       ; but MUST NOT occur more than once\
                       ;\
                           id-param\
                         / localize-param\
                         / latency-param\
                       ;\
                       ; the following MUST occur exactly once and only\
                       ; when the latency-param has been supplied and\
                       ; MUST NOT be supplied if the latency-param is\
                       ; not supplied.\
                       ;\
                         / action-param\
                       ;\
                       ; the following is optional,\
                       ; and MAY occur more than once\
                       ;\
                         / other-params\
                       ;\
                       ; The value is the UPN of the requested\
                       ; identity.  If option is not supplied it is\
\
\
\
Royer, et al.                 Experimental                    [Page 103]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                       ; a request to return to the original\
                       ; authenticated identity.\
                       ;\
                         / option-param upn\
                         )\
\
   Response:\
\
      A "REQUEST-STATUS" property wrapped in a "VREPLY" component with\
      only one of the following request-status codes:\
\
         2.0 Successful.\
\
      6.4 Identity not permitted.  VCAR restriction.\
\
   The CS determines, through an internal mechanism, if the credentials\
   supplied at authentication permit the operation as the selected\
   identity.  If they do, the session assumes the new identity;\
   otherwise, a security error is returned.\
\
   Example:\
\
         C: Content-Type: text/calendar\
         C:\
         C: BEGIN:VCALENDAR\
         C: VERSION:2.0\
         C: PRODID:-//someone's prodid\
         C: CMD;ID=unique-per-cua-999;OPTIONS=newUserId:IDENTIFY\
         C: END:VCALENDAR\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: VERSION:2.0\
         S: PRODID:-//someone's prodid\
         S: BEGIN:VREPLY\
         S: REQUEST-STATUS:2.0;Request Approved\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
      Or if denied:\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 104]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: PRODID:-//someone's prodid\
         S: VERSION:2.0\
         S: BEGIN:VREPLY\
         S: REQUEST-STATUS:6.4;Request Denied\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
      For the CUA to return to its original authenticated identity, the\
      OPTIONS parameter is omitted:\
\
      C: Content-Type: text/calendar\
      C:\
      C: BEGIN:VCALENDAR\
      C: VERSION:2.0\
      C: PRODID:-//someone's prodid\
      C: CMD;ID=unique-per-cua-995:IDENTIFY\
      C: END:VCALENDAR\
\
   The CS may accept (2.0) or deny (6.4) the request to return to the\
   original identity.\
\
   If a CS considers the "IDENTIFY" command an attempt to violate\
   security, the CS MAY terminate the [BEEP] session without any further\
   notice to the CUA after sending the "REQUEST-STATUS" 6.4 reply.\
\
10.9.  MODIFY Command\
\
   CMD: MODIFY\
\
   Purpose: The "MODIFY" command is used to modify existing components.\
\
      A CUA MAY send a "MODIFY" command to a CS.  The "MODIFY" command\
      MUST be implemented by all CSs.\
\
      The CS MUST NOT send a "MODIFY" command to any CUA.\
\
   Formal Definition: A "MODIFY" command is defined by the following\
      notation:\
\
         modify-cmd    = modifyparam ":" "MODIFY"\
                       ;\
         modifyparam   = *(\
                       ;\
                       ; the following are optional,\
                       ; but MUST NOT occur more than once\
\
\
\
Royer, et al.                 Experimental                    [Page 105]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                       ;\
                         id-param\
                       / localize-param\
                       / latency-param\
                       ;\
                       ; the following MUST occur exactly once and only\
                       ; when the latency-param has been supplied and\
                       ; MUST NOT be supplied if the latency-param is\
                       ; not supplied.\
                       ;\
                       / action-param\
                       ;\
                       ; the following is optional,\
                       ; and MAY occur more than once\
                       ;\
                       / other-params\
                       )\
\
      The "MODIFY" command is used to modify existing components.  The\
      TARGET property specifies the calendars that contain the\
      components that are going to be modified.\
\
      The format of the request is three components inside of\
      "VCALENDAR" component:\
\
         BEGIN:VCALENDAR\
         BEGIN:VQUERY\
         END:VQUERY\
         BEGIN:XXX\
         END:XXX\
         BEGIN:XXX\
         END:XXX\
         END:VCALENDAR\
\
      The "VQUERY" component selects the components that are to be\
      modified.\
\
      The "XXX" above is a named component type (VEVENT, VTODO, ...).\
      Both the old and new components MUST be of the same type.\
\
      The old-values is a component and the contents of that component\
      are going to change and may contain information that helps\
      uniquely identify the original component (SEQUENCE in the example\
      below).  If the CS cannot find a component that matches the QUERY\
      and does not have at least all of the OLD-VALUES, then a 6.1 error\
      is returned.\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 106]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      The new-values is a component of the same type as old-values and\
      new-values contains the new data for each selected component.  Any\
      data that is in old-values and not in new-values is deleted from\
      the selected component.  Any values in new-values that was not in\
      old-values is added to the component.\
\
      In this example, the "VEVENT" component with a "UID" property\
      value of 'unique-58' has the "LOCATION" property and "LAST-\
      MODIFIED" properties changed, the "VALARM" component with the\
      "SEQUENCE" property with a value of "3" has its "TRIGGER" property\
      disabled, the "X-LOCAL" property is removed from the "VEVENT"\
      component, and a "COMMENT" property is added.\
\
      Because "SEQUENCE" property is used to locate the "VALARM"\
      component in this example, both the old-values and the new-values\
      contain the "SEQUENCE" property with a value of "3".  If the\
      "SEQUENCE" property were to be left out of new-values, it would\
      have been deleted.\
\
   Example:\
\
         C: Content-Type: text/calendar\
         C:\
         C: BEGIN:VCALENDAR\
         C: VERSION:2.0\
         C: PRODID:-//someone's prodid\
         C: TARGET:my-cal\
         C: CMD:ID=unique-mod:MODIFY\
         C: BEGIN:VQUERY                   <- Query to select data set.\
         C: QUERY:SELECT * FROM VEVENT WHERE UID = 'unique-58'\
         C: END:VQUERY\
         C: BEGIN:VEVENT                   <- Start of old data.\
         C: LOCATION:building 3\
         C: LAST-MODIFIED:20020101T123456Z\
         C: X-LOCAL:some private stuff\
         C: BEGIN:VALARM\
         C: SEQUENCE:3\
         C: TRIGGER;RELATED=END:PT5M\
         C: END:VALARM\
         C: END:VEVENT                     <- End of old data.\
         C: BEGIN:VEVENT                   <- Start of new data.\
         C: LOCATION:building 4\
         C: LAST-MODIFIED:20020202T010203Z\
         C: COMMENT:Ignore global trigger.\
         C: BEGIN:VALARM\
         C: SEQUENCE:3\
         C: TRIGGER;ENABLE=FALSE:RELATED=END:PT5M\
         C: END:VALARM\
\
\
\
Royer, et al.                 Experimental                    [Page 107]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         C: END:VEVENT                     <- End of new data.\
         C: END:VCALENDAR\
\
      The "X-LOCAL" property was not supplied in the new-values, so it\
      was deleted.  The "LOCATION" property value was altered, as was\
      the "LAST-MODIFIED" value.  The "VALARM" component with a\
      "SEQUENCE" property value of "3" had its "TRIGGER" property\
      disabled, and the "SEQUENCE" property value did not change so it\
      was not effected.  The "COMMENT" property was added.\
\
      When it comes to inline ATTACHMENTs, the CUA only needs to\
      uniquely identify the contents of the ATTACHMENT value in the\
      old-values in order to delete them.  When the CS compares the\
      attachment data, it is compared in its binary form.  The\
      ATTACHMENT value supplied by the CUA MUST be valid encoded\
      information.\
\
      For example, to delete the same huge inline attachment from every\
      VEVENT in 'my-cal' that has an "ATTACH" property value with the\
\
      old-values:\
\
      BEGIN:VCALENDAR\
      VERSION:2.0\
      PRODID:-//someone's prodid\
      TARGET:my-cal\
      CMD:MODIFY\
      BEGIN:VQUERY\
      QUERY:SELECT ATTACH FROM VEVENT\
      END:VQUERY\
      BEGIN:VEVENT\
      ATTACH;FMTTYPE=image/basic;ENCODING=BASE64;VALUE=BINARY:\
       MIICajCCAdOgAwIBAgICbeUwDQYJKoZIhvcNAQEEBQAwdzELMAkGA1U\
       EBhMCVVMxLDAqBgNVBAoTI05ldHNjYXBlIENvbW11bmljYXRpb25zIE\
       ...< remainder of attachment data NOT supplied >....\
      END:VEVENT\
      BEGIN:VEVENT\
      END:VEVENT\
      END:VCALENDAR\
\
   Here the new-values is empty, so everything in the old-values is\
   deleted.\
\
   Furthermore, the following additional restrictions apply:\
\
   1.   One cannot change the "UID" property of a component.\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 108]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   2.   If a contained component is changed inside of a selected\
        component, and that contained component has multiple instances,\
        then old-values MUST contain information that uniquely\
        identifies the instance or instances that are changing.  It is\
        valid to change more than one.  All contained components that\
        match old-values will be modified.  In the first modify example\
        above, if "SEQUENCE" properties were to be deleted from both the\
        old-values and new-values, then all "TRIGGER" properties that\
        matched the old-values in all "VALARM" components in the\
        selected "VEVENT" components would be disabled.\
\
   3.   The result of the modify MUST be a valid iCalendar object.\
\
   Response:\
\
   A "VCALENDAR" component is returned with one ore more "REQUEST-\
   STATUS" property values.\
\
   If any error occurred:\
\
      No component will be changed at all.  That is, it will appear just\
      as it was prior to the modify and the CAP server SHOULD return a\
      "REQUEST-STATUS" property for each error that occurred.  There\
      MUST be at least one error reported.\
\
   If multiple components are selected, then what uniquely identified\
   the component MUST be returned (UID, QUERYID, ...) if the component\
   contains a unique identifier.  If it does not, sufficient information\
   to uniquely identify the modified components MUST be returned in the\
   reply.\
\
      S: Content-Type: text/calendar\
      S:\
      S: BEGIN:VCALENDAR\
      S: TARGET:relcalid\
      S: CMD;ID=delete#1:REPLY\
      S: BEGIN:VREPLY\
      S: BEGIN:VEVENT\
      S: UID:123\
      S: REQUEST-STATUS:2.0\
      S: END:VEVENT\
      S: END:VREPLY\
      S: END:VCALENDAR\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 109]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
10.10.  MOVE Command\
\
   CMD: MOVE\
\
   Purpose: The "MOVE" command is used to move components within the CS.\
\
      A CUA MAY send a "MOVE" command to a CS.  The "MOVE" command MUST\
      be implemented by all CSs.\
\
      The CS MUST NOT send a "MOVE" command to any CUA.\
\
   Formal Definition: A "MOVE" command is defined by the following\
      notation:\
\
         move-cmd    = moveparam ":" "MOVE"\
                     ;\
         moveparam   = *(\
                     ;\
                     ; the following are optional,\
                     ; but MUST NOT occur more than once\
                     ;\
                       id-param\
                     / localize-param\
                     / latency-param\
                     ;\
                     ; the following MUST occur exactly once and only\
                     ; when the latency-param has been supplied and\
                     ; MUST NOT be supplied if the latency-param is\
                     ; not supplied.\
                     ;\
                     / action-param\
                     ;\
                     ; the following is optional,\
                     ; and MAY occur more than once\
                     ;\
                     / other-params\
                     ;\
                     )\
\
   Response:\
\
         The REQUEST-STATUS in a VCALENDAR object.\
\
      The content of each "result" is subject to the result restriction\
      table defined below.\
\
      The access control on the "VAGENDA" component, after it has been\
      moved to its new location in the calstore, MUST be at least as\
\
\
\
Royer, et al.                 Experimental                    [Page 110]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      secure as it was prior to the move.  If the CS is not able to\
      ensure the same level of security, a permission-denied "REQUEST-\
      STATUS" property value MUST be returned, and the "MOVE" command\
      MUST NOT be performed.\
\
      The "TARGET" property value specifies the new location, and the\
      "VQUERY" component specifies the old location.\
\
      Restriction Table for the "REPLY" command of any "MOVE" command.\
\
         move-reply  = "BEGIN" ":" "VCALENDAR" CRLF\
                        calprops\
                        1*(move-vreply)\
                       "END" ":" "VCALENDAR" CRLF\
\
         move-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                         move-id\
                          rstatus\
                        "END" ":" "VREPLY" CRLF\
\
                       ; Where the id is appropriate for the\
                       ; type of object moved:\
                       ;\
                       ; VAGENDA = relcalid\
                       ; VCAR = carid\
                       ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid\
                       ; VQUERY = queryid\
                       ; ALARM = sequence\
                       ; An instance = uid recurid\
                       ; x-comp = x-id\
                       ;\
         move-id    =  ( relcalid / carid / uid / uid recurid\
                        / queryid / tzid / sequence / x-id)\
\
   Example: moving the VAGENDA Nellis to Area-51\
\
         C: Content-Type: text/calendar\
         C:\
         C: BEGIN:VCALENDAR\
         C: VERSION:2.0\
         C: PRODID:-//someone's prodid\
         C: CMD:MOVE\
         C: TARGET:Area-51\
         C: BEGIN:VQUERY\
         C: QUERY: SELECT *.* FROM VAGENDA WHERE CALID='Nellis'\
         C: END:VQUERY\
         C: END:VCALENDAR\
\
\
\
\
Royer, et al.                 Experimental                    [Page 111]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: VERSION:2.0\
         S: PRODID:-//someone's prodid\
         S: TARGET:Area-51\
         S: BEGIN:VREPLY\
         S: CALID:Nellis\
         S: REQUEST-STATUS: 2.0\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
10.11.  REPLY Response to a Command\
\
   CMD: REPLY\
\
   Purpose: The "REPLY" value to the "CMD" property is used to return\
      the results of all other commands to the CUA.\
\
      A CUA MUST send a "REPLY" command to a CS for any command a CS MAY\
      send to the CUA.  The "REPLY" command MUST be implemented by all\
      CUAs that support getting the "GET-CAPABILITY" command.\
\
      A CS MUST send a "REPLY" command to a CUA for any command a CUA\
      MAY send to the CS.  The "REPLY" command MUST be implemented by\
      all CSs.\
\
   Formal Definition: A "REPLY" command is defined by the following\
      notation:\
\
         reply-cmd    = replyparam ":" "REPLY"\
                        ;\
         replyparam    = *(\
                        ;\
                        ; The 'id' parameter value MUST be exactly the\
                        ; same as the value sent in the original\
                        ; CMD property.  If the original CMD did\
                        ; not have an 'id' parameter, then the 'id'\
                        ; MUST NOT be supplied in the REPLY.\
                        ;\
                    id-param\
                        ;\
                        ; the following is optional,\
                        ; and MAY occur more than once\
                        ;\
                     / other-params\
                        )\
\
\
\
\
Royer, et al.                 Experimental                    [Page 112]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
10.12.  SEARCH Command\
\
   CMD: SEARCH\
\
   Purpose: The "SEARCH" command is used to return selected components\
      to the CUA.\
\
      A CUA MAY send a "SEARCH" command to a CS.  The "SEARCH" command\
      MUST be implemented by all CSs.\
\
      The CS MUST NOT send a "SEARCH" command to any CUA.\
\
   Formal Definition: A "SEARCH" command is defined by the following\
      notation:\
\
          search-cmd   = searchparam ":" "SEARCH"\
                       ;\
         searchparam   = *(\
                       ;\
                       ; the following are optional,\
                       ; but MUST NOT occur more than once\
                       ;\
                         id-param\
                       / localize-param\
                       / latency-param\
                       ;\
                       ; the following MUST occur exactly once and only\
                       ; when the latency-param has been supplied and\
                       ; MUST NOT be supplied if the latency-param is\
                       ; not supplied.\
                       ;\
                       / action-param\
                       ;\
                       ; the following is optional,\
                       ; and MAY occur more than once\
                       ;\
                       / other-params\
                       )\
\
      The format of the request is the search command (search-cmd)\
      followed by one or more (query) "VQUERY" components\
\
   Response:\
\
      The data in each result set contains one or more iCalendar\
      components composed of all the selected results enclosed in a\
      single "VREPLY" component per "QUERY".\
\
\
\
\
Royer, et al.                 Experimental                    [Page 113]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      Only "REQUEST-STATUS" property and the properties mentioned in the\
      "SELECT" clause of the QUERY are included in the components.  Each\
      "VCALENDAR" component is tagged with the "TARGET" property.\
\
   Searching for objects\
\
      In the example below, objects on March 10,1999 between 080000Z and\
      190000Z are read.  In this case only four properties for each\
      object are returned.  Two calendars are specified.  Only booked\
      (vs.  scheduled) entries are to be returned (this example only\
      selected VEVENT objects are to be returned):\
\
         C: Content-Type: text/calendar\
         C:\
         C: BEGIN:VCALENDAR\
         C: VERSION:2.0\
         C: PRODID:-//someone's prodid\
         C: CMD:SEARCH\
         C: TARGET:relcal2\
         C: TARGET:relcal3\
         C: BEGIN:VQUERY\
         C: QUERY:SELECT DTSTART,DTEND,SUMMARY,UID\
         C:  FROM VEVENT\
         C:  WHERE DTEND >= '19990310T080000Z'\
         C:  AND DTSTART <= '19990310T190000Z'\
         C:  AND STATE() = 'BOOKED'\
         C: END:VQUERY\
         C: END:VCALENDAR\
\
      The return values are subject to VCAR filtering.  That is, if the\
      request contains properties to which the UPN does not have access,\
      those properties will not appear in the return values.  If the UPN\
      has access to at least one property of the component, but has been\
      denied access to all properties called out in the request, the\
      response will contain a single "REQUEST-STATUS" property\
      indicating the error.\
\
      Here the request was successful, however one of the "VEVENT"\
      components contents were not accessible (4.1).\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 114]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: TARGET:relcalid\
         S: CMD:REPLY\
         S: VERSION:2.0\
         S: PRODID:-//someone's prodid\
         S: BEGIN:VREPLY\
         S: BEGIN:VEVENT\
         S: REQUEST-STATUS:4.1\
         S: END:VEVENT\
         S: BEGIN:VEVENT\
         S: REQUEST-STATUS:2.0\
         S: UID:123\
         S: DTEND:19990310T080000Z\
         S: DSTART:19990310T190000Z\
         S: SUMMARY: Big meeting\
         S: END:VEVENT\
\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
      If the UPN has no access to any components at all, the response\
      will simply be an empty data set.  The response will look the same\
      if the particular components do not exist.\
\
         S: Content-Type: text/calendar\
         S:\
         S: BEGIN:VCALENDAR\
         S: VERSION:2.0\
         S: PRODID:-//someone's prodid\
         S: CMD:REPLY\
         S: TARGET:ralcalid\
         S: BEGIN:VREPLY\
         S: REQUEST-STATUS:2.0\
         S: END:VREPLY\
         S: END:VCALENDAR\
\
      If there are multiple targets, each iCalendar reply is contained\
      within its own iCalendar object.\
\
10.12.1.  Searching for VFREEBUSY\
\
   If a CS sets the "RECUR-EXPAND" property to "TRUE" and contains the\
   "VFREEBUSY" component in the "COMPONENTS" value in a reply to the\
   "GET-CAPABILITY" command, then it is the CS's responsibility (and not\
   the CUA's responsibility) to provide the correct "VFREEBUSY"\
   information for a calendar.\
\
\
\
Royer, et al.                 Experimental                    [Page 115]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   If a CUA issues a "CREATE" "VFREEBUSY", such a CS MUST return success\
   and not store the "VFREEBUSY" component as the results would never be\
   used.\
\
   Such a CS MUST dynamically create the results of a search for\
   "VFREEBUSY" components at search time when searching for STATE() =\
   'BOOKED' items.\
\
   If a CUA searches for "VFREEBUSY" components with STATE() =\
   'UNPROCESSED', such a CS MUST return a "VREPLY" with no components.\
\
   If a CUA searches for "VFREEBUSY" components without specifying the\
   STATE, such a CS MUST return the same result as if STATE()='BOOKED'\
   had been specified.\
\
   For CSs that set the "CAPABILITY" "RECUR-EXPAND" property to "FALSE"\
   and have the "VFREEBUSY" component in the "COMPONENTS" value in the\
   "CAPABILITY" reply, a CUA MAY store the "VFREEBUSY" information on\
   the CS.  These CSs then MUST return a "VFREEBUSY" component\
   calculated from the stored components.  If no "VFREEBUSY" information\
   is available for the "TARGET" calendar, then a "VFREEBUSY" with no\
   blocked out time will be returned with a success code.  A CUA sets\
   the "VFREEBUSY" time on a/those calendars by creating a "VFREEBUSY"\
   component without a "METHOD" creating a "BOOKED" entry.\
\
   If a CS does not set the "VFREEBUSY" value in the "COMPONENTS"\
   "CAPABILITY" value, the CS does not support the "VFREEBUSY" component\
   and all creation and searching for a "VFREEBUSY" component MUST fail.\
   Examples of calendars that may be in this category are public event\
   calendars that will never require scheduling with other UPNs.\
\
10.13.  SET-LOCALE Command\
\
   CMD: SET-LOCALE\
\
   Purpose: The "SET-LOCALE" command is used to select the locale that\
      will be used in error codes that are used in the "REQUEST-STATUS"\
      property.\
\
      A CUA MAY send a "SET-LOCALE" command to a CS.  The SET-LOCALE\
      command MUST be implemented by all CSs.\
\
      The CS MUST NOT send a "SET-LOCALE" command to any CUA.\
\
   Formal Definition: A "SET-LOCALE" command is defined by the following\
      notation:\
\
         setlocale-cmd   = setlocaleparam ":" "SET-LOCALE"\
\
\
\
Royer, et al.                 Experimental                    [Page 116]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
                        ;\
         setlocaleparam   = *(\
                        ;\
                        ; the following are optional,\
                        ; but MUST NOT occur more than once\
                        ;\
                            id-param\
                          / localize-param\
                          / latency-param\
                          / setlocale-option\
                        ;\
                        ; the following MUST occur exactly once and only\
                        ; only when the latency-param has been supplied.\
                        ; It MUST NOT be supplied if the latency-param\
                        ; is not supplied.\
                        ;\
                          / action-param\
                        ;\
                        ; the following is optional,\
                        ; and MAY occur more than once\
                        ;\
                          / other-params )\
\
         setlocale-option   = option-param newlocale\
                          ;\
         newlocale     =  ; Any locale supplied in the initial [BEEP]\
                          ; "greeting" "localize" parameter and\
                          ; and any charset supported by the CS\
                          ; and listed in the DEFAULT-CHARSET property\
                          ; of the VCALSTORE\
\
   Examples:\
\
         CMD:OPTIONS=en_US.UTF-8:SET-LOCALE\
         CMD:OPTIONS=th_TH.ISO8859-11:SET-LOCALE\
         CMD:OPTIONS=es_MX.ISO8859-1:SET-LOCALE\
\
      Restriction Table for the "REPLY" command of any "SET-LOCALE"\
      command.\
\
         setlocale-reply  = "BEGIN" ":" "VCALENDAR" CRLF\
                            calprops\
                            1*(setlocale-vreply)\
                           "END" ":" "VCALENDAR" CRLF\
\
         setlocale-vreply  = "BEGIN" ":" "VREPLY" CRLF\
                             rstatus\
                             "END" ":" "VREPLY" CRLF\
\
\
\
Royer, et al.                 Experimental                    [Page 117]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
10.14.  TIMEOUT Command\
\
   CMD: TIMEOUT\
\
   Purpose: The "TIMEOUT" command is only sent after a command has been\
      sent with a latency value set.  When received, it means the\
      command could not be completed in the time allowed.\
\
   Formal Definition: A "TIMEOUT" command is defined by the following\
      notation:\
\
         timeout-cmd   = timeoutparam ":" "TIMEOUT"\
\
         timeoutparam   = *(\
                         ; the following are optional,\
                         ; but MUST NOT occur more than once\
                           id-param\
                         / localize-param\
                         / other-params\
                         )\
\
10.15.  Response Codes\
\
   Numeric response codes are returned using the "REQUEST-STATUS"\
   property.\
\
   The format of these codes is described in [iCAL] and extended in\
   [iTIP] and [iMIP].  The following describes new codes added to this\
   set and how existing codes apply to CAP.\
\
   At the application layer, response codes are returned as the value of\
   a "REQUEST-STATUS" property.  The value type of this property is\
   modified from that defined in [iCAL], in order to make the\
   accompanying "REQUEST-STATUS" property text optional.\
\
      Code              Description\
      --------------------------------------------------------------\
      2.0               Success.  The parameters vary with the\
                        operation and are specified.\
\
      2.0.3             In response to the client issuing an\
                        "abort" reply, this reply code indicates\
                        that any command currently underway was\
                        successfully aborted.\
\
      3.1.4             Capability not supported.\
\
      4.1               Calendar store access denied.\
\
\
\
Royer, et al.                 Experimental                    [Page 118]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      6.1               Container not found.\
\
      6.2               Attempt to create or modify an object\
                        that would overlap another object\
                        in either of the following two circumstances:\
\
                        (a) One of the objects has a TRANSP\
                        property set to OPAQUE-NOCONFLICT or\
                        TRANSPARENT-NOCONFLICT.\
\
                        (b) The calendar's ALLOW-CONFLICT\
                        property is set to FALSE.\
\
      6.3               Bad args.\
\
      6.4               Permission denied - VCAR restriction.\
                        A VCAR exists and the CS will not perform\
                        the operation.\
\
      7.0               A timeout has occurred.  The server was\
                        unable to complete the operation in the\
                        requested time.\
\
      8.0               A failure has occurred in the CS\
                        that prevents the operation from\
                        succeeding.\
\
      8.1               A query was performed and the query is\
                        too complex for the CS.  The operation\
                        was not performed.\
\
      8.2               Used to signal that an iCalendar object has\
                        exceeded the server's size limit\
\
      8.3               A DATETIME value was too far in the future\
                        to be represented on this Calendar.\
\
      8.4               A DATETIME value was too far in the past\
                        to be represented on this Calendar.\
\
      8.5               An attempt was made to create a new\
                        object, but the unique UID specified is\
                        already in use.\
\
      9.0               An unrecognized command was received.\
                        Or an unsupported command was received.\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 119]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      10.4              The operation has not been performed\
                        because it would cause the resources\
                        (memory, disk, CPU, etc) to exceed the\
                        allocated quota.\
        --------------------------------------------------------------\
\
11.  Object Registration\
\
   This section provides the process for registration of new or modified\
   properties, parameters, commands, or other modifications, additions,\
   or deletions to objects.\
\
11.1.  Registration of New and Modified Entities\
\
   New objects are registered by the publication of an IETF Request for\
   Comment (RFC).  Changes to objects are registered by the publication\
   of a revision to the RFC in a new RFC.\
\
11.2.  Post the Item Definition\
\
   The object description MUST be posted to the new object discussion\
   list: ietf-calendar@imc.org.\
\
11.3.  Allow a Comment Period\
\
   Discussion on a new object MUST be allowed to take place on the list\
   for a minimum of two weeks.  Consensus MUST be reached on the object\
   before proceeding to the next step.\
\
11.4.  Release a New RFC\
\
   The new object will be submitted for publication like any other\
   Internet Draft requesting RFC status.\
\
12.  BEEP and CAP\
\
12.1.  BEEP Profile Registration\
\
   BEEP replies will be one-to-one (1:1 MSG/RPY) if possible, and one-\
      to-many (1:many MSG/ANS) when the "TARGET" property value changes.\
      No more than one "TARGET" property value is allowed per reply.\
\
   Profile Identification: specify a [URI] that authoritatively\
      identifies this profile.\
\
   http://iana.org/beep/cap/1.0\
\
   Message Exchanged during Channel Creation:\
\
\
\
Royer, et al.                 Experimental                    [Page 120]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      CUAs SHOULD supply the BEEP "localize" attributes in the BEEP\
      "greeting" messages.\
\
      CSs SHOULD supply the BEEP "localize" attributes in the BEEP\
      "greeting" messages.\
\
      CUAs SHOULD supply the BEEP "serverName" attribute at channel\
      creation time to the CS, so that, if the CS is performing virtual\
      hosting, the CS can determine the intended virtual host.  CSs that\
      do not support virtual hosting may ignore the BEEP "serverName"\
      attribute.\
\
   Messages starting one-to-one exchanges:\
\
      The initial message, after authentication in each direction, MUST\
      be a single "text/calendar" object containing a CAP "CAPABILITY"\
      CMD.  It must not be part of a MIME multipart message.\
\
      After the initial message, a BEEP "MSG" may contain one or more\
      MIME objects (at least one of which MUST be "text/calendar"), and\
      each "text/calendar" MIME object MUST contain a CAP "CMD"\
      property.\
\
      Multiple iCalendar objects may be sent in a single BEEP message\
      either by representing them as separate MIME text/calendar parts\
      contained within a MIME multipart/mixed part or by simple\
      concatenation within a single text/calendar MIME object.\
\
      In either case, all iCalendar objects that are transmitted\
      together must have the same TARGET property.\
\
      The sending of multipart MIME entities over BEEP is not permitted\
      for CAP unless the other endpoint has indicated its ability to\
      accept them via the appropriate CAPABILITY.\
\
   Messages in positive replies:\
\
      After the initial message, a BEEP "RPY" may contain one or more\
      MIME objects (at least one of which MUST be "text/calendar"), and\
      each "text/calendar" MIME object MUST contain a CAP "CMD"\
      property.  All "text/calendar" MIME objects in a single BEEP "RPY"\
      messages MUST have the same "TARGET" property value.\
\
      Multiple iCalendar objects may be sent in a single BEEP message by\
      either representing them as separate MIME text/calendar parts\
      contained within a MIME multipart/mixed part or by simple\
      concatenation within a single text/calendar MIME object.\
\
\
\
\
Royer, et al.                 Experimental                    [Page 121]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      In either case, all iCalendar objects transmitted together must\
      have the same TARGET property.\
\
      Sending multipart MIME entities over BEEP is not permitted for CAP\
      unless the other endpoint has indicated its ability to accept them\
      via the appropriate CAPABILITY.\
\
   Messages in negative replies:\
\
      Will contain any valid "text/calendar" MIME object that contains\
      CAP "REQUEST-STATUS" property and a CAP "CMD" property with a\
      property value of "REPLY".  And where the CS has determined the\
      requested operation to be a fatal error.  And when the CS has\
      performed NO operation that effected the contents of any part of\
      the CS or any calendar controlled by the CS.\
\
   Messages in one-to-many exchanges:\
\
      After the initial message then a BEEP "MSG" may contain one or\
      more MIME objects at least one of which MUST be "text/calendar"\
      and each "text/calendar" MIME object MUST contain a CAP "CMD"\
      property.\
\
      The BEEP "MSG" messages can only contain MIME "multipart" MIME\
      objects if the other endpoint has received a CAP "CAPABILITY"\
      indicating the other endpoint supports multipart MIME objects.\
      This does not prevent the endpoint from sending multiple [iCAL]\
      'icalobject' objects in a single BEEP "MSG" so long as all of them\
      have the same "TARGET" property value.\
\
      Multiple iCalendar objects may be sent in a single BEEP message by\
      either representing them as separate MIME text/calendar parts\
      contained within a MIME multipart/mixed part or by simple\
      concatenation within a single text/calendar MIME object.\
\
      In either case, all iCalendar objects transmitted together must\
      have the same TARGET property.\
\
      The sending of multipart MIME entities over BEEP is not permitted\
      for CAP unless the other endpoint has indicated its ability to\
      accept them via the appropriate CAPABILITY.\
\
   Message Syntax:\
\
      They are CAP "text/calendar" MIME objects as specified in this\
      memo.\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 122]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   Message Semantics:\
\
      As defined in this memo.\
\
12.2.  BEEP Exchange Styles\
\
   [BEEP] defines three styles of message exchange:\
\
      MSG/ANS,ANS,...,NUL -  For one to many exchanges.\
\
      MSG/RPY -  For one to one exchanges.\
\
      MSG/ERR -  For requests the cannot be processed due to an error.\
\
   A CAP request targeted at more than one container MAY use a one- to-\
   many exchange with a distinct answer associated with each target.  A\
   CAP request targeted at a single container MAY use a one-to-one\
   exchange or a one-to-many exchange.  "MSG/ERR" MAY only be used when\
   an error condition prevents the execution of the request on all the\
   targeted calendars.\
\
12.3.  BEEP Connection Details\
\
   All CAP communications must be done securely, so the initial greeting\
   includes the TLS profile.\
\
      L: <wait for incoming connection>\
\
      I: <open connection>\
\
      L: RPY 0 0 . 0 110\
      L: Content-Type: application/beep+xml\
      L:\
      L: <greeting>\
      L:    <profile uri='http://iana.org/beep/TLS' />\
      L: </greeting>\
      L: END\
\
      I: RPY 0 0 . 0 52\
      I: Content-Type: application/beep+xml\
      I:\
      I: <greeting/>\
      I: END\
\
   At this point, the connection is secure.  The TLS profile 'resets'\
   the connection, so it resends the greetings, advertises the CAP\
   profiles that are supported, and replies with the profile selected\
   (only one profile exists at this time):\
\
\
\
Royer, et al.                 Experimental                    [Page 123]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      L: <wait for incoming connection>\
\
      I: <open connection>\
\
      L: RPY 0 0 . 0 110\
      L: Content-Type: application/beep+xml\
      L:\
      L: <greeting>\
      L:    <profile uri='http://iana.org/beep/cap/1.0'/>\
      L: </greeting>\
      L: END\
\
      I: RPY 0 0 . 0 110\
      I: Content-Type: application/beep+xml\
      I:\
      I: <greeting>\
      I:    <profile uri='http://iana.org/beep/cap/1.0'/>\
      I: </greeting>\
      I: END\
\
   Each channel must be authenticated before work can start, but\
   starting a channel involves authentication.  Any SASL profile may be\
   included, for example:\
\
      <profile uri='http://iana.org/beep/SASL/OTP'/>\
      <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\
      <profile uri='http://iana.org/beep/SASL/ANONYMOUS'/>\
\
   Example of anonymous channel:\
\
      C: <start number='1'>\
      C:    <profile uri='http://iana.org/beep/SASL/ANONYMOUS'/>\
      C: </start>\
\
      S: RPY 0 1 . 221 87\
      S: Content-Type: application/beep+xml\
      S:\
      S: <profile uri='http://iana.org/beep/SASL/ANONYMOUS'/>\
      S: END\
\
   Example of DIGEST-MD5 channel:\
\
      C: <start number='1'>\
      C:    <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\
      C: </start>\
\
      S: RPY 0 1 . 221 87\
      S: Content-Type: application/beep+xml\
\
\
\
Royer, et al.                 Experimental                    [Page 124]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
      S:\
      S: <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\
      S: END\
\
   Piggybacking the "CAPABILITY" command.\
\
   The "CAPABILITY" reply may be included during channel start (see\
   RFC3080, section 2.3.1.2), as BEEP allows the start command to\
   include the initial data transfer.  This reduces the number of round\
   trips to initiate a CAP session.\
\
13.  IANA Considerations\
\
   This memo defines IANA-registered extensions to the attributes\
   defined by iCalendar, as defined in [iCAL], and [iTIP].\
\
   IANA registration proposals for iCalendar and [iTIP] are to be mailed\
   to the registration agent for the "text/calendar" [MIME] content-\
   type, <MAILTO: ietf-calendar@imc.org> using the format defined in\
   section 7 of [iCAL].\
\
   The the IANA has registered the profile specified in Section 12.1,\
   and has selected an IANA-specific URI: http://iana.org/beep/cap/1.0.\
\
14.  Security Considerations\
\
   Access rights should be granted cautiously.  Without careful\
   planning, it is possible to open up access to a greater degree than\
   desired.\
\
   The "IDENTIFY" command should be carefully implemented.  If it is\
   done incorrectly, UPNs may gain access as other, unintended, UPNs.\
   The "IDENTIFY" command may not chain; that is, the identity is always\
   validated against the original UPN and not the new UPN.\
\
   Since CAP is a profile of [BEEP], consult [BEEP]'s Section 9 for a\
   discussion of BEEP-specific security issues.\
\
   There are risks of allowing anonymous UPNs to deposit REQUEST and\
   REFRESH objects (calendar spam and denial-of-service, for example).\
   Implementations should consider methods to restrict anonymous\
   requests to within acceptable usages.\
\
   CS implementations might consider automatically creating VCARs that\
   allow CAP ATTENDEEs in booked objects to deposit REFRESH and REPLY\
   objects for those UIDs if they otherwise do not have access rather\
   then opening up world access.  And they may also consider allowing\
   COUNTER objects for those ATTENDEEs.\
\
\
\
Royer, et al.                 Experimental                    [Page 125]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   When an object is booked by a CUA ,the CS reply may wish to include\
   warning messages to the CUA for ATTENDEEs that have CAP urls that do\
   not have local UPNs as those ATTENDEES may be unable to REPLY or\
   REFRESH.  Some CSs may wish this to be an error.\
\
   Although service provisioning is a policy matter, at a minimum, all\
   implementations must provide the following tuning profiles:\
\
      o for authentication: http://iana.org/beep/SASL/DIGEST-MD5\
\
      o for confidentiality: http://iana.org/beep/TLS (using the\
      TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher)\
\
      o for both: http://iana.org/beep/TLS (using the\
      TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher supporting client-side\
      certificates)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 126]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
Appendix A.  Acknowledgements\
\
   The following individuals were major contributors to the drafting and\
   discussion of this memo, and they are greatly appreciated:\
\
   Alan Davies, Andrea Campi, Andre Courtemanche, Andrew Davison, Anil\
   Srivastava, ArentJan Banck, Arnaud Quillaud, Benjamin Sonntag,\
   Bernard Desruisseaux, Bertrand Guiheneuf, Bob Mahoney, Bob Morgan,\
   Bruce Kahn, Chris Dudding, Chris Olds, Christopher Apple, Cortlandt\
   Winters, Craig Johnson, Cyrus Daboo, Damon Chaplin, Dan Hickman, Dan\
   Kohn, Dan Winship, Darryl Champagne, David C.  Thewlis, David Nicol,\
   David Nusbaum, David West, Derik Stenerson, Eric R. Plamondon, Frank\
   Dawson, Frank Nitsch, Gary Frederick, Gary McGath, Gilles Fortin,\
   Graham Gilmore, Greg Barnes, Greg FitzPatrick, Harald Alvestrand,\
   Harrie Hazewinkel, Helge Hess, Jagan Garimella, Jay Parker, Jim Ray,\
   Jim Smith, Joerg Reichelt, John Berthels, John Smith, John Stracke,\
   Jonathan Lennox, JP Rosevear, Karen Chu, Katie Capps Parlante, Kees\
   Cook, Ken Crawford, Ki Wong, Lars Eggert, Lata Kannan, Lawrence\
   Greenfield, Libby Miller, Lisa Dusseault, Lyndon Nerenberg, Mark\
   Davidson, Mark Paterson, Mark Smith, Mark Swanson, Mark Tearle,\
   Marshall Rose, Martijn van Beers, Martin Jackson, Matthias Laabs, Max\
   Froumentin, Micah Gorrell, Michael Fair, Mike Higginbottom, Mike\
   Hixson, Murata Makoto, Natalia Syracuse, Nathaniel Borenstein, Ned\
   Freed, Olivier Gutknecht, Patrice Lapierre, Patrice Scattolin, Paul\
   Hoffman, Paul Sharpe, Payod Deshpande, Pekka Pessi, Peter Thompson,\
   Preston Stephenson, Prometeo Sandino Roman Corral, Ralph Patterson,\
   Robert Lusardi, Robert Ransdell, Rob Siemborski, Satyanarayana\
   Vempati, Satya Vempati, Scott Hollenbeck, Seamus Garvey, Shannon\
   Clark, Shriram Vishwanathan, Steve Coya, Steve Mansour, Steve Miller,\
   Steve Vinter, Stuart Guthrie, Suchet Singh Khalsa, Ted Hardie, Tim\
   Hare, Timo Sirainen, Vicky Oliver, Paul Hill, and Yael Shaham-Gafni.\
\
Appendix B.  References\
\
Appendix B.1.  Normative References\
\
   [ABNF]      Crocker, D., Ed. and P. Overell, "Augmented BNF for\
               Syntax Specifications: ABNF", RFC 4234, October 2005.\
\
   [BEEP]      Rose, M., "The Blocks Extensible Exchange Protocol Core",\
               RFC 3080, March 2001.\
\
   [BEEPTCP]   Rose, M., "Mapping the BEEP Core onto TCP", RFC 3081,\
               March 2001.\
\
   [BEEPGUIDE] Rose, M., "BEEP, The Definitive Guide", ISBN 0-596-\
               00244-0, O'Reilly & Associates, Inc.\
\
\
\
\
Royer, et al.                 Experimental                    [Page 127]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   [GUIDE]     Mahoney, B., Babics, G., and A. Taler, "Guide to Internet\
               Calendaring", RFC 3283, June 2002.\
\
   [iCAL]      Dawson, F. and D. Stenerson, "Internet Calendaring and\
               Scheduling Core Object Specification (iCalendar)", RFC\
               2445, November 1998.\
\
   [iTIP]      Silverberg, S., Mansour, S., Dawson, F., and R. Hopson,\
               "iCalendar Transport-Independent Interoperability\
               Protocol (iTIP) Scheduling Events, BusyTime, To-dos and\
               Journal Entries", RFC 2446, November 1998.\
\
   [iMIP]      Dawson, F., Mansour, S., and S. Silverberg, "iCalendar\
               Message-Based Interoperability Protocol (iMIP)", RFC\
               2447, November 1998.\
\
   [MIME]      Freed, N. and N. Borenstein, "Multipurpose Internet Mail\
               Extensions (MIME) Part One: Format of Internet Message\
               Bodies", RFC 2045, November 1996.\
\
   [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate\
               Requirement Levels", RFC 2119, BCP 14, March 1997.\
\
Appendix B.2.  Informative References\
\
   [CHARREG]   Freed, N. and J. Postel, "IANA Charset Registration\
               Procedures", RFC 2278, January 1998.\
\
   [CHARPOL]   Alvestrand, H., "IETF Policy on Character Sets and\
               Languages", RFC 2277, January 1998.\
\
   [RFC2822]   Resnick, P., Ed., "Internet Message Format", RFC 2822,\
               April 2001.\
\
   [SASL]      Myers, J., "Simple Authentication and Security Layer\
               (SASL)", RFC 2222, October 1997.\
\
   [SQL92]     "Database Language SQL", ANSI/ISO/IEC 9075: 1992, aka\
               ANSI X3.135-1992, aka FIPS PUB 127-2\
\
   [SQLCOM]    ANSI/ISO/IEC 9075:1992/TC-1-1995, Technical corrigendum 1\
               to ISO/IEC 9075: 1992, also adopted as Amendment 1 to\
               ANSI X3.135.1992\
\
   [URLGUIDE]  Masinter, L., Alvestrand, H., Zigmond, D., and R. Petke,\
               "Guidelines for new URL Schemes", RFC 2718, November\
               1999.\
\
\
\
\
Royer, et al.                 Experimental                    [Page 128]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
   [URI]       Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform\
               Resource Identifiers (URI): Generic Syntax", RFC 3986,\
               January 2005.\
\
   [URL]       Berners-Lee, T, Masinter, L., and M. McCahil, "Uniform\
               Resource Locators (URL)", RFC 1738, December 1994.\
\
   [X509CRL]   Housley, R., Polk, W., Ford, W., and D. Solo, "Internet\
               X.509 Public Key Infrastructure Certificate and\
               Certificate Revocation List (CRL) Profile", RFC 3280,\
               April 2002.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 129]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
Authors' Addresses\
\
   Doug Royer\
   IntelliCal, LLC\
   267 Kentlands Blvd. #3041\
   Gaithersburg, MD  20878\
   US\
\
   Phone: +1-866-594-8574\
   Fax:   +1-866-594-8574\
   EMail: Doug@IntelliCal.com\
   URI:   http://Royer.com\
\
\
   George Babics\
   Oracle\
   600 Blvd. de Maisonneuve West\
   Suite 1900\
   Montreal, Quebec  H3A 3J2\
   CA\
\
   Phone: +1-514-905-8694\
   EMail: george.babics@oracle.com\
\
\
   Steve Mansour\
   eBay\
   2145 Hamilton Avenue\
   San Jose, CA  95125\
   USA\
\
   Phone: +1-408-376-8817\
   EMail: smansour@ebay.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 130]\
\
RFC 4324                Calendar Access Protocol           December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Royer, et al.                 Experimental                    [Page 131]\
\

doc 11
  field 0
    name titolo
    type string
    value rfc4323.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                         M. Patrick\
Request for Comments: 4323                                     W. Murwin\
Category: Standards Track                                   Motorola BCS\
                                                            January 2006\
\
\
             Data Over Cable System Interface Specification\
                           Quality of Service\
              Management Information Base (DOCSIS-QoS MIB)\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document defines a basic set of managed objects for SNMP-based\
   management of extended QoS features of Cable Modems (CMs) and Cable\
   Modem Termination Systems (CMTSs) conforming to the Data over Cable\
   System (DOCSIS) specifications versions 1.1 and 2.0.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 1]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. The Internet-Standard Management Framework .................2\
      1.2. Glossary ...................................................3\
   2. Overview ........................................................5\
      2.1. Textual Conventions ........................................5\
      2.2. MIB Organization ...........................................5\
           2.2.1. docsIetfQosPktClassTable ............................9\
           2.2.2. docsIetfQosParamSetTable ...........................10\
                  2.2.2.1. Interoperation with DOCSIS 1.0 ............11\
           2.2.3. docsIetfQosServiceFlowTable ........................12\
           2.2.4. docsIetfQosServiceFlowStatsTable ...................13\
           2.2.5. docsIetfQosUpstreamStatsTable ......................14\
           2.2.6. docsIetfQosDynamicServiceStatsTable ................14\
           2.2.7. docsIetfQosServiceFlowLogTable .....................14\
           2.2.8. docsIetfQosServiceClassTable .......................15\
           2.2.9. docsIetfQosServiceClassPolicyTable .................15\
           2.2.10. docsIetfQosPHSTable ...............................16\
           2.2.11. docsIetfQosCmtsMacToSrvFlowTable ..................16\
   3. Externally Administered Classification .........................16\
   4. DOCSIS and IPv4 Type-of-Service (ToS) Field ....................19\
   5. Definitions ....................................................20\
   6. Security Considerations ........................................84\
   7. IANA Considerations ............................................86\
   8. Acknowledgements ...............................................86\
   9. Normative References ...........................................86\
   10. Informative References ........................................87\
\
1.  Introduction\
\
   This memo is a product of the IP over Cable Data Network (IPCDN)\
   working group within the Internet Engineering Task Force (IETF).\
\
1.1.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to section 7 of\
   RFC 3410 [15].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [1], STD 58, RFC 2579 [2] and STD 58, RFC 2580 [3].\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 2]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
1.2.  Glossary\
\
   Active QPS      Active QoS Parameter Set (QPS).  The set of QoS\
                   parameters that describe the current level of service\
                   provided to a Service Flow (SF).\
\
   Active SF       Active Service Flow.  An SF with a non-empty Active\
                   QPS.\
\
   Admitted QPS    Admitted QoS Parameter Set.  The set of QoS\
                   parameters that describe a level of service that the\
                   Service Flow is not currently using, but that it is\
                   guaranteed to receive upon the SF's request to make\
                   the set Active.\
\
   Admitted SF     A Service Flow with a non-empty Admitted QPS.\
\
   CATV            Cable Television.\
\
   CM              Cable Modem.  A modem connecting a subscriber's LAN\
                   to the Cable Television (CATV) Radio Frequency (RF)\
                   network.  DOCSIS CMs operate as a MAC layer bridge\
                   between the home LAN and the Cable Television (CATV)\
                   Radio Frequency (RF) network.\
\
   CMTS            Cable Modem Termination System.  The "head-end"\
                   device providing connectivity between the RF network\
                   and the Internet.\
\
   Downstream      The direction from the head-end towards the\
                   subscriber.\
\
   DSA             Dynamic Service Addition.  A DOCSIS MAC management\
                   message requesting the dynamic creation of a new\
                   Service Flow.  New SFs are created with a three-\
                   message exchange of a DSA-REQ, DSA-RSP, and DSA-ACK.\
\
   DSC             Dynamic Service Change.  A DOCSIS MAC management\
                   message requesting a change to the attributes of a\
                   Service Flow.  SFs are changed with a three-message\
                   exchange of a DSC-REQ, DSC-RSP, and DSC-ACK.\
\
   DSD             Dynamic Service Delete.  A DOCSIS MAC management\
                   message requesting the deletion of a Service Flow.\
                   SFs are deleted with a two-message exchange of a\
                   DSD-REQ and DSD-ACK.\
\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 3]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   Head-end        The origination point in most cable systems of the\
                   subscriber video signals.  It is generally also the\
                   location of the CMTS.\
\
   PHS             Payload Header Suppression.  A feature of DOCSIS 1.1\
                   and 2.0 in which header bytes that are common in a\
                   sequence of packets of a Service Flow are replaced by\
                   a one-byte PHSI Index (PHSI) when transmitting the\
                   packet on the RF network.\
\
   primary SF      Primary Service Flow.  All CMs have a Primary\
                   Upstream Service Flow and a Primary Downstream\
                   Service Flow.  They provide a default path for\
                   forwarded packets that are not classified to any\
                   other Service Flow.\
\
   Provisioned QPS A QoS Parameter Set describing an envelope of service\
                   within which a Service Flow is authorized to request\
                   admission.  All existing Service Flows must have a\
                   non-empty Provisioned QPS; thus, all SFs are\
                   considered to be "Provisioned".\
\
   RF              Radio Frequency.  In particular, this abbreviation\
                   refers to the radio frequencies for Cable Television\
                   (CATV).\
\
   SCN             Service Class Name.  A named set of QoS parameters.\
                   A Service Flow may or may not be associated with a\
                   single named Service Class.  A Service Class has as\
                   an attribute a QoS Parameter Set that is used as the\
                   default set of values for all Service Flows belonging\
                   to the Service Class.\
\
   SID             Service ID.  A 16-bit unsigned integer assigned by\
                   the CMTS for an Upstream Service Flow with a non-\
                   empty Active QoS Parameter Set.\
\
   SF              Service Flow.  A unidirectional stream of packets\
                   between the CM and CMTS.  SFs are characterized as\
                   upstream or downstream.  The SF is the fundamental\
                   unit of service provided on a DOCSIS CATV network.\
\
   SFID            Service Flow ID.  A 32-bit unsigned integer assigned\
                   by the CMTS to each Service Flow.\
\
   Upstream        The direction from a subscriber CM to the head-end\
                   CMTS.\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 4]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
2.  Overview\
\
   This MIB module provides a set of objects required for the management\
   of DOCSIS 1.1 and 2.0 compliant Cable Modems (CM) and Cable Modem\
   Termination Systems (CMTS).  The specification is derived from the\
   DOCSIS 2.0 Radio Frequency Interface specification [4].  Please note\
   that the referenced DOCSIS specifications only requires Cable Modems\
   to process IPv4 customer traffic.  Design choices in this MIB module\
   reflect those requirements.  Future versions of the DOCSIS standard\
   are expected to require support for IPv6 as well.\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [5].\
\
2.1.  Textual Conventions\
\
   The textual convention "DocsIetfQosRfMacIfDirection" is defined to\
   indicate the direction of a packet classifier relative to an\
   interface.  It takes the values of either downstream(1) or\
   upstream(2).\
\
   The textual convention "DocsIetfQosBitRate" corresponds to the bits\
   per second as defined for QoS Parameter Sets in DOCSIS 1.1 and 2.0.\
   This definition includes all bits of the Ethernet MAC frame as\
   transmitted on the RF network, starting with the Destination Address\
   and ending with the Ethernet Frame Check Sequence (FCS).  It does NOT\
   includes bits in the DOCSIS MAC header.\
\
2.2.  MIB Organization\
\
   The structure of the IPCDN QoS MIB module (DOCS-IETF-QOS-MIB) is\
   summarized below:\
\
      docsIetfQosMIB\
        docsIetfQosMIBObjects\
          docsIetfQosPktClassTable\
            docsIetfQosPktClassEntry\
              docsIetfQosPktClassId\
              docsIetfQosPktClassDirection\
              docsIetfQosPktClassPriority\
              docsIetfQosPktClassIpTosLow\
              docsIetfQosPktClassIpTosHigh\
              docsIetfQosPktClassIpTosMask\
              docsIetfQosPktClassIpProtocol\
              docsIetfQosPktClassInetAddressType\
              docsIetfQosPktClassInetSourceAddr\
              docsIetfQosPktClassInetSourceMask\
\
\
\
Patrick & Murwin            Standards Track                     [Page 5]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
              docsIetfQosPktClassInetDestAddr\
              docsIetfQosPktClassInetDestMask\
              docsIetfQosPktClassSourcePortStart\
              docsIetfQosPktClassSourcePortEnd\
              docsIetfQosPktClassDestPortStart\
              docsIetfQosPktClassDestPortEnd\
              docsIetfQosPktClassDestMacAddr\
              docsIetfQosPktClassDestMacMask\
              docsIetfQosPktClassSourceMacAddr\
              docsIetfQosPktClassEnetProtocolType\
              docsIetfQosPktClassEnetProtocol\
              docsIetfQosPktClassUserPriLow\
              docsIetfQosPktClassUserPriHigh\
              docsIetfQosPktClassVlanId\
              docsIetfQosPktClassStateActive\
              docsIetfQosPktClassPkts\
              docsIetfQosPktClassBitMap\
          docsIetfQosParamSetTable\
            docsIetfQosParamSetEntry\
              docsIetfQosParamSetServiceClassName\
              docsIetfQosParamSetPriority\
              docsIetfQosParamSetMaxTrafficRate\
              docsIetfQosParamSetMaxTrafficBurst\
              docsIetfQosParamSetMinReservedRate\
              docsIetfQosParamSetMinReservedPkt\
              docsIetfQosParamSetActiveTimeout\
              docsIetfQosParamSetAdmittedTimeout\
              docsIetfQosParamSetMaxConcatBurst\
              docsIetfQosParamSetSchedulingType\
              docsIetfQosParamSetNomPollInterval\
              docsIetfQosParamSetTolPollJitter\
              docsIetfQosParamSetUnsolicitGrantSize\
              docsIetfQosParamSetNomGrantInterval\
              docsIetfQosParamSetTolGrantJitter\
              docsIetfQosParamSetGrantsPerInterval\
              docsIetfQosParamSetTosAndMask\
              docsIetfQosParamSetTosOrMask\
              docsIetfQosParamSetMaxLatency\
              docsIetfQosParamSetType\
              docsIetfQosParamSetRequestPolicyOct\
              docsIetfQosParamSetBitMap\
          docsIetfQosServiceFlowTable\
            docsIetfQosServiceFlowEntry\
              docsIetfQosServiceFlowId\
              docsIetfQosServiceFlowSID\
              docsIetfQosServiceFlowDirection\
              docsIetfQosServiceFlowPrimary\
          docsIetfQosServiceFlowStatsTable\
\
\
\
Patrick & Murwin            Standards Track                     [Page 6]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
            docsIetfQosServiceFlowStatsEntry\
              docsIetfQosServiceFlowPkts\
              docsIetfQosServiceFlowOctets\
              docsIetfQosServiceFlowTimeCreated\
              docsIetfQosServiceFlowTimeActive\
              docsIetfQosServiceFlowPHSUnknowns\
              docsIetfQosServiceFlowPolicedDropPkts\
              docsIetfQosServiceFlowPolicedDelayPkts\
          docsIetfQosUpstreamStatsTable\
            docsIetfQosUpstreamStatsEntry\
              docsIetfQosSID\
              docsIetfQosUpstreamFragments\
              docsIetfQosUpstreamFragDiscards\
              docsIetfQosUpstreamConcatBursts\
          docsIetfQosDynamicServiceStatsTable\
            docsIetfQosDynamicServiceStatsEntry\
              docsIetfQosIfDirection\
              docsIetfQosDSAReqs\
              docsIetfQosDSARsps\
              docsIetfQosDSAAcks\
              docsIetfQosDSCReqs\
              docsIetfQosDSCRsps\
              docsIetfQosDSCAcks\
              docsIetfQosDSDReqs\
              docsIetfQosDSDRsps\
              docsIetfQosDynamicAdds\
              docsIetfQosDynamicAddFails\
              docsIetfQosDynamicChanges\
              docsIetfQosDynamicChangeFails\
              docsIetfQosDynamicDeletes\
              docsIetfQosDynamicDeleteFails\
              docsIetfQosDCCReqs\
              docsIetfQosDCCRsps\
              docsIetfQosDCCAcks\
              docsIetfQosDCCs\
              docsIetfQosDCCFails\
          docsIetfQosServiceFlowLogTable\
            docsIetfQosServiceFlowLogEntry\
              docsIetfQosServiceFlowLogIndex\
              docsIetfQosServiceFlowLogIfIndex\
              docsIetfQosServiceFlowLogSFID\
              docsIetfQosServiceFlowLogCmMac\
              docsIetfQosServiceFlowLogPkts\
              docsIetfQosServiceFlowLogOctets\
              docsIetfQosServiceFlowLogTimeDeleted\
              docsIetfQosServiceFlowLogTimeCreated\
              docsIetfQosServiceFlowLogTimeActive\
              docsIetfQosServiceFlowLogDirection\
\
\
\
Patrick & Murwin            Standards Track                     [Page 7]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
              docsIetfQosServiceFlowLogPrimary\
              docsIetfQosServiceFlowLogServiceClassName\
              docsIetfQosServiceFlowLogPolicedDropPkts\
              docsIetfQosServiceFlowLogPolicedDelayPkts\
              docsIetfQosServiceFlowLogControl\
          docsIetfQosServiceClassTable\
            docsIetfQosServiceClassEntry\
              docsIetfQosServiceClassName\
              docsIetfQosServiceClassStatus\
              docsIetfQosServiceClassMaxTrafficRate\
              docsIetfQosServiceClassMaxTrafficBurst\
              docsIetfQosServiceClassMinReservedRate\
              docsIetfQosServiceClassMinReservedPkt\
              docsIetfQosServiceClassMaxConcatBurst\
              docsIetfQosServiceClassNomPollInterval\
              docsIetfQosServiceClassTolPollJitter\
              docsIetfQosServiceClassUnsolicitGrantSize\
              docsIetfQosServiceClassNomGrantInterval\
              docsIetfQosServiceClassTolGrantJitter\
              docsIetfQosServiceClassGrantsPerInterval\
              docsIetfQosServiceClassMaxLatency\
              docsIetfQosServiceClassActiveTimeout\
              docsIetfQosServiceClassAdmittedTimeout\
              docsIetfQosServiceClassSchedulingType\
              docsIetfQosServiceClassRequestPolicy\
              docsIetfQosServiceClassTosAndMask\
              docsIetfQosServiceClassTosOrMask\
              docsIetfQosServiceClassDirection\
              docsIetfQosServiceClassStorageType\
              docsIetfQosServiceClassDSCPOverwrite\
          docsIetfQosServiceClassPolicyTable\
            docsIetfQosServiceClassPolicyEntry\
              docsIetfQosServiceClassPolicyIndex\
              docsIetfQosServiceClassPolicyName\
              docsIetfQosServiceClassPolicyRulePriority\
              docsIetfQosServiceClassPolicyStatus\
              docsIetfQosServiceClassPolicyStorageType\
          docsIetfQosPHSTable\
            docsIetfQosPHSEntry\
              docsIetfQosPHSField\
              docsIetfQosPHSMask\
              docsIetfQosPHSSize\
              docsIetfQosPHSVerify\
              docsIetfQosPHSIndex\
          docsIetfQosCmtsMacToSrvFlowTable\
            docsIetfQosCmtsMacToSrvFlowEntry\
\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 8]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
              docsIetfQosCmtsCmMac\
              docsIetfQosCmtsServiceFlowId\
              docsIetfQosCmtsIfIndex\
\
   This MIB module is organized as 11 tables.  Most tables are\
   implemented in both the CM and CMTS; the\
   docsIetfQosUpstreamStatsTable and docsIetfQosServiceFlowLogTable are\
   implemented on the CMTS only.\
\
2.2.1.  docsIetfQosPktClassTable\
\
   The docsIetfQosPktClassTable reports the Service Flow Classifiers\
   implemented by the managed device.  The table is indexed by the tuple\
   { ifIndex, docsIetfQosServiceFlowId, docsIetfQosPktClassId }.  The\
   ifIndex corresponds to a CATV MAC interface.  Each CATV MAC interface\
   has a set of Service Flows identified with a docsIetfQosServiceFlowId\
   value that is unique for that interface.  Each Service Flow may have\
   a number of packet classifiers that map packets to the flow.  The\
   ClassifierId for the classifier is unique only within a particular\
   Service Flow.\
\
   The semantics of packet classification are provided in [4].  Briefly,\
   the DOCSIS MAC interface calls for matching packets based on values\
   within the 802.2 (LLC), 802.3, IP, and/or UDP/TCP headers.  Packets\
   that map more than one classifier are prioritized according to their\
   docsIetfQosPktClassPriority values.  The docsIetfQosServiceFlowId (an\
   index object) indicates to which Service Flow the packet is\
   classified.\
\
   The docsIetfQosPktClassTable is distinct from the\
   docsDevIpFilterTable of [6] in that docsIetfQosPktClassTable is\
   intended only to reflect the state of the Service Flow Classifiers.\
   Service Flow Classifiers may be created only via a CM configuration\
   file or from the Dynamic Service Addition (DSA) messages.  For this\
   reason, docsIetfQosPktClassTable is read-only.\
\
   The docsDevIpFilterTable is intended for external policy-based\
   administration of packet classifiers.  See the section "Externally\
   Administered Classification", below.\
\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                     [Page 9]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
2.2.2.  docsIetfQosParamSetTable\
\
   The docsIetfQosParamSetTable reports the values of QoS Parameter Set\
   as defined in Section C.2.2 of [4].\
\
   In general, a Service Flow is associated with three different QoS\
   Parameter Sets (QPSs): an "active" QPS, an "admitted" QPS, and a\
   "provisioned" or "authorized" QPS.  The relationship of these three\
   sets is represented below:\
\
                         +---------------------+\
                         | Provisioned         |\
                         |                     |\
                         |  +---------------+  |\
                         |  |  Admitted     |  |\
                         |  |               |  |\
                         |  |  +---------+  |  |\
                         |  |  |  Active |  |  |\
                         |  |  |         |  |  |\
                         |  |  +---------+  |  |\
                         |  |               |  |\
                         |  +---------------+  |\
                         |                     |\
                         +---------------------+\
\
                       Figure 1: QoS Parameter Sets\
\
   The Provisioned QPS describes the maximum service envelope for which\
   the SF is authorized.  The Admitted QPS is the set of services for\
   which a Service Flow has requested admission to the DOCSIS RF\
   network, but which is not yet active.  The Admitted QPS is used\
   during the two-phase process of IP Telephony/PacketCable Service Flow\
   admission to admit the bandwidth for a bidirectional voice call when\
   the far end is ringing.  Because ringing may occur for up to four\
   minutes, this permits the bandwidth to be reserved but not actually\
   consumed during this interval.  The Active QPS is the set of services\
   actually being used by the Service Flow.  The DOCSIS v1.1\
   specification [4] defines what it means for a QPS envelope to be\
   "within" another.  In general, an inner QPS is considered "within" an\
   outer QPS when all QoS parameters represent demands of equal or fewer\
   resources of the network.\
\
   In addition to its use as an attribute of a Service Flow, a QPS is\
   also an attribute of a Service Class.  A DOCSIS CM configuration file\
   or DSA message may request the creation of a new SF and give only the\
   Service Class Name.  The CMTS "expands the macro" of a Service Class\
   Name creation by populating the Provisioned, Admitted, and/or Active\
   QPSs of the Service Flow with the QPS of the Service Class Name.  All\
\
\
\
Patrick & Murwin            Standards Track                    [Page 10]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   the QPSs of a Service Flow must be expansions of the same Service\
   Class, and in this case the SF is said to "belong" to the Service\
   Class.  Changing the contents of a Service Class' QPS does not affect\
   the QPS of any Service Flow earlier expanded from that Service Class\
   name.  Only the CMTS implements docsIetfQosServiceClassTable.\
\
   See [4], section 8, for a full description and the theory of\
   operation of DOCSIS 1.1 QoS operation.\
\
   The docsIetfQosParamSetTable sets are indexed by { ifIndex,\
   docsIetfQosServiceFlowId, docsIetfQosParamSetType}.  ifIndex\
   indicates a particular "DOCSIS MAC Domain".  docsIetfQosServiceFlowId\
   uniquely identifies a Service Flow on that MAC domain.  The\
   docsIetfQosParamSetType indicates whether the row describes an\
   active, admitted, or provisioned QoS Parameter Set.\
\
   The docsIetfQosParamSetTable is read-only because it indicates the\
   QoS Parameter Set contents as defined by DOCSIS signaling.  The\
   docsIetfQosServiceClassTable is read-create to permit managers to\
   define a template of QoS Parameters that can be referenced by DOCSIS\
   modems when creating their QoS Parameter Sets.\
\
2.2.2.1.  Interoperation with DOCSIS 1.0\
\
   The DOCS-IF-MIB [7] specifies a docsIfQosProfileTable to describe the\
   set of Class Of Service (COS) parameters associated with a COS\
   "profile".  The docsIfCmServiceTable, which contains one entry per\
   SID, references this table with a docsIfCmServiceQosProfile number.\
\
   The DOCSIS 1.1 and 2.0 CM registration process allows a modem to\
   register as operating with DOCSIS 1.0, DOCSIS 1.1, or DOCSIS 2.0\
   functionality.  For ease of expression, we call a modem registering\
   with DOCSIS 1.0 functionality a "DOCSIS 1.0 modem", regardless of the\
   modem's capabilities.\
\
   A CMTS or CM supporting DOCSIS 1.0, as well as DOCSIS 1.1, and/or\
   DOCSIS 2.0 implements both the tables of [7] and the tables of this\
   MIB module.  The interoperation goal is that before modem\
   registration, the DOCSIS 1.0 MIB [7] applies.  After registration,\
   either the DOCSIS 1.0 or DOCSIS 1.1/2.0 MIB applies, depending on the\
   mode with which the modem registered.  The specific interoperation\
   rules are:\
\
     1.  When a CM initially ranges, the CM implements a row in the\
         DOCS-IF-MIB docsIfCmServiceTable, and the CMTS implements a row\
         in the DOCS-IF-MIB docsIfCmtsServiceTable corresponding to the\
         default upstream Service ID (SID) used for pre-registration\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 11]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
         upstream traffic.  For historical compatibility, a row may be\
         created for the docsIfQosProfileTable with default values,\
         which may be referenced by the docsIfCmServiceTable entries.\
\
     2.  Both a CMTS and CM implementing this MIB MUST NOT implement\
         docsIetfQosParamSetTable or docsIetfQosServiceFlowTable rows\
         until after the CM registers with DOCSIS 1.1 or 2.0 modem\
         operation.\
\
     3.  When a modem registers with the CMTS as a "DOCSIS 1.1" or\
         "DOCSIS 2.0" modem, any exclusively-referenced row in DOCS-IF-\
         MIB docsIfQosProfileTable representing the modem's upstream QoS\
         profile for pre-registration traffic MUST be removed.\
         Multiply-referenced rows may remain.  The\
         docsIfCmServiceQosProfile object in the CM's row of\
\
         docsIfCmServiceTable MUST be set to zero.  The\
         docsIfCmServiceTable row for the DOCSIS 1.1 or DOCSIS 2.0 modem\
         continues to exist, and the various statistic objects in that\
         row are incremented.  The CMTS should retain a\
         docsIfCmtsServiceTable entry for the DOCSIS 1.1 or DOCSIS 2.0\
         CM.\
\
     4.  When a DOCSIS 1.1 or DOCSIS 2.0 modem registers, both the CMTS\
         and CM represent all Service Flows described in the modem\
         configuration file in docsIetfQosParamSetTable and\
         docsIetfQosServiceFlowTable.\
\
     5.  DOCSIS 1.0 modems do not have entries in the DOCS-IETF-QOS-MIB.\
\
2.2.3.  docsIetfQosServiceFlowTable\
\
   The docsIetfQosServiceFlowTable provides read-only information about\
   all the Service Flows known by the device.  It is indexed by the\
   combination of { ifIndex, dosQosServiceFlowId }, where ifIndex\
   corresponds to a CATV MAC interface and docsIetfQosServiceFlowId is\
   the 32-bit integer assigned by the CMTS controlling the MAC domain.\
   A CM typically has only a single CATV MAC interface, whereas a CMTS\
   may have several.  See [7] for a description of the ifIndex numbering\
   for DOCSIS devices.\
\
   The table indicates whether a given SF is in the upstream or\
   downstream direction, and whether it is the "primary" SF in that\
   direction.  The primary SF carries traffic that is not otherwise\
   classified to any other SF in that direction.\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 12]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
2.2.4.  docsIetfQosServiceFlowStatsTable\
\
   The docsIetfQosServiceFlowStatsTable provides statistics for all\
   currently existing SFs known by the managed device.  It provides\
   basic packet and octet counters, as well as certain other SF-specific\
   stats such as the time at which the flow was created and how many\
   seconds it has been active.\
\
   The table also provides objects that can be used to fine-tune\
   admission control decisions; namely, the number of packets dropped or\
   delayed due to QoS policing decisions enforced by the managed device.\
\
   The model of the Service Flows stats table is that there exists a\
   Service Flow Classification function followed by a Service Flow\
   maximum rate Policing function for packets transmitted onto the\
   DOCSIS RF network, as depicted below.\
\
                                              +----------+\
         +------------+  clsfy 1    -----+    | Per-SF   |   forwarded\
   Pkts  |            |----------->      |    | Maximum  |-> for DOCSIS\
   ----->|  Classify  |  clsfy 2     SF1 |--> | Rate     |   RF Network\
         |  Function  |----------->      |    | Policing |  transmission\
         |            |             -----+    | Function |\
         |            |                       |          |----+\
         |            |                       |          |    |\
         |            |                       +----------+   Dropped\
         +------------+                         |    ^\
                                                +----+  Delayed\
\
   Packets intended for transmission onto the DOCSIS RF network\
   (upstream or downstream) are first classified to a Service Flow by\
   matching one of several possible classifiers associated with that\
   Service Flow.  The docsIetfQosPktClassPkts count includes the number\
   of packets that match the classifier, regardless of the eventual\
   disposition of the packet.\
\
   DOCSIS requires that each Service Flow be policed to maintain a\
   maximum rate of transmission.  This is performed by either dropping\
   or delaying a packet on that Service Flow.  The\
   docsIetfQosServiceFlowPolicedDropPkts object counts the number of\
   Service Flow packets dropped by the policing function.  The\
   docsIetfQosServiceFlowPolicedDelayPkts counts the number of packets\
   delayed but still forwarded.  The docsIetfQosServiceFlowPkts object\
   counts the total number of packets forwarded beyond the policing\
   function intended for eventual transmission onto the DOCSIS RF\
   network.  Although packets may later be dropped by other functions\
   (e.g., a transmit queue overflow on a DOCSIS hardware transmitter),\
   the docsIetfQos MIB per service-flow counters are not affected.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 13]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
2.2.5.  docsIetfQosUpstreamStatsTable\
\
   This table provides statistics that are measured only at the CMTS in\
   the upstream direction.  These include counts of fragmentation\
   headers received, fragments discarded, and concatenation headers\
   received.\
\
2.2.6.  docsIetfQosDynamicServiceStatsTable\
\
   This table provides read-only stats on the operation of the Dynamic\
   Service state machines as specified in section 9.4 of [4].  It\
   provides a set of 14 counters in each direction for a DOCSIS MAC\
   layer interface.  That is, each DOCSIS MAC layer interface has one\
   row for downstream stats and a second row for upstream stats.\
\
   Eight of the counters are DSx packet type counts, one counter for\
   each of the eight DSx packet types.  For example, the\
   docsIetfQosDSAReqs object in the upstream row at the CMTS counts the\
   number of DSA-REQ messages received by the CMTS from that interface.\
   The docsIetfQosDSAReqs object in the downstream row at the CMTS\
   counts the number of DSA-REQ messages transmitted by the CMTS on that\
   interface.\
\
   The remaining six counters per (interface, direction) combination\
   count the number of successful and unsuccessful transactions that\
   were initiated on the interface and direction.  For example, the\
   upstream docsIetfQosDynamicAdds on a CMTS is the number of\
   successfully completed CM-initiated dynamic additions, because at the\
   CMTS a CM-initiated DSA starts in the upstream direction.  The\
   downstream docsIetfQosDynamicAdds at a CMTS is the number of\
   successful CMTS-initiated DSA transactions.\
\
   Dynamic service transactions can fail for a number of reasons, as\
   listed in the state machines of section 9.4.  Rather than include\
   still more counters for each different failure reason, they are\
   grouped into a single count, e.g., docsIetfQosDynamicAddFails.\
   Again, this object exists in both directions, so that locally\
   originated and remotely originated transaction failures are counted\
   separately.  Further troubleshooting of transaction failures will\
   require vendor-specific queries and operation.\
\
2.2.7.  docsIetfQosServiceFlowLogTable\
\
   This table contains a log of the Service Flows that no longer exist\
   in the docsIetfQosServiceFlowTable.  It is intended to be\
   periodically polled by traffic monitoring and billing agents.  It is\
   implemented only at the CMTS.\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 14]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   It contains a chronological log of SF session statistics, including a\
   total count of packets and octets transferred on the SF.  It includes\
   time stamps of the SF creation and deletion time, and of its number\
   of active seconds.  The active second count is the count of seconds\
   that the SF had a non-empty Active QoS Parameter Set, i.e., it was\
   eligible to pass data.  For unicast SFs, it includes the CM MAC\
   address associated with the flow for billing reference purposes.\
\
   The maximum number of log records kept by a CMTS and the duration\
   that a log record is maintained in the table are vendor-specific.  An\
   explicit control object is provided so that the monitoring\
   application can explicitly delete records it has read.\
\
2.2.8.  docsIetfQosServiceClassTable\
\
   This table defines the Service Class Name and references a QoS\
   Parameter Set for each Service Class defined in a CMTS.  It is\
   indexed by the Service Class Name string itself.  The table is read-\
   create on a CMTS, and is not implemented in a CM.  Each entry of the\
   docsIetfQosServiceClassTable should define a template for flows in a\
   given direction (upstream or downstream).  Some parameters of the\
   docsIetfQosServiceClassTable are specific to a particular direction,\
   and so their values are not applicable when used as a template for\
   flows in the other direction.\
\
2.2.9.  docsIetfQosServiceClassPolicyTable\
\
   The docsIetfQosServiceClassPolicyTable can be referenced by the\
   docsDevFilterPolicyTable of [6] in order to have a "policy" that\
   classifies packets to a named Service Class.  This is one mechanism\
   by which "external" entities (such as an SNMP manager) may control\
   the classification of a packet for QoS purposes.  Entries are indexed\
   by a small-integer docsIetfQosServiceClassPolicyIndex.  They provide\
   a Service Class Name and a Rule Priority.  A policy referencing a row\
   of this table intends the packet to be forwarded on a Service Flow\
   "belonging" to the named Service Class.  See section 3, "Externally\
   Administered Classification", below.\
\
   This table is implemented on both the CM and CMTS, and is read-create\
   on both.\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 15]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
2.2.10.  docsIetfQosPHSTable\
\
   The Payload Header Suppression (PHS) feature of DOCSIS 1.1 and 2.0\
   permits packets to replace the unchanging bytes of the Ethernet, IP,\
   and UDP headers with a one-byte index when transmitting on the cable\
   network.  This is especially useful for IP Telephony packets, where\
   such suppression can result in almost twice the number of calls\
   supported within the same upstream channel.\
\
   Each entry of the table corresponds to a PHS Rule as described in\
   section 8.4 of [4].  The rules are identified by their corresponding\
   Service Flow ID and docsIetfQosPktClassId.  A PHS rule is associated\
   with exactly one classifier.  The table is therefore indexed by the\
   tuple { ifIndex, docsIetfQosServiceFlowId, docsIetfQosPktClassId}.\
\
   This table is read-only, and MUST be implemented on both the CM and\
   CMTS when PHS is supported.\
\
2.2.11  docsIetfQosCmtsMacToSrvFlowTable\
\
   The docsIetfQosCmtsMacToSrvFlowTable describes the mapping of CM MAC\
   addresses to the Service Flow IDs that are uniquely identified with\
   that CM.  External applications may collect statistics on all packets\
   flowing through a CM by determining the SFID of all of its flows, and\
   then collecting the statistics of packets and bytes for each flow.\
\
   Downstream multicast Service Flows are not indicated in the\
   docsIetfQosCmtsMacToSrvFlowTable because they are not associated with\
   only one CM.\
\
3.  Externally Administered Classification\
\
   DOCSIS 1.1 and 2.0 provide rich semantics for the classification of\
   packets to Service Flows with the Service Flow Classifier table.\
   Service Flow Classifiers may be created statically in the DOCSIS CM\
   configuration file, or may be created dynamically with Dynamic\
   Service Addition (DSA) and Dynamic Service Change (DSC) DOCSIS MAC\
   messages.\
\
   Several major issues arose with the concept of externally\
   administered classification; e.g., should an external SNMP manager be\
   permitted to create classification rows?  One problem was the\
   coordination of classifier IDs because such an approach would require\
   either separate classifier ID number spaces or objects to coordinate\
   both internal and external classifier ID assignments.  A more serious\
   problem, however, was that external creation of SF Classifiers would\
   require "knowledge" of the individual Service Flow ID for Service\
   Flows by external applications.  It was strongly felt by the\
\
\
\
Patrick & Murwin            Standards Track                    [Page 16]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   committee that SFIDs should remain internal DOCSIS objects, and not\
   be transmitted as part of protocol flows, e.g., for IP packet\
   telephony signaling.  DOCSIS 1.1 introduced the concept of named\
   Service Classes for ease of administration within a domain of CMs and\
   CMTSs.  What was desired was to permit external classification of\
   packets to a Service Class, not to a particular Service Flow.\
\
   The DOCSIS committee therefore decided to use the already-defined IP\
   Packet Filter Table [6] for the external classification of packets\
   for QoS purposes.  The docsDevIpPacketFilterTable defines similar\
   packet matching criteria as does docsIetfQosPktClassTable, but it\
   matches a packet to an arbitrary "policy set" instead of a particular\
   Service Flow.  One of the policies in the policy set then selects the\
   Service Class of the SF on which to forward the packet.  The\
   docsIetfQosServiceClassPolicyTable of this MIB module defines the\
   Service Class Name to which a packet is classified.\
\
   The interaction of external and internal packet classification is\
   depicted below.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 17]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
              |\
              |  Outbound Pkt\
              V\
          docsDevIpFilterTable------> docsDevFilterPolicyTable\
              |                                   |\
              |                                   V\
              |                      docsIetfQosServiceClassPolicyTable\
              |                                   |\
          Pkt |                  ServiceClassName,|\
              |     ServiceClassPolicyRulePriority|\
              V                                   V\
     +--------------------------------------------------------+\
     |        |   DOCSIS MAC LAYER ENTITY         |           |\
     |        |                                   | Select    |\
     |        V                                   | any       |\
     |    docsIetfQosPktClassTable <--------------| SFID Y    |\
     |        |                                   | in SCN    |\
     |        | docsIetfQosPktClassPriority,      |           |\
     |        | SFID X                            |           |\
     |        V                                   V           |\
     |   +--------------------------------------------+       |\
     |   | Select the SFID associated with the        |       |\
     |   | higher of docsIetfQosPktClassPriority or   |       |\
     |   | docsIetfQosServiceClassPolicyRulePriority  |       |\
     |   +--------------------------------------------+       |\
     |                             |                          |\
     |                             V                          |\
     |           |    |          |    |                       |\
     |           |    |    ...   |    |  Service Flows        |\
     |           +----+          +----+                       |\
     |           SFID X          SFID Y                       |\
     +--------------------------------------------------------+\
\
          Figure 2: DOCSIS Packet Classification\
\
   The processing of an outgoing packet proceeds as follows:\
\
     1.  The packet is first checked for matches with rows of the\
         docsDevIpFilterTable.  If it matches, the matching row provides\
         a docsDevFilterPolicyId integer.\
\
     2.  The docsDevFilterPolicyId indexes into one (or more) rows of\
         docsDevFilterPolicyTable.  Each row provides an arbitrary\
         RowPointer (docsDevFilterPolicyPtr), corresponding to a policy\
         to be applied to the packet.\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 18]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
     3.  This MIB module defines a docsIetfQosServiceClassPolicyTable\
         whose entries may be pointed to by docsDevFilterPolicyPtr in\
         order to classify packets administratively to a named DOCSIS\
         Service Class.  The docsIetfQosServiceClassPolicyEntry provides\
         a Service Class Name (SCN) as docsIetfQosServiceClassPolicyName\
         and a classification rule priority as\
         docsIetfQosServiceClassPolicyRulePriority.  These are submitted\
         to the device's DOCSIS MAC Layer entity as a special form of\
         the MAC_DATA.request primitive, as described in Section E.2.1\
         of [4].\
\
     4.  The MAC Layer selects an SFID ("Y") of an active Service Flow\
         belonging to the named class, choosing an SF arbitrarily if\
         there is more than one.\
\
     5.  The packet is then classified according to the\
         docsIetfQosPktClassTable, which may classify the packet to a\
         different SFID "X".  Associated with the classifier is a\
         docsIetfQosPktClassPriority.\
\
     6.  In the event of a conflict between the SCN-determined SFID and\
         the classified SFID, the greater of docsIetfQosPktClassPriority\
         and docsIetfQosServiceClassPolicyRulePriority determines which\
         SFID is selected to forward the packet.\
\
   A packet that does not match a docsIetfQosServiceClassPolicyEntry is\
   directly submitted to the DOCSIS MAC layer, where the\
   docsIetfQosPktClassTable selects the SID on which it is to be\
   forwarded.\
\
   By convention (in [4]), the "internal" docsIetfQosPktClassPriority\
   values should be in the range 64-191, while the "external" priorities\
   may be either in the range 192-255 to override the internal\
   classification or in the range 0-63 to be overridden by internal\
   classification.\
\
   This classification mechanism applies both upstream from the CM and\
   downstream from the CMTS.\
\
4.  DOCSIS and IPv4 Type-of-Service (ToS) Field\
\
   The DOCSIS-IETF-QOS-MIB MIB module relies on the DOCSIS MAC layer\
   protocols and uses objects that reflect the IPv4 Type-of-Service\
   (ToS) octet as defined in [14].  The applicability of these objects\
   is limited to the DOCSIS access network.  The past and current\
   versions of the DOCSIS specifications for which this MIB module is\
   defined do not reflect Differentiated Services [9] on the DOCSIS\
   access network.  However, with proper selection of values for these\
\
\
\
Patrick & Murwin            Standards Track                    [Page 19]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   objects, the network operator can enforce Differentiated Services\
   Per-hop Behaviors (PHBs) on the DOCSIS Access Network, and can\
   configure the modification of the DSCP for certain packet flows as\
   they enter the metro network from the access network.  Essentially\
   this makes the DOCSIS access network TOS marking compatible with the\
   wider use of DSCP outside DOCSIS networks.  Note that because the\
   entire IPv4 TOS octet may be available for modification via the\
   latter mechanism (due to the current MAC level DOCSIS protocols and\
   CLI interface configuration), it is possible that the DOCSIS network\
   could be configured to modify the Explicit Congestion Notification\
   (ECN) bits [10] of certain packets.  This modification of the ECN\
   bits is prevented by the MIB module's design.  The MIB module\
   prohibits the modification of the TOS octet (read-only objects:\
   docsIetfQosPktClassIpTosLow, docsIetfQosPktClassIpTosHigh\
   docsIetfQosPktClassIpTosMask, docsIetfQosParamSetTosAndMask,\
   docsIetfQosParamSetTosOrMask) and allows the DSCP field to be\
   modified (read-create object: docsIetfQosServiceClassDSCPOverwrite).\
\
5.  Definitions\
\
   This MIB module refers to the SNMPv2-SMI [1] MIB module, SNMPv2-TC\
   [2] MIB module, SNMPv2-CONF [3] MIB Module, DOCSIS RFI Specification\
   SP-RFIv2.0-I06-040804 [4], INET-ADDRESS-MIB [8] MIB module, IF-MIB\
   [11] MIB module, SNMP-FRAMEWORK-MIB [12] MIB module, and DIFFSERV-\
   DSCP-TC [13] MIB module.\
\
DOCS-IETF-QOS-MIB DEFINITIONS ::= BEGIN\
\
IMPORTS\
    MODULE-IDENTITY,\
    OBJECT-TYPE,\
    Integer32,\
    Counter32,\
    Unsigned32,\
    Counter64,\
    mib-2\
      FROM SNMPv2-SMI\
\
    TEXTUAL-CONVENTION,\
    MacAddress,\
    RowStatus,\
    TruthValue,\
    TimeStamp,\
    StorageType\
      FROM SNMPv2-TC\
\
    OBJECT-GROUP,\
    MODULE-COMPLIANCE\
\
\
\
Patrick & Murwin            Standards Track                    [Page 20]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
      FROM SNMPv2-CONF\
\
    ifIndex,\
    InterfaceIndex\
      FROM IF-MIB\
\
    InetAddressType,\
    InetAddress,\
    InetPortNumber\
      FROM INET-ADDRESS-MIB\
\
    DscpOrAny\
      FROM DIFFSERV-DSCP-TC\
\
    SnmpAdminString\
        FROM SNMP-FRAMEWORK-MIB;\
\
docsIetfQosMIB   MODULE-IDENTITY\
    LAST-UPDATED    "200601230000Z" -- January 23, 2006\
    ORGANIZATION    "IETF IP over Cable Data Network (IPCDN)\
                     Working Group"\
    CONTACT-INFO\
        "\
         Co-Author: Michael Patrick\
         Postal:    Motorola BCS\
                    111 Locke Drive\
                    Marlborough, MA 01752-7214\
                    U.S.A.\
         Phone:     +1 508 786 7563\
         E-mail:    michael.patrick@motorola.com\
\
         Co-Author: William Murwin\
         Postal:    Motorola BCS\
                    111 Locke Drive\
                    Marlborough, MA 01752-7214\
                    U.S.A.\
         Phone:     +1 508 786 7594\
         E-mail:    w.murwin@motorola.com\
\
         IETF IPCDN Working Group\
         General Discussion: ipcdn@ietf.org\
         Subscribe: http://www.ietf.org/mailman/listinfo/ipcdn\
         Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn\
         Co-chairs: Richard Woundy, Richard_Woundy@cable.comcast.com\
                    Jean-Francois Mule, jfm@cablelabs.com"\
    DESCRIPTION\
        "This is the management information for\
         Quality Of Service (QOS) for DOCSIS 1.1 and 2.0.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 21]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
         Copyright (C) The Internet Society (2006).  This version of\
         this MIB module is part of RFC 4323; see the RFC itself for\
         full legal notices."\
\
    REVISION        "200601230000Z" -- January 23, 2006\
    DESCRIPTION\
        "Initial version, published as RFC 4323."\
    ::= { mib-2 127 }\
\
--\
-- Placeholder for notifications/traps.\
--\
docsIetfQosNotifications OBJECT IDENTIFIER  ::= { docsIetfQosMIB 0 }\
\
docsIetfQosMIBObjects  OBJECT IDENTIFIER ::= { docsIetfQosMIB 1 }\
\
-- Textual Conventions\
DocsIetfQosRfMacIfDirection ::= TEXTUAL-CONVENTION\
    STATUS          current\
    DESCRIPTION    "Indicates a direction on an RF MAC interface.\
\
                    The value downstream(1) is from Cable Modem\
                    Termination System to Cable Modem.\
\
                    The value upstream(2) is from Cable Modem to\
                    Cable Modem Termination System."\
    SYNTAX          INTEGER {\
                       downstream(1),\
                       upstream(2)\
                    }\
\
DocsIetfQosBitRate ::= TEXTUAL-CONVENTION\
    DISPLAY-HINT    "d"\
    STATUS          current\
    DESCRIPTION    "The rate of traffic in unit of bits per second.\
                    Used to specify traffic rate for QOS."\
    SYNTAX          Unsigned32\
\
DocsIetfQosSchedulingType ::= TEXTUAL-CONVENTION\
    STATUS          current\
    DESCRIPTION    "The scheduling service provided by a CMTS for an\
                    upstream Service Flow.  If the parameter is omitted\
                    from an upstream QOS Parameter Set, this object\
                    takes the value of bestEffort (2).  This parameter\
                    must be reported as undefined (1) for downstream\
                    QOS Parameter Sets."\
    SYNTAX          INTEGER {\
                      undefined (1),\
\
\
\
Patrick & Murwin            Standards Track                    [Page 22]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                      bestEffort (2),\
                      nonRealTimePollingService(3),\
                      realTimePollingService(4),\
                      unsolictedGrantServiceWithAD(5),\
                      unsolictedGrantService(6)\
                    }\
\
-----------------------------------------------------------------------\
--\
-- Packet Classifier Table\
--\
docsIetfQosPktClassTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosPktClassEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the packet classification\
                    configured on the CM or CMTS.\
                    The model is that a packet either received\
                    as input from an interface or transmitted\
                    for output on an interface may be compared\
                    against an ordered list of rules pertaining to\
                    the packet contents.  Each rule is a row of this\
                    table.  A matching rule provides a Service Flow\
                    ID to which the packet is classified.\
                    All rules need to match for a packet to match\
                    a classifier.\
\
                    The objects in this row correspond to a set of\
                    Classifier Encoding parameters in a DOCSIS\
                    MAC management message.  The\
                    docsIetfQosPktClassBitMap indicates which\
                    particular parameters were present in the\
                    classifier as signaled in the DOCSIS message.\
                    If the referenced parameter was not present\
                    in the signaled DOCSIS 1.1 and 2.0 Classifier, the\
                    corresponding object in this row reports a\
                    value as specified in the DESCRIPTION section."\
    ::= { docsIetfQosMIBObjects 1 }\
\
\
docsIetfQosPktClassEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosPktClassEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "An entry in this table provides a single packet\
                    classifier rule.  The index ifIndex is an ifType\
                    of docsCableMaclayer(127)."\
    INDEX {\
\
\
\
Patrick & Murwin            Standards Track                    [Page 23]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
            ifIndex,\
            docsIetfQosServiceFlowId,\
            docsIetfQosPktClassId\
          }\
    ::= { docsIetfQosPktClassTable 1 }\
\
\
\
DocsIetfQosPktClassEntry ::= SEQUENCE {\
    docsIetfQosPktClassId                  Unsigned32,\
    docsIetfQosPktClassDirection           DocsIetfQosRfMacIfDirection,\
    docsIetfQosPktClassPriority            Integer32,\
    docsIetfQosPktClassIpTosLow            OCTET STRING,\
    docsIetfQosPktClassIpTosHigh           OCTET STRING,\
    docsIetfQosPktClassIpTosMask           OCTET STRING,\
    docsIetfQosPktClassIpProtocol          Integer32,\
    docsIetfQosPktClassInetAddressType     InetAddressType,\
    docsIetfQosPktClassInetSourceAddr      InetAddress,\
    docsIetfQosPktClassInetSourceMask      InetAddress,\
    docsIetfQosPktClassInetDestAddr        InetAddress,\
    docsIetfQosPktClassInetDestMask        InetAddress,\
    docsIetfQosPktClassSourcePortStart     InetPortNumber,\
    docsIetfQosPktClassSourcePortEnd       InetPortNumber,\
    docsIetfQosPktClassDestPortStart       InetPortNumber,\
    docsIetfQosPktClassDestPortEnd         InetPortNumber,\
    docsIetfQosPktClassDestMacAddr         MacAddress,\
    docsIetfQosPktClassDestMacMask         MacAddress,\
    docsIetfQosPktClassSourceMacAddr       MacAddress,\
    docsIetfQosPktClassEnetProtocolType    INTEGER,\
    docsIetfQosPktClassEnetProtocol        Integer32,\
    docsIetfQosPktClassUserPriLow          Integer32,\
    docsIetfQosPktClassUserPriHigh         Integer32,\
    docsIetfQosPktClassVlanId              Integer32,\
    docsIetfQosPktClassStateActive         TruthValue,\
    docsIetfQosPktClassPkts                Counter64,\
    docsIetfQosPktClassBitMap              BITS\
  }\
\
docsIetfQosPktClassId       OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..65535)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Index assigned to packet classifier entry by\
                    the CMTS, which is unique per Service Flow."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.3.2"\
    ::= { docsIetfQosPktClassEntry 1 }\
\
docsIetfQosPktClassDirection OBJECT-TYPE\
\
\
\
Patrick & Murwin            Standards Track                    [Page 24]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    SYNTAX          DocsIetfQosRfMacIfDirection\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Indicates the direction to which the classifier\
                    is applied."\
    ::= { docsIetfQosPktClassEntry 2 }\
\
docsIetfQosPktClassPriority OBJECT-TYPE\
    SYNTAX          Integer32 (0..255)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value specifies the order of evaluation\
                    of the classifiers.\
\
                    The higher the value, the higher the priority.\
                    The value of 0 is used as default in\
                    provisioned Service Flows Classifiers.\
                    The default value of 64 is used for dynamic\
                    Service Flow Classifiers.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the default\
                    value as defined above."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.3.5"\
    ::= { docsIetfQosPktClassEntry 3 }\
\
docsIetfQosPktClassIpTosLow OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The low value of a range of TOS byte values.\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value\
                    of 0.\
\
                    The IP TOS octet, as originally defined in RFC 791,\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  This object is defined as an 8-bit\
                    octet as per the DOCSIS Specification\
                    for packet classification."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.1"\
    ::= { docsIetfQosPktClassEntry 4 }\
\
docsIetfQosPktClassIpTosHigh OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
\
\
\
Patrick & Murwin            Standards Track                    [Page 25]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    STATUS          current\
    DESCRIPTION    "The 8-bit high value of a range of TOS byte\
                    values.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the\
                    value of 0.\
\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  This object is defined as an 8-bit\
                    octet as defined by the DOCSIS Specification\
                    for packet classification."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.1"\
    ::= { docsIetfQosPktClassEntry 5 }\
\
docsIetfQosPktClassIpTosMask OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The mask value is bitwise ANDed with TOS byte\
                    in an IP packet, and this value is used for\
                    range checking of TosLow and TosHigh.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value\
                    of 0.\
\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  This object is defined as an 8-bit\
                    octet per the DOCSIS Specification for packet\
                    classification."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.1"\
    ::= { docsIetfQosPktClassEntry 6 }\
\
docsIetfQosPktClassIpProtocol OBJECT-TYPE\
    SYNTAX          Integer32 (0..258)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object indicates the value of the IP\
                    Protocol field required for IP packets to match\
                    this rule.\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 26]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    The value 256 matches traffic with any IP Protocol\
                    value.  The value 257 by convention matches both TCP\
                    and UDP.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value\
                    of 258."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.2"\
    ::= { docsIetfQosPktClassEntry 7 }\
\
docsIetfQosPktClassInetAddressType OBJECT-TYPE\
    SYNTAX          InetAddressType\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The type of the Internet address for\
                    docsIetfQosPktClassInetSourceAddr,\
                    docsIetfQosPktClassInetSourceMask,\
                    docsIetfQosPktClassInetDestAddr, and\
                    docsIetfQosPktClassInetDestMask.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    ipv4(1)."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.3"\
    ::= { docsIetfQosPktClassEntry 8 }\
\
docsIetfQosPktClassInetSourceAddr OBJECT-TYPE\
    SYNTAX          InetAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies the value of the IP\
                    Source Address required for packets to match\
                    this rule.\
\
                    An IP packet matches the rule when the packet\
                    IP Source Address bitwise ANDed with the\
                    docsIetfQosPktClassInetSourceMask value equals the\
                    docsIetfQosPktClassInetSourceAddr value.\
\
                    The address type of this object is specified by\
                    docsIetfQosPktClassInetAddressType.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    '00000000'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.3"\
    ::= { docsIetfQosPktClassEntry 9 }\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 27]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
docsIetfQosPktClassInetSourceMask OBJECT-TYPE\
    SYNTAX          InetAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies which bits of a packet's\
                    IP Source Address are compared to match\
                    this rule.\
\
                    An IP packet matches the rule when the packet\
                    source address bitwise ANDed with the\
                    docsIetfQosPktClassInetSourceMask value equals the\
                    docsIetfQosIpPktClassInetSourceAddr value.\
\
                    The address type of this object is specified by\
                    docsIetfQosPktClassInetAddressType.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    'FFFFFFFF'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.4"\
    ::= { docsIetfQosPktClassEntry 10 }\
\
docsIetfQosPktClassInetDestAddr OBJECT-TYPE\
    SYNTAX          InetAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies the value of the IP\
                    Destination Address required for packets to match\
                    this rule.\
\
                    An IP packet matches the rule when the packet\
                    IP Destination Address bitwise ANDed with the\
                    docsIetfQosPktClassInetDestMask value\
                    equals the docsIetfQosPktClassInetDestAddr value.\
\
                    The address type of this object is specified by\
                    docsIetfQosPktClassInetAddressType.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    '00000000'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.5"\
    ::= { docsIetfQosPktClassEntry 11 }\
\
docsIetfQosPktClassInetDestMask OBJECT-TYPE\
    SYNTAX          InetAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 28]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "This object specifies which bits of a packet's\
                    IP Destination Address are compared to\
                    match this rule.\
\
                    An IP packet matches the rule when the packet\
                    destination address bitwise ANDed with the\
                    docsIetfQosPktClassInetDestMask value equals the\
                    docsIetfQosIpPktClassInetDestAddr value.\
\
                    The address type of this object is specified by\
                    docsIetfQosPktClassInetAddressType.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    'FFFFFFFF'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.6"\
    ::= { docsIetfQosPktClassEntry 12 }\
\
docsIetfQosPktClassSourcePortStart OBJECT-TYPE\
    SYNTAX          InetPortNumber\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies the low-end inclusive\
                    range of TCP/UDP source port numbers to which\
                    a packet is compared.  This object is irrelevant\
                    for non-TCP/UDP IP packets.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value\
                    of 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.7"\
    ::= { docsIetfQosPktClassEntry 13 }\
\
docsIetfQosPktClassSourcePortEnd OBJECT-TYPE\
    SYNTAX          InetPortNumber\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies the high-end inclusive\
                    range of TCP/UDP source port numbers to which\
                    a packet is compared.  This object is irrelevant\
                    for non-TCP/UDP IP packets.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    65535."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.8"\
    ::= { docsIetfQosPktClassEntry 14 }\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 29]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
docsIetfQosPktClassDestPortStart OBJECT-TYPE\
    SYNTAX          InetPortNumber\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION     "This object specifies the low-end inclusive\
                     range of TCP/UDP destination port numbers to\
                     which a packet is compared.\
\
                     If the referenced parameter is not present\
                     in a classifier, this object reports the value\
                     of 0."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.9"\
    ::= { docsIetfQosPktClassEntry 15 }\
\
docsIetfQosPktClassDestPortEnd OBJECT-TYPE\
    SYNTAX          InetPortNumber\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object specifies the high-end inclusive\
                    range of TCP/UDP destination port numbers to which\
                    a packet is compared.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    65535."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.5.10"\
    ::= { docsIetfQosPktClassEntry 16 }\
\
docsIetfQosPktClassDestMacAddr OBJECT-TYPE\
    SYNTAX          MacAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "An Ethernet packet matches an entry when its\
                    destination MAC address bitwise ANDed with\
                    docsIetfQosPktClassDestMacMask equals the value of\
                    docsIetfQosPktClassDestMacAddr.\
\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    '000000000000'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.6.1"\
    ::= { docsIetfQosPktClassEntry 17 }\
\
docsIetfQosPktClassDestMacMask OBJECT-TYPE\
    SYNTAX          MacAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 30]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "An Ethernet packet matches an entry when its\
                    destination MAC address bitwise ANDed with\
                    docsIetfQosPktClassDestMacMask equals the value of\
                    docsIetfQosPktClassDestMacAddr.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    '000000000000'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.6.1"\
    ::= { docsIetfQosPktClassEntry 18 }\
\
docsIetfQosPktClassSourceMacAddr OBJECT-TYPE\
    SYNTAX          MacAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "An Ethernet packet matches this entry when its\
                    source MAC address equals the value of\
                    this object.\
\
                    If the referenced parameter is not present\
                    in a classifier, this object reports the value of\
                    'FFFFFFFFFFFF'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.6.2"\
    ::= { docsIetfQosPktClassEntry 19 }\
\
docsIetfQosPktClassEnetProtocolType OBJECT-TYPE\
    SYNTAX          INTEGER {\
                      none(0),\
                      ethertype(1),\
                      dsap(2),\
                      mac(3),\
                      all(4)\
                    }\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object indicates the format of the layer 3\
                    protocol ID in the Ethernet packet.  A value of\
                    none(0) means that the rule does not use the\
                    layer 3 protocol type as a matching criteria.\
\
                    A value of ethertype(1) means that the rule\
                    applies only to frames that contain an\
                    EtherType value.  Ethertype values are contained\
                    in packets using the Dec-Intel-Xerox (DIX)\
                    encapsulation or the RFC1042 Sub-Network Access\
                    Protocol (SNAP) encapsulation formats.\
\
                    A value of dsap(2) means that the rule applies\
\
\
\
Patrick & Murwin            Standards Track                    [Page 31]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    only to frames using the IEEE802.3\
                    encapsulation format with a Destination Service\
                    Access Point (DSAP) other\
                    than 0xAA (which is reserved for SNAP).\
\
                    A value of mac(3) means that the rule applies\
                    only to MAC management messages for MAC management\
                    messages.\
\
                    A value of all(4) means that the rule matches\
                    all Ethernet packets.\
\
                    If the Ethernet frame contains an 802.1P/Q Tag\
                    header (i.e., EtherType 0x8100), this object\
                    applies to the embedded EtherType field within\
                    the 802.1P/Q header.\
\
                    If the referenced parameter is not present in a\
                    classifier, this object reports the value of 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.6.3"\
    ::= { docsIetfQosPktClassEntry 20 }\
\
docsIetfQosPktClassEnetProtocol OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "If docsIetfQosEthPktClassProtocolType is none(0),\
                    this object is ignored when considering whether\
                    a packet matches the current rule.\
\
                    If dosQosPktClassEnetProtocolType is ethertype(1),\
                    this object gives the 16-bit value of the\
                    EtherType that the packet must match in order to\
                    match the rule.\
\
                    If docsIetfQosPktClassEnetProtocolType is dsap(2),\
                    the lower 8 bits of this object's value must match\
                    the DSAP byte of the packet in order to match the\
                    rule.\
\
                    If docsIetfQosPktClassEnetProtocolType is mac(3),\
                    the lower 8 bits of this object's value represent a\
                    lower bound (inclusive) of MAC management message\
                    type codes matched, and the upper 8 bits represent\
                    the upper bound (inclusive) of matched MAC message\
                    type codes.  Certain message type codes are\
                    excluded from matching, as specified in the\
                    reference.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 32]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    If the Ethernet frame contains an 802.1P/Q Tag\
                    header (i.e., EtherType 0x8100), this object applies\
                    to the embedded EtherType field within the 802.1P/Q\
                    header.\
\
                    If the referenced parameter is not present in the\
                    classifier, the value of this object is reported\
                    as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.6.3"\
    ::= { docsIetfQosPktClassEntry 21 }\
\
docsIetfQosPktClassUserPriLow OBJECT-TYPE\
    SYNTAX          Integer32 (0..7)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object applies only to Ethernet frames\
                    using the 802.1P/Q tag header (indicated with\
                    EtherType 0x8100).  Such frames include a 16-bit\
                    Tag that contains a 3-bit Priority field and\
                    a 12-bit VLAN number.\
\
                    Tagged Ethernet packets must have a 3-bit\
                    Priority field within the range of\
                    docsIetfQosPktClassPriLow to\
                    docsIetfQosPktClassPriHigh in order to match this\
                    rule.\
\
                    If the referenced parameter is not present in the\
                    classifier, the value of this object is reported\
                    as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.7.1"\
    ::= { docsIetfQosPktClassEntry 22 }\
\
docsIetfQosPktClassUserPriHigh OBJECT-TYPE\
    SYNTAX          Integer32 (0..7)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object applies only to Ethernet frames\
                    using the 802.1P/Qtag header (indicated with\
                    EtherType 0x8100).  Such frames include a 16-bit\
                    Tag that contains a 3-bit Priority field and\
                    a 12-bit VLAN number.\
\
                    Tagged Ethernet packets must have a 3-bit\
                    Priority field within the range of\
                    docsIetfQosPktClassPriLow to\
                    docsIetfQosPktClassPriHigh in order to match this\
                    rule.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 33]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    If the referenced parameter is not present in the\
                    classifier, the value of this object is reported\
                    as 7."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.7.1"\
    ::= { docsIetfQosPktClassEntry 23 }\
\
docsIetfQosPktClassVlanId OBJECT-TYPE\
    SYNTAX          Integer32 (0 | 1..4094)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object applies only to Ethernet frames\
                    using the 802.1P/Q tag header.\
\
                    Tagged packets must have a VLAN Identifier that\
                    matches the value in order to match the rule.\
\
                    If the referenced parameter is not present in the\
                    classifier, the value of this object is reported\
                    as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.7.2"\
    ::= { docsIetfQosPktClassEntry 24 }\
\
docsIetfQosPktClassStateActive OBJECT-TYPE\
    SYNTAX          TruthValue\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object indicates whether or not the classifier\
                    is enabled to classify packets to a Service Flow.\
\
                    If the referenced parameter is not present in the\
                    classifier, the value of this object is reported\
                    as true(1)."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.3.6"\
    ::= { docsIetfQosPktClassEntry 25 }\
\
docsIetfQosPktClassPkts OBJECT-TYPE\
    SYNTAX          Counter64\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object counts the number of packets that have\
                    been classified using this entry.  This\
                    includes all packets delivered to a Service Flow\
                    maximum rate policing function, whether or not that\
                    function drops the packets.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
\
\
\
Patrick & Murwin            Standards Track                    [Page 34]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    ::= { docsIetfQosPktClassEntry 26 }\
\
\
docsIetfQosPktClassBitMap OBJECT-TYPE\
    SYNTAX          BITS {          -- Reference SP-RFIv2.0-I06-040804\
                        rulePriority(0),     -- Appendix C.2.1.3.4\
                        activationState(1),  -- Appendix C.2.1.3.6\
                        ipTos(2),            -- Appendix C.2.1.5.1\
                        ipProtocol(3),       -- Appendix C.2.1.5.2\
                        ipSourceAddr(4),     -- Appendix C.2.1.5.3\
                        ipSourceMask(5),     -- Appendix C.2.1.5.4\
                        ipDestAddr(6),       -- Appendix C.2.1.5.5\
                        ipDestMask(7),       -- Appendix C.2.1.5.6\
                        sourcePortStart(8),  -- Appendix C.2.1.5.7\
                        sourcePortEnd(9),    -- Appendix C.2.1.5.8\
                        destPortStart(10),   -- Appendix C.2.1.5.9\
                        destPortEnd(11),     -- Appendix C.2.1.5.10\
                        destMac(12),         -- Appendix C.2.1.6.1\
                        sourceMac(13),       -- Appendix C.2.1.6.2\
                        ethertype(14),       -- Appendix C.2.1.6.3\
                        userPri(15),         -- Appendix C.2.1.7.1\
                        vlanId(16)           -- Appendix C.2.1.7.2\
                    }\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION\
                    "This object indicates which parameter encodings\
                    were actually present in the DOCSIS packet\
                    classifier encoding signaled in the DOCSIS message\
                    that created or modified the classifier.  Note that\
                    Dynamic Service Change messages have replace\
                    semantics, so that all non-default parameters must\
                    be present whether the classifier is being created\
                    or changed.\
\
                    A bit of this object is set to 1 if the parameter\
                    indicated by the comment was present in the\
                    classifier encoding, and to 0 otherwise.\
\
                    Note that BITS are encoded most significant bit\
                    first, so that if, for example, bits 6 and 7 are\
                    set, this object is encoded as the octet string\
                    '030000'H."\
    ::= { docsIetfQosPktClassEntry 27 }\
\
--\
-- QOS Parameter Set Table\
--\
\
\
\
Patrick & Murwin            Standards Track                    [Page 35]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
docsIetfQosParamSetTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosParamSetEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the set of DOCSIS 1.1 and 2.0\
                    QOS parameters defined in a managed device.\
\
                    The ifIndex index specifies a DOCSIS MAC Domain.\
                    The docsIetfQosServiceFlowId index specifies a\
                    particular Service Flow.\
                    The docsIetfQosParamSetType index indicates whether\
                    the active, admitted, or provisioned QOS Parameter\
                    Set is being described by the row.\
\
                    Only the QOS Parameter Sets of DOCSIS 1.1 and 2.0\
                    Service Flows are represented in this table.\
\
                    DOCSIS 1.0 QOS service profiles are not\
                    represented in this table.\
\
                    Each row corresponds to a DOCSIS QOS Parameter Set\
                    as signaled via DOCSIS MAC management messages.\
                    Each object in the row corresponds to one or\
                    part of one DOCSIS 1.1 Service Flow Encoding.\
                    The docsIetfQosParamSetBitMap object in the row\
                    indicates which particular parameters were signaled\
                    in the original registration or dynamic service\
                    request message that created the QOS Parameter Set.\
\
                    In many cases, even if a QOS Parameter Set parameter\
                    was not signaled, the DOCSIS specification calls\
                    for a default value to be used.  That default value\
                    is reported as the value of the corresponding object\
                    in this row.\
\
                    Many objects are not applicable, depending on\
                    the Service Flow direction or upstream scheduling\
                    type.  The object value reported in this case\
                    is specified in the DESCRIPTION clause."\
    ::= { docsIetfQosMIBObjects 2 }\
\
docsIetfQosParamSetEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosParamSetEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "A unique set of QOS parameters."\
    INDEX {\
        ifIndex, docsIetfQosServiceFlowId, docsIetfQosParamSetType\
\
\
\
Patrick & Murwin            Standards Track                    [Page 36]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
          }\
    ::= { docsIetfQosParamSetTable 1 }\
\
DocsIetfQosParamSetEntry ::= SEQUENCE {\
    docsIetfQosParamSetServiceClassName   SnmpAdminString,\
    docsIetfQosParamSetPriority           Integer32,\
    docsIetfQosParamSetMaxTrafficRate     DocsIetfQosBitRate,\
    docsIetfQosParamSetMaxTrafficBurst    Unsigned32,\
    docsIetfQosParamSetMinReservedRate    DocsIetfQosBitRate,\
    docsIetfQosParamSetMinReservedPkt     Integer32,\
    docsIetfQosParamSetActiveTimeout      Integer32,\
    docsIetfQosParamSetAdmittedTimeout    Integer32,\
    docsIetfQosParamSetMaxConcatBurst     Integer32,\
    docsIetfQosParamSetSchedulingType     DocsIetfQosSchedulingType,\
    docsIetfQosParamSetNomPollInterval    Unsigned32,\
    docsIetfQosParamSetTolPollJitter      Unsigned32,\
    docsIetfQosParamSetUnsolicitGrantSize Integer32,\
    docsIetfQosParamSetNomGrantInterval   Unsigned32,\
    docsIetfQosParamSetTolGrantJitter     Unsigned32,\
    docsIetfQosParamSetGrantsPerInterval  Integer32,\
    docsIetfQosParamSetTosAndMask         OCTET STRING,\
    docsIetfQosParamSetTosOrMask          OCTET STRING,\
    docsIetfQosParamSetMaxLatency         Unsigned32,\
    docsIetfQosParamSetType               INTEGER,\
    docsIetfQosParamSetRequestPolicyOct   OCTET STRING,\
    docsIetfQosParamSetBitMap             BITS\
    }\
\
docsIetfQosParamSetServiceClassName OBJECT-TYPE\
    SYNTAX          SnmpAdminString\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Refers to the Service Class Name from which the\
                    parameter set values were derived.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object is a zero-length string."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.3.4"\
    ::= { docsIetfQosParamSetEntry 1 }\
\
docsIetfQosParamSetPriority OBJECT-TYPE\
    SYNTAX          Integer32 (0..7)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The relative priority of a Service Flow.\
                    Higher numbers indicate higher priority.\
                    This priority should only be used to differentiate\
\
\
\
Patrick & Murwin            Standards Track                    [Page 37]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    Service Flow from identical parameter sets.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object is 0.  If the parameter is\
                    not applicable, the reported value is 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.1"\
    ::= { docsIetfQosParamSetEntry 2 }\
\
docsIetfQosParamSetMaxTrafficRate OBJECT-TYPE\
    SYNTAX          DocsIetfQosBitRate\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Maximum sustained traffic rate allowed for this\
                    Service Flow in bits/sec.  Must count all MAC frame\
                    data PDU from the bytes following the MAC header\
                    HCS to the end of the CRC.  The number of bytes\
                    forwarded is limited during any time interval.\
                    The value 0 means no maximum traffic rate is\
                    enforced.  This object applies to both upstream and\
                    downstream Service Flows.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object is 0.  If the parameter is\
                    not applicable, it is reported as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.2"\
    ::= { docsIetfQosParamSetEntry 3 }\
\
docsIetfQosParamSetMaxTrafficBurst OBJECT-TYPE\
    SYNTAX          Unsigned32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the token bucket size in bytes\
                    for this parameter set.  The value is calculated\
                    from the byte following the MAC header HCS to\
                    the end of the CRC.  This object is applied in\
                    conjunction with docsIetfQosParamSetMaxTrafficRate\
                    to calculate maximum sustained traffic rate.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object for scheduling types\
                    bestEffort (2), nonRealTimePollingService(3),\
                    and realTimePollingService(4) is 3044.\
\
                    If this parameter is not applicable, it is reported\
                    as 0.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 38]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                   "\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.3"\
    ::= { docsIetfQosParamSetEntry 4 }\
\
docsIetfQosParamSetMinReservedRate OBJECT-TYPE\
    SYNTAX          DocsIetfQosBitRate\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the guaranteed minimum rate in\
                    bits/sec for this parameter set.  The value is\
                    calculated from the byte following the MAC\
                    header HCS to the end of the CRC.  The default\
                    value of 0 means that no bandwidth is reserved.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object is 0.  If the parameter\
                    is not applicable, it is reported as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.4"\
    ::= { docsIetfQosParamSetEntry 5 }\
\
docsIetfQosParamSetMinReservedPkt OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies an assumed minimum packet size in\
                    bytes for which the\
                    docsIetfQosParamSetMinReservedRate will be\
                    provided.  The value is calculated from the byte\
                    following the MAC header HCS to the end of the\
                    CRC.\
\
                    If the referenced parameter is omitted from a\
                    DOCSIS QOS parameter set, the default value is\
                    CMTS implementation dependent.  In this case, the\
                    CMTS reports the default value it is using, and the\
                    CM reports a value of 0.  If the referenced\
                    parameter is not applicable to the direction or\
                    scheduling type of the Service Flow, both CMTS and\
                    CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.5"\
    ::= { docsIetfQosParamSetEntry 6 }\
\
docsIetfQosParamSetActiveTimeout OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    UNITS           "seconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 39]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "Specifies the maximum duration in seconds that\
                    resources remain unused on an active service\
                    flow before CMTS signals that both active and\
                    admitted parameters set are null.  The default\
                    value of 0 signifies an infinite amount of time.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object is 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.6"\
    ::= { docsIetfQosParamSetEntry 7 }\
\
docsIetfQosParamSetAdmittedTimeout OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    UNITS           "seconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the maximum duration in seconds that\
                    resources remain in admitted state before\
                    resources must be released.\
\
                    The value of 0 signifies an infinite amount\
                    of time.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the\
                    default value of this object is 200.\
                   "\
\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.5.7"\
    DEFVAL          { 200 }\
    ::= { docsIetfQosParamSetEntry 8 }\
\
docsIetfQosParamSetMaxConcatBurst OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the maximum concatenated burst in\
                    bytes that an upstream Service Flow is allowed.\
                    The value is calculated from the FC byte of the\
                    Concatenation MAC Header to the last CRC byte in\
                    of the last concatenated MAC frame, inclusive.\
                    The value of 0 specifies no maximum burst.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set, the default\
                    value of this object for scheduling types\
                    bestEffort(2), nonRealTimePollingService(3), and\
\
\
\
Patrick & Murwin            Standards Track                    [Page 40]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    realTimePollingService(4) is 1522.  If the parameter\
                    is not applicable, this object's value is reported\
                    as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.1"\
    ::= { docsIetfQosParamSetEntry 9 }\
\
\
docsIetfQosParamSetSchedulingType OBJECT-TYPE\
    SYNTAX          DocsIetfQosSchedulingType\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the upstream scheduling service used for\
                    upstream Service Flow.\
\
                    If the referenced parameter is not present in the\
                    corresponding DOCSIS QOS Parameter Set of an\
                    upstream Service Flow, the default value of this\
                    object is bestEffort(2).  For QOS parameter sets of\
                    downstream Service Flows, this object's value is\
                    reported as undefined(1)."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.2"\
    ::= { docsIetfQosParamSetEntry 10 }\
\
docsIetfQosParamSetNomPollInterval OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the nominal interval in microseconds\
                    between successive unicast request\
                    opportunities on an upstream Service Flow.\
\
                    This object applies only to upstream Service Flows\
                    with DocsIetfQosSchedulingType of value\
                    nonRealTimePollingService(3),\
                    realTimePollingService(4), and\
                    unsolictedGrantServiceWithAD(5).  The parameter is\
                    mandatory for realTimePollingService(4).  If the\
                    parameter is omitted with\
                    nonRealTimePollingService(3), the CMTS uses an\
                    implementation-dependent value.  If the parameter\
                    is omitted with unsolictedGrantServiceWithAD(5),\
                    the CMTS uses as a default value the value of the\
                    Nominal Grant Interval parameter.  In all cases,\
                    the CMTS reports the value it is using when the\
                    parameter is applicable.  The CM reports the\
                    signaled parameter value if it was signaled,\
                    and 0 otherwise.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 41]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    If the referenced parameter is not applicable to\
                    the direction or scheduling type of the\
                    corresponding DOCSIS QOS Parameter Set, both\
                    CMTS and CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.4"\
    ::= { docsIetfQosParamSetEntry 11 }\
\
docsIetfQosParamSetTolPollJitter OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the maximum amount of time in\
                    microseconds that the unicast request interval\
                    may be delayed from the nominal periodic\
                    schedule on an upstream Service Flow.\
\
                    This parameter is applicable only to upstream\
                    Service Flows with a DocsIetfQosSchedulingType of\
                    realTimePollingService(4) or\
                    unsolictedGrantServiceWithAD(5).\
\
                    If the referenced parameter is applicable but not\
                    present in the corresponding DOCSIS QOS Parameter\
                    Set, the CMTS uses an implementation-dependent\
                    value and reports the value it is using.\
                    The CM reports a value of 0 in this case.\
\
                    If the parameter is not applicable to the\
                    direction or upstream scheduling type of the\
                    Service Flow, both CMTS and CM report this\
                    object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.5"\
    ::= { docsIetfQosParamSetEntry 12 }\
\
docsIetfQosParamSetUnsolicitGrantSize OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the unsolicited grant size in bytes.\
                    The grant size includes the entire MAC frame\
                    data PDU from the Frame Control byte to the end\
                    of the MAC frame.\
\
                    The referenced parameter is applicable only\
                    for upstream flows with a DocsIetfQosSchedulingType\
                    of unsolicitedGrantServicewithAD(5) or\
                    unsolicitedGrantService(6), and it is mandatory\
\
\
\
Patrick & Murwin            Standards Track                    [Page 42]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    when applicable.  Both CMTS and CM report\
                    the signaled value of the parameter in this\
                    case.\
\
                    If the referenced parameter is not applicable to\
                    the direction or scheduling type of the\
                    corresponding DOCSIS QOS Parameter Set, both\
                    CMTS and CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.6"\
    ::= { docsIetfQosParamSetEntry 13 }\
\
docsIetfQosParamSetNomGrantInterval OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the nominal interval in microseconds\
                    between successive data grant opportunities\
                    on an upstream Service Flow.\
\
                    The referenced parameter is applicable only\
                    for upstream flows with a DocsIetfQosSchedulingType\
                    of unsolicitedGrantServicewithAD(5) or\
                    unsolicitedGrantService(6), and it is mandatory\
                    when applicable.  Both CMTS and CM report the\
                    signaled value of the parameter in this case.\
\
                    If the referenced parameter is not applicable to\
                    the direction or scheduling type of the\
                    corresponding DOCSIS QOS Parameter Set, both\
                    CMTS and CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.7"\
    ::= { docsIetfQosParamSetEntry 14 }\
\
docsIetfQosParamSetTolGrantJitter OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the maximum amount of time in\
                    microseconds that the transmission opportunities\
                    may be delayed from the nominal periodic schedule.\
\
                    The referenced parameter is applicable only\
                    for upstream flows with a DocsIetfQosSchedulingType\
                    of unsolicitedGrantServicewithAD(5) or\
                    unsolicitedGrantService(6), and it is mandatory\
                    when applicable.  Both CMTS and CM report the\
\
\
\
Patrick & Murwin            Standards Track                    [Page 43]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    signaled value of the parameter in this case.\
\
                    If the referenced parameter is not applicable to\
                    the direction or scheduling type of the\
                    corresponding DOCSIS QOS Parameter Set, both\
                    CMTS and CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.8"\
    ::= { docsIetfQosParamSetEntry 15 }\
\
docsIetfQosParamSetGrantsPerInterval OBJECT-TYPE\
    SYNTAX          Integer32 (0..127)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the number of data grants per Nominal\
                    Grant Interval\
                    (docsIetfQosParamSetNomGrantInterval).\
\
                    The referenced parameter is applicable only\
                    for upstream flows with a DocsIetfQosSchedulingType\
                    of unsolicitedGrantServicewithAD(5) or\
                    unsolicitedGrantService(6), and it is mandatory\
                    when applicable.  Both CMTS and CM report the\
                    signaled value of the parameter in this case.\
\
                    If the referenced parameter is not applicable to\
                    the direction or scheduling type of the\
                    corresponding DOCSIS QOS Parameter Set, both\
                    CMTS and CM report this object's value as 0."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.9"\
    ::= { docsIetfQosParamSetEntry 16 }\
\
docsIetfQosParamSetTosAndMask OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the AND mask for the IP TOS byte for\
                    overwriting IP packet's TOS value.  The IP packet\
                    TOS byte is bitwise ANDed with\
                    docsIetfQosParamSetTosAndMask, and the result is\
                    bitwise ORed with docsIetfQosParamSetTosORMask and\
                    the result is written to the IP packet TOS byte.\
                    A value of 'FF'H for docsIetfQosParamSetTosAndMask\
                    and a value of '00'H for\
                    docsIetfQosParamSetTosOrMask means that the IP\
                    Packet TOS byte is not overwritten.\
\
                    This combination is reported if the referenced\
                    parameter is not present in a QOS Parameter Set.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 44]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  Network operators SHOULD avoid\
                    specifying values of docsIetfQosParamSetTosAndMask\
                    and docsIetfQosParamSetTosORMask that would result\
                    in the modification of the ECN bits.\
\
                    In particular, operators should not use values of\
                    docsIetfQosParamSetTosAndMask that have either of\
                    the least-significant two bits set to 0.  Similarly,\
                    operators should not use values of\
                    docsIetfQosParamSetTosORMask that have either of\
                    the least-significant two bits set to 1.\
\
                    Even though this object is only enforced by the\
                    Cable Modem Termination System (CMTS),\
                    Cable Modems MUST report the value as signaled in\
                    the referenced parameter."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.10;\
                    RFC 3168, The Addition of Explicit Congestion\
                    Notification (ECN) to IP;\
                    RFC 3260, New Terminology and Clarifications for\
                    Diffserv."\
    ::= { docsIetfQosParamSetEntry 17 }\
\
docsIetfQosParamSetTosOrMask OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the OR mask for the IP TOS byte.\
\
                    See the description of docsIetfQosParamSetTosAndMask\
                    for further details.\
\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  Network operators SHOULD avoid\
                    specifying values of docsIetfQosParamSetTosAndMask\
                    and docsIetfQosParamSetTosORMask that would result\
                    in the modification of the ECN bits."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.10;\
                    RFC 3168, The Addition of Explicit Congestion\
                    Notification (ECN) to IP;\
                    RFC 3260, New Terminology and Clarifications for\
\
\
\
Patrick & Murwin            Standards Track                    [Page 45]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    Diffserv."\
    ::= { docsIetfQosParamSetEntry 18 }\
\
docsIetfQosParamSetMaxLatency OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies the maximum latency between the\
                    reception of a packet by the CMTS on its NSI\
                    and the forwarding of the packet to the RF\
                    interface.  A value of 0 signifies no maximum\
                    latency is enforced.  This object only applies to\
                    downstream Service Flows.\
\
                    If the referenced parameter is not present in the\
                    corresponding downstream DOCSIS QOS Parameter Set,\
                    the default value is 0.  This parameter is\
                    not applicable to upstream DOCSIS QOS Parameter\
                    Sets, and its value is reported as 0 in this case."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.7.1"\
    ::= { docsIetfQosParamSetEntry 19 }\
\
\
docsIetfQosParamSetType     OBJECT-TYPE\
    SYNTAX          INTEGER {\
                       active (1),\
                       admitted (2),\
                       provisioned (3)\
                    }\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Defines the type of the QOS parameter set defined\
                    by this row.  active(1) indicates the Active QOS\
                    parameter set, describing the service currently\
                    being provided by the DOCSIS MAC domain to the\
                    Service Flow.  admitted(2) indicates the Admitted\
                    QOS Parameter Set, describing services reserved by\
                    the DOCSIS MAC domain for use by the service\
                    flow.  provisioned (3) describes the QOS Parameter\
                    Set defined in the DOCSIS CM Configuration file for\
                    the Service Flow."\
    REFERENCE      "SP-RFIv2.0-I06-040804, 8.1.5"\
    ::= { docsIetfQosParamSetEntry 20 }\
\
docsIetfQosParamSetRequestPolicyOct OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(4))\
                    -- A 32-bit mask represented most significant byte\
\
\
\
Patrick & Murwin            Standards Track                    [Page 46]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    -- first.  The 32-bit integer represented in this\
                    -- manner equals the binary value of the referenced\
                    -- integer parameter of the DOCSIS RFI\
                    -- specification.\
                    -- The BITS syntax is not used in order to avoid\
                    -- the confusion caused by different bit-numbering\
                    -- conventions.\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Specifies which transmit interval opportunities\
                    the CM omits for upstream transmission requests and\
                    packet transmissions.  This object takes its\
                    default value for downstream Service Flows.\
\
                    Unless otherwise indicated, a bit value of 1 means\
                    that a CM must not use that opportunity for\
                    upstream transmission.\
\
                    If bit 0 is the least significant bit of the\
                    least significant (4th) octet, and if bit number\
                    is increased with significance, the bit definitions\
                    are defined as follows:\
\
                    broadcastReqOpp(0):\
                         all CMs broadcast request opportunities\
\
                    priorityReqMulticastReq(1):\
                         priority request multicast request\
                         opportunities\
\
                    reqDataForReq(2):\
                         request/data opportunities for requests\
\
                    reqDataForData(3):\
                         request/data opportunities for data\
\
                    piggybackReqWithData(4):\
                         piggyback requests with data\
\
                    concatenateData(5):\
                         concatenate data\
\
                    fragmentData(6):\
                         fragment data\
\
                    suppresspayloadheaders(7):\
                         suppress payload headers\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 47]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    dropPktsExceedUGSize(8):\
                         A value of 1 means that the Service Flow must\
                         drop packets that do not fit in the Unsolicited\
                         Grant size.\
\
                    If the referenced parameter is not present in\
                    a QOS Parameter Set, the value of this object is\
                    reported as '00000000'H."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.3"\
    ::= { docsIetfQosParamSetEntry 21 }\
\
docsIetfQosParamSetBitMap OBJECT-TYPE\
                                -- Each bit corresponds to a parameter\
                                -- from SP-RFI-v1.1-I10-037030,\
                                -- Appendix C in the indicated\
    SYNTAX          BITS {      -- section number.\
                        trafficPriority(0),     -- C.2.2.5.1\
                        maxTrafficRate(1),      -- C.2.2.5.2\
                        maxTrafficBurst(2),     -- C.2.2.5.3\
                        minReservedRate(3),     -- C.2.2.5.4\
                        minReservedPkt(4),      -- C.2.2.5.5\
                        activeTimeout(5),       -- C.2.2.5.6\
                        admittedTimeout(6),     -- C.2.2.5.7\
                        maxConcatBurst(7),      -- C.2.2.6.1\
                        schedulingType(8),      -- C.2.2.6.2\
                        requestPolicy(9),       -- C.2.2.6.3\
                        nomPollInterval(10),    -- C.2.2.6.4\
                        tolPollJitter(11),      -- C.2.2.6.5\
                        unsolicitGrantSize(12), -- C.2.2.6.6\
                        nomGrantInterval(13),   -- C.2.2.6.7\
                        tolGrantJitter(14),     -- C.2.2.6.8\
                        grantsPerInterval(15),  -- C.2.2.6.9\
                        tosOverwrite(16),       -- C.2.2.6.10\
                        maxLatency(17)          -- C.2.2.7.1\
                    }\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object indicates the set of QOS Parameter\
                    Set parameters actually signaled in the\
                    DOCSIS registration or dynamic service request\
                    message that created or modified the QOS Parameter\
                    Set.  A bit is set to 1 when the parameter described\
                    by the indicated reference section is present\
                    in the original request.\
\
                    Note that when Service Class names are expanded,\
                    the registration or dynamic response message may\
                    contain parameters as expanded by the CMTS based\
\
\
\
Patrick & Murwin            Standards Track                    [Page 48]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    on a stored service class.  These expanded\
                    parameters are not indicated by a 1 bit in this\
                    object.\
\
                    Note that even though some QOS Parameter Set\
                    parameters may not be signaled in a message\
                    (so that the paramater's bit in this object is 0),\
                    the DOCSIS specification requires that default\
                    values be used.  These default values are reported\
                    as the corresponding object's value in the row.\
\
                    Note that BITS objects are encoded most\
                    significant bit first.  For example, if bits\
                    1 and 16 are set, the value of this object\
                    is the octet string '400080'H."\
    ::= { docsIetfQosParamSetEntry 22 }\
\
--\
--  Service Flow Table\
--\
docsIetfQosServiceFlowTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosServiceFlowEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the set of DOCSIS-QOS\
                    Service Flows in a managed device."\
    ::= { docsIetfQosMIBObjects 3 }\
\
docsIetfQosServiceFlowEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosServiceFlowEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Describes a Service Flow.\
                    An entry in the table exists for each\
                    Service Flow ID.  The ifIndex is an\
                    ifType of docsCableMaclayer(127)."\
    INDEX {\
            ifIndex,\
            docsIetfQosServiceFlowId\
          }\
    ::= { docsIetfQosServiceFlowTable 1 }\
\
DocsIetfQosServiceFlowEntry ::= SEQUENCE {\
    docsIetfQosServiceFlowId               Unsigned32,\
    docsIetfQosServiceFlowSID              Unsigned32,\
    docsIetfQosServiceFlowDirection        DocsIetfQosRfMacIfDirection,\
    docsIetfQosServiceFlowPrimary          TruthValue\
    }\
\
\
\
Patrick & Murwin            Standards Track                    [Page 49]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
docsIetfQosServiceFlowId    OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..4294967295)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "An index assigned to a Service Flow by CMTS."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.3.2"\
    ::= { docsIetfQosServiceFlowEntry 1 }\
\
docsIetfQosServiceFlowSID  OBJECT-TYPE\
    SYNTAX          Unsigned32 (0..16383)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Service Identifier (SID) assigned to an\
                    admitted or active Service Flow.  This object\
                    reports a value of 0 if a Service ID is not\
                    associated with the Service Flow.  Only active\
                    or admitted upstream Service Flows will have a\
                    Service ID (SID)."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.3.3"\
    ::= { docsIetfQosServiceFlowEntry 2 }\
\
docsIetfQosServiceFlowDirection OBJECT-TYPE\
    SYNTAX          DocsIetfQosRfMacIfDirection\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The direction of the Service Flow."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.1/2"\
    ::= { docsIetfQosServiceFlowEntry 3 }\
\
docsIetfQosServiceFlowPrimary OBJECT-TYPE\
    SYNTAX          TruthValue\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Object reflects whether Service Flow is the primary\
                    or a secondary Service Flow.\
\
                    A primary Service Flow is the default Service Flow\
                    for otherwise unclassified traffic and all MAC\
                    messages."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Section 8.1 "\
    ::= { docsIetfQosServiceFlowEntry 4 }\
\
--\
--  Service Flow Stats Table\
--\
docsIetfQosServiceFlowStatsTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosServiceFlowStatsEntry\
    MAX-ACCESS      not-accessible\
\
\
\
Patrick & Murwin            Standards Track                    [Page 50]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    STATUS          current\
    DESCRIPTION     "This table describes statistics associated with the\
                     Service Flows in a managed device."\
    ::= { docsIetfQosMIBObjects 4 }\
\
docsIetfQosServiceFlowStatsEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosServiceFlowStatsEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Describes a set of Service Flow statistics.\
                    An entry in the table exists for each\
                    Service Flow ID.  The ifIndex is an\
                    ifType of docsCableMaclayer(127)."\
    INDEX {\
            ifIndex,\
            docsIetfQosServiceFlowId\
          }\
    ::= { docsIetfQosServiceFlowStatsTable 1 }\
\
DocsIetfQosServiceFlowStatsEntry ::= SEQUENCE {\
    docsIetfQosServiceFlowPkts                     Counter64,\
    docsIetfQosServiceFlowOctets                   Counter64,\
    docsIetfQosServiceFlowTimeCreated              TimeStamp,\
    docsIetfQosServiceFlowTimeActive               Counter32,\
    docsIetfQosServiceFlowPHSUnknowns              Counter32,\
    docsIetfQosServiceFlowPolicedDropPkts          Counter32,\
    docsIetfQosServiceFlowPolicedDelayPkts         Counter32\
    }\
\
docsIetfQosServiceFlowPkts OBJECT-TYPE\
    SYNTAX          Counter64\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "For outgoing Service Flows, this object counts the\
                    number of Packet Data PDUs forwarded to this\
                    Service Flow.  For incoming upstream CMTS service\
                    flows, this object counts the number of Packet\
                    Data PDUs actually received on the Service Flow\
                    identified by the SID for which the packet was\
                    scheduled.  CMs not classifying downstream packets\
                    may report this object's value as 0 for downstream\
                    Service Flows.  This object does not count\
                    MAC-specific management messages.\
\
                    Particularly for UGS flows, packets sent on the\
                    primary Service Flow in violation of the UGS grant\
                    size should be counted only by the instance of this\
                    object that is associated with the primary service\
\
\
\
Patrick & Murwin            Standards Track                    [Page 51]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    flow.\
\
                    Unclassified upstream user data packets (i.e., non-\
                    MAC-management) forwarded to the primary upstream\
                    Service Flow should be counted by the instance of\
                    this object that is associated with the primary\
                    service flow.\
\
                    This object does include packets counted by\
                    docsIetfQosServiceFlowPolicedDelayPkts, but does not\
                    include packets counted by\
                    docsIetfQosServiceFlowPolicedDropPkts\
                    and docsIetfQosServiceFlowPHSUnknowns.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 1 }\
\
docsIetfQosServiceFlowOctets OBJECT-TYPE\
    SYNTAX          Counter64\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of octets from the byte after the MAC\
                    header HCS to the end of the CRC for all packets\
                    counted in the docsIetfQosServiceFlowPkts object for\
                    this row.  Note that this counts the octets after\
                    payload header suppression and before payload\
                    header expansion have been applied.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 2 }\
\
docsIetfQosServiceFlowTimeCreated OBJECT-TYPE\
    SYNTAX          TimeStamp\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of sysUpTime when the service flow\
                    was created."\
    ::= { docsIetfQosServiceFlowStatsEntry 3 }\
\
docsIetfQosServiceFlowTimeActive OBJECT-TYPE\
    SYNTAX          Counter32\
    UNITS           "seconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 52]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "The number of seconds that the service flow\
                    has been active.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 4 }\
\
docsIetfQosServiceFlowPHSUnknowns OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "For incoming upstream CMTS service flows, this\
                    object counts the number of packets received\
                    with an unknown payload header suppression index.\
                    The service flow is identified by the SID for which\
                    the packet was scheduled.\
\
                    On a CM, only this object's instance for the primary\
                    downstream service flow counts packets received with\
                    an unknown payload header suppression index.  All\
                    other downstream service flows on CM report this\
                    objects value as 0.\
\
                    All outgoing service flows report this object's\
                    value as 0.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 5 }\
\
docsIetfQosServiceFlowPolicedDropPkts OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "For outgoing service flows, this object counts the\
                    number of Packet Data PDUs classified to this\
                    service flow dropped due to:\
                       (1) implementation-dependent excessive delay\
                           while enforcing the Maximum Sustained\
                           Traffic Rate; or\
                       (2) UGS packets dropped due to exceeding the\
                           Unsolicited Grant Size with a\
                           Request/Transmission policy that requires\
                           such packets to be dropped.\
\
                    Classified packets dropped due to other reasons\
\
\
\
Patrick & Murwin            Standards Track                    [Page 53]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    must be counted in ifOutDiscards for the interface\
                    of this service flow.  This object reports 0 for\
                    incoming service flows.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 6 }\
\
docsIetfQosServiceFlowPolicedDelayPkts OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "This object counts only outgoing packets delayed in\
                    order to maintain the Maximum Sustained Traffic\
                    Rate.  This object will always report a value of 0\
                    for UGS flows because the Maximum Sustained Traffic\
                    Rate does not apply.  This object is 0 for incoming\
                    service flows.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosServiceFlowStatsEntry 7 }\
\
--\
--  Upstream Service Flow Stats Table (CMTS ONLY)\
--\
docsIetfQosUpstreamStatsTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosUpstreamStatsEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes statistics associated with\
                    upstream service flows.  All counted frames must\
                    be received without a Frame Check Sequence (FCS)\
                    error."\
    ::= { docsIetfQosMIBObjects 5 }\
\
docsIetfQosUpstreamStatsEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosUpstreamStatsEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Describes a set of upstream service flow\
                    statistics.  An entry in the table exists for each\
                    upstream Service Flow in a managed device.\
                    The ifIndex is an ifType of\
                    docsCableMaclayer(127)."\
    INDEX {\
\
\
\
Patrick & Murwin            Standards Track                    [Page 54]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
            ifIndex,\
            docsIetfQosSID\
          }\
    ::= { docsIetfQosUpstreamStatsTable 1 }\
\
DocsIetfQosUpstreamStatsEntry ::= SEQUENCE {\
    docsIetfQosSID                            Unsigned32,\
    docsIetfQosUpstreamFragments              Counter32,\
    docsIetfQosUpstreamFragDiscards           Counter32,\
    docsIetfQosUpstreamConcatBursts           Counter32\
    }\
\
docsIetfQosSID OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..16383)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Identifies a service ID for an admitted or active\
                    upstream service flow."\
    ::= { docsIetfQosUpstreamStatsEntry 1 }\
\
docsIetfQosUpstreamFragments OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of fragmentation headers received on an\
                    upstream service flow, regardless of whether\
                    the fragment was correctly reassembled into a\
                    valid packet.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosUpstreamStatsEntry 2 }\
\
docsIetfQosUpstreamFragDiscards OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of upstream fragments discarded and not\
                    assembled into a valid upstream packet.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosUpstreamStatsEntry 3 }\
\
docsIetfQosUpstreamConcatBursts OBJECT-TYPE\
    SYNTAX          Counter32\
\
\
\
Patrick & Murwin            Standards Track                    [Page 55]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of concatenation headers received on an\
                    upstream service flow.\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosUpstreamStatsEntry 4 }\
\
\
--\
--  Dynamic Service Stats Table\
--\
docsIetfQosDynamicServiceStatsTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosDynamicServiceStatsEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes statistics associated with the\
                    Dynamic Service Flows in a managed device."\
    ::= { docsIetfQosMIBObjects 6 }\
\
docsIetfQosDynamicServiceStatsEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosDynamicServiceStatsEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Describes a set of dynamic service flow statistics.\
                    Two entries exist for each DOCSIS MAC layer\
                    interface for the upstream and downstream\
                    direction.  On the CMTS, the downstream direction\
                    row indicates messages transmitted or transactions\
                    originated by the CMTS.  The upstream direction row\
                    indicates messages received or transaction\
                    originated by the CM.  On the CM, the downstream\
                    direction row indicates messages received or\
                    transactions originated by the CMTS.  The upstream\
                    direction row indicates messages transmitted by\
                    the CM or transactions originated by the CM.\
                    The ifIndex is an ifType of\
                    docsCableMaclayer(127)."\
    INDEX {\
            ifIndex,\
            docsIetfQosIfDirection\
          }\
    ::= { docsIetfQosDynamicServiceStatsTable 1 }\
\
DocsIetfQosDynamicServiceStatsEntry ::= SEQUENCE {\
    docsIetfQosIfDirection                DocsIetfQosRfMacIfDirection,\
    docsIetfQosDSAReqs                    Counter32,\
\
\
\
Patrick & Murwin            Standards Track                    [Page 56]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    docsIetfQosDSARsps                    Counter32,\
    docsIetfQosDSAAcks                    Counter32,\
    docsIetfQosDSCReqs                    Counter32,\
    docsIetfQosDSCRsps                    Counter32,\
    docsIetfQosDSCAcks                    Counter32,\
    docsIetfQosDSDReqs                    Counter32,\
    docsIetfQosDSDRsps                    Counter32,\
    docsIetfQosDynamicAdds                Counter32,\
    docsIetfQosDynamicAddFails            Counter32,\
    docsIetfQosDynamicChanges             Counter32,\
    docsIetfQosDynamicChangeFails         Counter32,\
    docsIetfQosDynamicDeletes             Counter32,\
    docsIetfQosDynamicDeleteFails         Counter32,\
    docsIetfQosDCCReqs                    Counter32,\
    docsIetfQosDCCRsps                    Counter32,\
    docsIetfQosDCCAcks                    Counter32,\
    docsIetfQosDCCs                       Counter32,\
    docsIetfQosDCCFails                   Counter32\
   }\
\
docsIetfQosIfDirection OBJECT-TYPE\
    SYNTAX          DocsIetfQosRfMacIfDirection\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "The direction of interface."\
    ::= { docsIetfQosDynamicServiceStatsEntry 1 }\
\
docsIetfQosDSAReqs OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Addition Requests,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 2 }\
\
docsIetfQosDSARsps OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Addition Responses,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
\
\
\
Patrick & Murwin            Standards Track                    [Page 57]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 3 }\
\
docsIetfQosDSAAcks OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Addition\
                    Acknowledgements, including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 4 }\
\
docsIetfQosDSCReqs OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Change Requests,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 5 }\
\
docsIetfQosDSCRsps OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Change Responses,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 6 }\
\
docsIetfQosDSCAcks OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Change\
                    Acknowledgements, including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
\
\
\
Patrick & Murwin            Standards Track                    [Page 58]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 7 }\
\
docsIetfQosDSDReqs OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Delete Requests,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 8 }\
\
docsIetfQosDSDRsps OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Service Delete Responses,\
                    including retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 9 }\
\
docsIetfQosDynamicAdds OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of successful Dynamic Service Addition\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 10 }\
\
docsIetfQosDynamicAddFails OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of failed Dynamic Service Addition\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
\
\
\
Patrick & Murwin            Standards Track                    [Page 59]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 11 }\
\
docsIetfQosDynamicChanges OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of successful Dynamic Service Change\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 12 }\
\
docsIetfQosDynamicChangeFails OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of failed Dynamic Service Change\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 13 }\
\
docsIetfQosDynamicDeletes OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of successful Dynamic Service Delete\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 14 }\
\
docsIetfQosDynamicDeleteFails OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of failed Dynamic Service Delete\
                    transactions.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
\
\
\
Patrick & Murwin            Standards Track                    [Page 60]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 15 }\
\
\
docsIetfQosDCCReqs OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Channel Change Request\
                    messages traversing an interface.  This count\
                    is nonzero only on downstream direction rows.\
                    This count should include the number of retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex\
                    that indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 16 }\
\
docsIetfQosDCCRsps OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Channel Change Response\
                    messages traversing an interface.  This count is\
                    nonzero only on upstream direction rows.  This count\
                    should include the number of retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 17 }\
\
docsIetfQosDCCAcks OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of Dynamic Channel Change Acknowledgement\
                    messages traversing an interface.  This count\
                    is nonzero only on downstream direction rows.\
                    This count should include the number of retries.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 18 }\
\
docsIetfQosDCCs OBJECT-TYPE\
    SYNTAX          Counter32\
\
\
\
Patrick & Murwin            Standards Track                    [Page 61]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of successful Dynamic Channel Change\
                    transactions.  This count is nonzero only on\
                    downstream direction rows.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 19 }\
\
docsIetfQosDCCFails OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of failed Dynamic Channel Change\
                    transactions.  This count is nonzero only on\
                    downstream direction rows.\
\
                    This counter's last discontinuity is the\
                    ifCounterDiscontinuityTime for the same ifIndex that\
                    indexes this object."\
    ::= { docsIetfQosDynamicServiceStatsEntry 20 }\
\
\
--\
--  Service Flow Log Table (CMTS ONLY)\
--\
docsIetfQosServiceFlowLogTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosServiceFlowLogEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table contains a log of the disconnected\
                    Service Flows in a managed device."\
    ::= { docsIetfQosMIBObjects 7 }\
\
docsIetfQosServiceFlowLogEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosServiceFlowLogEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "The information regarding a single disconnected\
                    service flow."\
    INDEX {\
            docsIetfQosServiceFlowLogIndex\
          }\
    ::= { docsIetfQosServiceFlowLogTable 1 }\
\
DocsIetfQosServiceFlowLogEntry ::= SEQUENCE {\
\
\
\
Patrick & Murwin            Standards Track                    [Page 62]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    docsIetfQosServiceFlowLogIndex                 Unsigned32,\
    docsIetfQosServiceFlowLogIfIndex               InterfaceIndex,\
    docsIetfQosServiceFlowLogSFID                  Unsigned32,\
    docsIetfQosServiceFlowLogCmMac                 MacAddress,\
    docsIetfQosServiceFlowLogPkts                  Counter64,\
    docsIetfQosServiceFlowLogOctets                Counter64,\
    docsIetfQosServiceFlowLogTimeDeleted           TimeStamp,\
    docsIetfQosServiceFlowLogTimeCreated           TimeStamp,\
    docsIetfQosServiceFlowLogTimeActive            Counter32,\
    docsIetfQosServiceFlowLogDirection    DocsIetfQosRfMacIfDirection,\
    docsIetfQosServiceFlowLogPrimary               TruthValue,\
    docsIetfQosServiceFlowLogServiceClassName      SnmpAdminString,\
    docsIetfQosServiceFlowLogPolicedDropPkts       Counter32,\
    docsIetfQosServiceFlowLogPolicedDelayPkts      Counter32,\
    docsIetfQosServiceFlowLogControl               INTEGER\
    }\
\
docsIetfQosServiceFlowLogIndex OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..4294967295)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Unique index for a logged service flow."\
    ::= { docsIetfQosServiceFlowLogEntry 1 }\
\
docsIetfQosServiceFlowLogIfIndex OBJECT-TYPE\
    SYNTAX          InterfaceIndex\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The ifIndex of ifType docsCableMaclayer(127)\
                    on the CMTS where the service flow was present."\
    ::= {  docsIetfQosServiceFlowLogEntry 2 }\
\
docsIetfQosServiceFlowLogSFID    OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..4294967295)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The index assigned to the service flow by the CMTS."\
    ::= {  docsIetfQosServiceFlowLogEntry 3 }\
\
docsIetfQosServiceFlowLogCmMac OBJECT-TYPE\
    SYNTAX          MacAddress\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The MAC address for the cable modem associated with\
                    the service flow."\
    ::= { docsIetfQosServiceFlowLogEntry 4 }\
\
docsIetfQosServiceFlowLogPkts OBJECT-TYPE\
\
\
\
Patrick & Murwin            Standards Track                    [Page 63]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    SYNTAX          Counter64\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of packets counted on this service flow\
                    after payload header suppression."\
    ::= { docsIetfQosServiceFlowLogEntry 5 }\
\
docsIetfQosServiceFlowLogOctets OBJECT-TYPE\
    SYNTAX          Counter64\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The number of octets counted on this service flow\
                    after payload header suppression."\
    ::= { docsIetfQosServiceFlowLogEntry 6 }\
\
docsIetfQosServiceFlowLogTimeDeleted OBJECT-TYPE\
    SYNTAX          TimeStamp\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of sysUpTime when the service flow\
                    was deleted."\
    ::= { docsIetfQosServiceFlowLogEntry 7 }\
\
docsIetfQosServiceFlowLogTimeCreated OBJECT-TYPE\
    SYNTAX          TimeStamp\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of sysUpTime when the service flow\
                    was created."\
    ::= { docsIetfQosServiceFlowLogEntry 8 }\
\
docsIetfQosServiceFlowLogTimeActive OBJECT-TYPE\
    SYNTAX          Counter32\
    UNITS           "seconds"\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The total time that the service flow was active."\
    ::= { docsIetfQosServiceFlowLogEntry 9 }\
\
docsIetfQosServiceFlowLogDirection OBJECT-TYPE\
    SYNTAX          DocsIetfQosRfMacIfDirection\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of docsIetfQosServiceFlowDirection\
                    for the service flow."\
    ::= { docsIetfQosServiceFlowLogEntry  10 }\
\
docsIetfQosServiceFlowLogPrimary OBJECT-TYPE\
\
\
\
Patrick & Murwin            Standards Track                    [Page 64]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    SYNTAX          TruthValue\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of docsIetfQosServiceFlowPrimary for the\
                    service flow."\
    ::= { docsIetfQosServiceFlowLogEntry 11 }\
\
docsIetfQosServiceFlowLogServiceClassName OBJECT-TYPE\
    SYNTAX          SnmpAdminString\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The value of docsIetfQosParamSetServiceClassName for\
                    the provisioned QOS Parameter Set of the\
                    service flow."\
    ::= { docsIetfQosServiceFlowLogEntry  12 }\
\
docsIetfQosServiceFlowLogPolicedDropPkts OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The final value of\
                    docsIetfQosServiceFlowPolicedDropPkts for the\
                    service flow."\
    ::= { docsIetfQosServiceFlowLogEntry  13 }\
\
docsIetfQosServiceFlowLogPolicedDelayPkts OBJECT-TYPE\
    SYNTAX          Counter32\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The final value of\
                    docsIetfQosServiceFlowPolicedDelayPkts for the\
                    service flow."\
    ::= { docsIetfQosServiceFlowLogEntry  14 }\
\
docsIetfQosServiceFlowLogControl OBJECT-TYPE\
    SYNTAX          INTEGER {\
                     active(1),\
                     destroy(6)\
                    }\
\
    MAX-ACCESS      read-write\
    STATUS          current\
    DESCRIPTION    "Setting this object to the value destroy(6) removes\
                    this entry from the table.\
\
                    Reading this object returns the value active(1)."\
    ::= { docsIetfQosServiceFlowLogEntry 15 }\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 65]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
--\
-- Service Class Table (CMTS ONLY)\
--\
docsIetfQosServiceClassTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosServiceClassEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the set of DOCSIS-QOS\
                    Service Classes in a CMTS."\
    ::= { docsIetfQosMIBObjects 8 }\
\
docsIetfQosServiceClassEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosServiceClassEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "A provisioned service class on a CMTS.\
                    Each entry defines a template for certain\
                    DOCSIS QOS Parameter Set values.  When a CM\
                    creates or modifies an Admitted QOS Parameter Set\
                    for a Service Flow, it may reference a Service Class\
                    Name instead of providing explicit QOS Parameter\
                    Set values.  In this case, the CMTS populates\
                    the QOS Parameter Set with the applicable\
                    corresponding values from the named Service Class.\
                    Subsequent changes to a Service Class row do not\
                    affect the QOS Parameter Set values of any service\
                    flows already admitted.\
\
                    A service class template applies to only\
                    a single direction, as indicated in the\
                    docsIetfQosServiceClassDirection object."\
    INDEX {\
             docsIetfQosServiceClassName\
          }\
    ::= { docsIetfQosServiceClassTable 1 }\
\
DocsIetfQosServiceClassEntry ::= SEQUENCE {\
    docsIetfQosServiceClassName               SnmpAdminString,\
    docsIetfQosServiceClassStatus             RowStatus,\
    docsIetfQosServiceClassPriority           Integer32,\
    docsIetfQosServiceClassMaxTrafficRate     DocsIetfQosBitRate,\
    docsIetfQosServiceClassMaxTrafficBurst    Unsigned32,\
    docsIetfQosServiceClassMinReservedRate    DocsIetfQosBitRate,\
    docsIetfQosServiceClassMinReservedPkt     Integer32,\
    docsIetfQosServiceClassMaxConcatBurst     Integer32,\
    docsIetfQosServiceClassNomPollInterval    Unsigned32,\
    docsIetfQosServiceClassTolPollJitter      Unsigned32,\
    docsIetfQosServiceClassUnsolicitGrantSize Integer32,\
\
\
\
Patrick & Murwin            Standards Track                    [Page 66]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    docsIetfQosServiceClassNomGrantInterval   Unsigned32,\
    docsIetfQosServiceClassTolGrantJitter     Unsigned32,\
    docsIetfQosServiceClassGrantsPerInterval  Integer32,\
    docsIetfQosServiceClassMaxLatency         Unsigned32,\
    docsIetfQosServiceClassActiveTimeout      Integer32,\
    docsIetfQosServiceClassAdmittedTimeout    Integer32,\
    docsIetfQosServiceClassSchedulingType     DocsIetfQosSchedulingType,\
    docsIetfQosServiceClassRequestPolicy      OCTET STRING,\
    docsIetfQosServiceClassTosAndMask         OCTET STRING,\
    docsIetfQosServiceClassTosOrMask          OCTET STRING,\
    docsIetfQosServiceClassDirection        DocsIetfQosRfMacIfDirection,\
    docsIetfQosServiceClassStorageType        StorageType,\
    docsIetfQosServiceClassDSCPOverwrite      DscpOrAny\
    }\
\
docsIetfQosServiceClassName OBJECT-TYPE\
    SYNTAX          SnmpAdminString (SIZE (1..15))\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Service Class Name.  DOCSIS specifies that the\
                    maximum size is 16 ASCII characters including\
                    a terminating zero.  The terminating zero is not\
                    represented in this SnmpAdminString syntax object."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.3.4"\
    ::= { docsIetfQosServiceClassEntry 1 }\
\
docsIetfQosServiceClassStatus OBJECT-TYPE\
    SYNTAX          RowStatus\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Used to create or delete rows in this table.\
                    There is no restriction on the ability to change\
                    values in this row while the row is active.\
                    Inactive rows need not be timed out."\
    ::= { docsIetfQosServiceClassEntry 2 }\
\
docsIetfQosServiceClassPriority OBJECT-TYPE\
    SYNTAX          Integer32 (0..7)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetPriority."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 3 }\
\
docsIetfQosServiceClassMaxTrafficRate OBJECT-TYPE\
    SYNTAX          DocsIetfQosBitRate\
    MAX-ACCESS      read-create\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 67]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "Template for docsIetfQosParamSetMaxTrafficRate."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 4 }\
\
docsIetfQosServiceClassMaxTrafficBurst OBJECT-TYPE\
    SYNTAX          Unsigned32\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetMaxTrafficBurst."\
    DEFVAL          { 3044 }\
    ::= { docsIetfQosServiceClassEntry 5 }\
\
docsIetfQosServiceClassMinReservedRate OBJECT-TYPE\
    SYNTAX          DocsIetfQosBitRate\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSEtMinReservedRate."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 6 }\
\
docsIetfQosServiceClassMinReservedPkt OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetMinReservedPkt."\
    ::= { docsIetfQosServiceClassEntry 7 }\
\
docsIetfQosServiceClassMaxConcatBurst OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetMaxConcatBurst."\
    DEFVAL          { 1522 }\
    ::= { docsIetfQosServiceClassEntry 8 }\
\
docsIetfQosServiceClassNomPollInterval OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetNomPollInterval."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 9 }\
\
docsIetfQosServiceClassTolPollJitter OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-create\
\
\
\
Patrick & Murwin            Standards Track                    [Page 68]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetTolPollJitter."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 10 }\
\
docsIetfQosServiceClassUnsolicitGrantSize OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetUnsolicitGrantSize."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 11 }\
\
docsIetfQosServiceClassNomGrantInterval OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetNomGrantInterval."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 12 }\
\
docsIetfQosServiceClassTolGrantJitter OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetTolGrantJitter."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 13 }\
\
docsIetfQosServiceClassGrantsPerInterval OBJECT-TYPE\
    SYNTAX          Integer32 (0..127)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetGrantsPerInterval."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 14 }\
\
docsIetfQosServiceClassMaxLatency OBJECT-TYPE\
    SYNTAX          Unsigned32\
    UNITS           "microseconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetClassMaxLatency."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.7.1"\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 15 }\
\
\
\
Patrick & Murwin            Standards Track                    [Page 69]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
docsIetfQosServiceClassActiveTimeout OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    UNITS           "seconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetActiveTimeout."\
    DEFVAL          { 0 }\
    ::= { docsIetfQosServiceClassEntry 16 }\
\
docsIetfQosServiceClassAdmittedTimeout OBJECT-TYPE\
    SYNTAX          Integer32 (0..65535)\
    UNITS           "seconds"\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetAdmittedTimeout."\
    DEFVAL          { 200 }\
    ::= { docsIetfQosServiceClassEntry 17 }\
\
docsIetfQosServiceClassSchedulingType OBJECT-TYPE\
    SYNTAX          DocsIetfQosSchedulingType\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetSchedulingType."\
    DEFVAL          { bestEffort }\
    ::= { docsIetfQosServiceClassEntry 18 }\
\
docsIetfQosServiceClassRequestPolicy OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(4))\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetRequestPolicyOct."\
    DEFVAL          { '00000000'H } -- no bits are set\
    ::= { docsIetfQosServiceClassEntry 19 }\
\
docsIetfQosServiceClassTosAndMask OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetTosAndMask.\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  Network operators SHOULD avoid\
                    specifying values of\
                    docsIetfQosServiceClassTosAndMask and\
                    docsIetfQosServiceClassTosOrMask that would result\
                    in the modification of the ECN bits.\
\
\
\
Patrick & Murwin            Standards Track                    [Page 70]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    In particular, operators should not use values of\
                    docsIetfQosServiceClassTosAndMask that have either\
                    of the least-significant two bits set to 0.\
                    Similarly,operators should not use values of\
                    docsIetfQosServiceClassTosOrMask that have either\
                    of the least-significant two bits set to 1."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.10;\
                    RFC 3168, The Addition of Explicit Congestion\
                    Notification (ECN) to IP;\
                    RFC 3260, New Terminology and Clarifications for\
                    Diffserv."\
    ::= { docsIetfQosServiceClassEntry 20 }\
\
docsIetfQosServiceClassTosOrMask OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(1))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Template for docsIetfQosParamSetTosOrMask.\
                    The IP TOS octet as originally defined in RFC 791\
                    has been superseded by the 6-bit Differentiated\
                    Services Field (DSField, RFC 3260) and the 2-bit\
                    Explicit Congestion Notification Field (ECN field,\
                    RFC 3168).  Network operators SHOULD avoid\
                    specifying values of\
                    docsIetfQosServiceClassTosAndMask and\
                    docsIetfQosServiceClassTosOrMask that would result\
                    in the modification of the ECN bits.\
\
                    In particular, operators should not use values of\
                    docsIetfQosServiceClassTosAndMask that have either\
                    of the least-significant two bits set to 0.\
                    Similarly, operators should not use values of\
                    docsIetfQosServiceClassTosOrMask that have either\
                    of the least-significant two bits set to 1."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.2.6.10;\
                    RFC 3168, The Addition of Explicit Congestion\
                    Notification (ECN) to IP;\
                    RFC 3260, New Terminology and Clarifications for\
                    Diffserv."\
    ::= { docsIetfQosServiceClassEntry 21 }\
\
docsIetfQosServiceClassDirection OBJECT-TYPE\
    SYNTAX          DocsIetfQosRfMacIfDirection\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Specifies whether the service class template\
                    applies to upstream or downstream service flows."\
    DEFVAL          { upstream }\
\
\
\
Patrick & Murwin            Standards Track                    [Page 71]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    ::= { docsIetfQosServiceClassEntry 22 }\
\
docsIetfQosServiceClassStorageType OBJECT-TYPE\
    SYNTAX          StorageType\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "This object defines whether this row is kept in\
                    volatile storage and lost upon reboot or whether\
                    it is backed up by non-volatile or permanent\
                    storage.  'permanent' entries need not allow\
                    writable access to any object."\
    DEFVAL { nonVolatile }\
    ::= { docsIetfQosServiceClassEntry 23 }\
\
docsIetfQosServiceClassDSCPOverwrite OBJECT-TYPE\
    SYNTAX          DscpOrAny\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "This object allows the overwrite of the DSCP\
                    field per RFC 3260.\
\
                    If this object is -1, then the corresponding entry's\
                    docsIetfQosServiceClassTosAndMask value MUST be\
                    'FF'H and docsIetfQosServiceClassTosOrMask MUST be\
                    '00'H.  Otherwise, this object is in the range of\
                    0..63, and the corresponding entry's\
                    docsIetfQosServiceClassTosAndMask value MUST be\
                    '03'H and the docsIetfQosServiceClassTosOrMask MUST\
                    be this object's value shifted left by two bit\
                    positions."\
    REFERENCE      "RFC 3168, The Addition of Explicit Congestion\
                    Notification (ECN) to IP;\
                    RFC 3260, New Terminology and Clarifications for\
                    Diffserv."\
    DEFVAL          { -1 }\
    ::= { docsIetfQosServiceClassEntry 24 }\
\
--\
-- Service Class PolicyTable\
--\
docsIetfQosServiceClassPolicyTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosServiceClassPolicyEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the set of DOCSIS-QOS\
                    Service Class Policies.\
\
                    This table is an adjunct to the\
\
\
\
Patrick & Murwin            Standards Track                    [Page 72]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    docsDevFilterPolicy table.   Entries in the\
                    docsDevFilterPolicy table can point to\
                    specific rows in this table.\
\
                    This table permits mapping a packet to a service\
                    class name of an active service flow so long as\
                    a classifier does not exist at a higher\
                    priority."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix E.2.1"\
    ::= { docsIetfQosMIBObjects 9 }\
\
docsIetfQosServiceClassPolicyEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosServiceClassPolicyEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "A service class name policy entry."\
    INDEX {\
            docsIetfQosServiceClassPolicyIndex\
          }\
    ::= { docsIetfQosServiceClassPolicyTable 1 }\
\
DocsIetfQosServiceClassPolicyEntry ::= SEQUENCE {\
    docsIetfQosServiceClassPolicyIndex        Unsigned32,\
    docsIetfQosServiceClassPolicyName         SnmpAdminString,\
    docsIetfQosServiceClassPolicyRulePriority Integer32,\
    docsIetfQosServiceClassPolicyStatus       RowStatus,\
    docsIetfQosServiceClassPolicyStorageType  StorageType\
    }\
\
docsIetfQosServiceClassPolicyIndex OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..2147483647)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "Index value to identify an entry in\
                    this table uniquely."\
    ::= { docsIetfQosServiceClassPolicyEntry 1 }\
\
docsIetfQosServiceClassPolicyName OBJECT-TYPE\
    SYNTAX          SnmpAdminString\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Service Class Name to identify the name of the\
                    service class flow to which the packet should be\
                    directed."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix E.2.1"\
    ::= { docsIetfQosServiceClassPolicyEntry 2 }\
\
docsIetfQosServiceClassPolicyRulePriority OBJECT-TYPE\
\
\
\
Patrick & Murwin            Standards Track                    [Page 73]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    SYNTAX          Integer32 (0..255)\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Service Class Policy rule priority for the\
                    entry."\
    REFERENCE      "SP-RFIv2.0-I06-040804, Appendix C.2.1.3.5"\
    ::= { docsIetfQosServiceClassPolicyEntry 3 }\
\
docsIetfQosServiceClassPolicyStatus OBJECT-TYPE\
    SYNTAX          RowStatus\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "Used to create or delete rows in this table.\
                    This object should not be deleted if it is\
                    referenced by an entry in docsDevFilterPolicy.\
                    The reference should be deleted first.\
                    There is no restriction on the ability\
                    to change values in this row while the row is\
                    active.  Inactive rows need not be timed out."\
    ::= { docsIetfQosServiceClassPolicyEntry 4 }\
\
docsIetfQosServiceClassPolicyStorageType OBJECT-TYPE\
    SYNTAX          StorageType\
    MAX-ACCESS      read-create\
    STATUS          current\
    DESCRIPTION    "This object defines whether this row is kept in\
                    volatile storage and lost upon reboot or whether\
                    it is backed up by non-volatile or permanent\
                    storage.  'permanent' entries need not allow\
                    writable access to any object."\
    DEFVAL { nonVolatile }\
    ::= { docsIetfQosServiceClassPolicyEntry 5 }\
\
--\
-- Payload Header Suppression(PHS) Table\
--\
docsIetfQosPHSTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosPHSEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table describes the set of payload header\
                    suppression entries."\
    ::= { docsIetfQosMIBObjects 10 }\
\
docsIetfQosPHSEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosPHSEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 74]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "A payload header suppression entry.\
\
                    The ifIndex is an ifType of docsCableMaclayer(127).\
                    The index docsIetfQosServiceFlowId selects one\
                    service flow from the cable MAC layer interface.\
                    The docsIetfQosPktClassId index matches an\
                    index of the docsIetfQosPktClassTable."\
    INDEX {\
            ifIndex,\
            docsIetfQosServiceFlowId,\
            docsIetfQosPktClassId\
          }\
    ::= { docsIetfQosPHSTable 1 }\
\
DocsIetfQosPHSEntry ::= SEQUENCE {\
    docsIetfQosPHSField            OCTET STRING,\
    docsIetfQosPHSMask             OCTET STRING,\
    docsIetfQosPHSSize             Integer32,\
    docsIetfQosPHSVerify           TruthValue,\
    docsIetfQosPHSIndex            Integer32\
    }\
\
docsIetfQosPHSField         OBJECT-TYPE\
    SYNTAX          OCTET STRING (SIZE(0..255))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Payload header suppression field defines the\
                    bytes of the header that must be\
                    suppressed/restored by the sending/receiving\
                    device.\
\
                    The number of octets in this object should be\
                    the same as the value of docsIetfQosPHSSize."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.2.10.1"\
    ::= { docsIetfQosPHSEntry 1 }\
\
docsIetfQosPHSMask          OBJECT-TYPE\
    SYNTAX          OCTET STRING(SIZE(0..32))\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Payload header suppression mask defines the\
                    bit mask that is used in combination with the\
                    docsIetfQosPHSField.  It defines which bytes in\
                    the header must be suppressed/restored by the\
                    sending or receiving device.\
\
                    Each bit of this bit mask corresponds to a byte\
                    in the docsIetfQosPHSField, with the least\
\
\
\
Patrick & Murwin            Standards Track                    [Page 75]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    significant bit corresponding to the first byte\
                    of the docsIetfQosPHSField.\
\
                    Each bit of the bit mask specifies whether\
                    the corresponding byte should be suppressed\
                    in the packet.  A bit value of '1' indicates that\
                    the byte should be suppressed by the sending\
                    device and restored by the receiving device.\
                    A bit value of '0' indicates that\
                    the byte should not be suppressed by the sending\
                    device or restored by the receiving device.\
\
                    If the bit mask does not contain a bit for each\
                    byte in the docsIetfQosPHSField, then the bit mask\
                    is extended with bit values of '1' to be the\
                    necessary length."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.2.10.3"\
    ::= { docsIetfQosPHSEntry 2 }\
\
docsIetfQosPHSSize          OBJECT-TYPE\
    SYNTAX          Integer32 (0..255)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Payload header suppression size specifies the\
                    number of bytes in the header to be suppressed\
                    and restored.\
\
                    The value of this object must match the number\
                    of bytes in the docsIetfQosPHSField."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.2.10.4"\
    ::= { docsIetfQosPHSEntry 3 }\
\
docsIetfQosPHSVerify       OBJECT-TYPE\
    SYNTAX          TruthValue\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Payload header suppression verification value.  If\
                    'true', the sender must verify docsIetfQosPHSField\
                    is the same as what is contained in the packet\
                    to be suppressed."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.2.10.5"\
    ::= { docsIetfQosPHSEntry 4 }\
\
docsIetfQosPHSIndex         OBJECT-TYPE\
    SYNTAX          Integer32 (1..255)\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "Payload header suppression index uniquely\
\
\
\
Patrick & Murwin            Standards Track                    [Page 76]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
                    references the PHS rule for a given service flow."\
    REFERENCE       "SP-RFIv2.0-I06-040804, Appendix C.2.2.10.2"\
    ::= { docsIetfQosPHSEntry 5 }\
\
\
--\
-- docsIetfQosCmtsMacToSrvFlowTable (CMTS Only)\
--\
docsIetfQosCmtsMacToSrvFlowTable OBJECT-TYPE\
    SYNTAX          SEQUENCE OF DocsIetfQosCmtsMacToSrvFlowEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "This table provides for referencing the service\
                    flows associated with a particular cable modem.\
                    This allows indexing into other docsIetfQos\
                    tables that are indexed by docsIetfQosServiceFlowId\
                    and ifIndex."\
    ::= { docsIetfQosMIBObjects 11 }\
\
docsIetfQosCmtsMacToSrvFlowEntry OBJECT-TYPE\
    SYNTAX          DocsIetfQosCmtsMacToSrvFlowEntry\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "An entry is created by CMTS for each service flow\
                    connected to this CMTS."\
    INDEX {\
            docsIetfQosCmtsCmMac,\
            docsIetfQosCmtsServiceFlowId\
          }\
    ::= { docsIetfQosCmtsMacToSrvFlowTable 1 }\
\
DocsIetfQosCmtsMacToSrvFlowEntry ::= SEQUENCE {\
    docsIetfQosCmtsCmMac                MacAddress,\
    docsIetfQosCmtsServiceFlowId        Unsigned32,\
    docsIetfQosCmtsIfIndex              InterfaceIndex\
    }\
\
docsIetfQosCmtsCmMac OBJECT-TYPE\
    SYNTAX          MacAddress\
    MAX-ACCESS      not-accessible\
    STATUS          current\
    DESCRIPTION    "The MAC address for the referenced CM."\
    ::= { docsIetfQosCmtsMacToSrvFlowEntry 1 }\
\
docsIetfQosCmtsServiceFlowId OBJECT-TYPE\
    SYNTAX          Unsigned32 (1..4294967295)\
    MAX-ACCESS      not-accessible\
    STATUS          current\
\
\
\
Patrick & Murwin            Standards Track                    [Page 77]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    DESCRIPTION    "An index assigned to a service flow by CMTS."\
    ::= { docsIetfQosCmtsMacToSrvFlowEntry 2 }\
\
docsIetfQosCmtsIfIndex OBJECT-TYPE\
    SYNTAX          InterfaceIndex\
    MAX-ACCESS      read-only\
    STATUS          current\
    DESCRIPTION    "The ifIndex of ifType docsCableMacLayer(127)\
                    on the CMTS that is connected to the Cable Modem."\
    ::= { docsIetfQosCmtsMacToSrvFlowEntry 3 }\
\
--\
-- Conformance definitions\
--\
docsIetfQosConformance  OBJECT IDENTIFIER\
        ::= { docsIetfQosMIB 2 }\
\
docsIetfQosGroups       OBJECT IDENTIFIER\
        ::= { docsIetfQosConformance 1 }\
\
docsIetfQosCompliances  OBJECT IDENTIFIER\
        ::= { docsIetfQosConformance 2 }\
\
docsIetfQosCompliance MODULE-COMPLIANCE\
    STATUS  current\
    DESCRIPTION\
        "The compliance statement for MCNS Cable Modems and\
         Cable Modem Termination Systems that implement DOCSIS\
         Service Flows."\
\
    MODULE  -- docsIetfQosMIB\
        MANDATORY-GROUPS { docsIetfQosBaseGroup }\
\
        GROUP docsIetfQosCmtsGroup\
        DESCRIPTION\
            "This group is mandatory for Cable Modem Termination\
             Systems (CMTS) and is not implemented for Cable Modems\
             (CM)."\
\
        GROUP docsIetfQosParamSetGroup\
        DESCRIPTION\
            "This group is mandatory for Cable Modem Termination\
             Systems (CMTS) and Cable Modems.  Cable modems only\
             implement objects in this group as read-only."\
\
        GROUP docsIetfQosSrvClassPolicyGroup\
        DESCRIPTION\
            "This group is optional for Cable Modem Termination\
\
\
\
Patrick & Murwin            Standards Track                    [Page 78]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
             Systems (CMTS) and Cable Modems.  This group is relevant\
             if policy-based service flow classification\
             is implemented.  See docsDevPolicyTable in\
             DOCS-CABLE-DEVICE-MIB for more details."\
\
        GROUP docsIetfQosServiceClassGroup\
        DESCRIPTION\
            "This group is mandatory for a Cable Modem Termination\
             System (CMTS) that implements expansion of Service Class\
             Names in a QOS Parameter Set.  This group is\
             not implemented on the Cable Modems."\
\
        OBJECT  docsIetfQosPktClassPkts\
        DESCRIPTION\
            "This object only needs to be implemented in entries\
             that are classifying packets and not policing packets."\
\
        OBJECT  docsIetfQosPktClassInetAddressType\
        SYNTAX InetAddressType { ipv4(1) }\
        DESCRIPTION\
            "An implementation is only required to support IPv4\
             address."\
\
        OBJECT  docsIetfQosPktClassInetSourceAddr\
        SYNTAX InetAddress (SIZE(4))\
        DESCRIPTION\
            "An implementation is only required to support IPv4\
             address."\
\
        OBJECT  docsIetfQosPktClassInetSourceMask\
        SYNTAX InetAddress (SIZE(4))\
        DESCRIPTION\
            "An implementation is only required to support IPv4\
             address."\
\
        OBJECT  docsIetfQosPktClassInetDestAddr\
        SYNTAX InetAddress (SIZE(4))\
        DESCRIPTION\
            "An implementation is only required to support IPv4\
             address."\
\
        OBJECT  docsIetfQosPktClassInetDestMask\
        SYNTAX InetAddress (SIZE(4))\
        DESCRIPTION\
            "An implementation is only required to support IPv4\
             address."\
\
        OBJECT  docsIetfQosServiceClassStorageType\
\
\
\
Patrick & Murwin            Standards Track                    [Page 79]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
        SYNTAX StorageType { nonVolatile(3) }\
        DESCRIPTION\
            "An implementation is only required to support nonvolatile\
             storage."\
\
        OBJECT  docsIetfQosServiceClassPolicyStorageType\
        SYNTAX StorageType { nonVolatile(3) }\
        DESCRIPTION\
            "An implementation is only required to support nonvolatile\
             storage."\
\
    ::= { docsIetfQosCompliances 1 }\
\
docsIetfQosBaseGroup OBJECT-GROUP\
    OBJECTS {\
    docsIetfQosPktClassDirection,\
    docsIetfQosPktClassPriority,\
    docsIetfQosPktClassIpTosLow,\
    docsIetfQosPktClassIpTosHigh,\
    docsIetfQosPktClassIpTosMask,\
    docsIetfQosPktClassIpProtocol,\
    docsIetfQosPktClassSourcePortStart,\
    docsIetfQosPktClassSourcePortEnd,\
    docsIetfQosPktClassDestPortStart,\
    docsIetfQosPktClassDestPortEnd,\
    docsIetfQosPktClassDestMacAddr,\
    docsIetfQosPktClassDestMacMask,\
    docsIetfQosPktClassSourceMacAddr,\
    docsIetfQosPktClassEnetProtocolType,\
    docsIetfQosPktClassEnetProtocol,\
    docsIetfQosPktClassUserPriLow,\
    docsIetfQosPktClassUserPriHigh,\
    docsIetfQosPktClassVlanId,\
    docsIetfQosPktClassStateActive,\
    docsIetfQosPktClassPkts,\
    docsIetfQosPktClassBitMap,\
    docsIetfQosPktClassInetAddressType,\
    docsIetfQosPktClassInetSourceAddr,\
    docsIetfQosPktClassInetSourceMask,\
    docsIetfQosPktClassInetDestAddr,\
    docsIetfQosPktClassInetDestMask,\
\
    docsIetfQosServiceFlowSID,\
    docsIetfQosServiceFlowDirection,\
    docsIetfQosServiceFlowPrimary,\
\
    docsIetfQosServiceFlowPkts,\
    docsIetfQosServiceFlowOctets,\
\
\
\
Patrick & Murwin            Standards Track                    [Page 80]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    docsIetfQosServiceFlowTimeCreated,\
    docsIetfQosServiceFlowTimeActive,\
    docsIetfQosServiceFlowPHSUnknowns,\
    docsIetfQosServiceFlowPolicedDropPkts,\
    docsIetfQosServiceFlowPolicedDelayPkts,\
\
    docsIetfQosDSAReqs,\
    docsIetfQosDSARsps,\
    docsIetfQosDSAAcks,\
    docsIetfQosDSCReqs,\
    docsIetfQosDSCRsps,\
    docsIetfQosDSCAcks,\
    docsIetfQosDSDReqs,\
    docsIetfQosDSDRsps,\
    docsIetfQosDynamicAdds,\
    docsIetfQosDynamicAddFails,\
    docsIetfQosDynamicChanges,\
    docsIetfQosDynamicChangeFails,\
    docsIetfQosDynamicDeletes,\
    docsIetfQosDynamicDeleteFails,\
    docsIetfQosDCCReqs,\
    docsIetfQosDCCRsps,\
    docsIetfQosDCCAcks,\
    docsIetfQosDCCs,\
    docsIetfQosDCCFails,\
\
    docsIetfQosPHSField,\
    docsIetfQosPHSMask,\
    docsIetfQosPHSSize,\
    docsIetfQosPHSVerify,\
    docsIetfQosPHSIndex\
    }\
    STATUS  current\
    DESCRIPTION\
        "Group of objects implemented in both Cable Modems and\
         Cable Modem Termination Systems."\
    ::= { docsIetfQosGroups 1 }\
\
docsIetfQosParamSetGroup OBJECT-GROUP\
    OBJECTS {\
    docsIetfQosParamSetServiceClassName,\
    docsIetfQosParamSetPriority,\
    docsIetfQosParamSetMaxTrafficRate,\
    docsIetfQosParamSetMaxTrafficBurst,\
    docsIetfQosParamSetMinReservedRate,\
    docsIetfQosParamSetMinReservedPkt,\
    docsIetfQosParamSetActiveTimeout,\
    docsIetfQosParamSetAdmittedTimeout,\
\
\
\
Patrick & Murwin            Standards Track                    [Page 81]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    docsIetfQosParamSetMaxConcatBurst,\
    docsIetfQosParamSetSchedulingType,\
    docsIetfQosParamSetNomPollInterval,\
    docsIetfQosParamSetTolPollJitter,\
    docsIetfQosParamSetUnsolicitGrantSize,\
    docsIetfQosParamSetNomGrantInterval,\
    docsIetfQosParamSetTolGrantJitter,\
    docsIetfQosParamSetGrantsPerInterval,\
    docsIetfQosParamSetTosAndMask,\
    docsIetfQosParamSetTosOrMask,\
    docsIetfQosParamSetMaxLatency,\
    docsIetfQosParamSetRequestPolicyOct,\
    docsIetfQosParamSetBitMap\
    }\
    STATUS  current\
    DESCRIPTION\
        "Group of objects implemented in both Cable Modems and\
         Cable Modem Termination Systems for QOS Parameter Sets."\
    ::= { docsIetfQosGroups 2 }\
\
\
docsIetfQosCmtsGroup OBJECT-GROUP\
    OBJECTS {\
\
    docsIetfQosUpstreamFragments,\
    docsIetfQosUpstreamFragDiscards,\
    docsIetfQosUpstreamConcatBursts,\
\
    docsIetfQosServiceFlowLogIfIndex,\
    docsIetfQosServiceFlowLogSFID,\
    docsIetfQosServiceFlowLogCmMac,\
    docsIetfQosServiceFlowLogPkts,\
    docsIetfQosServiceFlowLogOctets,\
    docsIetfQosServiceFlowLogTimeDeleted,\
    docsIetfQosServiceFlowLogTimeCreated,\
    docsIetfQosServiceFlowLogTimeActive,\
    docsIetfQosServiceFlowLogDirection,\
    docsIetfQosServiceFlowLogPrimary,\
    docsIetfQosServiceFlowLogServiceClassName,\
    docsIetfQosServiceFlowLogPolicedDropPkts,\
    docsIetfQosServiceFlowLogPolicedDelayPkts,\
    docsIetfQosServiceFlowLogControl,\
\
    docsIetfQosCmtsIfIndex -- docsIetfQosCmtsMacToSrvFlowTable required\
\
    }\
    STATUS  current\
    DESCRIPTION\
\
\
\
Patrick & Murwin            Standards Track                    [Page 82]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
        "Group of objects implemented only in the CMTS."\
    ::= { docsIetfQosGroups 3 }\
\
docsIetfQosSrvClassPolicyGroup OBJECT-GROUP\
    OBJECTS {\
    docsIetfQosServiceClassPolicyName,\
    docsIetfQosServiceClassPolicyRulePriority,\
    docsIetfQosServiceClassPolicyStatus,\
    docsIetfQosServiceClassPolicyStorageType\
    }\
    STATUS  current\
    DESCRIPTION\
        "Group of objects implemented in both Cable Modems and\
         Cable Modem Termination Systems when supporting policy-based\
         service flows."\
    ::= { docsIetfQosGroups 4 }\
\
docsIetfQosServiceClassGroup OBJECT-GROUP\
    OBJECTS {\
    docsIetfQosServiceClassStatus,\
    docsIetfQosServiceClassPriority,\
    docsIetfQosServiceClassMaxTrafficRate,\
    docsIetfQosServiceClassMaxTrafficBurst,\
    docsIetfQosServiceClassMinReservedRate,\
    docsIetfQosServiceClassMinReservedPkt,\
    docsIetfQosServiceClassMaxConcatBurst,\
    docsIetfQosServiceClassNomPollInterval,\
    docsIetfQosServiceClassTolPollJitter,\
    docsIetfQosServiceClassUnsolicitGrantSize,\
    docsIetfQosServiceClassNomGrantInterval,\
    docsIetfQosServiceClassTolGrantJitter,\
    docsIetfQosServiceClassGrantsPerInterval,\
    docsIetfQosServiceClassMaxLatency,\
    docsIetfQosServiceClassActiveTimeout,\
    docsIetfQosServiceClassAdmittedTimeout,\
    docsIetfQosServiceClassSchedulingType,\
    docsIetfQosServiceClassRequestPolicy,\
    docsIetfQosServiceClassTosAndMask,\
    docsIetfQosServiceClassTosOrMask,\
    docsIetfQosServiceClassDirection,\
    docsIetfQosServiceClassStorageType,\
    docsIetfQosServiceClassDSCPOverwrite\
    }\
    STATUS  current\
    DESCRIPTION\
        "Group of objects implemented only in Cable Modem\
         Termination Systems when supporting expansion of Service\
         Class Names in a QOS Parameter Set"\
\
\
\
Patrick & Murwin            Standards Track                    [Page 83]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
    ::= { docsIetfQosGroups 5 }\
\
END\
\
6.  Security Considerations\
\
   This MIB module relates to an agent that will provide metropolitan\
   public Internet access.  As such, improper manipulation of the\
   objects represented by this MIB module may result in denial of\
   service to a large number of end-users [6].  Manipulation of the\
   docsIetfQosServiceClassTable and docsIetfQosServiceClassPolicyTable\
   may allow an end-user to increase his or her service levels, or\
   affect other end-users in either a positive or negative manner.  In\
   addition, manipulation of docsIetfQosServiceFlowLogControl could\
   allow an attacker to remove logs of packet and byte counts forwarded\
   on a Service Flow.  If such logs were used for billing, the attacker\
   would obtain free service.\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write and/or read-create.  Such\
   objects may be considered sensitive or vulnerable in some network\
   environments.  The support for SET operations in a non-secure\
   environment without proper protection can have a negative effect on\
   network operations.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
     o    The docsIetfQosServiceClassTable provides a template of QOS\
          parameters such as maximum rate limits for a named service\
          class.  Changing these parameters would allow an attacker to\
          obtain an unauthorized class of service.\
\
     o    The docsIetfQosServiceClassPolicyTable applies CMTS vendor\
          proprietary policies for packet forwarding, including\
          dropping, scheduling, notification, or other policies.\
          Changing this table could allow an attacker to deny service to\
          all subscribers of the CMTS or could grant the attacker\
          unauthorized forwarding policies.\
\
     o    The docsIetfQosServiceFlowLogControl object controls the\
          deletion of entries in the docsIetfQosServiceFlowLogTable,\
          which acts as a historical "detail record" of DOCSIS Service\
          Flow packets and bytes transmitted.  Such records may be used\
          for billing purposes, so the unauthorized deletion of the\
          records can result in free service.\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
\
\
\
Patrick & Murwin            Standards Track                    [Page 84]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   control even GET access to these objects and possibly to even encrypt\
   the values of these objects when sending them over the network via\
   SNMP.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
     o    Unauthorized SNMP GET access of the docsIetfQosPktClassTable\
          or docsIetfQosPHSTable can allow an attacker to learn IP\
          addresses permitted to have enhanced quality of service, for\
          possible spoofing.  This table typically contains the IP\
          addresses involved in voice-over-IP sessions, for example.\
\
     o    Unauthorized SNMP GET access of the docsIetfQosParamSetTable\
          allows an attacker to learn the names of Service Classes that\
          are permitted to have enhanced QoS service, and the values of\
          that enhanced service.  That name can be referenced in an\
          unauthorized DOCSIS cable modem configuration file to obtain\
          enhanced service.\
\
     o    Unauthorized SNMP GET access of the\
          docsIetfQosServiceFlowTable can tell an attacker when Service\
          Flows are active, e.g., when a voice-over-IP call is in\
          progress.\
\
          Unauthorized SNMP GET access of the\
          docsIetfQosServiceFlowLogTable can expose private information\
          about network usage.\
\
     o    Unauthorized SNMP GET access of the\
          docsIetfQosServiceFlowStatsTable,\
          docsIetfQosUpstreamStatsTable,\
          docsIetfQosDynamicServiceStatsTable,\
          docsIetfQosServiceFlowLogTable, and\
          docsIetfQosCmtsMacToSrvFlowTable can tell an attacker the\
          volume of traffic to and from any Service Flow in the system,\
          resulting in loss of privacy of the amount and direction of\
          data transfer.\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPSec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.  It is RECOMMENDED that implementers consider the\
   security features as provided by the SNMPv3 framework (see [15],\
   section 8), including full support for the SNMPv3 cryptographic\
   mechanisms (for authentication and privacy).  Further, deployment of\
   SNMP versions prior to SNMPv3 is NOT RECOMMENDED.  Instead, it is\
   RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.\
   It is then a customer/operator responsibility to ensure that the SNMP\
\
\
\
Patrick & Murwin            Standards Track                    [Page 85]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   entity giving access to an instance of this MIB module, is properly\
   configured to give access to the objects only to those principals\
   (users) that have legitimate rights to indeed GET or SET\
   (change/create/delete) them.\
\
7.  IANA Considerations\
\
   The MIB module in this document uses the following IANA-assigned\
   OBJECT IDENTIFIER values recorded in the SMI Numbers registry:\
\
   Descriptor        OBJECT IDENTIFIER Value\
   --------------    -----------------------\
   docsIetfQosMIB    { mib-2 127 }\
\
8.  Acknowledgements\
\
   The authors gratefully acknowledge the comments and suggestions of\
   the IP over Cable Data Network (IPCDN) Working Group (especially the\
   co-chairs Richard Woundy and Jean-Francois Mule) as well as the\
   contributions of the Operation and Management Area Director, Bert\
   Wijnen.\
\
9.  Normative References\
\
   [1]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Structure of\
        Management Information Version 2 (SMIv2)", STD 58, RFC 2578,\
        April 1999.\
\
   [2]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Textual\
        Conventions for SMIv2", STD 58, RFC 2579, April 1999.\
\
   [3]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Conformance\
        Statements for SMIv2", STD 58, RFC 2580, April 1999.\
\
   [4]  "Data-Over-Cable Service Interface Specifications:  Radio\
        Frequency Interface Specification SP-RFIv2.0-I06-040804",\
        DOCSIS, August 2004,\
        http://www.cablelabs.com/specifications/archives/.\
\
   [5]  Bradner, S., "Key words for use in RFCs to Indicate Requirement\
        Levels", BCP 14, RFC 2119, March 1997.\
\
   [6]  St. Johns, M., "Cable Device Management Information Base for\
        DOCSIS compliant Cable Modems and Cable Modem Termination\
        Systems", RFC 2669, August 1999.\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 86]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
   [7]  St. Johns, M., "Radio Frequency (RF) Interface Management\
        Information Base for MCNS/DOCSIS compliant RF interfaces", RFC\
        2670, August 1999.\
\
   [8]  Daniele, M., Haberman, B., Routhier, S., and J. Schoenwaelder,\
        "Textual Conventions for Internet Network Addresses", RFC 4001,\
        February 2005.\
\
   [9]  Grossman, D., "New Terminology and Clarifications for Diffserv",\
        RFC 3260, April 2002.\
\
   [10] Ramakrishnan, K., Floyd, S., and D. Black, "The Addition of\
        Explicit Congestion Notification (ECN) to IP", RFC 3168,\
        September 2001.\
\
   [11] McCloghrie, K. and F. Kastenholz, "The Interfaces Group MIB",\
        RFC 2863, June 2000.\
\
   [12] Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture for\
        Describing Simple Network Management Protocol (SNMP) Management\
        Frameworks", STD 62, RFC 3411, December 2002.\
\
   [13] Baker, F., Chan, K., and A. Smith, "Management Information Base\
        for the Differentiated Services Architecture", RFC 3289, May\
        2002.\
\
   [14] Postel, J., "Internet Protocol", STD 5, RFC 791, September 1981.\
\
10.  Informative References\
\
   [15] Case, J., Mundy, R., Partain, D., and B. Stewart, "Introduction\
        and Applicability Statements for Internet-Standard Management\
        Framework", RFC 3410, December 2002.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 87]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
Authors' Addresses\
\
   Michael Patrick\
   Motorola Broadband Communications Sector\
   111 Locke Drive\
   Marlborough, MA 01752\
\
   Phone: (508) 786-7563\
   EMail: michael.patrick@motorola.com\
\
\
   William Murwin\
   Motorola Broadband Communications Sector\
   111 Locke Drive\
   Marlborough, MA 01752\
\
   Phone: (508) 786-7594\
   EMail: w.murwin@motorola.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 88]\
\
RFC 4323                  IPCDN DOCSIS QoS MIB              January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Patrick & Murwin            Standards Track                    [Page 89]\
\

doc 12
  field 0
    name titolo
    type string
    value rfc4327.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           M. Dubuc\
Request for Comments: 4327                                     T. Nadeau\
Category: Standards Track                                  Cisco Systems\
                                                                 J. Lang\
                                                             Sonos, Inc.\
                                                             E. McGinnis\
                                                      Hammerhead Systems\
                                                            January 2006\
\
\
    Link Management Protocol (LMP) Management Information Base (MIB)\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This memo defines a portion of the Management Information Base (MIB)\
   for use with network management protocols in the Internet community.\
   In particular, it describes managed objects for modeling the Link\
   Management Protocol (LMP).\
\
Table of Contents\
\
   1. The Internet-Standard Management Framework ......................2\
   2. Introduction ....................................................2\
   3. Terminology .....................................................3\
   4. Feature Checklist ...............................................3\
   5. Outline .........................................................4\
   6. Brief Description of MIB Objects ................................4\
      6.1. lmpNbrTable ................................................4\
      6.2. lmpControlChannelTable .....................................4\
      6.3. lmpControlChannelPerfTable .................................4\
      6.4. lmpTeLinkTable .............................................5\
      6.5. lmpLinkVerificationTable ...................................5\
      6.6. lmpTeLinkPerfTable .........................................5\
      6.7. lmpDataLinkTable ...........................................5\
      6.8. lmpDataLinkPerfTable .......................................5\
   7. Example of LMP Control Channel Setup ............................5\
\
\
\
Dubuc, et al.               Standards Track                     [Page 1]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   8. Application of the Interfaces Group to LMP ......................8\
      8.1. Support of the LMP Layer by ifTable ........................9\
   9. LMP MIB Module Definitions .....................................11\
   10. Security Considerations .......................................77\
   11. Contributors ..................................................78\
   12. Acknowledgements ..............................................78\
   13. IANA Considerations ...........................................78\
      13.1. IANA Considerations for lmp ifType .......................78\
      13.2. IANA Considerations for LMP-MIB ..........................78\
   14. References ....................................................79\
      14.1. Normative References .....................................79\
      14.2. Informative References ...................................80\
\
1.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to section 7 of\
   RFC 3410 [RFC3410].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\
   [RFC2580].\
\
2.  Introduction\
\
   Current work is under way in the IETF to specify a suite of protocols\
   to be used as a common control plane and a separate common\
   measurement plane.  Generalized MPLS (GMPLS) [RFC3471] and the Link\
   Management Protocol [RFC4204] are key components of this\
   standardization activity.  The primary purpose of LMP is to manage\
   traffic engineering (TE) links.  Primary goals of LMP are the\
   maintenance of the control channel connectivity, correlation of link\
   properties, verification of data-bearing links, and detection and\
   isolation of link faults.\
\
   We describe in this document a MIB module that can be used to manage\
   LMP implementations.  This MIB module covers both configuration and\
   performance monitoring aspects of LMP.\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [RFC2119].\
\
\
\
\
Dubuc, et al.               Standards Track                     [Page 2]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
3.  Terminology\
\
   This document uses terminology from the document describing the Link\
   Management Protocol [RFC4204].  An "LMP adjacency" is formed between\
   two nodes that support the same capabilities, and LMP messages are\
   exchanged between the node pair over control channels that form this\
   adjacency.  Several control channels can be active at the same time.\
   With the exception of messages related to control channel management,\
   anytime an LMP message needs to be transferred to a neighbor node, it\
   can be sent on any of the active control channels.  The control\
   channels can also be used to exchange MPLS control plane information\
   or routing information.\
\
   LMP is designed to support aggregation of one or more data-bearing\
   links into a traffic-engineering (TE) link.  The data-bearing links\
   can be either component links or ports depending on their\
   multiplexing capability (see [RFC4204] for distinction between port\
   and component link).\
\
   Each TE link is associated with an LMP adjacency, and one or more\
   control channels are used to exchange LMP messages for a particular\
   adjacency.  In turn, control channels are used to manage the TE links\
   associated with the LMP adjacency.\
\
4.  Feature Checklist\
\
   The Link Management Protocol MIB module (LMP-MIB) is designed to\
   satisfy the following requirements and constraints:\
\
   -  The MIB module supports the enabling and disabling of LMP\
      capability on LMP-capable interfaces of a photonic switch, optical\
      cross-connect, or router.\
\
   -  The MIB module is used to provide information about LMP\
      adjacencies.\
\
   -  Support is provided for configuration of the keep alive and link\
      verification parameters.\
\
   -  The MIB module is used to express the mapping between local and\
      remote TE links, as well as local and remote interface identifiers\
      for port or component link.\
\
   -  Performance counters are provided for measuring LMP performance on\
      a per-control channel basis.  Performance counters are also\
      provided for measuring LMP performance on the data-bearing links.\
\
\
\
\
\
Dubuc, et al.               Standards Track                     [Page 3]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   Note that the LMP MIB module goes hand-in-hand with the TE Link\
   (TE-LINK-STD-MIB) MIB module [RFC4220].  The TE link table, which is\
   used to associate data-bearing links to TE links, is defined in the\
   TE Link MIB.  The TE link table in the LMP MIB module contains TE\
   link information specific to LMP.\
\
5.  Outline\
\
   Configuring LMP through an optical device involves the following\
   steps:\
\
   -  Enabling LMP on LMP-capable interfaces through control channel\
      configuration.\
\
   -  Optionally specifying link verification parameters.\
\
   -  Configuring the data-bearing links and associating them to the\
      appropriate TE link (this association is stored in the\
      ifStackTable of the Interfaces Group MIB).\
\
   TE links are managed by the control channels that run between the\
   same pair of nodes (LMP adjacency).\
\
6.  Brief Description of MIB Objects\
\
   Sections 6.1-6.8 describe objects pertaining to LMP.  The MIB objects\
   were derived from the LMP document [RFC4204].\
\
6.1.  lmpNbrTable\
\
   The remote node table is used to identify the pair of nodes that\
   exchange LMP messages over control channels.\
\
6.2.  lmpControlChannelTable\
\
   The control channel table is used for enabling the LMP protocol on\
   LMP-capable interfaces.  A photonic switch, optical cross-connect, or\
   router creates an entry in this table for every LMP-capable interface\
   in that device.\
\
6.3.  lmpControlChannelPerfTable\
\
   The control channel performance table is used for collecting LMP\
   performance counts on a per-control channel basis.  Each entry in the\
   lmpControlChannelTable has a corresponding entry in the\
   lmpControlChannelPerfTable.\
\
\
\
\
\
Dubuc, et al.               Standards Track                     [Page 4]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
6.4.  lmpTeLinkTable\
\
   The TE link table is used for specifying LMP information associated\
   with TE links.\
\
6.5.  lmpLinkVerificationTable\
\
   The link verification table is used for configuring the LMP link\
   verification parameters of TE links.  For every TE link entry in the\
   lmpTeLinkTable that supports the link verification procedure, there\
   is a corresponding entry in the lmpLinkVerificationTable.\
\
6.6.  lmpTeLinkPerfTable\
\
   The TE link performance table is used for collecting LMP performance\
   counts on a per-TE link basis.  Each entry in the lmpTeLinkTable has\
   a corresponding entry in the lmpTeLinkPerfTable.\
\
6.7.  lmpDataLinkTable\
\
   The data-bearing link table is used to specify the data-bearing links\
   that are associated with TE links.\
\
6.8.  lmpDataLinkPerfTable\
\
   The data-bearing link performance table is used for collecting LMP\
   performance counts on data-bearing links.\
\
7.  Example of LMP Control Channel Setup\
\
   In this section, we provide a brief example of using the MIB\
   objects described in section 9 to set up an LMP control channel.\
   While this example is not meant to illustrate every nuance of the\
   MIB module, it is intended as an aid to understanding some of the\
   key concepts.  It is meant to be read after going through the MIB\
   itself.\
\
   Suppose that one would like to form an LMP adjacency between two\
   nodes using two control channels.  Suppose also that there are\
   three data-bearing links.  We also assume that the data-bearing\
   links are ports (lambdas).  We also assume that the link\
   verification procedure is not enabled.  The following example\
   illustrates which rows and corresponding objects might be created\
   to accomplish this.\
\
   First, LMP must be enabled between the pair of nodes.\
\
\
\
\
\
Dubuc, et al.               Standards Track                     [Page 5]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   In lmpNbrTable:\
   {\
      lmpNbrNodeId                       = 'c0000201'H, -- 192.0.2.1\
      lmpNbrAdminStatus                  = up(1),\
      lmpNbrRowStatus                    = createAndGo(4),\
      lmpNbrStorageType                  = nonVolatile(3)\
   }\
\
   Then, the control channels must be set up.  These are created in\
   the lmpControlChannelTable.\
\
   In lmpControlChannelTable:\
   {\
      lmpCcId                           = 1,\
      lmpCcUnderlyingIfIndex            = 1,\
      lmpCcIsIf                         = false(1),\
      lmpCcAuthentication               = false(1),\
      lmpCcHelloInterval                = 15,\
      lmpCcHelloIntervalMin             = 15,\
      lmpCcHelloIntervalMax             = 1000,\
      lmpCcHelloDeadInterval            = 45,\
      lmpCcHelloDeadIntervalMin         = 45,\
      lmpCcHelloDeadIntervalMax         = 1000,\
      lmpCcAdminStatus                  = up(1),\
      lmpCcRowStatus                    = createAndGo(4),\
      lmpCcStorageType                  = nonVolatile(3)\
   }\
\
   {\
      lmpCcId                           = 2,\
      lmpCcUnderlyingIfIndex            = 2,\
      lmpCcIsIf                         = false(1),\
      lmpCcAuthentication               = false(1),\
      lmpCcHelloInterval                = 15,\
      lmpCcHelloIntervalMin             = 15,\
      lmpCcHelloIntervalMax             = 1000,\
      lmpCcHelloDeadInterval            = 45,\
      lmpCcHelloDeadIntervalMin         = 45,\
      lmpCcHelloDeadIntervalMax         = 1000,\
      lmpCcAdminStatus                  = up(1),\
      lmpCcRowStatus                    = createAndGo(4),\
      lmpCcStorageType                  = nonVolatile(3)\
   }\
\
   Next, the three data-bearing links are created.  For each data-\
   bearing link, an ifEntry with the same ifIndex needs to be created\
   beforehand.\
\
\
\
\
Dubuc, et al.               Standards Track                     [Page 6]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   In lmpDataLinkTable:\
   {\
      ifIndex                         = 41,\
      lmpDataLinkAddressType          = unknown(0),\
      lmpDataLinkIpAddr               = ''H,\
      lmpDataLinkRemoteIpAddress      = ''H,\
      lmpDataLinkRemoteIfId           = 47,\
      lmpDataLinkRowStatus            = createAndGo(4),\
      lmpDataLinkStorageType          = nonVolatile(3)\
   }\
\
   {\
      ifIndex                         = 43,\
      lmpDataLinkAddressType          = unknown(0),\
      lmpDataLinkIpAddr               = ''H,\
      lmpDataLinkRemoteIpAddress      = ''H,\
      lmpDataLinkRemoteIfId           = 42,\
      lmpDataLinkRowStatus            = createAndGo(4),\
      lmpDataLinkStorageType          = nonVolatile(3)\
   }\
\
   {\
      ifIndex                         = 44,\
      lmpDataLinkAddressType          = unknown(0),\
      lmpDataLinkIpAddr               = ''H,\
      lmpDataLinkRemoteIpAddress      = ''H,\
      lmpDataLinkRemoteIfId           = 48,\
      lmpDataLinkRowStatus            = createAndGo(4),\
      lmpDataLinkStorageType          = nonVolatile(3)\
   }\
\
   Note that the data-bearing link type (lmpDataLinkType) does\
   not need to be provisioned as it is automatically populated by the\
   node.  The definition of the protection role (primary or\
   secondary) for the data-bearing links is stored in the\
   componentLinkTable of the TE Link MIB module [RFC4220].\
\
   Then, a TE link is created as an ifEntry with ifType teLink in\
   the ifTable.\
\
   Once the TE link is created in the ifTable, a TE link entry\
   is created in the LMP MIB module to specify TE link information\
   specific to LMP.\
\
   In lmpTeLinkTable:\
   {\
      ifIndex                     = 20,\
      lmpTeLinkVerification       = true(2),\
\
\
\
Dubuc, et al.               Standards Track                     [Page 7]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      lmpTeLinkFaultManagement    = true(2),\
      lmpTeLinkDwdm               = false(1),\
      lmpTeLinkRowStatus          = createAndGo(4),\
      lmpTeLinkStorageType        = nonVolatile(3)\
   }\
\
   and in lmpLinkVerificationTable:\
   {\
      ifIndex                         = 20,\
      lmpLinkVerifyInterval           = 100,\
      lmpLinkVerifyDeadInterval       = 300,\
      lmpLinkVerifyTransportMechanism = j0Trace(3),\
      lmpLinkVerifyAllLinks           = true(2),\
      lmpLinkVerifyTransmissionRate   = 100000,\
      lmpLinkVerifyWavelength         = 0,\
      lmpLinkVerifyRowStatus          = createAndGo(4),\
      lmpLinkVerifyStorageType        = nonVolatile(3)\
   }\
\
   The association between the data-bearing links and the TE links is\
   stored in the ifStackTable [RFC2863].\
\
   In parallel with the entry created in the lmpTeLinkTable, an entry\
   may be created in the teLinkTable of TE Link MIB module\
   [RFC4220].\
\
8.  Application of the Interfaces Group to LMP\
\
   The Interfaces Group [RFC2863] defines generic managed objects for\
   managing interfaces.  This memo contains the media-specific\
   extensions to the Interfaces Group for managing LMP control channels\
   that are modeled as interfaces.  If the control channel as defined in\
   the lmpControlChannelTable is modeled as an ifEntry, then the\
   following definition applies.  An lmpControlChannelTable entry is\
   designated as being represented as an Interfaces MIB ifEntry if the\
   lmpControlChannelEntry object lmpCcIsIf is set to true (2).  In this\
   case, the control channel SHOULD be modeled as an ifEntry and\
   provide appropriate interface stacking as defined below.\
\
   This memo assumes the interpretation of the Interfaces Group to be\
   in accordance with [RFC2863], which states that the interfaces table\
   (ifTable) contains information on the managed resource's\
   interfaces and that each sub-layer below the internetwork layer of\
   a network interface is considered an interface.  Since the LMP\
   interface only carries control traffic, it is considered to be below\
   the internetwork layer.  Thus, the LMP interface may be represented\
   as an entry in the ifTable.  The interrelation of entries in the\
   ifTable is defined by Interfaces Stack Group defined in [RFC2863].\
\
\
\
Dubuc, et al.               Standards Track                     [Page 8]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   When LMP control channels are modeled as interfaces, the interface\
   stack table must appear as follows for the LMP control channel\
   interfaces:\
\
   +----------------------------------------+\
   | LMP-interface ifType = lmp(227)        +\
   +----------------------------------------+\
   | Underlying Layer...                    +\
   +----------------------------------------+\
\
   In the above diagram, "Underlying Layer..." refers to the ifIndex\
   of any interface type over which the LMP interface will transmit\
   its traffic.  Note that if the underlying layer provides multiple\
   access to its media (i.e., Ethernet), then it is possible to stack\
   multiple LMP interfaces on top of this interface in parallel.\
\
   Note that it is not a requirement that LMP control channels be\
   modeled as interfaces.  It is acceptable that control channels\
   simply exist as logical connections between adjacent LMP-capable\
   nodes.  In this case, lmpCcIsIf is set to false(2) and no\
   corresponding entry is made in the ifTable.\
\
8.1.  Support of the LMP Layer by ifTable\
\
   Some specific interpretations of ifTable for the LMP layer\
   follow.\
\
   Object        Use for the LMP layer.\
\
   ifIndex       Each LMP interface may be represented by an ifEntry.\
\
   ifDescr       Description of the LMP interface.\
\
   ifType        The value that is allocated for LMP is 227.\
                 This number has been assigned by the IANA.\
\
   ifSpeed       The total bandwidth in bits per second for use by\
                 the LMP layer.\
\
   ifPhysAddress Unused.\
\
   ifAdminStatus This variable indicates the administrator's intent\
                 as to whether LMP should be enabled, disabled, or\
                 running in some diagnostic testing mode on this\
                 interface.  Also see [RFC2863].\
\
   ifOperStatus  This value reflects the actual or operational\
                 status of LMP on this interface.\
\
\
\
Dubuc, et al.               Standards Track                     [Page 9]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   ifLastChange  See [RFC2863].\
\
   ifInOctets    The number of received octets over the interface,\
                 i.e., the number of octets received as LMP\
                 packets.\
\
   ifOutOctets   The number of transmitted octets over the\
                 interface, i.e., the number of octets transmitted\
                 as LMP packets.\
\
   ifInErrors    The number of LMP packets dropped due to\
                 uncorrectable errors.\
\
   ifInUnknownProtos\
                 The number of received packets discarded during\
                 packet header validation, including packets with\
                 unrecognized label values.\
\
   ifOutErrors   See [RFC2863].\
\
   ifName        Textual name (unique on this system) of the\
                 interface or an octet string of zero length.\
\
   ifLinkUpDownTrapEnable\
                 Default is disabled (2).\
\
   ifConnectorPresent\
                 Set to false (2).\
\
   ifHighSpeed   See [RFC2863].\
\
   ifHCInOctets  The 64-bit version of ifInOctets; supported if\
                 required by the compliance statements in [RFC2863].\
\
   ifHCOutOctets The 64-bit version of ifOutOctets; supported if\
                 required by the compliance statements in [RFC2863].\
\
   ifAlias       The nonvolatile 'alias' name for the interface as\
                 specified by a network manager.\
\
   ifCounterDiscontinuityTime\
                 See [RFC2863].\
\
\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 10]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
9.  LMP MIB Module Definitions\
\
   This MIB module IMPORTs objects from [RFC2578], [RFC2579], [RFC2580],\
   [RFC2863], [RFC4001], and [RFC4220], and it has REFERENCE clauses to\
   [RFC4204], [RFC4207], [RFC4209], [RFC3471], and [RFC2914].\
\
LMP-MIB DEFINITIONS ::= BEGIN\
\
IMPORTS\
   MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,\
   transmission, Unsigned32, Counter32, TimeTicks\
      FROM SNMPv2-SMI              -- [RFC2578]\
\
   MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\
      FROM SNMPv2-CONF             -- [RFC2580]\
\
   TEXTUAL-CONVENTION, TruthValue, RowStatus, StorageType,\
   TimeStamp\
      FROM SNMPv2-TC               -- [RFC2579]\
\
   InterfaceIndexOrZero, ifIndex\
      FROM IF-MIB                  -- [RFC2863]\
\
   InetAddressType, InetAddress\
      FROM INET-ADDRESS-MIB        -- [RFC4001]\
\
   teLinkRemoteIpAddr, teLinkIncomingIfId, TeLinkEncodingType\
      FROM TE-LINK-STD-MIB;        -- [RFC4220]\
\
lmpMIB MODULE-IDENTITY\
   LAST-UPDATED "200601110000Z"  -- 11 January 2006\
   ORGANIZATION "Common Control and Measurement Protocols (CCAMP)\
                 Working Group"\
   CONTACT-INFO\
       "        Martin Dubuc\
        Email:  dubuc.consulting@sympatico.ca\
\
                Thomas D. Nadeau\
        Email:  tnadeau@cisco.com\
\
                Jonathan P. Lang\
        Email:  jplang@ieee.org\
\
                Evan McGinnis\
        Email:  emcginnis@hammerheadsystems.com"\
\
\
   DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 11]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
       "Copyright (C) 2006 The Internet Society.  This version of\
        the MIB module is part of RFC 4327; see the RFC itself\
        for full legal notices.\
\
        This MIB module contains managed object definitions for\
        the Link Management Protocol (LMP) as\
        defined in 'Link Management Protocol'."\
\
   -- Revision history.\
   REVISION\
       "200601110000Z"  -- 11 January 2006\
   DESCRIPTION\
       "Initial version published as RFC 4327"\
   ::= { transmission 227 }\
\
-- Textual Conventions\
\
LmpInterval ::= TEXTUAL-CONVENTION\
   DISPLAY-HINT "d"\
   STATUS        current\
   DESCRIPTION\
       "The interval delay in milliseconds."\
   SYNTAX        Unsigned32 (1..65535)\
\
LmpRetransmitInterval ::= TEXTUAL-CONVENTION\
   DISPLAY-HINT "d"\
   STATUS        current\
   DESCRIPTION\
       "The retransmission interval delay in milliseconds."\
   SYNTAX        Unsigned32 (1..4294967295)\
\
LmpNodeId ::= TEXTUAL-CONVENTION\
   DISPLAY-HINT  "1d.1d.1d.1d"\
   STATUS        current\
   DESCRIPTION\
       "Represents a Node ID in network byte order.  Node ID is an\
        address of type IPv4."\
   REFERENCE\
       "Section 1.1 of Link Management Protocol, RFC 4204"\
   SYNTAX        OCTET STRING(SIZE(4))\
\
\
-- Top level components of this MIB\
\
-- Notifications\
lmpNotifications OBJECT IDENTIFIER ::= { lmpMIB 0 }\
-- Tables, Scalars\
lmpObjects       OBJECT IDENTIFIER ::= { lmpMIB 1 }\
\
\
\
Dubuc, et al.               Standards Track                    [Page 12]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
-- Conformance\
lmpConformance   OBJECT IDENTIFIER ::= { lmpMIB 2 }\
\
\
lmpAdminStatus OBJECT-TYPE\
   SYNTAX        INTEGER { up(1), down(2) }\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "The desired operational status of LMP on the node.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { up }\
   ::= { lmpObjects 1 }\
\
lmpOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER { up(1), down(2) }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of LMP on the node."\
   ::= { lmpObjects 2 }\
\
\
-- LMP Neighbor Table\
\
lmpNbrTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpNbrEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies the neighbor node(s) to which control\
        channels may be established."\
   ::= { lmpObjects 3 }\
\
lmpNbrEntry OBJECT-TYPE\
   SYNTAX        LmpNbrEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table is created by a LMP-enabled device for\
        every pair of nodes that can establish control channels."\
   INDEX         { lmpNbrNodeId }\
   ::= { lmpNbrTable 1 }\
\
LmpNbrEntry ::= SEQUENCE {\
  lmpNbrNodeId              LmpNodeId,\
  lmpNbrRetransmitInterval  LmpRetransmitInterval,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 13]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
  lmpNbrRetryLimit          Unsigned32,\
  lmpNbrRetransmitDelta     Unsigned32,\
  lmpNbrAdminStatus         INTEGER,\
  lmpNbrOperStatus          INTEGER,\
  lmpNbrRowStatus           RowStatus,\
  lmpNbrStorageType         StorageType\
}\
\
lmpNbrNodeId OBJECT-TYPE\
   SYNTAX        LmpNodeId\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This is a unique index for an entry in the LmpNbrTable.\
        This value represents the remote Node ID."\
   ::= { lmpNbrEntry 1 }\
\
lmpNbrRetransmitInterval OBJECT-TYPE\
   SYNTAX        LmpRetransmitInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the initial retransmission interval that\
        is used for the retransmission of messages that require\
        acknowledgement.  This object along with lmpNbrRetryLimit is\
        used to implement congestion-handling mechanism as defined in\
        Section 10 of the Link Management Protocol specification,\
        which is based on RFC 2914."\
   REFERENCE\
       "Link Management Protocol, RFC 4204.\
\
        Congestion Control Principles, RFC 2914."\
   DEFVAL        { 500 }\
   ::= { lmpNbrEntry 2 }\
\
lmpNbrRetryLimit OBJECT-TYPE\
   SYNTAX        Unsigned32\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the maximum number of times a message\
        is transmitted without being acknowledged.  A value of 0 is used\
        to indicate that a node should never stop retransmission.\
        This object along with lmpNbrRetransmitInterval is\
        used to implement congestion-handling mechanism as defined in\
        Section 10 of the Link Management Protocol specification,\
        which is based on RFC 2914."\
   REFERENCE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 14]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
       "Link Management Protocol, RFC 4204.\
\
        Congestion Control Principles, RFC 2914."\
   DEFVAL        { 3 }\
   ::= { lmpNbrEntry 3 }\
\
lmpNbrRetransmitDelta OBJECT-TYPE\
   SYNTAX        Unsigned32\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object governs the speed with which the sender increases\
        the retransmission interval as explained in section 10 of the\
        Link Management Protocol specification, which is based on\
        RFC 2914.  This value is a power used to express the\
        exponential backoff.  The ratio of two successive retransmission\
        intervals is (1 + Delta)."\
   REFERENCE\
       "Link Management Protocol, RFC 4204.\
\
        Congestion Control Principles, RFC 2914."\
   DEFVAL        { 1 }\
   ::= { lmpNbrEntry 4 }\
\
lmpNbrAdminStatus OBJECT-TYPE\
   SYNTAX        INTEGER { up(1), down(2) }\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The desired operational status of LMP to this remote node."\
   ::= { lmpNbrEntry 5 }\
\
lmpNbrOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER { up(1), down(2) }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of LMP to this remote node."\
   ::= { lmpNbrEntry 6 }\
\
lmpNbrRowStatus OBJECT-TYPE\
   SYNTAX        RowStatus\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This variable is used to create, modify, and/or\
        delete a row in this table.  None of the writable objects\
        in a row can be changed if the status is active(1).\
\
\
\
Dubuc, et al.               Standards Track                    [Page 15]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        All read-create objects must have valid and consistent\
        values before the row can be activated."\
   ::= { lmpNbrEntry 7 }\
\
lmpNbrStorageType OBJECT-TYPE\
   SYNTAX        StorageType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The storage type for this conceptual row in the\
        lmpNbrTable.  Conceptual rows having the value\
        'permanent' need not allow write-access to any\
        columnar object in the row."\
   DEFVAL        { nonVolatile }\
   ::= { lmpNbrEntry 8 }\
\
-- End of lmpNbrTable\
\
\
lmpCcHelloIntervalDefault OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default value for the HelloInterval\
        parameter used in the Hello protocol keep-alive phase.  It\
        indicates how frequently LMP Hello messages will be sent.  It\
        is used a the default value for lmpCcHelloInterval.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpObjects 4 }\
\
lmpCcHelloIntervalDefaultMin OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default minimum value for the\
        HelloInterval parameter.  It is used as a default value\
        for lmpCcHelloIntervalMin.  Implementations should save the\
        value of this object in persistent memory so that it survives\
        restarts or reboot."\
   ::= { lmpObjects 5 }\
\
lmpCcHelloIntervalDefaultMax OBJECT-TYPE\
   SYNTAX        LmpInterval\
\
\
\
Dubuc, et al.               Standards Track                    [Page 16]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default maximum value for the\
        HelloInterval parameter.  It is used as a default value\
        for lmpCcHelloIntervalMax.  Implementations should save the\
        value of this object in persistent memory so that it survives\
        restarts or reboot."\
   ::= { lmpObjects 6 }\
\
lmpCcHelloDeadIntervalDefault OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default HelloDeadInterval parameter\
        to use in the Hello protocol keep-alive phase.  It indicates\
        how long a device should wait before declaring the control\
        channel dead.  The HelloDeadInterval parameter should be at\
        least three times the value of HelloInterval.  It is used as\
        a default value for lmpCcHelloDeadInterval.  Implementations\
        should save the value of this object in persistent memory so\
        that it survives restarts or reboot."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpObjects 7 }\
\
lmpCcHelloDeadIntervalDefaultMin OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default minimum value for the\
        HelloDeadInterval parameter.  It is used as a default value\
        for lmpCcHelloDeadIntervalMin.  Implementations should save\
        the value of this object in persistent memory so that it\
        survives restarts or reboot."\
   ::= { lmpObjects 8 }\
\
lmpCcHelloDeadIntervalDefaultMax OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the default maximum value for the\
        HelloDeadInterval parameter.  It is used as a default value\
        for lmpCcHelloDeadIntervalMax.  Implementations should save the\
        value of this object in persistent memory so that it survives\
\
\
\
Dubuc, et al.               Standards Track                    [Page 17]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        restarts or reboot."\
   ::= { lmpObjects 9 }\
\
\
-- LMP Control Channel Table\
\
lmpControlChannelTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpControlChannelEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies LMP control channel information."\
   ::= { lmpObjects 10 }\
\
lmpControlChannelEntry OBJECT-TYPE\
   SYNTAX        LmpControlChannelEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table is created by a LMP-enabled device for\
        every control channel.  Whenever a new entry is created with\
        lmpCcIsIf set to true(2), then a corresponding entry is\
        created in ifTable as well (see RFC 2863)."\
   INDEX         { lmpCcId }\
   ::= { lmpControlChannelTable 1 }\
\
LmpControlChannelEntry ::= SEQUENCE {\
  lmpCcId                            Unsigned32,\
  lmpCcUnderlyingIfIndex             InterfaceIndexOrZero,\
  lmpCcIsIf                          TruthValue,\
  lmpCcNbrNodeId                     LmpNodeId,\
  lmpCcRemoteId                      Unsigned32,\
  lmpCcRemoteAddressType             InetAddressType,\
  lmpCcRemoteIpAddr                  InetAddress,\
  lmpCcSetupRole                     INTEGER,\
  lmpCcAuthentication                TruthValue,\
  lmpCcHelloInterval                 LmpInterval,\
  lmpCcHelloIntervalMin              LmpInterval,\
  lmpCcHelloIntervalMax              LmpInterval,\
  lmpCcHelloIntervalNegotiated       LmpInterval,\
  lmpCcHelloDeadInterval             LmpInterval,\
  lmpCcHelloDeadIntervalMin          LmpInterval,\
  lmpCcHelloDeadIntervalMax          LmpInterval,\
  lmpCcHelloDeadIntervalNegotiated   LmpInterval,\
  lmpCcLastChange                    TimeTicks,\
  lmpCcAdminStatus                   INTEGER,\
  lmpCcOperStatus                    INTEGER,\
  lmpCcRowStatus                     RowStatus,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 18]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
  lmpCcStorageType                   StorageType\
}\
\
lmpCcId OBJECT-TYPE\
   SYNTAX        Unsigned32 (1..4294967295)\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This value represents the local control channel identifier.\
        The control channel identifier is a non-zero 32-bit number."\
   ::= { lmpControlChannelEntry 1 }\
\
lmpCcUnderlyingIfIndex OBJECT-TYPE\
   SYNTAX        InterfaceIndexOrZero\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "If lmpCcIsIf is set to true(1), this object carries the\
        index into the ifTable of the entry that represents the\
        LMP interface over which LMP will transmit its traffic.\
        If this object is set to zero, but lmpCcIsIf is set to\
        true(1), the control channel is not currently associated\
        with any underlying interface and the control channel's\
        operational status must not be up(1), nor should the\
        control channel forward or receive traffic.\
        If lmpCcIsIf is set to false(2), this object should be set\
        to zero and should be ignored."\
   ::= { lmpControlChannelEntry 2 }\
\
lmpCcIsIf OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "In implementations where the control channels are modeled\
        as interfaces, the value of this object is true(1) and\
        this control channel is represented by an interface in\
        the interfaces group table as indicated by the value of\
        lmpCcUnderlyingIfIndex.  If control channels are not\
        modeled as interfaces, the value of this object is\
        false(2) and there is no corresponding interface for\
        this control channel in the interfaces group table,\
        and the value of lmpCcUnderlyingIfIndex should be\
        ignored."\
   ::= { lmpControlChannelEntry 3 }\
\
lmpCcNbrNodeId OBJECT-TYPE\
   SYNTAX        LmpNodeId\
\
\
\
Dubuc, et al.               Standards Track                    [Page 19]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This is the Node ID of the control channel remote node.\
        This value either is configured or gets created by the node\
        when a Config message is received or when an outgoing Config\
        message is acknowledged by the remote node."\
   ::= { lmpControlChannelEntry 4 }\
\
lmpCcRemoteId OBJECT-TYPE\
   SYNTAX        Unsigned32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This value represents the remote control channel identifier\
        (32-bit number).  It is determined during the negotiation\
        phase.  A value of zero means that the remote control channel\
        identifier has not yet been learnt."\
   ::= { lmpControlChannelEntry 5 }\
\
lmpCcRemoteAddressType OBJECT-TYPE\
   SYNTAX        InetAddressType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This value represents the remote control channel IP address\
        type.  In point-to-point configuration, this value can be set\
        to unknown(0)."\
   ::= { lmpControlChannelEntry 6 }\
\
lmpCcRemoteIpAddr OBJECT-TYPE\
   SYNTAX        InetAddress\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This value represents the remote control channel Internet\
        address for numbered control channel.  The type of this\
        address is determined by lmpCcRemoteAddressType.\
        Control channel must be numbered on non-point-to-point\
        configuration.  For point-to-point configuration, the\
        remote control channel address can be of type unknown\
        in which case this object must be a zero-length string.  The\
        lmpCcRemoteId object then identifies the unnumbered\
        address."\
   ::= { lmpControlChannelEntry 7 }\
\
lmpCcSetupRole OBJECT-TYPE\
   SYNTAX        INTEGER { active(1), passive(2) }\
\
\
\
Dubuc, et al.               Standards Track                    [Page 20]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The role that this node should take during establishment\
        of this control channel.  An active node will initiate\
        establishment.  A passive node will wait for the remote node\
        to initiate.  A pair of nodes that both take the passive role\
        will never establish communications."\
   DEFVAL        { active }\
   ::= { lmpControlChannelEntry 8 }\
\
lmpCcAuthentication OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object indicates whether the control channel must use\
        authentication."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpControlChannelEntry 9 }\
\
lmpCcHelloInterval OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the value of the HelloInterval\
        parameter.  The default value for this object should be\
        set to lmpCcHelloIntervalDefault."\
   ::= { lmpControlChannelEntry 10 }\
\
lmpCcHelloIntervalMin OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the minimum value for the\
        HelloInterval parameter.  The default value for this\
        object should be set to lmpCcHelloIntervalMinDefault."\
   ::= { lmpControlChannelEntry 11 }\
\
lmpCcHelloIntervalMax OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the maximum value for the\
\
\
\
Dubuc, et al.               Standards Track                    [Page 21]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        HelloInterval parameter.  The default value for this\
        object should be set to lmpCcHelloIntervalMaxDefault."\
   ::= { lmpControlChannelEntry 12 }\
\
lmpCcHelloIntervalNegotiated OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "Once the control channel is active, this object represents\
        the negotiated HelloInterval value."\
   ::= { lmpControlChannelEntry 13 }\
\
lmpCcHelloDeadInterval OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the value of the HelloDeadInterval\
        parameter.  The default value for this object should be\
        set to lmpCcHelloDeadIntervalDefault."\
   ::= { lmpControlChannelEntry 14 }\
\
lmpCcHelloDeadIntervalMin OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the minimum value for the\
        HelloDeadInterval parameter.  The default value for this\
        object should be set to lmpCcHelloDeadIntervalMinDefault."\
   ::= { lmpControlChannelEntry 15 }\
\
lmpCcHelloDeadIntervalMax OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the maximum value for the\
        HelloDeadInterval parameter.  The default value for this\
        object should be set to lmpCcHelloIntervalMaxDefault."\
   ::= { lmpControlChannelEntry 16 }\
\
lmpCcHelloDeadIntervalNegotiated OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 22]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
       "Once the control channel is active, this object represents\
        the negotiated HelloDeadInterval value."\
   ::= { lmpControlChannelEntry 17 }\
\
lmpCcLastChange OBJECT-TYPE\
   SYNTAX       TimeTicks\
   MAX-ACCESS   read-only\
   STATUS       current\
   DESCRIPTION\
       "The value of sysUpTime at the time the control channel entered\
        its current operational state.  If the current state was\
        entered prior to the last re-initialization of the local\
        network management subsystem, then this object contains a\
        zero value."\
   ::= { lmpControlChannelEntry 18 }\
\
lmpCcAdminStatus OBJECT-TYPE\
   SYNTAX        INTEGER { up(1), down(2) }\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The desired operational status of this control channel."\
   ::= { lmpControlChannelEntry 19 }\
\
lmpCcOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER {\
                     up(1),\
                     down(2),\
                     configSnd(3),\
                     configRcv(4),\
                     active(5),\
                     goingDown(6)\
                 }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of this control channel."\
   ::= { lmpControlChannelEntry 20 }\
\
lmpCcRowStatus OBJECT-TYPE\
   SYNTAX        RowStatus\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This variable is used to create, modify, and/or\
        delete a row in this table.  None of the writable objects\
        in a row can be changed if the status is active(1).\
        All read-create objects must have valid and consistent\
\
\
\
Dubuc, et al.               Standards Track                    [Page 23]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        values before the row can be activated."\
   ::= { lmpControlChannelEntry 21 }\
\
lmpCcStorageType OBJECT-TYPE\
   SYNTAX        StorageType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The storage type for this conceptual row in the\
        lmpControlChannelTable.  Conceptual rows having the value\
        'permanent' need not allow write-access to any\
        columnar object in the row."\
   DEFVAL        { nonVolatile }\
   ::= { lmpControlChannelEntry 22 }\
\
-- End of lmpControlChannelTable\
\
\
-- LMP Control Channel Performance Table\
\
lmpControlChannelPerfTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpControlChannelPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies LMP control channel performance\
        counters."\
   ::= { lmpObjects 11 }\
\
lmpControlChannelPerfEntry OBJECT-TYPE\
   SYNTAX        LmpControlChannelPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table is created by a LMP-enabled device for\
        every control channel.  lmpCcCounterDiscontinuityTime is used\
        to indicate potential discontinuity for all counter objects\
        in this table."\
   INDEX         { lmpCcId }\
   ::= { lmpControlChannelPerfTable 1 }\
\
LmpControlChannelPerfEntry ::= SEQUENCE {\
  lmpCcInOctets                    Counter32,\
  lmpCcInDiscards                  Counter32,\
  lmpCcInErrors                    Counter32,\
  lmpCcOutOctets                   Counter32,\
  lmpCcOutDiscards                 Counter32,\
  lmpCcOutErrors                   Counter32,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 24]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
  lmpCcConfigReceived              Counter32,\
  lmpCcConfigSent                  Counter32,\
  lmpCcConfigRetransmit            Counter32,\
  lmpCcConfigAckReceived           Counter32,\
  lmpCcConfigAckSent               Counter32,\
  lmpCcConfigNackReceived          Counter32,\
  lmpCcConfigNackSent              Counter32,\
  lmpCcHelloReceived               Counter32,\
  lmpCcHelloSent                   Counter32,\
  lmpCcBeginVerifyReceived         Counter32,\
  lmpCcBeginVerifySent             Counter32,\
  lmpCcBeginVerifyRetransmit       Counter32,\
  lmpCcBeginVerifyAckReceived      Counter32,\
  lmpCcBeginVerifyAckSent          Counter32,\
  lmpCcBeginVerifyNackReceived     Counter32,\
  lmpCcBeginVerifyNackSent         Counter32,\
  lmpCcEndVerifyReceived           Counter32,\
  lmpCcEndVerifySent               Counter32,\
  lmpCcEndVerifyRetransmit         Counter32,\
  lmpCcEndVerifyAckReceived        Counter32,\
  lmpCcEndVerifyAckSent            Counter32,\
  lmpCcTestStatusSuccessReceived   Counter32,\
  lmpCcTestStatusSuccessSent       Counter32,\
  lmpCcTestStatusSuccessRetransmit Counter32,\
  lmpCcTestStatusFailureReceived   Counter32,\
  lmpCcTestStatusFailureSent       Counter32,\
  lmpCcTestStatusFailureRetransmit Counter32,\
  lmpCcTestStatusAckReceived       Counter32,\
  lmpCcTestStatusAckSent           Counter32,\
  lmpCcLinkSummaryReceived         Counter32,\
  lmpCcLinkSummarySent             Counter32,\
  lmpCcLinkSummaryRetransmit       Counter32,\
  lmpCcLinkSummaryAckReceived      Counter32,\
  lmpCcLinkSummaryAckSent          Counter32,\
  lmpCcLinkSummaryNackReceived     Counter32,\
  lmpCcLinkSummaryNackSent         Counter32,\
  lmpCcChannelStatusReceived       Counter32,\
  lmpCcChannelStatusSent           Counter32,\
  lmpCcChannelStatusRetransmit     Counter32,\
  lmpCcChannelStatusAckReceived    Counter32,\
  lmpCcChannelStatusAckSent        Counter32,\
  lmpCcChannelStatusReqReceived    Counter32,\
  lmpCcChannelStatusReqSent        Counter32,\
  lmpCcChannelStatusReqRetransmit  Counter32,\
  lmpCcChannelStatusRspReceived    Counter32,\
  lmpCcChannelStatusRspSent        Counter32,\
  lmpCcCounterDiscontinuityTime    TimeStamp\
}\
\
\
\
Dubuc, et al.               Standards Track                    [Page 25]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpCcInOctets OBJECT-TYPE\
    SYNTAX      Counter32\
    MAX-ACCESS  read-only\
    STATUS      current\
    DESCRIPTION\
            "The total number of LMP message octets received on the\
             control channel."\
    ::= { lmpControlChannelPerfEntry 1 }\
\
lmpCcInDiscards OBJECT-TYPE\
    SYNTAX      Counter32\
    MAX-ACCESS  read-only\
    STATUS      current\
    DESCRIPTION\
            "The number of inbound packets that were chosen to be\
             discarded even though no errors had been detected.  One\
             possible reason for discarding such a packet could be to\
             free up buffer space."\
    ::= { lmpControlChannelPerfEntry 2 }\
\
lmpCcInErrors OBJECT-TYPE\
    SYNTAX      Counter32\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
            "The number of inbound packets that contained errors\
             preventing them from being processed by LMP."\
    ::= { lmpControlChannelPerfEntry 3 }\
\
lmpCcOutOctets OBJECT-TYPE\
    SYNTAX       Counter32\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
            "The total number of LMP message octets transmitted out of\
             the control channel."\
    ::= { lmpControlChannelPerfEntry 4 }\
\
lmpCcOutDiscards OBJECT-TYPE\
    SYNTAX       Counter32\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
            "The number of outbound packets that were chosen to be\
             discarded even though no errors had been detected to\
             prevent their being transmitted.  One possible reason\
             for discarding such a packet could be to free up buffer\
             space."\
\
\
\
Dubuc, et al.               Standards Track                    [Page 26]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
    ::= { lmpControlChannelPerfEntry 5 }\
\
lmpCcOutErrors OBJECT-TYPE\
    SYNTAX       Counter32\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
            "The number of outbound packets that could not be\
             transmitted because of errors."\
    ::= { lmpControlChannelPerfEntry 6 }\
\
lmpCcConfigReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Config messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 7 }\
\
lmpCcConfigSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Config messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 8 }\
\
lmpCcConfigRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Config messages that\
        have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 9 }\
\
lmpCcConfigAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ConfigAck messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 10 }\
\
lmpCcConfigAckSent OBJECT-TYPE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 27]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ConfigAck messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 11 }\
\
lmpCcConfigNackReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ConfigNack messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 12 }\
\
lmpCcConfigNackSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ConfigNack messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 13 }\
\
lmpCcHelloReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Hello messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 14 }\
\
lmpCcHelloSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Hello messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 15 }\
\
lmpCcBeginVerifyReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
\
\
\
Dubuc, et al.               Standards Track                    [Page 28]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 16 }\
\
lmpCcBeginVerifySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 17 }\
\
lmpCcBeginVerifyRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that\
        have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 18 }\
\
lmpCcBeginVerifyAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyAck messages that\
        have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 19 }\
\
lmpCcBeginVerifyAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyAck messages that\
        have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 20 }\
\
lmpCcBeginVerifyNackReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyNack messages that\
        have been received on this control channel."\
\
\
\
Dubuc, et al.               Standards Track                    [Page 29]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   ::= { lmpControlChannelPerfEntry 21 }\
\
lmpCcBeginVerifyNackSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyNack messages that\
        have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 22 }\
\
lmpCcEndVerifyReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that have\
        been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 23 }\
\
lmpCcEndVerifySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that have\
        been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 24 }\
\
lmpCcEndVerifyRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that\
        have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 25 }\
\
lmpCcEndVerifyAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerifyAck messages that\
        have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 26 }\
\
lmpCcEndVerifyAckSent OBJECT-TYPE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 30]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerifyAck messages that\
        have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 27 }\
\
lmpCcTestStatusSuccessReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 28 }\
\
lmpCcTestStatusSuccessSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 29 }\
\
lmpCcTestStatusSuccessRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 30 }\
\
lmpCcTestStatusFailureReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 31 }\
\
lmpCcTestStatusFailureSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
\
\
\
Dubuc, et al.               Standards Track                    [Page 31]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 32 }\
\
lmpCcTestStatusFailureRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 33 }\
\
lmpCcTestStatusAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusAck messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 34 }\
\
lmpCcTestStatusAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusAck messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 35 }\
\
lmpCcLinkSummaryReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 36 }\
\
lmpCcLinkSummarySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages\
        that have been sent on this control channel."\
\
\
\
Dubuc, et al.               Standards Track                    [Page 32]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   ::= { lmpControlChannelPerfEntry 37 }\
\
lmpCcLinkSummaryRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages that\
        have been retransmitted over this control channel."\
   ::= { lmpControlChannelPerfEntry 38 }\
\
lmpCcLinkSummaryAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryAck messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 39 }\
\
lmpCcLinkSummaryAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryAck messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 40 }\
\
lmpCcLinkSummaryNackReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryNack messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 41 }\
\
lmpCcLinkSummaryNackSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryNack messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 42 }\
\
lmpCcChannelStatusReceived OBJECT-TYPE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 33]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 43 }\
\
lmpCcChannelStatusSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 44 }\
\
lmpCcChannelStatusRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages\
        that have been retransmitted on this control channel."\
   ::= { lmpControlChannelPerfEntry 45 }\
\
lmpCcChannelStatusAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusAck messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 46 }\
\
lmpCcChannelStatusAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 47 }\
\
lmpCcChannelStatusReqReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
\
\
\
Dubuc, et al.               Standards Track                    [Page 34]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 48 }\
\
lmpCcChannelStatusReqSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 49 }\
\
lmpCcChannelStatusReqRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been retransmitted on this control channel."\
   ::= { lmpControlChannelPerfEntry 50 }\
\
lmpCcChannelStatusRspReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusResponse messages\
        that have been received on this control channel."\
   ::= { lmpControlChannelPerfEntry 51 }\
\
lmpCcChannelStatusRspSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusResponse messages\
        that have been sent on this control channel."\
   ::= { lmpControlChannelPerfEntry 52 }\
\
lmpCcCounterDiscontinuityTime OBJECT-TYPE\
    SYNTAX       TimeStamp\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
        "The value of sysUpTime on the most recent occasion at which\
         any one or more of this control channel's counters suffered a\
\
\
\
Dubuc, et al.               Standards Track                    [Page 35]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
         discontinuity.  The relevant counters are the specific\
         instances associated with this control channel of any\
         Counter32 object contained in the lmpControlChannelPerfTable.\
         If no such discontinuities have occurred since the last re-\
         initialization of the local management subsystem, then this\
         object contains a zero value."\
    ::= { lmpControlChannelPerfEntry 53 }\
\
-- End of lmpControlChannelPerfTable\
\
\
-- LMP TE Link Table\
\
lmpTeLinkTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpTeLinkEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies the LMP-specific TE link information.\
        Overall TE link information is kept in three separate tables:\
        ifTable for interface-specific information, lmpTeLinkTable\
        for LMP specific information, and teLinkTable for generic\
        TE link information.  ifIndex is the common index to all\
        tables."\
   ::= { lmpObjects 12 }\
\
lmpTeLinkEntry OBJECT-TYPE\
   SYNTAX        LmpTeLinkEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table exists for each ifEntry with an\
        ifType of teLink(200) that is managed by LMP.  An ifEntry with\
        an ifIndex must exist before the corresponding lmpTeLinkEntry is\
        created.  If a TE link entry in the ifTable is destroyed, then\
        so is the corresponding entry in the lmpTeLinkTable.  The\
        administrative status value is controlled from the ifEntry.\
        Setting the administrative status to testing prompts LMP to\
        start link verification on the TE link.  Information about the\
        TE link that is not LMP specific is contained in teLinkTable of\
        the TE-LINK-STD-MIB MIB module."\
   INDEX         { ifIndex }\
   ::= { lmpTeLinkTable 1 }\
\
LmpTeLinkEntry ::= SEQUENCE {\
  lmpTeLinkNbrRemoteNodeId  LmpNodeId,\
  lmpTeLinkVerification     TruthValue,\
  lmpTeLinkFaultManagement  TruthValue,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 36]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
  lmpTeLinkDwdm             TruthValue,\
  lmpTeLinkOperStatus       INTEGER,\
  lmpTeLinkRowStatus        RowStatus,\
  lmpTeLinkStorageType      StorageType\
}\
\
lmpTeLinkNbrRemoteNodeId OBJECT-TYPE\
   SYNTAX        LmpNodeId\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This is the Node ID of the TE link remote node.  This value\
        may be learned during control channel parameter negotiation\
        phase (in the Config message).  Node ID is an address whose\
        type must be IPv4."\
   ::= { lmpTeLinkEntry 1 }\
\
lmpTeLinkVerification OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object indicates if the LMP link verification procedure\
        is enabled for this TE link."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpTeLinkEntry 2 }\
\
lmpTeLinkFaultManagement OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object indicates if the LMP fault management procedure\
        is enabled on this TE link."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpTeLinkEntry 3 }\
\
lmpTeLinkDwdm OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object indicates if the LMP DWDM procedure is enabled\
        on this TE link."\
   REFERENCE\
       "Link Management Protocol (LMP) for Dense Wavelength Division\
\
\
\
Dubuc, et al.               Standards Track                    [Page 37]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        Multiplexing (DWDM) Optical Line Systems, RFC 4209"\
   ::= { lmpTeLinkEntry 4 }\
\
lmpTeLinkOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER {\
                   up(1), down(2), testing(3), init(4), degraded(5)\
                 }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of this TE link.  The status\
        is set to testing when the TE link is performing link\
        verification.  A degraded state indicates that there is\
        no active control channel between the pair of nodes that\
        form the endpoints of the TE link, but yet at least one\
        data-bearing link on the TE link is allocated."\
   ::= { lmpTeLinkEntry 5 }\
\
lmpTeLinkRowStatus OBJECT-TYPE\
   SYNTAX        RowStatus\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This variable is used to create, modify, and/or\
        delete a row in this table.  None of the writable objects\
        in a row can be changed if the status is active(1).\
        All read-create objects must have valid and consistent\
        values before the row can be activated."\
   ::= { lmpTeLinkEntry 6 }\
\
lmpTeLinkStorageType OBJECT-TYPE\
   SYNTAX        StorageType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The storage type for this conceptual row in the\
        lmpTeLinkTable.  Conceptual rows having the value\
        'permanent' need not allow write-access to any\
        columnar object in the row."\
   DEFVAL        { nonVolatile }\
   ::= { lmpTeLinkEntry 7 }\
\
-- End of lmpTeLinkTable\
\
\
lmpGlobalLinkVerificationInterval OBJECT-TYPE\
   SYNTAX        Unsigned32\
   UNITS         "milliseconds"\
\
\
\
Dubuc, et al.               Standards Track                    [Page 38]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "This object indicates how often the link verification\
        procedure is executed.  The interval is in milliseconds.\
        A value of 0 is used to indicate that the link\
        verification procedure should not be executed.  The\
        interval specified in this object should be large enough\
        to allow the verification procedure to be completed\
        before the start of the next interval.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   ::= { lmpObjects 13 }\
\
\
-- LMP Link Verification Table\
\
lmpLinkVerificationTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpLinkVerificationEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies TE link information associated with the\
        LMP verification procedure."\
   ::= { lmpObjects 14 }\
\
lmpLinkVerificationEntry OBJECT-TYPE\
   SYNTAX        LmpLinkVerificationEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table is created by an LMP-enabled device for\
        every TE link that supports the LMP verification\
        procedure."\
   INDEX         { ifIndex }\
   ::= { lmpLinkVerificationTable 1 }\
\
LmpLinkVerificationEntry ::= SEQUENCE {\
  lmpLinkVerifyInterval           LmpInterval,\
  lmpLinkVerifyDeadInterval       LmpInterval,\
  lmpLinkVerifyTransportMechanism BITS,\
  lmpLinkVerifyAllLinks           TruthValue,\
  lmpLinkVerifyTransmissionRate   Unsigned32,\
  lmpLinkVerifyWavelength         Unsigned32,\
  lmpLinkVerifyRowStatus          RowStatus,\
  lmpLinkVerifyStorageType        StorageType\
}\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 39]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpLinkVerifyInterval OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the VerifyInterval parameter used\
        in the LMP link verification process.  It indicates the\
        interval at which the Test messages are sent."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpLinkVerificationEntry 1 }\
\
lmpLinkVerifyDeadInterval OBJECT-TYPE\
   SYNTAX        LmpInterval\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This object specifies the VerifyDeadInterval parameter used\
        in the verification of the physical connectivity of data-\
        bearing links.  It specifies the observation period used to\
        detect a Test message at the remote node."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpLinkVerificationEntry 2 }\
\
lmpLinkVerifyTransportMechanism OBJECT-TYPE\
   SYNTAX        BITS {\
                     -- All encoding types:\
                     payload(0),\
                     -- SONET/SDH encoding type:\
                     dccSectionOverheadBytes(1),\
                     dccLineOverheadBytes(2),\
                     j0Trace(3),\
                     j1Trace(4),\
                     j2Trace(5)\
                 }\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This defines the transport mechanism for the Test messages.  The\
        scope of this bit mask is restricted to each link encoding\
        type.  The local node will set the bits corresponding to the\
        various mechanisms it can support for transmitting LMP Test\
        messages.  The receiver chooses the appropriate mechanism in the\
        BeginVerifyAck message."\
   REFERENCE\
       "Link Management Protocol, RFC 4204\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 40]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        Synchronous Optical Network (SONET)/Synchronous Digital\
        Hierarchy (SDH) Encoding for Link Management Protocol (LMP)\
        Test Messages, RFC 4207"\
   ::= { lmpLinkVerificationEntry 3 }\
\
lmpLinkVerifyAllLinks OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "A value of true(2) for this object indicates that the\
        verification process checks all unallocated links, otherwise\
        only the new ports or component links that have been added to\
        this TE link are verified."\
   ::= { lmpLinkVerificationEntry 4 }\
\
lmpLinkVerifyTransmissionRate OBJECT-TYPE\
   SYNTAX        Unsigned32\
   UNITS         "bytes per second"\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This is the transmission rate of the data link over which\
        the Test messages will be transmitted and is expressed in\
        bytes per second."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpLinkVerificationEntry 5 }\
\
lmpLinkVerifyWavelength OBJECT-TYPE\
   SYNTAX        Unsigned32\
   UNITS         "nanometers"\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This value corresponds to the wavelength at\
        which the Test messages will be transmitted and is\
        measured in nanometers (nm).  If each data-bearing link\
        corresponds to a separate wavelength, then this value should\
        be set to 0."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpLinkVerificationEntry 6 }\
\
lmpLinkVerifyRowStatus OBJECT-TYPE\
   SYNTAX        RowStatus\
   MAX-ACCESS    read-create\
   STATUS        current\
\
\
\
Dubuc, et al.               Standards Track                    [Page 41]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   DESCRIPTION\
       "This variable is used to create, modify, and/or\
        delete a row in this table.  None of the writable objects\
        in a row can be changed if the status is active(1).\
        All read-create objects must have valid and consistent\
        values before the row can be activated."\
   ::= { lmpLinkVerificationEntry 7 }\
\
lmpLinkVerifyStorageType OBJECT-TYPE\
   SYNTAX        StorageType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The storage type for this conceptual row in the\
        lmpLinkVerificationTable.  Conceptual rows having the value\
        'permanent' need not allow write-access to any\
        columnar object in the row."\
   DEFVAL        { nonVolatile }\
   ::= { lmpLinkVerificationEntry 8 }\
\
-- End of lmpLinkVerificationTable\
\
\
-- LMP TE Link Performance Table\
\
lmpTeLinkPerfTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpTeLinkPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies LMP TE link performance counters."\
   ::= { lmpObjects 15 }\
\
lmpTeLinkPerfEntry OBJECT-TYPE\
   SYNTAX        LmpTeLinkPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table is created by an LMP-enabled device for\
        every TE link.  lmpTeCounterDiscontinuityTime is used\
        to indicate potential discontinuity for all counter objects\
        in this table."\
   INDEX         { ifIndex }\
   ::= { lmpTeLinkPerfTable 1 }\
\
LmpTeLinkPerfEntry ::= SEQUENCE {\
  lmpTeInOctets                    Counter32,\
  lmpTeOutOctets                   Counter32,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 42]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
  lmpTeBeginVerifyReceived         Counter32,\
  lmpTeBeginVerifySent             Counter32,\
  lmpTeBeginVerifyRetransmit       Counter32,\
  lmpTeBeginVerifyAckReceived      Counter32,\
  lmpTeBeginVerifyAckSent          Counter32,\
  lmpTeBeginVerifyNackReceived     Counter32,\
  lmpTeBeginVerifyNackSent         Counter32,\
  lmpTeEndVerifyReceived           Counter32,\
  lmpTeEndVerifySent               Counter32,\
  lmpTeEndVerifyRetransmit         Counter32,\
  lmpTeEndVerifyAckReceived        Counter32,\
  lmpTeEndVerifyAckSent            Counter32,\
  lmpTeTestStatusSuccessReceived   Counter32,\
  lmpTeTestStatusSuccessSent       Counter32,\
  lmpTeTestStatusSuccessRetransmit Counter32,\
  lmpTeTestStatusFailureReceived   Counter32,\
  lmpTeTestStatusFailureSent       Counter32,\
  lmpTeTestStatusFailureRetransmit Counter32,\
  lmpTeTestStatusAckReceived       Counter32,\
  lmpTeTestStatusAckSent           Counter32,\
  lmpTeLinkSummaryReceived         Counter32,\
  lmpTeLinkSummarySent             Counter32,\
  lmpTeLinkSummaryRetransmit       Counter32,\
  lmpTeLinkSummaryAckReceived      Counter32,\
  lmpTeLinkSummaryAckSent          Counter32,\
  lmpTeLinkSummaryNackReceived     Counter32,\
  lmpTeLinkSummaryNackSent         Counter32,\
  lmpTeChannelStatusReceived       Counter32,\
  lmpTeChannelStatusSent           Counter32,\
  lmpTeChannelStatusRetransmit     Counter32,\
  lmpTeChannelStatusAckReceived    Counter32,\
  lmpTeChannelStatusAckSent        Counter32,\
  lmpTeChannelStatusReqReceived    Counter32,\
  lmpTeChannelStatusReqSent        Counter32,\
  lmpTeChannelStatusReqRetransmit  Counter32,\
  lmpTeChannelStatusRspReceived    Counter32,\
  lmpTeChannelStatusRspSent        Counter32,\
  lmpTeCounterDiscontinuityTime    TimeStamp\
}\
\
lmpTeInOctets OBJECT-TYPE\
    SYNTAX      Counter32\
    MAX-ACCESS  read-only\
    STATUS      current\
    DESCRIPTION\
            "The total number of LMP message octets received for\
             this TE link."\
    ::= { lmpTeLinkPerfEntry 1 }\
\
\
\
Dubuc, et al.               Standards Track                    [Page 43]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpTeOutOctets OBJECT-TYPE\
    SYNTAX       Counter32\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
            "The total number of LMP message octets transmitted out\
             for this TE link."\
    ::= { lmpTeLinkPerfEntry 2 }\
\
lmpTeBeginVerifyReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that have\
        been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 3 }\
\
lmpTeBeginVerifySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that have\
        been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 4 }\
\
lmpTeBeginVerifyRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerify messages that\
        have been retransmitted for this TE link."\
   ::= { lmpTeLinkPerfEntry 5 }\
\
lmpTeBeginVerifyAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyAck messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 6 }\
\
lmpTeBeginVerifyAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
\
\
\
Dubuc, et al.               Standards Track                    [Page 44]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyAck messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 7 }\
\
lmpTeBeginVerifyNackReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyNack messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 8 }\
\
lmpTeBeginVerifyNackSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of BeginVerifyNack messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 9 }\
\
lmpTeEndVerifyReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that have\
        been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 10 }\
\
lmpTeEndVerifySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that have\
        been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 11 }\
\
lmpTeEndVerifyRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerify messages that\
\
\
\
Dubuc, et al.               Standards Track                    [Page 45]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        have been retransmitted over this control channel."\
   ::= { lmpTeLinkPerfEntry 12 }\
\
lmpTeEndVerifyAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerifyAck messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 13 }\
\
lmpTeEndVerifyAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of EndVerifyAck messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 14 }\
\
lmpTeTestStatusSuccessReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 15 }\
\
lmpTeTestStatusSuccessSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 16 }\
\
lmpTeTestStatusSuccessRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusSuccess messages\
        that have been retransmitted for this TE link."\
   ::= { lmpTeLinkPerfEntry 17 }\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 46]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpTeTestStatusFailureReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 18 }\
\
lmpTeTestStatusFailureSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 19 }\
\
lmpTeTestStatusFailureRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusFailure messages\
        that have been retransmitted on this TE link."\
   ::= { lmpTeLinkPerfEntry 20 }\
\
lmpTeTestStatusAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusAck messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 21 }\
\
lmpTeTestStatusAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of TestStatusAck messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 22 }\
\
lmpTeLinkSummaryReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
\
\
\
Dubuc, et al.               Standards Track                    [Page 47]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 23 }\
\
lmpTeLinkSummarySent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 24 }\
\
lmpTeLinkSummaryRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummary messages that\
        have been retransmitted over this control channel."\
   ::= { lmpTeLinkPerfEntry 25 }\
\
lmpTeLinkSummaryAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryAck messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 26 }\
\
lmpTeLinkSummaryAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryAck messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 27 }\
\
lmpTeLinkSummaryNackReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryNack messages that\
\
\
\
Dubuc, et al.               Standards Track                    [Page 48]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 28 }\
\
lmpTeLinkSummaryNackSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of LinkSummaryNack messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 29 }\
\
lmpTeChannelStatusReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages that\
        have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 30 }\
\
lmpTeChannelStatusSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages that\
        have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 31 }\
\
lmpTeChannelStatusRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages that\
        have been retransmitted for this TE link."\
   ::= { lmpTeLinkPerfEntry 32 }\
\
lmpTeChannelStatusAckReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusAck messages\
        that have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 33 }\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 49]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpTeChannelStatusAckSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatus messages\
        that have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 34 }\
\
lmpTeChannelStatusReqReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 35 }\
\
lmpTeChannelStatusReqSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 36 }\
\
lmpTeChannelStatusReqRetransmit OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusRequest messages\
        that have been retransmitted for this TE link."\
   ::= { lmpTeLinkPerfEntry 37 }\
\
lmpTeChannelStatusRspReceived OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusResponse messages\
        that have been received for this TE link."\
   ::= { lmpTeLinkPerfEntry 38 }\
\
lmpTeChannelStatusRspSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
\
\
\
Dubuc, et al.               Standards Track                    [Page 50]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of ChannelStatusResponse messages\
        that have been sent for this TE link."\
   ::= { lmpTeLinkPerfEntry 39 }\
\
lmpTeCounterDiscontinuityTime OBJECT-TYPE\
    SYNTAX       TimeStamp\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
        "The value of sysUpTime on the most recent occasion at which\
         any one or more of this TE link's counters suffered a\
         discontinuity.  The relevant counters are the specific\
         instances associated with this TE link of any Counter32\
         object contained in the lmpTeLinkPerfTable.  If\
         no such discontinuities have occurred since the last re-\
         initialization of the local management subsystem, then this\
         object contains a zero value."\
    ::= { lmpTeLinkPerfEntry 40 }\
\
-- End of lmpTeLinkPerfTable\
\
\
-- LMP Data Link Table\
\
lmpDataLinkTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpDataLinkEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies the data-bearing links managed by the\
        LMP."\
   ::= { lmpObjects 16 }\
\
lmpDataLinkEntry OBJECT-TYPE\
   SYNTAX        LmpDataLinkEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table exists for each ifEntry that represents\
        a data-bearing link.  An ifEntry with an ifIndex must exist\
        before the corresponding lmpDataLinkEntry is created.\
        If an entry representing the data-bearing link is destroyed in\
        the ifTable, then so is the corresponding entry in the\
        lmpDataLinkTable.  The administrative status value is\
        controlled from the ifEntry.  The index to this table is also\
        used to get information in the componentLinkTable\
\
\
\
Dubuc, et al.               Standards Track                    [Page 51]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        of the TE-LINK-STD-MIB MIB module."\
   INDEX         { ifIndex }\
   ::= { lmpDataLinkTable 1 }\
\
LmpDataLinkEntry ::= SEQUENCE {\
  lmpDataLinkType               INTEGER,\
  lmpDataLinkAddressType        InetAddressType,\
  lmpDataLinkIpAddr             InetAddress,\
  lmpDataLinkRemoteIpAddress    InetAddress,\
  lmpDataLinkRemoteIfId         InterfaceIndexOrZero,\
  lmpDataLinkEncodingType       TeLinkEncodingType,\
  lmpDataLinkActiveOperStatus   INTEGER,\
  lmpDataLinkPassiveOperStatus  INTEGER,\
  lmpDataLinkRowStatus          RowStatus,\
  lmpDataLinkStorageType        StorageType\
}\
\
lmpDataLinkType OBJECT-TYPE\
   SYNTAX        INTEGER {\
                     port(1),\
                     componentLink(2)\
                 }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This attribute specifies whether this data-bearing link is\
        a port or a component link.  Component link are multiplex\
        capable, whereas ports are not multiplex capable."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpDataLinkEntry 1 }\
\
lmpDataLinkAddressType OBJECT-TYPE\
   SYNTAX        InetAddressType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This attribute specifies the data-bearing link IP address\
        type.  If the data-bearing link is unnumbered, the address\
        type must be set to unknown(0)."\
   ::= { lmpDataLinkEntry 2 }\
\
lmpDataLinkIpAddr OBJECT-TYPE\
   SYNTAX        InetAddress\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The local Internet address for numbered links.  The type\
\
\
\
Dubuc, et al.               Standards Track                    [Page 52]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        of this address is determined by the value of\
        lmpDataLinkAddressType object.\
\
        For IPv4 and IPv6 numbered links, this object represents\
        the local IP address associated with the data-bearing\
        link.  For an unnumbered link, the local address is\
        of type unknown and this object is set to the zero-length\
        string and the ifIndex object then identifies the\
        unnumbered address."\
   ::= { lmpDataLinkEntry 3 }\
\
lmpDataLinkRemoteIpAddress OBJECT-TYPE\
   SYNTAX        InetAddress\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The remote Internet address for numbered data-bearing links.\
        The type of this address is determined by the\
        lmpDataLinkAddressType object.\
\
        For IPv4 and IPv6 numbered links, this object represents the\
        remote IP address associated with the data-bearing link.  For\
        an unnumbered link, the remote address is of type unknown\
        and this object is set to the zero-length string and the\
        lmpDataLinkRemoteIfId object then identifies the unnumbered\
        address.\
\
        This information is either configured manually or\
        communicated by the remote node during the link verification\
        procedure."\
   ::= { lmpDataLinkEntry 4 }\
\
lmpDataLinkRemoteIfId OBJECT-TYPE\
   SYNTAX        InterfaceIndexOrZero\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "Interface identifier of the remote end point.  This\
        information is either configured manually or\
        communicated by the remote node during the link verification\
        procedure."\
   ::= { lmpDataLinkEntry 5 }\
\
lmpDataLinkEncodingType OBJECT-TYPE\
   SYNTAX        TeLinkEncodingType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 53]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
       "The encoding type of the data-bearing link."\
   REFERENCE\
       "Generalized MPLS Signaling Functional Description, RFC 3471"\
   ::= { lmpDataLinkEntry 6 }\
\
lmpDataLinkActiveOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER {\
                     upAlloc(1),\
                     upFree(2),\
                     down(3),\
                     testing(4) }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of this data-bearing link\
        (active FSM)."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpDataLinkEntry 7 }\
\
lmpDataLinkPassiveOperStatus OBJECT-TYPE\
   SYNTAX        INTEGER {\
                     upAlloc(1),\
                     upFree(2),\
                     down(3),\
                     psvTst(4) }\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "The actual operational status of this data-bearing link\
        (passive FSM)."\
   REFERENCE\
       "Link Management Protocol, RFC 4204"\
   ::= { lmpDataLinkEntry 8 }\
\
lmpDataLinkRowStatus OBJECT-TYPE\
   SYNTAX        RowStatus\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "This variable is used to create, modify, and/or\
        delete a row in this table.  None of the writable objects\
        in a row can be changed if the status is active(1).\
        All read-create objects must have valid and consistent\
        values before the row can be activated."\
   ::= { lmpDataLinkEntry 9 }\
\
lmpDataLinkStorageType OBJECT-TYPE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 54]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   SYNTAX        StorageType\
   MAX-ACCESS    read-create\
   STATUS        current\
   DESCRIPTION\
       "The storage type for this conceptual row in the\
        lmpDataLinkTable.  Conceptual rows having the value\
        'permanent' need not allow write-access to any\
        columnar object in the row."\
   DEFVAL        { nonVolatile }\
   ::= { lmpDataLinkEntry 10 }\
\
-- End of lmpDataLinkTable\
\
\
-- LMP Data Link Performance Table\
\
lmpDataLinkPerfTable OBJECT-TYPE\
   SYNTAX        SEQUENCE OF LmpDataLinkPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "This table specifies the data-bearing links LMP performance\
        counters."\
   ::= { lmpObjects 17 }\
\
lmpDataLinkPerfEntry OBJECT-TYPE\
   SYNTAX        LmpDataLinkPerfEntry\
   MAX-ACCESS    not-accessible\
   STATUS        current\
   DESCRIPTION\
       "An entry in this table contains information about\
        the LMP performance counters for the data-bearing links.\
        lmpDataLinkDiscontinuityTime is used to indicate potential\
        discontinuity for all counter objects in this table."\
   INDEX         { ifIndex }\
   ::= { lmpDataLinkPerfTable 1 }\
\
LmpDataLinkPerfEntry ::= SEQUENCE {\
  lmpDataLinkTestReceived        Counter32,\
  lmpDataLinkTestSent            Counter32,\
  lmpDataLinkActiveTestSuccess   Counter32,\
  lmpDataLinkActiveTestFailure   Counter32,\
  lmpDataLinkPassiveTestSuccess  Counter32,\
  lmpDataLinkPassiveTestFailure  Counter32,\
  lmpDataLinkDiscontinuityTime   TimeStamp\
}\
\
lmpDataLinkTestReceived OBJECT-TYPE\
\
\
\
Dubuc, et al.               Standards Track                    [Page 55]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Test messages that have\
        been received on this data-bearing link."\
   ::= { lmpDataLinkPerfEntry 1 }\
\
lmpDataLinkTestSent OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of Test messages that have\
        been sent on this data-bearing link."\
   ::= { lmpDataLinkPerfEntry 2 }\
\
lmpDataLinkActiveTestSuccess OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of data-bearing link tests\
        that were successful on the active side of this data-\
        bearing link."\
   ::= { lmpDataLinkPerfEntry 3 }\
\
lmpDataLinkActiveTestFailure OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of data-bearing link tests\
        that failed on the active side of this data-bearing link."\
   ::= { lmpDataLinkPerfEntry 4 }\
\
lmpDataLinkPassiveTestSuccess OBJECT-TYPE\
   SYNTAX        Counter32\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of data-bearing link tests\
        that were successful on the passive side of this data-\
        bearing link."\
   ::= { lmpDataLinkPerfEntry 5 }\
\
lmpDataLinkPassiveTestFailure OBJECT-TYPE\
   SYNTAX        Counter32\
\
\
\
Dubuc, et al.               Standards Track                    [Page 56]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   MAX-ACCESS    read-only\
   STATUS        current\
   DESCRIPTION\
       "This object counts the number of data-bearing link tests\
        that failed on the passive side of this data-bearing link."\
   ::= { lmpDataLinkPerfEntry 6 }\
\
lmpDataLinkDiscontinuityTime OBJECT-TYPE\
    SYNTAX       TimeStamp\
    MAX-ACCESS   read-only\
    STATUS       current\
    DESCRIPTION\
        "The value of sysUpTime on the most recent occasion at which\
         any one or more of this data-bearing link's counters suffered\
         a discontinuity.  The relevant counters are the specific\
         instances associated with this data-bearing link of any\
         Counter32 object contained in the lmpDataLinkPerfTable.  If\
         no such discontinuities have occurred since the last re-\
         initialization of the local management subsystem, then this\
         object contains a zero value."\
    ::= { lmpDataLinkPerfEntry 7 }\
\
-- End of lmpDataLinkPerfTable\
\
\
-- Notification Configuration\
\
lmpNotificationMaxRate OBJECT-TYPE\
   SYNTAX       Unsigned32\
   MAX-ACCESS   read-write\
   STATUS       current\
   DESCRIPTION\
       "The LMP notification rate depends on the size of the network,\
        the type of links, the network configuration, the\
        reliability of the network, etc.\
\
        When designing this MIB, care has been taken to minimize the\
        amount of notifications generated for LMP purposes.  Wherever\
        possible, notifications are state driven, meaning the\
        notifications are sent only when the system changes state.\
        The only notifications that are repeated and could cause a\
        problem as far as congestion is concerned are the ones\
        associated with data link verification.\
        Without any considerations to handling of these\
        notifications, a problem may arise if the number of data\
        links is high.  Since the data link verification notifications\
        can happen only once per data link per link verification\
        interval, the notification rate should be sustainable if one\
\
\
\
Dubuc, et al.               Standards Track                    [Page 57]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        chooses an appropriate link verification interval for a given\
        network configuration.  For instance, a network of 100 nodes\
        with 5 links of 128 wavelengths each and a link verification\
        of 1 minute with no more than 10% of the links failed at any\
        given time would have 1 notification per second sent from\
        each node, or 100 notifications per second for the whole\
        network.  The rest of the notifications are negligible\
        compared to this number.\
\
        To alleviate the congestion problem, the\
        lmpNotificationMaxRate object can be used to implement a\
        throttling mechanism.  It is also possible to enable/disable\
        certain type of notifications.\
\
        This variable indicates the maximum number of\
        notifications issued per minute.  If events occur\
        more rapidly, the implementation may simply fail to\
        emit these notifications during that period, or may\
        queue them until an appropriate time.  A value of 0\
        means no throttling is applied and events may be\
        notified at the rate at which they occur.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   ::= { lmpObjects 18 }\
\
lmpLinkPropertyNotificationsEnabled OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "If this object is true, then it enables the\
        generation of lmpTeLinkPropertyMismatch\
        and lmpDataLinkPropertyMismatch notifications,\
        otherwise these notifications are not emitted.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { false }\
   ::= { lmpObjects 19 }\
\
lmpUnprotectedNotificationsEnabled OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "If this object is true, then it enables the\
        generation of lmpUnprotected notifications,\
        otherwise these notifications are not emitted.\
        Implementations should save the value of this object in\
\
\
\
Dubuc, et al.               Standards Track                    [Page 58]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { false }\
   ::= { lmpObjects 20 }\
\
lmpCcUpDownNotificationsEnabled OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "If this object is true, then it enables the generation of\
        lmpControlChannelUp and lmpControlChannelDown notifications,\
        otherwise these notifications are not emitted.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { false }\
   ::= { lmpObjects 21 }\
\
lmpTeLinkNotificationsEnabled OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "If this object is true, then it enables the\
        generation of lmpTeLinkDegraded and lmpTeLinkNotDegraded\
        notifications, otherwise these notifications are not emitted.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { false }\
   ::= { lmpObjects 22 }\
\
lmpDataLinkNotificationsEnabled OBJECT-TYPE\
   SYNTAX        TruthValue\
   MAX-ACCESS    read-write\
   STATUS        current\
   DESCRIPTION\
       "If this object is true, then it enables the\
        generation of lmpDataLinkVerificationFailure\
        notification, otherwise these notifications are not emitted.\
        Implementations should save the value of this object in\
        persistent memory so that it survives restarts or reboot."\
   DEFVAL        { false }\
   ::= { lmpObjects 23 }\
\
\
-- Notifications\
\
-- Link Property Mismatch Notifications\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 59]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpTeLinkPropertyMismatch NOTIFICATION-TYPE\
   OBJECTS       { teLinkRemoteIpAddr,\
                   teLinkIncomingIfId }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a TE link property\
        mismatch is detected on the node.  The received remote TE link\
        ID of the misconfigured TE link is represented by either\
        teLinkRemoteIpAddr or teLinkIncomingIfId depending on whether\
        the TE link is numbered or unnumbered.  This notification\
        should not be sent unless lmpLinkPropertyNotificationsEnabled\
        is true.  It is recommended that this notification be reported\
        only the first time a mismatch is detected.  Otherwise, for a\
        given TE link, this notification can occur no more than once\
        per verification interval (lmpGlobalLinkVerificationInterval)."\
   ::= { lmpNotifications 1 }\
\
lmpDataLinkPropertyMismatch NOTIFICATION-TYPE\
   OBJECTS       { lmpDataLinkType, lmpDataLinkRemoteIfId }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a data-bearing link\
        property mismatch is detected on the node.  lmpDataLinkType\
        is used to identify the local identifiers associated with\
        the data link (the data link interface index can be used\
        to determine the TE link interface index as this\
        relationship is captured in the interface stack table).\
        The remote entity interface ID is the remote entity\
        interface ID received in the LinkSummary message.\
        This notification should not be sent unless\
        lmpLinkPropertyNotificationsEnabled is true.  It is\
        recommended that this notification be reported only the\
        first time a mismatch is detected.  Otherwise, for a given\
        data link, this notification can occur no more than once\
        per verification interval (lmpGlobalLinkVerificationInterval)."\
   ::= { lmpNotifications 2 }\
\
-- Neighbor Notification\
\
lmpUnprotected NOTIFICATION-TYPE\
   OBJECTS       { lmpCcNbrNodeId }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when there are more than one\
        control channels between LMP neighbors and the last redundant\
        control channel has failed.  If the remaining operational\
        control channel fails, then there will be no more control\
        channels between the pair of nodes and all the TE links\
\
\
\
Dubuc, et al.               Standards Track                    [Page 60]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
        between the pair of nodes will go to degraded state.  This\
        notification should not be sent unless\
        lmpUnprotectedNotificationsEnabled is set to true."\
   ::= { lmpNotifications 3 }\
\
-- Control Channel Notifications\
\
lmpControlChannelUp NOTIFICATION-TYPE\
   OBJECTS       { lmpCcAdminStatus, lmpCcOperStatus }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a control\
        channel transitions to the up operational state.  This\
        notification should not be sent unless\
        lmpCcUpDownNotificationsEnabled is true."\
   ::= { lmpNotifications 4 }\
\
lmpControlChannelDown NOTIFICATION-TYPE\
   OBJECTS       { lmpCcAdminStatus, lmpCcOperStatus }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a control channel\
        transitions out of the up operational state.  This\
        notification should not be sent unless\
        lmpCcUpDownNotificationsEnabled is true."\
   ::= { lmpNotifications 5 }\
\
-- TE Link Notification\
\
lmpTeLinkDegraded NOTIFICATION-TYPE\
   OBJECTS       { lmpTeLinkOperStatus }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a lmpTeLinkOperStatus\
        object for a TE link enters the degraded state.  This\
        notification should not be sent unless\
        lmpTeLinkNotificationsEnabled is true."\
   ::= { lmpNotifications 6 }\
\
lmpTeLinkNotDegraded NOTIFICATION-TYPE\
   OBJECTS       { lmpTeLinkOperStatus }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a lmpTeLinkOperStatus\
        object for a TE link leaves the degraded state.  This\
        notification should not be sent unless\
        lmpTeLinkNotificationsEnabled is true."\
   ::= { lmpNotifications 7 }\
\
\
\
Dubuc, et al.               Standards Track                    [Page 61]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
-- Data-bearing Link Notification\
\
lmpDataLinkVerificationFailure NOTIFICATION-TYPE\
   OBJECTS       { lmpDataLinkActiveOperStatus,\
                   lmpDataLinkPassiveOperStatus }\
   STATUS        current\
   DESCRIPTION\
       "This notification is generated when a data-bearing\
        link verification fails.  This notification should not be sent\
        unless lmpDataLinkNotificationsEnabled is true.  For a given\
        data link, this notification can occur no more than once per\
        verification interval (lmpGlobalLinkVerificationInterval)."\
   ::= { lmpNotifications 8 }\
\
-- End of notifications\
\
\
-- Module compliance\
\
lmpCompliances\
   OBJECT IDENTIFIER ::= { lmpConformance 1 }\
\
lmpGroups\
   OBJECT IDENTIFIER ::= { lmpConformance 2 }\
\
lmpModuleFullCompliance MODULE-COMPLIANCE\
   STATUS current\
   DESCRIPTION\
       "Compliance statement for agents that support the\
        configuration and monitoring of LMP MIB."\
   MODULE -- this module\
\
      MANDATORY-GROUPS    { lmpNodeGroup,\
                            lmpControlChannelGroup,\
                            lmpLinkPropertyCorrelationGroup,\
                            lmpPerfGroup,\
                            lmpTeLinkGroup,\
                            lmpDataLinkGroup }\
\
      GROUP lmpCcIsNotInterfaceGroup\
      DESCRIPTION\
          "This group is mandatory for devices that support\
           control channels that are not interfaces, in addition to\
           lmpControlChannelGroup.  The following constraints apply:\
           lmpCcIsIf must at least be read-only returning false(1)."\
\
      GROUP lmpCcIsInterfaceGroup\
      DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 62]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
          "This group is mandatory for devices that support\
           control channels that are interfaces, in addition to\
           lmpControlChannelGroup.  The following constraints apply:\
           lmpCcIsIf must at least be read-only returning true(2)."\
\
      GROUP lmpLinkVerificationGroup\
      DESCRIPTION\
          "This group is mandatory for devices that support\
           the link verification procedure."\
\
      GROUP lmpNotificationGroup\
      DESCRIPTION\
          "This group is optional."\
\
      -- lmpNbrTable\
\
      OBJECT      lmpNbrRowStatus\
      SYNTAX      RowStatus { active(1), notInService(2) }\
      WRITE-SYNTAX RowStatus { active(1), notInService(2),\
                               createAndGo(4), destroy(6) }\
      DESCRIPTION\
          "Support for notReady(3) and createAndWait(5) is\
           not required."\
\
      -- lmpControlChannelTable\
\
      OBJECT      lmpCcRemoteAddressType\
      SYNTAX      INTEGER { unknown(0), ipv4(1), ipv6(2) }\
      DESCRIPTION\
          "Only ipv4(1) and ipv6(2) address types need to be\
           supported for non-point-to-point configurations."\
\
      OBJECT      lmpCcRemoteIpAddr\
      SYNTAX      InetAddress (SIZE(0|4|16))\
      DESCRIPTION\
          "The size of the IP address depends on the address type."\
\
      OBJECT      lmpCcRowStatus\
      SYNTAX      RowStatus { active(1), notInService(2) }\
      WRITE-SYNTAX RowStatus { active(1), notInService(2),\
                               createAndGo(4), destroy(6) }\
      DESCRIPTION\
          "Support for notReady(3) and createAndWait(5) is\
           not required."\
\
      OBJECT      lmpCcOperStatus\
      SYNTAX      INTEGER { up(1), down(2) }\
      DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 63]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
          "A value of configSnd(3), configRcv(4), active(5),\
           goingDown(6) need not be supported."\
\
      -- lmpTeLinkTable\
\
      OBJECT      lmpTeLinkOperStatus\
      SYNTAX      INTEGER { up(1), down(2), degraded(5) }\
      DESCRIPTION\
          "The testing(3) and init(4) state need not be supported."\
\
      OBJECT      lmpTeLinkRowStatus\
      SYNTAX      RowStatus { active(1), notInService(2) }\
      WRITE-SYNTAX RowStatus { active(1), notInService(2),\
                               createAndGo(4), destroy(6) }\
      DESCRIPTION\
          "Support for notReady(3) and createAndWait(5) is\
           not required."\
\
      -- lmpDataLinkTable\
\
      OBJECT      lmpDataLinkActiveOperStatus\
      SYNTAX      INTEGER { upAlloc(1), upFree(2), down(3) }\
      DESCRIPTION\
          "A value of testing(4) need not be supported."\
\
      OBJECT      lmpDataLinkPassiveOperStatus\
      SYNTAX      INTEGER { upAlloc(1), upFree(2), down(3) }\
      DESCRIPTION\
          "A value of psvTst(4) need not be supported."\
\
      OBJECT      lmpDataLinkRowStatus\
      SYNTAX      RowStatus { active(1), notInService(2) }\
      WRITE-SYNTAX RowStatus { active(1), notInService(2),\
                               createAndGo(4), destroy(6) }\
      DESCRIPTION\
          "Support for notReady(3) and createAndWait(5) is\
           not required."\
\
   ::= { lmpCompliances 1 }\
\
lmpModuleReadOnlyCompliance MODULE-COMPLIANCE\
   STATUS current\
   DESCRIPTION\
       "Compliance statement for agents that support the\
        monitoring of the LMP MIB."\
   MODULE -- this module\
\
      -- The mandatory groups have to be implemented\
\
\
\
Dubuc, et al.               Standards Track                    [Page 64]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      -- by all LMP-enabled devices.  However, they may all be supported\
      -- as read-only objects in the case where manual\
      -- configuration is not supported.\
\
      MANDATORY-GROUPS    { lmpNodeGroup,\
                            lmpControlChannelGroup,\
                            lmpLinkPropertyCorrelationGroup,\
                            lmpPerfGroup,\
                            lmpTeLinkGroup,\
                            lmpDataLinkGroup }\
\
      GROUP lmpCcIsNotInterfaceGroup\
      DESCRIPTION\
          "This group is mandatory for devices that support\
           control channels that are not interfaces, in addition to\
           lmpControlChannelGroup.  The following constraints apply:\
           lmpCcIsIf must at least be read-only returning false(1)."\
\
      GROUP lmpCcIsInterfaceGroup\
      DESCRIPTION\
          "This group is mandatory for devices that support\
           control channels that are interfaces, in addition to\
           lmpControlChannelGroup.  The following constraints apply:\
           lmpCcIsIf must at least be read-only returning true(2)."\
\
      GROUP lmpLinkVerificationGroup\
      DESCRIPTION\
          "This group is mandatory for devices that support\
           the link verification procedure."\
\
      GROUP lmpNotificationGroup\
      DESCRIPTION\
          "This group is optional."\
\
      -- Scalars\
\
      OBJECT      lmpAdminStatus\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpGlobalLinkVerificationInterval\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloIntervalDefault\
      MIN-ACCESS  read-only\
\
\
\
Dubuc, et al.               Standards Track                    [Page 65]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloIntervalDefaultMin\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloIntervalDefaultMax\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloDeadIntervalDefault\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloDeadIntervalDefaultMin\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloDeadIntervalDefaultMax\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpNotificationMaxRate\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpNbrTable\
\
      OBJECT      lmpNbrRetransmitInterval\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpNbrRetryLimit\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpNbrRetransmitDelta\
      MIN-ACCESS  read-only\
      DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 66]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
          "Write access is not required."\
\
      OBJECT      lmpNbrRowStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required, and active(1) is the\
           only status that needs to be supported."\
\
      OBJECT      lmpNbrStorageType\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpControlChannelTable\
\
      OBJECT      lmpCcUnderlyingIfIndex\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcIsIf\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcNbrNodeId\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcRemoteAddressType\
      SYNTAX      INTEGER { unknown(0), ipv4(1), ipv6(2) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Only ipv4(1) and ipv6(2) address types need to be\
           supported for non-point-to-point configurations."\
\
      OBJECT      lmpCcRemoteIpAddr\
      SYNTAX      InetAddress (SIZE(0|4|16))\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "The size of the IP address depends on the address type."\
\
      OBJECT      lmpCcSetupRole\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
\
\
Dubuc, et al.               Standards Track                    [Page 67]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      OBJECT      lmpCcAuthentication\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloIntervalMin\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloIntervalMax\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloDeadIntervalMin\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcHelloDeadIntervalMax\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpCcRowStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required, and active(1) is the\
           only status that needs to be supported."\
\
      OBJECT      lmpCcOperStatus\
      SYNTAX      INTEGER { up(1), down(2) }\
      DESCRIPTION\
          "A value of configSnd(3), configRcv(4), active(5),\
           goingDown(6) need not be supported."\
\
      OBJECT      lmpCcStorageType\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpLinkVerificationTable\
\
      OBJECT      lmpLinkVerifyInterval\
      MIN-ACCESS  read-only\
      DESCRIPTION\
\
\
\
Dubuc, et al.               Standards Track                    [Page 68]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
          "Write access is not required."\
\
      OBJECT      lmpLinkVerifyDeadInterval\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpLinkVerifyAllLinks\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpTeLinkTable\
\
      OBJECT      lmpTeLinkNbrRemoteNodeId\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required if the link verification\
           procedure is enabled."\
\
      OBJECT      lmpTeLinkVerification\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpTeLinkFaultManagement\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpTeLinkDwdm\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpTeLinkOperStatus\
      SYNTAX      INTEGER { up(1), down(2), degraded(5) }\
      DESCRIPTION\
          "The testing(3) and init(4) state need not be supported."\
\
      OBJECT      lmpTeLinkRowStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required, and active(1) is the\
           only status that needs to be supported."\
\
      OBJECT      lmpTeLinkStorageType\
\
\
\
Dubuc, et al.               Standards Track                    [Page 69]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpTeLinkVerificationTable\
\
      OBJECT      lmpLinkVerifyTransmissionRate\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpLinkVerifyWavelength\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpLinkVerifyRowStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required, and active(1) is the\
           only status that needs to be supported."\
\
      OBJECT      lmpLinkVerifyStorageType\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      -- lmpDataLinkTable\
\
      OBJECT      lmpDataLinkAddressType\
      SYNTAX      INTEGER { unknown(0), ipv4(1), ipv6(2) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Only ipv4(1) and ipv6(2) address types need to be\
           supported for numbered links.  For unnumbered links, the\
           unknown(0) address type needs to be supported."\
\
      OBJECT      lmpDataLinkIpAddr\
      SYNTAX      InetAddress (SIZE(0|4|16))\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Size of data-bearing link IP address depends on type\
           of data-bearing link.  Data-bearing link IP address size\
           is zero if link is unnumbered, four if link IP address is\
           IPv4, and sixteen if link IP address is IPv6."\
\
      OBJECT      lmpDataLinkRemoteIpAddress\
\
\
\
Dubuc, et al.               Standards Track                    [Page 70]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
      SYNTAX      InetAddress (SIZE(0|4|16))\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required if the link verification\
           procedure is enabled."\
\
      OBJECT      lmpDataLinkRemoteIfId\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required if the link verification\
           procedure is enabled."\
\
      OBJECT      lmpDataLinkEncodingType\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
      OBJECT      lmpDataLinkActiveOperStatus\
      SYNTAX      INTEGER { upAlloc(1), upFree(2), down(3) }\
      DESCRIPTION\
          "A value of testing(4) need not be supported."\
\
      OBJECT      lmpDataLinkPassiveOperStatus\
      SYNTAX      INTEGER { upAlloc(1), upFree(2), down(3) }\
      DESCRIPTION\
          "A value of psvTst(4) need not be supported."\
\
      OBJECT      lmpDataLinkRowStatus\
      SYNTAX      RowStatus { active(1) }\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required, and active(1) is the\
           only status that needs to be supported."\
\
      OBJECT      lmpDataLinkStorageType\
      MIN-ACCESS  read-only\
      DESCRIPTION\
          "Write access is not required."\
\
   ::= { lmpCompliances 2 }\
\
-- Units of conformance\
\
lmpNodeGroup OBJECT-GROUP\
   OBJECTS { lmpAdminStatus,\
             lmpOperStatus,\
             lmpNbrAdminStatus,\
             lmpNbrOperStatus,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 71]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
             lmpNbrRowStatus,\
             lmpNbrStorageType,\
             lmpUnprotectedNotificationsEnabled,\
             lmpNotificationMaxRate\
           }\
   STATUS  current\
   DESCRIPTION\
          "Collection of objects that represent LMP node\
           configuration."\
   ::= { lmpGroups 1 }\
\
lmpControlChannelGroup OBJECT-GROUP\
   OBJECTS {\
             lmpNbrRetransmitInterval,\
             lmpNbrRetryLimit,\
             lmpNbrRetransmitDelta,\
             lmpNbrAdminStatus,\
             lmpNbrOperStatus,\
             lmpNbrRowStatus,\
             lmpNbrStorageType,\
             lmpCcHelloIntervalDefault,\
             lmpCcHelloIntervalDefaultMin,\
             lmpCcHelloIntervalDefaultMax,\
             lmpCcHelloDeadIntervalDefault,\
             lmpCcHelloDeadIntervalDefaultMin,\
             lmpCcHelloDeadIntervalDefaultMax,\
             lmpCcNbrNodeId,\
             lmpCcRemoteId,\
             lmpCcRemoteAddressType,\
             lmpCcRemoteIpAddr,\
             lmpCcSetupRole,\
             lmpCcAuthentication,\
             lmpCcHelloInterval,\
             lmpCcHelloIntervalMin,\
             lmpCcHelloIntervalMax,\
             lmpCcHelloIntervalNegotiated,\
             lmpCcHelloDeadInterval,\
             lmpCcHelloDeadIntervalMin,\
             lmpCcHelloDeadIntervalMax,\
             lmpCcHelloDeadIntervalNegotiated,\
             lmpCcOperStatus,\
             lmpCcRowStatus,\
             lmpCcStorageType,\
             lmpCcUpDownNotificationsEnabled\
           }\
   STATUS  current\
   DESCRIPTION\
          "Objects that can be used to configure LMP interface."\
\
\
\
Dubuc, et al.               Standards Track                    [Page 72]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   ::= { lmpGroups 2 }\
\
lmpCcIsInterfaceGroup OBJECT-GROUP\
   OBJECTS { lmpCcIsIf }\
   STATUS  current\
   DESCRIPTION\
          "Objects that can be used to configure control channels\
           that are interfaces."\
   ::= { lmpGroups 3 }\
\
lmpCcIsNotInterfaceGroup OBJECT-GROUP\
   OBJECTS { lmpCcUnderlyingIfIndex,\
             lmpCcIsIf,\
             lmpCcLastChange,\
             lmpCcAdminStatus\
           }\
   STATUS  current\
   DESCRIPTION\
          "Objects that can be used to configure control channels\
           that are not interfaces."\
   ::= { lmpGroups 4 }\
\
lmpLinkPropertyCorrelationGroup OBJECT-GROUP\
   OBJECTS { lmpLinkPropertyNotificationsEnabled }\
   STATUS  current\
   DESCRIPTION\
          "Collection of objects used to configure the link\
           property correlation procedure."\
   ::= { lmpGroups 5 }\
\
lmpLinkVerificationGroup OBJECT-GROUP\
   OBJECTS { lmpGlobalLinkVerificationInterval,\
             lmpLinkVerifyInterval,\
             lmpLinkVerifyDeadInterval,\
             lmpLinkVerifyTransportMechanism,\
             lmpLinkVerifyAllLinks,\
             lmpLinkVerifyTransmissionRate,\
             lmpLinkVerifyWavelength,\
             lmpLinkVerifyRowStatus,\
             lmpLinkVerifyStorageType,\
             lmpDataLinkNotificationsEnabled\
           }\
   STATUS  current\
   DESCRIPTION\
          "Collection of objects that represent the link\
           verification procedure configuration."\
   ::= { lmpGroups 6 }\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 73]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
lmpPerfGroup OBJECT-GROUP\
   OBJECTS { lmpCcInOctets,\
             lmpCcInDiscards,\
             lmpCcInErrors,\
             lmpCcOutOctets,\
             lmpCcOutDiscards,\
             lmpCcOutErrors,\
             lmpCcConfigReceived,\
             lmpCcConfigSent,\
             lmpCcConfigRetransmit,\
             lmpCcConfigAckReceived,\
             lmpCcConfigAckSent,\
             lmpCcConfigNackSent,\
             lmpCcConfigNackReceived,\
             lmpCcHelloReceived,\
             lmpCcHelloSent,\
             lmpCcBeginVerifyReceived,\
             lmpCcBeginVerifySent,\
             lmpCcBeginVerifyRetransmit,\
             lmpCcBeginVerifyAckReceived,\
             lmpCcBeginVerifyAckSent,\
             lmpCcBeginVerifyNackReceived,\
             lmpCcBeginVerifyNackSent,\
             lmpCcEndVerifyReceived,\
             lmpCcEndVerifySent,\
             lmpCcEndVerifyRetransmit,\
             lmpCcEndVerifyAckReceived,\
             lmpCcEndVerifyAckSent,\
             lmpCcTestStatusSuccessReceived,\
             lmpCcTestStatusSuccessSent,\
             lmpCcTestStatusSuccessRetransmit,\
             lmpCcTestStatusFailureReceived,\
             lmpCcTestStatusFailureSent,\
             lmpCcTestStatusFailureRetransmit,\
             lmpCcTestStatusAckReceived,\
             lmpCcTestStatusAckSent,\
             lmpCcLinkSummaryReceived,\
             lmpCcLinkSummarySent,\
             lmpCcLinkSummaryRetransmit,\
             lmpCcLinkSummaryAckReceived,\
             lmpCcLinkSummaryAckSent,\
             lmpCcLinkSummaryNackReceived,\
             lmpCcLinkSummaryNackSent,\
             lmpCcChannelStatusReceived,\
             lmpCcChannelStatusSent,\
             lmpCcChannelStatusRetransmit,\
             lmpCcChannelStatusAckReceived,\
             lmpCcChannelStatusAckSent,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 74]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
             lmpCcChannelStatusReqReceived,\
             lmpCcChannelStatusReqSent,\
             lmpCcChannelStatusReqRetransmit,\
             lmpCcChannelStatusRspReceived,\
             lmpCcChannelStatusRspSent,\
             lmpCcCounterDiscontinuityTime,\
             lmpTeInOctets,\
             lmpTeOutOctets,\
             lmpTeBeginVerifyReceived,\
             lmpTeBeginVerifySent,\
             lmpTeBeginVerifyRetransmit,\
             lmpTeBeginVerifyAckReceived,\
             lmpTeBeginVerifyAckSent,\
             lmpTeBeginVerifyNackReceived,\
             lmpTeBeginVerifyNackSent,\
             lmpTeEndVerifyReceived,\
             lmpTeEndVerifySent,\
             lmpTeEndVerifyRetransmit,\
             lmpTeEndVerifyAckReceived,\
             lmpTeEndVerifyAckSent,\
             lmpTeTestStatusSuccessReceived,\
             lmpTeTestStatusSuccessSent,\
             lmpTeTestStatusSuccessRetransmit,\
             lmpTeTestStatusFailureReceived,\
             lmpTeTestStatusFailureSent,\
             lmpTeTestStatusFailureRetransmit,\
             lmpTeTestStatusAckReceived,\
             lmpTeTestStatusAckSent,\
             lmpTeLinkSummaryReceived,\
             lmpTeLinkSummarySent,\
             lmpTeLinkSummaryRetransmit,\
             lmpTeLinkSummaryAckReceived,\
             lmpTeLinkSummaryAckSent,\
             lmpTeLinkSummaryNackReceived,\
             lmpTeLinkSummaryNackSent,\
             lmpTeChannelStatusReceived,\
             lmpTeChannelStatusSent,\
             lmpTeChannelStatusRetransmit,\
             lmpTeChannelStatusAckReceived,\
             lmpTeChannelStatusAckSent,\
             lmpTeChannelStatusReqReceived,\
             lmpTeChannelStatusReqSent,\
             lmpTeChannelStatusReqRetransmit,\
             lmpTeChannelStatusRspSent,\
             lmpTeChannelStatusRspReceived,\
             lmpTeCounterDiscontinuityTime,\
             lmpDataLinkTestReceived,\
             lmpDataLinkTestSent,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 75]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
             lmpDataLinkActiveTestSuccess,\
             lmpDataLinkActiveTestFailure,\
             lmpDataLinkPassiveTestSuccess,\
             lmpDataLinkPassiveTestFailure,\
             lmpDataLinkDiscontinuityTime\
           }\
   STATUS  current\
   DESCRIPTION\
          "Collection of objects used to provide performance\
           information about LMP interfaces and data-bearing links."\
   ::= { lmpGroups 7 }\
\
lmpTeLinkGroup OBJECT-GROUP\
   OBJECTS { lmpTeLinkNbrRemoteNodeId,\
             lmpTeLinkVerification,\
             lmpTeLinkFaultManagement,\
             lmpTeLinkDwdm,\
             lmpTeLinkOperStatus,\
             lmpTeLinkRowStatus,\
             lmpTeLinkStorageType,\
             lmpTeLinkNotificationsEnabled\
           }\
   STATUS  current\
   DESCRIPTION\
          "Objects that can be used to configure TE links."\
   ::= { lmpGroups 8 }\
\
lmpDataLinkGroup OBJECT-GROUP\
   OBJECTS { lmpDataLinkType,\
             lmpDataLinkAddressType,\
             lmpDataLinkIpAddr,\
             lmpDataLinkRemoteIpAddress,\
             lmpDataLinkRemoteIfId,\
             lmpDataLinkEncodingType,\
             lmpDataLinkActiveOperStatus,\
             lmpDataLinkPassiveOperStatus,\
             lmpDataLinkRowStatus,\
             lmpDataLinkStorageType\
           }\
   STATUS  current\
   DESCRIPTION\
          "Collection of objects that represent data-bearing link\
           configuration."\
   ::= { lmpGroups 9 }\
\
lmpNotificationGroup NOTIFICATION-GROUP\
   NOTIFICATIONS { lmpTeLinkPropertyMismatch,\
                   lmpDataLinkPropertyMismatch,\
\
\
\
Dubuc, et al.               Standards Track                    [Page 76]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
                   lmpUnprotected,\
                   lmpControlChannelUp,\
                   lmpControlChannelDown,\
                   lmpTeLinkDegraded,\
                   lmpTeLinkNotDegraded,\
                   lmpDataLinkVerificationFailure }\
   STATUS  current\
   DESCRIPTION\
          "Set of notifications defined in this module."\
   ::= { lmpGroups 10 }\
\
-- End of LMP-MIB\
END\
\
10.  Security Considerations\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write and/or read-create.  Such\
   objects may be considered sensitive or vulnerable in some network\
   environments.  The support for SET operations in a non-secure\
   environment without proper protection can have a negative effect on\
   network operations.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
   -   Unauthorized changes to the lmpNbrTable, lmpControlChannelTable,\
       lmpTeLinkTable, and lmpDataLinkTable may disrupt allocation of\
       resources in the network.\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
   control even GET and/or NOTIFY access to these objects and possibly\
   to even encrypt the values of these objects when sending them over\
   the network via SNMP.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
   -   The lmpNbrTable exposes network provider's node IP addresses.\
\
   -   lmpControlChannelTable exposes network provider's control\
       network.\
\
   -   lmpDataLinkTable exposes network provider's data network.\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPSec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.\
\
\
\
Dubuc, et al.               Standards Track                    [Page 77]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   It is RECOMMENDED that implementers consider the security features as\
   provided by the SNMPv3 framework (see [RFC3410], section 8),\
   including full support for the SNMPv3 cryptographic mechanisms (for\
   authentication and privacy).\
\
   Further, deployment of SNMP versions prior to SNMPv3 is NOT\
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\
   enable cryptographic security.  It is then a customer/operator\
   responsibility to ensure that the SNMP entity giving access to an\
   instance of this MIB module is properly configured to give access to\
   the objects only to those principals (users) that have legitimate\
   rights to indeed GET or SET (change/create/delete) them.\
\
11.  Contributors\
\
   Sudheer Dharanikota\
   EMail: sudheer@ieee.org\
\
12.  Acknowledgements\
\
   The general structure of this document has been modeled around the\
   MPLS Label Switching Router (LSR) MIB [RFC3813].\
\
   The authors wish to thank Dmitry Ryumkin, Baktha Muralidharan and\
   George Wang.\
\
13.  IANA Considerations\
\
   Each of the following "IANA Considerations" subsections requested\
   IANA for new assignments.  New assignments can only be made via a\
   Standards Action as specified in [RFC2434].\
\
13.1.  IANA Considerations for lmp ifType\
\
   The IANA has assigned 227 ifType for LMP interfaces.\
\
13.2.  IANA Considerations for LMP-MIB\
\
   The IANA has assigned { transmission 227 } to the LMP-MIB module\
   specified in this document.\
\
\
\
\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 78]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
14.  References\
\
14.1.  Normative References\
\
   [RFC2119]     Bradner, S., "Key words for use in RFCs to Indicate\
                 Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2434]     Narten, T. and H. Alvestrand, "Guidelines for Writing\
                 an IANA Considerations Section in RFCs", BCP 26, RFC\
                 2434, October 1998.\
\
   [RFC2578]     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
                 "Structure of Management Information Version 2\
                 (SMIv2)", STD 58, RFC 2578, April 1999.\
\
   [RFC2579]     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
                 "Textual Conventions for SMIv2", STD 58, RFC 2579,\
                 April 1999.\
\
   [RFC2580]     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
                 "Conformance Statements for SMIv2", STD 58, RFC 2580,\
                 April 1999.\
\
   [RFC2863]     McCloghrie, K. and F. Kastenholz, "The Interfaces Group\
                 MIB", RFC 2863, June 2000.\
\
   [RFC2914]     Floyd, S., "Congestion Control Principles", BCP 41, RFC\
                 2914, September 2000.\
\
   [RFC3471]     Berger, L., "Generalized Multi-Protocol Label Switching\
                 (GMPLS) Signaling Functional Description", RFC 3471,\
                 January 2003.\
\
   [RFC4001]     Daniele, M., Haberman, B., Routhier, S., and J.\
                 Schoenwaelder, "Textual Conventions for Internet\
                 Network Addresses", RFC 4001, February 2005.\
\
   [RFC4204]     Lang, J., "Link Management Protocol (LMP)", RFC 4204,\
                 October 2005.\
\
   [RFC4207]     Lang, J. and D. Papadimitriou, "Synchronous Optical\
                 Network (SONET)/Synchronous Digital Hierarchy (SDH)\
                 Encoding for Link Management Protocol (LMP) Test\
                 Messages", RFC 4207, October 2005.\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 79]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
   [RFC4209]     Fredette, A., Ed. and J. Lang, Ed., "Link Management\
                 Protocol (LMP) for Dense Wavelength Division\
                 Multiplexing (DWDM) Optical Line Systems", RFC 4209,\
                 October 2005.\
\
   [RFC4220]     Dubuc, M., Nadeau, T., and J. Lang, "Traffic\
                 Engineering Link Management Information Base", RFC\
                 4220, November 2005.\
\
14.2.  Informative References\
\
   [RFC3410]     Case, J., Mundy, R., Partain, D., and B. Stewart,\
                 "Introduction and Applicability Statements for\
                 Internet-Standard Management Framework", RFC 3410,\
                 December 2002.\
\
   [RFC3813]     Srinivasan, C., Viswanathan, A., and T. Nadeau,\
                 "Multiprotocol Label Switching (MPLS) Traffic\
                 Engineering (TE) Management Information Base (MIB)",\
                 RFC 3812, June 2004.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 80]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
Authors' Addresses\
\
   Martin Dubuc\
\
   EMail: dubuc.consulting@sympatico.ca\
\
\
   Thomas D. Nadeau\
   Cisco Systems, Inc.\
   1414 Massachusetts Ave.\
   Boxborough, MA 01719\
\
   EMail: tnadeau@cisco.com\
\
\
   Jonathan P. Lang\
   Sonos, Inc.\
   223 E. De La Guerra St.\
   Santa Barbara, CA 93101\
\
   EMail: jplang@ieee.org\
\
\
   Evan McGinnis\
   Hammerhead Systems\
   640 Clyde Court\
   Mountain View, CA 94043\
\
   EMail: emcginnis@hammerheadsystems.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 81]\
\
RFC 4327                     LMP-MIB Module                 January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Dubuc, et al.               Standards Track                    [Page 82]\
\

doc 13
  field 0
    name titolo
    type string
    value rfc4319.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           C. Sikes\
Request for Comments: 4319                      Zhone Technologies, Inc.\
Obsoletes: 3276                                                   B. Ray\
Category: Standards Track                   PESA Switching Systems, Inc.\
                                                                 R. Abbi\
                                                             Alcatel USA\
                                                           December 2005\
\
\
                  Definitions of Managed Objects for\
            High Bit-Rate DSL - 2nd generation (HDSL2) and\
      Single-Pair High-Speed Digital Subscriber Line (SHDSL) Lines\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document defines a Management Information Base (MIB) module for\
   use with network management protocols in the Internet community.  In\
   particular, it describes objects used for managing High Bit-Rate\
   Digital Subscriber Line (DSL) - 2nd generation (HDSL2) and\
   Single-Pair High-Speed Digital Subscriber Line (SHDSL) interfaces.\
   This document introduces extensions to several objects and textual\
   conventions defined in HDSL2-SHDSL-Line MIB (RFC 3276).  This\
   document obsoletes RFC 3276.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                     [Page 1]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
Table of Contents\
\
   1. The Internet-Standard Management Framework ......................2\
   2. Overview ........................................................2\
      2.1. Relationship to Other MIBs .................................3\
           2.1.1. General IF-MIB Integration (RFC 2863) ...............3\
           2.1.2. Usage of ifTable ....................................3\
      2.2. IANA Considerations ........................................4\
      2.3. Conventions Used in the MIB Module .........................5\
           2.3.1. Naming Conventions ..................................5\
           2.3.2. Textual Conventions .................................5\
      2.4. Structure ..................................................7\
      2.5. Line Topology ..............................................9\
      2.6. Counters, Interval Buckets, and Thresholds ................10\
      2.7. Profiles ..................................................11\
      2.8. Notifications .............................................12\
   3. Definitions ....................................................14\
   4. Implementation Analysis ........................................66\
   5. Security Considerations ........................................66\
   6. Acknowledgements ...............................................71\
   7. References .....................................................72\
      7.1. Normative References ......................................72\
      7.2. Informative References ....................................73\
\
1.  The Internet-Standard Management Framework\
\
   For a detailed overview of the documents that describe the current\
   Internet-Standard Management Framework, please refer to Section 7 of\
   RFC 3410 [RFC3410].\
\
   Managed objects are accessed via a virtual information store, termed\
   the Management Information Base or MIB.  MIB objects are generally\
   accessed through the Simple Network Management Protocol (SNMP).\
   Objects in the MIB are defined using the mechanisms defined in the\
   Structure of Management Information (SMI).  This memo specifies a MIB\
   module that is compliant to the SMIv2, which is described in STD 58,\
   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\
   [RFC2580].\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [RFC2119].\
\
2.  Overview\
\
   This document defines a Management Information Base (MIB) module for\
   use with network management protocols in the Internet community for\
   the purpose of managing HDSL2/SHDSL lines.\
\
\
\
Sikes, et al.               Standards Track                     [Page 2]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   The MIB module described in RFC 3276 [RFC3276] describes objects used\
   for managing High Bit-Rate DSL - 2nd generation (HDSL2) [T1E1.4] and\
   Single-Pair High-Speed Digital Subscriber Line (SHDSL) interfaces\
   [G.991.2].  These object descriptions are based upon the\
   specifications for the HDSL2 and SHDSL Embedded Operations Channel\
   (EOC), as defined in the American National Standards Institute (ANSI)\
   T1E1.4/2000-006 [T1E1.4] and International Telecommunication Union\
   (ITU) G.991.2 [G.991.2].\
\
   This document obsoletes RFC 3276 [RFC3276], which supports G.shdsl in\
   that the MIB module described herein supports G.shdsl.bis as\
   described in the G.991.2 [G.991.2].  In addition, objects have been\
   added to improve the management of SHDSL lines.\
\
   The MIB module is located in the MIB tree under MIB 2 transmission,\
   as discussed in the MIB-2 Integration (RFC 2863 [RFC2863]) section of\
   this document.\
\
2.1.  Relationship to Other MIBs\
\
   This section outlines the relationship of this MIB module with other\
   MIB modules described in RFCs.  Specifically, the IF-MIB, as\
   presented in RFC 2863 [RFC2863], is discussed.\
\
2.1.1.  General IF-MIB Integration (RFC 2863)\
\
   The HDSL2/SHDSL line MIB specifies the detailed attributes of a data\
   interface.  As such, it needs to integrate with RFC 2863 [RFC2863].\
   The IANA has assigned the following ifTypes to HDSL2 and SHDSL:\
\
      IANAifType ::= TEXTUAL-CONVENTION\
          ...\
      SYNTAX INTEGER {\
          ...\
          hdsl2 (168), -- High Bit-Rate DSL, 2nd generation\
          shdsl (169), -- Multirate HDSL2\
          ...\
          }\
\
   Note that the ifFixedLengthGroup from RFC 2863 [RFC2863] MUST be\
   supported and that the ifRcvAddressGroup does not apply to this MIB\
   module.\
\
2.1.2.  Usage of ifTable\
\
   The MIB branch identified by this ifType contains tables appropriate\
   for this interface type.  Most such tables extend the ifEntry table\
   and are indexed by ifIndex.  For interfaces in systems implementing\
\
\
\
Sikes, et al.               Standards Track                     [Page 3]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   this MIB module, those table entries indexed by ifIndex MUST be\
   persistent.\
\
   The following attributes are part of the mandatory\
   ifGeneralInformationGroup in RFC 2863 [RFC2863] and are not\
   duplicated in the HDSL2/SHDSL line MIB.\
\
   ===================================================================\
\
      ifIndex                  Interface index.\
\
      ifDescr                  See interfaces MIB [RFC2863].\
\
      ifType                   hdsl2(168) or shdsl(169).\
\
      ifSpeed                  Set as appropriate.\
                               (This is fixed at 1552000 for HDSL2\
                               lines)\
\
      ifPhysAddress            This object MUST have an octet string\
                               with zero length.\
\
      ifAdminStatus            See interfaces MIB [RFC2863].\
\
      ifOperStatus             See interfaces MIB [RFC2863].\
\
      ifLastChange             See interfaces MIB [RFC2863].\
\
      ifName                   See interfaces MIB [RFC2863].\
\
      ifAlias                  See interfaces MIB [RFC2863].\
\
      ifLinkUpDownTrapEnable   Default to enabled(1).\
\
      ifHighSpeed              Set as appropriate.\
                               (For HDSL2 lines, this is fixed at 2)\
\
      ifConnectorPresent       Set as appropriate.\
\
   ===================================================================\
                     Figure 1: Use of ifTable Objects\
\
2.2.  IANA Considerations\
\
   The HDSL2-SHDSL-LINE-MIB module requires the allocation of a single\
   object identifier for its MODULE-IDENTITY.  The IANA has allocated\
   this object identifier in the transmission subtree (48), defined in\
   the SNMPv2-SMI MIB module.\
\
\
\
Sikes, et al.               Standards Track                     [Page 4]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   The assignment was in fact done when RFC 3276 was published, and this\
   revision of the RFC does not require any new action from IANA.\
\
2.3.  Conventions Used in the MIB Module\
\
2.3.1.  Naming Conventions\
\
   A.  xtuC refers to a central site terminal unit;\
       H2TU-C for HDSL2, or STU-C for SHDSL.\
   B.  xtuR refers to a remote site terminal unit;\
       H2TU-R for HDSL2, or STU-R for SHDSL.\
   C.  xtu refers to a terminal unit; either an xtuC or xtuR.\
   D.  xru refer to a regenerator unit;\
       H2RU for HDSL2, or SRU for SHDSL.\
   E.  xU refers to any HDSL2/SHDSL unit; either an xtu or xru.\
   F.  CRC is Cyclic Redundancy Check [G.991.2].\
   G.  ES means Errored Second [G.991.2].\
   J.  LOSW means Loss of Sync Word [G.991.2].\
   I.  LOSWS means LOSW Seconds [G.991.2].\
   J.  SES means Severely Errored Second [G.991.2].\
   K.  SNR means Signal-to-Noise Ratio [G.991.2].\
   L.  UAS means Unavailable Second [G.991.2].\
\
2.3.2.  Textual Conventions\
\
   The following textual conventions are defined to reflect the line\
   topology in the MIB module (further discussed in the following\
   section) and to define the behavior of the statistics to be\
   maintained by an agent.\
\
   o  Hdsl2ShdslUnitId:\
\
      Attributes with this syntax uniquely identify each unit in an\
      HDSL2/SHDSL span.  It mirrors the EOC addressing mechanism:\
\
         xtuC(1)                - central office (CO) terminal unit\
         xtuR(2)                - customer premises equipment (CPE)\
                                  terminal unit\
         xru1(3) .. xru8(10)    - regenerators, numbered from\
                                  central office side\
\
   o  Hdsl2ShdslUnitSide:\
\
      Attributes with this syntax reference the two sides of a unit:\
\
         networkSide(1)   - N in figure 2, below\
         customerSide(2)  - C in figure 2, below\
\
\
\
\
Sikes, et al.               Standards Track                     [Page 5]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   o  Hdsl2ShdslWirePair:\
\
      Attributes with this syntax reference the wire pairs connecting\
      the units:\
\
         wirePair1(1)   - First pair for HDSL2/SHDSL.\
         wirePair2(2)   - Optional second pair for SHDSL only.\
         wirePair3(3)   - Optional third pair for SHDSL.bis only.\
         wirePair4(4)   - Optional fourth pair for SHDSL.bis only.\
\
   o  Hdsl2ShdslTransmissionModeType:\
\
      Attributes with this syntax specify the regional setting for an\
      SHDSL line.  Specified as a BITS construct, the two mode types\
      are:\
\
         region1   - ITU-T G.991.2 Annex A\
         region2   - ITU-T G.991.2 Annex B\
\
   o  Hdsl2ShdslPerfCurrDayCount:\
\
      Attributes with this syntax define the behavior of the 1-day (24\
      hour) gauges found in the MIB module.\
\
   o  Hdsl2Shdsl1DayIntervalCount:\
\
      Attributes with this syntax define the behavior of the 1-day (24\
      hour) interval counters found in the MIB module.\
\
   o  Hdsl2ShdslPerfTimeElapsed:\
\
      Attributes with this syntax define the behavior of the elapsed\
      time counters found in the MIB module.\
\
   o  Hdsl2ShdslPerfIntervalThreshold:\
\
      Attributes with this syntax define the behavior of the alarm\
      thresholds found in the MIB module.\
\
   o  Hdsl2ShdslClockReferenceType:\
\
      Attributes with this syntax define the clock references for the\
      HDSL2/SHDSL span.\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                     [Page 6]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
2.4.  Structure\
\
   The MIB module is structured into the following MIB groups:\
\
   o  Span Configuration Group:\
\
      This group supports MIB objects for configuring parameters for the\
      HDSL2/SHDSL span.  It contains the following table:\
\
         - hdsl2ShdslSpanConfTable\
\
   o  Span Status Group:\
\
      This group supports MIB objects for retrieving span status\
      information.  It contains the following table:\
\
         - hdsl2ShdslSpanStatusTable\
\
   o  Unit Inventory Group:\
\
      This group supports MIB objects for retrieving unit inventory\
      information about units in HDSL2/SHDSL lines via the EOC.  It\
      contains the following table:\
\
         - hdsl2ShdslInventoryTable\
\
   o  Segment Endpoint Configuration Group:\
\
      This group supports MIB objects for configuring parameters for the\
      HDSL2/SHDSL segment endpoints.  It contains the following table:\
\
         - hdsl2ShdslEndpointConfTable\
\
   o  Segment Endpoint Current Status/Performance Group:\
\
      This group supports MIB objects that provide the current status/\
      performance information relating to segment endpoints.  It\
      contains the following table:\
\
         - hdsl2ShdslEndpointCurrTable\
\
   o  Segment Endpoint 15-Minute Interval Status/Performance Group:\
\
      This group supports MIB objects that provide historic status/\
      performance information relating to segment endpoints in 15-minute\
      intervals.  It contains the following table:\
\
         - hdsl2Shdsl15MinIntervalTable\
\
\
\
Sikes, et al.               Standards Track                     [Page 7]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   o  Segment Endpoint 1-Day Interval Status/Performance Group:\
\
      This group supports MIB objects that provide historic status/\
      performance information relating to segment endpoints in 1-day\
      intervals.  It contains the following table:\
\
         - hdsl2Shdsl1DayIntervalTable\
\
   o  Maintenance Group:\
\
      This group supports MIB objects for performing maintenance\
      operations such as loopbacks for HDSL2/SHDSL lines.  It contains\
      the following table(s):\
\
         - hdsl2ShdslEndpointMaintTable\
         - hdsl2ShdslUnitMaintTable\
\
   o  Span Configuration Profile Group:\
\
      This group supports MIB objects for defining configuration\
      profiles for HDSL2/SHDSL spans.  It contains the following table:\
\
         - hdsl2ShdslSpanConfProfileTable\
\
   o  Segment Endpoint Alarm Configuration Profile Group:\
\
      This group supports MIB objects for defining alarm configuration\
      profiles for HDSL2/SHDSL segment endpoints.  It contains the\
      following table:\
\
         - hdsl2ShdslEndpointAlarmConfProfileTable\
\
   o  Notifications Group:\
\
      This group defines the notifications supported for HDSL2/SHDSL\
      lines:\
\
            - hdsl2ShdslLoopAttenCrossing\
            - hdsl2ShdslSNRMarginCrossing\
            - hdsl2ShdslPerfESThresh\
            - hdsl2ShdslPerfSESThresh\
            - hdsl2ShdslPerfCRCanomaliesThresh\
            - hdsl2ShdslPerfLOSWSThresh\
            - hdsl2ShdslPerfUASThresh\
            - hdsl2ShdslSpanInvalidNumRepeaters\
            - hdsl2ShdslLoopbackFailure\
            - hdsl2ShdslpowerBackoff\
            - hdsl2ShdsldeviceFault\
\
\
\
Sikes, et al.               Standards Track                     [Page 8]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
            - hdsl2ShdsldcContinuityFault\
            - hdsl2ShdslconfigInitFailure\
            - hdsl2ShdslprotocolInitFailure\
            - hdsl2ShdslnoNeighborPresent\
            - hdsl2ShdslLocalPowerLoss\
\
   o  SHDSL Wire Pair Group:\
\
      This group supports MIB objects that provide status of the SHDSL-\
      specific wire pairs.\
\
            - hdsl2ShdslEndpointCurrTipRingReversal\
            - hdsl2ShdslEndpointCurrActivationState\
\
   o  Payload Group:\
\
      This group supports MIB objects for retrieving payload rates that\
      exclude any framing overhead.\
\
            - hdsl2ShdslStatusMaxAttainablePayloadRate\
            - hdsl2ShdslStatusActualPayloadRate\
\
2.5.  Line Topology\
\
   An HDSL2/SHDSL line consists of a minimum of two units: xtuC (the\
   central termination unit) and an xtuR (the remote termination unit).\
   The line may optionally support up to 8 repeater/regenerator units\
   (xru) as shown in the figure below.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                     [Page 9]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
       <-- Network Side                            Customer Side -->\
\
       |</////////////////// HDSL2/SHDSL Span ////////////////////>|\
\
               <~~~>       <~~~> HDSL2/SHDSL Segments  <~~~>\
\
       +-------+   +-------+   +-------+       +-------+   +-------+\
       +       C=1=N       C=1=N       C=..1..=N       C=1=N       +\
       | xtuC  |   |  xru1 |   |  xru2 |       |  xru8 |   |  xtuR |\
       +       C=2=N       C=2=N       C=..2..=N       C=2=N       +\
       +-------+   +-------+   +-------+       +-------+   +-------+\
\
       Key:  <////> HDSL2/SHDSL span\
             <~~~~> HDSL2/SHDSL segment\
             =1=    HDSL2/SHDSL wire-pair-1\
             =2=    SHDSL optional wire-pair-2 (Not applicable to HDSL2)\
             C      Customer side segment endpoint (modem)\
             N      Network side segment endpoint (modem)\
\
            Figure 2: General Topology for an HDSL2/SHDSL Line\
\
2.6.  Counters, Interval Buckets, and Thresholds\
\
   For SNR Margin, Loop Attenuation, ES, SES, CRC anomalies, LOSW, and\
   UAS, there are event counters, current 15-minute and 0 to 96 15-\
   minute history bucket(s) of "interval-counters", as well as current\
   and 0 to 30 previous 1-day interval-counter(s).  Each current 15-\
   minute event bucket has an associated threshold notification.\
\
   Unlike RFC 3593 [RFC3593] and RFC 2662 [RFC2662], there is no\
   representation in the MIB module for invalid buckets.  In those cases\
   where the data for an interval is suspect or known to be invalid, the\
   agent MUST NOT report the interval.  If the current 15-minute event\
   bucket is determined to be invalid, notifications based upon the\
   value of the event bucket MUST NOT be generated.\
\
   Not reporting an interval will result in holes in the associated\
   table.  For example, the table hdsl2Shdsl15MinIntervalTable is\
   indexed by { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide,\
   hdsl2ShdslEndpointWirePair, hdsl2Shdsl15MinIntervalNumber}.  If\
   interval 12 is determined to be invalid but intervals 11 and 13 are\
   valid, a Get Next operation on the indices .1.1.1.1.11 would return\
   indices .1.1.1.1.13.\
\
   There is no requirement for an agent to ensure a fixed relationship\
   between the start of a 15-minute interval and any wall clock;\
   however, some implementations may align the 15-minute intervals with\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 10]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   quarter hours.  Likewise, an implementation may choose to align 1-day\
   intervals with the start of a day.\
\
   Counters are not reset when an xU is reinitialized, only when the\
   agent is reset or reinitialized (or under specific request outside\
   the scope of this MIB module).\
\
2.7.  Profiles\
\
   As a managed node can handle a large number of xUs (e.g., hundreds or\
   perhaps thousands of lines), provisioning every parameter on every xU\
   may become burdensome.  Moreover, most lines are provisioned\
   identically with the same set of parameters.  To simplify the\
   provisioning process, this MIB module makes use of profiles.  A\
   profile is a set of parameters that can be shared by multiple lines\
   using the same configuration.\
\
   The following profiles are used in this MIB module:\
\
   o  Span Configuration Profiles - Span configuration profiles contain\
      parameters for configuring HDSL2/SHDSL spans.  They are defined in\
      the hdsl2ShdslSpanConfProfileTable.  Since span configuration\
      parameters are only applicable for SHDSL, the support for span\
      configuration profiles is optional for HDSL2 interfaces.\
\
      Note that the configuration of the span dictates the behavior for\
      each individual segment endpoint in the span.  If a different\
      configuration is provisioned for any given segment endpoint within\
      the span, the new configuration for this segment endpoint will\
      override the span configuration for this segment endpoint only.\
\
   o  Segment Endpoint Alarm Configuration Profiles - These profiles\
      contain parameters for configuring alarm thresholds for HDSL2/\
      SHDSL segment endpoints.  These profiles are defined in the\
      hdsl2ShdslEndpointAlarmConfProfileTable.\
\
      The index value for this profile is a locally-unique\
      administratively-assigned name for the profile having the textual\
      convention 'SnmpAdminString' (RFC 3411 [RFC3411]).\
\
   One or more lines may be configured to share parameters of a single\
   profile (e.g., hdsl2ShdslEndpointAlarmConfProfile = 'silver') by\
   setting its hdsl2ShdslEndpointAlarmConfProfile objects to the value\
   of this profile.  If a change is made to the profile, all lines that\
   refer to it will be reconfigured to the changed parameters.  Before a\
   profile can be deleted or taken out of service, it must be first\
   unreferenced from all associated lines.\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 11]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   Implementations MUST provide a default profile whose name is 'DEFVAL'\
   for each profile type.  The values of the associated parameters will\
   be vendor specific unless otherwise indicated in this document.\
   Before a line's profiles have been set, these profiles will be\
   automatically used by setting hdsl2ShdslEndpointAlarmConfProfile and\
   hdsl2ShdslSpanConfProfile to 'DEFVAL' where appropriate.  This\
   default profile name, 'DEFVAL', is considered reserved in the context\
   of profiles defined in this MIB module.\
\
   Profiles are created, assigned, and deleted dynamically using the\
   profile name and profile row status in each of the four profile\
   tables.\
\
   Profile changes MUST take effect immediately.  These changes MAY\
   result in a restart (hard reset or soft restart) of the units on the\
   line.\
\
2.8.  Notifications\
\
   The ability to generate the SNMP notifications coldStart/warmStart\
   (per [RFC3418]), which are per agent (e.g., per Digital Subscriber\
   Line Access Multiplexer, or DSLAM, in such a device), and linkUp/\
   linkDown (per [RFC2863]), which are per interface (i.e., HDSL2/SHDSL\
   line) is required.\
\
   A linkDown notification MAY be generated whenever any ES, SES, CRC\
   anomaly, LOSW, or UAS event occurs.  The corresponding linkUp\
   notification MAY be sent when all link failure conditions are\
   cleared.\
\
   The notifications defined in this MIB module are for initialization\
   failure and for the threshold crossings associated with the following\
   events: ES, SES, CRC anomaly, LOSW, and UAS.  Each threshold has its\
   own enable/threshold value.  When that value is 0, the notification\
   is disabled.\
\
   The hdsl2ShdslEndpointCurrStatus is a bitmask representing all\
   outstanding error conditions associated with a particular segment\
   endpoint.  Note that since the status of remote endpoints is obtained\
   via the EOC, this information may be unavailable for units that are\
   unreachable via EOC during a line error condition.  Therefore, not\
   all conditions may always be included in its current status.\
   Notifications corresponding to the bit fields in this object are\
   defined.\
\
   Two alarm conditions, SNR Margin Alarm and Loop Attenuation Alarm,\
   are organized in a manner slightly different from that implied in the\
   EOC specifications.  In the MIB module, these alarm conditions are\
\
\
\
Sikes, et al.               Standards Track                    [Page 12]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   tied to the two thresholds, hdsl2ShdslEndpointThreshSNRMargin and\
   hdsl2ShdslEndpointThreshLoopAttenuation, found in the\
   hdsl2ShdslEndpointAlarmConfProfileTable.  In the EOC, the alarm\
   conditions associated with these thresholds are per unit.  In the MIB\
   module, these alarm conditions are per endpoint.  For terminal units,\
   this has no impact.  For repeaters, this implies an implementation\
   variance where the agent in the terminal unit is responsible for\
   detecting a threshold crossing.  As the reporting of a repeater\
   detected alarm condition to the polling terminal unit occurs in the\
   same EOC message as the reporting of the current SNR Margin and Loop\
   Attenuation values, it is anticipated that this will have very little\
   impact on agent implementation.\
\
   A threshold notification occurs whenever the corresponding current\
   15-minute interval error counter becomes equal to, or exceeds, the\
   threshold value.  Only one notification SHOULD be sent per interval\
   per interface.  Since the current 15-minute counter is reset to 0\
   every 15 minutes, and if the condition persists, the notification may\
   recur as often as every 15 minutes.  For example, to get a\
   notification whenever a "loss of" event occurs (but at most once\
   every 15 minutes), set the corresponding threshold to 1.  The agent\
   will generate a notification when the event originally occurs.\
\
   Notifications, other than the threshold notifications listed above,\
   SHOULD be rate limited (throttled) such that there is at least a\
   1-minute gap between the generation of consecutive notifications of\
   the same event.  When notifications are rate limited, they are\
   dropped and not queued for sending at a future time.  This is\
   intended to be a general rate-limiting statement for notifications\
   that have no explicit rate-limiting assertions in this document\
   otherwise.\
\
   Note that the Network Management System, or NMS, may receive a\
   linkDown notification as well, if enabled (via ifLinkUpDownTrapEnable\
   [RFC2863]).  At the beginning of the next 15-minute interval, the\
   counter is reset.  When the first second goes by and the event\
   occurs, the current interval bucket will be 1, which equals the\
   threshold, and the notification will be sent again.\
\
   An hdsl2ShdslSpanInvalidNumRepeaters notification may be generated\
   following completion of the discovery phase if the number of\
   repeaters discovered on the line differs from the number of repeaters\
   specified in hdsl2ShdslSpanConfNumRepeaters.  For those conditions\
   where the number of provisioned repeaters is greater than those\
   encountered during span discovery, all table entries associated with\
   the nonexistent repeaters are to be discarded.  For those conditions\
   where the number of provisioned repeaters is less than those\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 13]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   encountered during span discovery, additional table entries are to be\
   created using the default span configuration profile.\
\
3.  Definitions\
\
   HDSL2-SHDSL-LINE-MIB DEFINITIONS ::= BEGIN\
\
   IMPORTS\
      MODULE-IDENTITY,\
      OBJECT-TYPE,\
      Counter32,\
      Unsigned32,\
      Gauge32,\
      NOTIFICATION-TYPE,\
      Integer32,\
      transmission\
         FROM SNMPv2-SMI\
      RowStatus,\
      TEXTUAL-CONVENTION\
         FROM SNMPv2-TC\
      ifIndex\
         FROM IF-MIB\
      PerfCurrentCount,\
      PerfIntervalCount\
         FROM PerfHist-TC-MIB\
      SnmpAdminString\
         FROM SNMP-FRAMEWORK-MIB\
      MODULE-COMPLIANCE,\
      OBJECT-GROUP,\
      NOTIFICATION-GROUP\
         FROM SNMPv2-CONF;\
\
   hdsl2ShdslMIB MODULE-IDENTITY\
      LAST-UPDATED "200512070000Z" -- December 7, 2005\
      ORGANIZATION "ADSLMIB Working Group"\
      CONTACT-INFO "WG-email:  adslmib@ietf.org\
         WG-URL:\
            http://www.ietf.org/html.charters/adslmib-charter.html\
         Info:       https://www1.ietf.org/mailman/listinfo/adslmib\
         Chair:      Mike Sneed\
                     Sand Channel Systems\
         Postal:     1210-203 Westview Ln\
                     Raleigh NC 27605  USA\
         Email:      sneedmike@hotmail.com\
         Phone:     +1 206 600 7022\
\
         Co-Chair    Bob Ray\
                     PESA Switching Systems, Inc.\
\
\
\
Sikes, et al.               Standards Track                    [Page 14]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         Postal      330-A Wynn Drive\
                     Huntsville, AL 35805 USA\
         Phone       +1 256 726 9200 ext. 142\
\
         Co-editor:  Clay Sikes\
                     Zhone Technologies, Inc.\
         Postal:     8545 126th Ave. N.\
                     Largo, FL 33772 USA\
         Email:      csikes@zhone.com\
         Phone:      +1 727 530 8257\
\
         Co-editor:  Bob Ray\
                     PESA Switching Systems, Inc.\
         Postal:     330-A Wynn Drive\
                     Huntsville, AL 35805 USA\
         Email:      rray@pesa.com\
         Phone:      +1 256 726 9200 ext. 142\
\
         Co-editor:  Rajesh Abbi\
                     Alcatel USA\
         Postal:     2301 Sugar Bush Road\
                     Raleigh, NC 27612-3339 USA\
\
         Email:      Rajesh.Abbi@alcatel.com\
         Phone:      +1 919 850 6194"\
\
   DESCRIPTION\
        "This MIB module defines a collection of objects for managing\
         HDSL2/SHDSL lines.  An agent may reside at either end of the\
         line; however, the MIB module is designed to require no\
         management communication between the modems beyond that\
         inherent in the low-level EOC line protocol as defined in\
         ANSI T1E1.4/2000-006 (for HDSL2 lines) or in ITU G.991.2\
         (for SHDSL lines).\
\
         Copyright (C) The Internet Society (2005).  This version of\
         this MIB module is part of RFC 4319; see the RFC itself for\
         full legal notices."\
\
   REVISION    "200512070000Z" -- December 7, 2005\
   DESCRIPTION "This version, published as RFC 4319.\
         The following changes have been made in this version:\
           1.  Added a 3rd and 4th wire pair.\
           2.  Modified all rates such that their rates are only\
               constrained by an unsigned 32-bit value and not by\
               what today's perceived technology limitations are.\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 15]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
           3.  Clarified that the rates from RFC 3276 include\
               payload and any applicable framing and added\
               objects for payload-only rates.\
           4.  Added an object to indicate whether the\
               tip and ring are reversed on a wire pair.\
           5.  Added an object to display the activation state\
               of a wire pair.\
           6.  Added references as necessary for clarification.\
           7.  Added display hints to textual conventions as\
               necessary.\
           8.  Updated conformance statements as necessary.\
           9.  Some changes were due to IETF requirements and\
               RFC generation tools."\
\
   REVISION    "200205090000Z" -- May 9, 2002\
   DESCRIPTION "Initial version, published as RFC 3276."\
\
   ::= { transmission 48 }\
\
   hdsl2ShdslMibObjects OBJECT IDENTIFIER ::= { hdsl2ShdslMIB 1 }\
\
   -- Textual Conventions used in this MIB module\
   --\
\
   Hdsl2ShdslPerfCurrDayCount ::= TEXTUAL-CONVENTION\
      DISPLAY-HINT "d"\
      STATUS    current\
      DESCRIPTION\
        "A gauge associated with interface performance measurements in\
         a current 1-day (24 hour) measurement interval.\
\
         The value of this gauge starts at zero at the beginning of an\
         interval and is increased when associated events occur, until\
         the end of the 1-day interval.  At that time, the value of the\
         gauge is stored in the previous 1-day history interval, as\
         defined in a companion object of type\
         Hdsl2Shdsl1DayIntevalCount, and the current interval gauge\
         is restarted at zero.\
\
         In the case where the agent has no valid data available for\
         this interval, the corresponding object instance is not\
         available, and upon a retrieval request, a corresponding error\
         message shall be returned to indicate that this instance does\
         not exist.  Please note that zero is a valid value."\
      SYNTAX  Gauge32\
\
   Hdsl2Shdsl1DayIntervalCount ::= TEXTUAL-CONVENTION\
      DISPLAY-HINT "d"\
\
\
\
Sikes, et al.               Standards Track                    [Page 16]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      STATUS    current\
      DESCRIPTION\
        "A counter associated with interface performance measurements\
         during the most previous 1-day (24 hour) measurement interval.\
         The value of this gauge is equal to the value of the current\
         day gauge, as defined in a companion object of type\
         Hdsl2ShdslPerfCurrDayCount, at the end of its most recent\
         interval.\
\
         In the case where the agent has no valid data available for\
         this interval, the corresponding object instance is not\
         available, and upon a retrieval request, a corresponding error\
         message shall be returned to indicate that this instance does\
         not exist."\
      SYNTAX  Gauge32\
\
   Hdsl2ShdslPerfTimeElapsed ::= TEXTUAL-CONVENTION\
      DISPLAY-HINT "d"\
      STATUS    current\
      DESCRIPTION\
        "The number of seconds that have elapsed since the beginning of\
         the current measurement period.  If, for some reason, such as\
         an adjustment in the system's time-of-day clock or the addition\
         of a leap second, the current interval exceeds the maximum\
         value, the agent will return the maximum value.\
\
         For 15-minute intervals, the range is limited to (0..899).\
         For 24-hour intervals, the range is limited to (0..86399)."\
      SYNTAX    Unsigned32(0..86399)\
\
   Hdsl2ShdslPerfIntervalThreshold ::= TEXTUAL-CONVENTION\
      DISPLAY-HINT "d"\
      STATUS    current\
      DESCRIPTION\
        "This convention defines a range of values that may be set in\
         a fault threshold alarm control.  As the number of seconds in\
         a 15-minute interval numbers at most 900, objects of this type\
         may have a range of 0...900, where the value of 0 disables the\
         alarm."\
      SYNTAX    Unsigned32(0..900)\
\
   Hdsl2ShdslUnitId ::= TEXTUAL-CONVENTION\
      STATUS    current\
      DESCRIPTION\
        "This is the unique identification for all units in an\
         HDSL2/SHDSL span.  It is based on the EOC unit addressing\
         scheme with reference to the xtuC."\
      SYNTAX    INTEGER\
\
\
\
Sikes, et al.               Standards Track                    [Page 17]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
              {\
              xtuC(1),\
              xtuR(2),\
              xru1(3),\
              xru2(4),\
              xru3(5),\
              xru4(6),\
              xru5(7),\
              xru6(8),\
              xru7(9),\
              xru8(10)\
              }\
\
   Hdsl2ShdslUnitSide ::= TEXTUAL-CONVENTION\
      STATUS    current\
      DESCRIPTION\
        "This is the referenced side of an HDSL2/SHDSL unit - Network\
         or Customer side.  The side facing the Network is the Network\
         side, while the side facing the Customer is the Customer side."\
      SYNTAX    INTEGER\
              {\
              networkSide(1),\
              customerSide(2)\
              }\
\
   Hdsl2ShdslWirePair ::= TEXTUAL-CONVENTION\
      STATUS    current\
      DESCRIPTION\
        "This is the referenced pair of wires in an HDSL2/SHDSL segment.\
         HDSL2 only supports a single pair (wirePair1 or two wire),\
         SHDSL lines support an optional second pair (wirePair2 or four\
         wire), and G.shdsl.bis support an optional third pair\
         (wirePair3 or six wire) and an optional fourth pair\
         (wirePair4 or eight wire)."\
      SYNTAX    INTEGER\
              {\
              wirePair1(1),    -- two wire\
              wirePair2(2),    -- four wire\
              wirePair3(3),    -- six wire\
              wirePair4(4)     -- eight wire\
              }\
\
   Hdsl2ShdslTransmissionModeType ::= TEXTUAL-CONVENTION\
      STATUS    current\
      DESCRIPTION\
        "Contains the regional setting of the HDSL2/SHDSL span,\
         represented as a bit-map of possible settings.  The various\
         bit positions are as follows:\
\
\
\
Sikes, et al.               Standards Track                    [Page 18]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         Bit   Meaning      Description\
         1     region 1     Indicates ITU-T G.991.2 Annex A.\
         2     region 2     Indicates ITU-T G.991.2 Annex B."\
      SYNTAX      BITS\
              {\
              region1(0),\
              region2(1)\
              }\
\
   Hdsl2ShdslClockReferenceType ::= TEXTUAL-CONVENTION\
      STATUS    current\
      DESCRIPTION\
        "The various STU-C symbol clock references for the\
         HDSL2/SHDSL span, represented as an enumeration."\
      SYNTAX    INTEGER\
             {\
             localClk(1),          -- Mode-1 per G991.2\
             networkClk(2),        -- Mode-2 per G991.2\
             dataOrNetworkClk(3),  -- Mode-3a per G991.2\
             dataClk(4)            -- Mode-3b per G991.2\
             }\
\
   -- Span Configuration Group\
   --\
\
   hdsl2ShdslSpanConfTable OBJECT-TYPE\
      SYNTAX     SEQUENCE OF Hdsl2ShdslSpanConfEntry\
      MAX-ACCESS not-accessible\
      STATUS     current\
\
      DESCRIPTION\
        "This table supports overall configuration of HDSL2/SHDSL\
         spans.  Entries in this table MUST be maintained in a\
         persistent manner."\
      ::= { hdsl2ShdslMibObjects 1 }\
\
   hdsl2ShdslSpanConfEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslSpanConfEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslSpanConfTable.  Each entry\
         represents the complete span in a single HDSL2/SHDSL line.\
         It is indexed by the ifIndex of the associated HDSL2/SHDSL\
         line."\
      INDEX { ifIndex }\
      ::= { hdsl2ShdslSpanConfTable 1 }\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 19]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   Hdsl2ShdslSpanConfEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslSpanConfNumRepeaters          Unsigned32,\
      hdsl2ShdslSpanConfProfile               SnmpAdminString,\
      hdsl2ShdslSpanConfAlarmProfile          SnmpAdminString\
      }\
\
      hdsl2ShdslSpanConfNumRepeaters OBJECT-TYPE\
      SYNTAX      Unsigned32(0..8)\
      UNITS       "repeaters"\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object provisions the number of repeaters/regenerators\
         in this HDSL2/SHDSL span."\
      ::= { hdsl2ShdslSpanConfEntry 1 }\
\
   hdsl2ShdslSpanConfProfile OBJECT-TYPE\
      SYNTAX      SnmpAdminString (SIZE(1..32))\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object is a pointer to a span configuration profile in\
         the hdsl2ShdslSpanConfProfileTable, which applies to this\
         span.  The value of this object is the index of the referenced\
         profile in the hdsl2ShdslSpanConfProfileTable.  Note that span\
         configuration profiles are only applicable to SHDSL lines.\
\
         HDSL2 lines MUST reference the default profile, 'DEFVAL'.\
         By default, this object will have the value 'DEFVAL'\
         (the index of the default profile).\
\
         Any attempt to set this object to a value that is not the value\
         of the index for an active entry in the profile table,\
         hdsl2ShdslSpanConfProfileTable, MUST be rejected."\
      ::= { hdsl2ShdslSpanConfEntry 2 }\
\
   hdsl2ShdslSpanConfAlarmProfile OBJECT-TYPE\
      SYNTAX      SnmpAdminString (SIZE(1..32))\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object is a pointer to an alarm configuration profile in\
         the hdsl2ShdslEndpointAlarmConfProfileTable.  The value of\
         this object is the index of the referenced profile in the\
         hdsl2ShdslEndpointAlarmConfProfileTable.  The alarm\
         threshold configuration in the referenced profile will be\
\
\
\
Sikes, et al.               Standards Track                    [Page 20]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         used by default for all segment endpoints in this span.\
         Individual endpoints may override this profile by explicitly\
         specifying some other profile in the\
         hdsl2ShdslEndpointConfTable.  By default, this object will\
         have the value 'DEFVAL' (the index of the default\
         profile).\
\
         Any attempt to set this object to a value that is not the value\
         of the index for an active entry in the profile table,\
         hdsl2ShdslEndpointAlarmConfProfileTable, MUST be rejected."\
      ::= { hdsl2ShdslSpanConfEntry 3 }\
\
   -- Span Status Group\
   --\
\
   hdsl2ShdslSpanStatusTable OBJECT-TYPE\
      SYNTAX     SEQUENCE OF Hdsl2ShdslSpanStatusEntry\
      MAX-ACCESS not-accessible\
      STATUS     current\
      DESCRIPTION\
        "This table provides overall status information of\
         HDSL2/SHDSL spans.  This table contains live data from\
         equipment.  As such, it is NOT persistent."\
      ::= { hdsl2ShdslMibObjects 2 }\
\
   hdsl2ShdslSpanStatusEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslSpanStatusEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslSpanStatusTable.  Each entry\
         represents the complete span in a single HDSL2/SHDSL line.\
         It is indexed by the ifIndex of the associated HDSL2/SHDSL\
         line."\
      INDEX { ifIndex }\
      ::= { hdsl2ShdslSpanStatusTable 1 }\
\
   Hdsl2ShdslSpanStatusEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslStatusNumAvailRepeaters        Unsigned32,\
      hdsl2ShdslStatusMaxAttainableLineRate    Unsigned32,\
      hdsl2ShdslStatusActualLineRate           Unsigned32,\
      hdsl2ShdslStatusTransmissionModeCurrent\
                           Hdsl2ShdslTransmissionModeType,\
      hdsl2ShdslStatusMaxAttainablePayloadRate Unsigned32,\
      hdsl2ShdslStatusActualPayloadRate        Unsigned32\
      }\
\
\
\
Sikes, et al.               Standards Track                    [Page 21]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   hdsl2ShdslStatusNumAvailRepeaters OBJECT-TYPE\
      SYNTAX      Unsigned32(0..8)\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the actual number of repeaters/regenerators\
         discovered in this HDSL2/SHDSL span."\
      ::= { hdsl2ShdslSpanStatusEntry 1 }\
\
   hdsl2ShdslStatusMaxAttainableLineRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the maximum attainable line rate in this HDSL2/SHDSL\
         span.  This object provides the maximum rate the line is\
         capable of achieving.  This is based upon measurements made\
         during line probing.  This rate includes payload (user data)\
         and any applicable framing overhead."\
      ::= { hdsl2ShdslSpanStatusEntry 2 }\
\
   hdsl2ShdslStatusActualLineRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the actual line rate in this HDSL2/SHDSL span.  This\
         SHOULD equal ifSpeed.  This rate includes payload (user data)\
         and any applicable framing overhead"\
      ::= { hdsl2ShdslSpanStatusEntry 3 }\
\
   hdsl2ShdslStatusTransmissionModeCurrent OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslTransmissionModeType\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the current Power Spectral Density (PSD) regional\
         setting of the HDSL2/SHDSL span."\
      ::= { hdsl2ShdslSpanStatusEntry 4 }\
\
   hdsl2ShdslStatusMaxAttainablePayloadRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
\
\
\
Sikes, et al.               Standards Track                    [Page 22]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
        "Contains the maximum attainable payload (user data)\
         line rate in this HDSL2/SHDSL span.  This object provides\
         the maximum rate the line is capable of achieving.  This\
         is based upon measurements made during line probing.  Any\
         framing overhead is not included."\
      ::= { hdsl2ShdslSpanStatusEntry 5 }\
\
   hdsl2ShdslStatusActualPayloadRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the actual line rate in this HDSL2/SHDSL span.  Any\
         framing overhead is not included."\
      ::= { hdsl2ShdslSpanStatusEntry 6 }\
\
   -- Unit Inventory Group\
   --\
\
   hdsl2ShdslInventoryTable OBJECT-TYPE\
      SYNTAX     SEQUENCE OF Hdsl2ShdslInventoryEntry\
      MAX-ACCESS not-accessible\
      STATUS     current\
      DESCRIPTION\
        "This table supports retrieval of unit inventory information\
         available via the EOC from units in an HDSL2/SHDSL line.\
\
         Entries in this table are dynamically created during the\
         line discovery process.  The life cycle for these entries\
         is as follows:\
\
            - xtu discovers a device, either a far-end xtu or an xru\
            - an inventory table entry is created for the device\
            - the line goes down for whatever reason\
            - inventory table entries for unreachable devices are\
              destroyed\
\
         As these entries are created/destroyed dynamically, they\
         are NOT persistent."\
      ::= { hdsl2ShdslMibObjects 3 }\
\
   hdsl2ShdslInventoryEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslInventoryEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslInventoryTable.  Each entry\
\
\
\
Sikes, et al.               Standards Track                    [Page 23]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         represents inventory information for a single unit in an\
         HDSL2/SHDSL line.  It is indexed by the ifIndex of the\
         HDSL2/SHDSL line and the Hdsl2ShdslUnitId of the\
         associated unit."\
      INDEX { ifIndex, hdsl2ShdslInvIndex }\
      ::= { hdsl2ShdslInventoryTable 1 }\
\
   Hdsl2ShdslInventoryEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslInvIndex                      Hdsl2ShdslUnitId,\
      hdsl2ShdslInvVendorID                   OCTET STRING,\
      hdsl2ShdslInvVendorModelNumber          OCTET STRING,\
      hdsl2ShdslInvVendorSerialNumber         OCTET STRING,\
      hdsl2ShdslInvVendorEOCSoftwareVersion   Integer32,\
      hdsl2ShdslInvStandardVersion            Integer32,\
      hdsl2ShdslInvVendorListNumber           OCTET STRING,\
      hdsl2ShdslInvVendorIssueNumber          OCTET STRING,\
      hdsl2ShdslInvVendorSoftwareVersion      OCTET STRING,\
      hdsl2ShdslInvEquipmentCode              OCTET STRING,\
      hdsl2ShdslInvVendorOther                OCTET STRING,\
      hdsl2ShdslInvTransmissionModeCapability\
                            Hdsl2ShdslTransmissionModeType\
      }\
\
   hdsl2ShdslInvIndex OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslUnitId\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "Each entry in this table corresponds to a physical element\
         in an HDSL2/SHDSL span.  It is based on the EOC unit addressing\
         scheme with reference to the xtuC."\
      ::= { hdsl2ShdslInventoryEntry 1 }\
\
   hdsl2ShdslInvVendorID OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(8))\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor ID as reported in an Inventory Response message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 25-32."\
      ::= { hdsl2ShdslInventoryEntry 2 }\
\
   hdsl2ShdslInvVendorModelNumber OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(12))\
\
\
\
Sikes, et al.               Standards Track                    [Page 24]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor model number as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 33-44."\
      ::= { hdsl2ShdslInventoryEntry 3 }\
\
   hdsl2ShdslInvVendorSerialNumber OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(12))\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor serial number as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 45-56."\
      ::= { hdsl2ShdslInventoryEntry 4 }\
\
   hdsl2ShdslInvVendorEOCSoftwareVersion OBJECT-TYPE\
      SYNTAX      Integer32\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor EOC version as reported in a Discovery Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.2, Discovery response - Message ID\
         129, Octet 12."\
      ::= { hdsl2ShdslInventoryEntry 5 }\
\
   hdsl2ShdslInvStandardVersion OBJECT-TYPE\
      SYNTAX      Integer32\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Version of the HDSL2/SHDSL standard implemented, as reported\
         in an Inventory Response message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octet 2."\
      ::= { hdsl2ShdslInventoryEntry 6 }\
\
   hdsl2ShdslInvVendorListNumber OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(3))\
\
\
\
Sikes, et al.               Standards Track                    [Page 25]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor list number as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 3-5."\
      ::= { hdsl2ShdslInventoryEntry 7 }\
\
   hdsl2ShdslInvVendorIssueNumber OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(2))\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor issue number as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 6-7."\
      ::= { hdsl2ShdslInventoryEntry 8 }\
\
   hdsl2ShdslInvVendorSoftwareVersion OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(6))\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Vendor software version as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 8-13."\
      ::= { hdsl2ShdslInventoryEntry 9 }\
\
   hdsl2ShdslInvEquipmentCode OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(10))\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Equipment code conforming to ANSI T1.213, Coded Identification\
         of Equipment Entities."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 14-23."\
      ::= { hdsl2ShdslInventoryEntry 10 }\
\
   hdsl2ShdslInvVendorOther OBJECT-TYPE\
      SYNTAX      OCTET STRING(SIZE(12))\
\
\
\
Sikes, et al.               Standards Track                    [Page 26]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Other vendor information as reported in an Inventory Response\
         message."\
      REFERENCE\
        "G.991.2, Section 9.5.5.7.4, Inventory response - Message ID\
         130, Octets 57-68."\
      ::= { hdsl2ShdslInventoryEntry 11 }\
\
   hdsl2ShdslInvTransmissionModeCapability OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslTransmissionModeType\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the transmission mode capability of the SHDSL unit."\
      ::= { hdsl2ShdslInventoryEntry 12 }\
\
   -- Segment Endpoint Configuration Group\
   --\
\
   hdsl2ShdslEndpointConfTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslEndpointConfEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table supports configuration parameters for segment\
         endpoints in an HDSL2/SHDSL line.  As this table is indexed\
         by ifIndex, it MUST be maintained in a persistent manner."\
      ::= { hdsl2ShdslMibObjects 4 }\
\
   hdsl2ShdslEndpointConfEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslEndpointConfEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslEndpointConfTable.  Each entry\
         represents a single segment endpoint in an HDSL2/SHDSL line.\
         It is indexed by the ifIndex of the HDSL2/SHDSL line, the\
         UnitId of the associated unit, the side of the unit, and the\
         wire pair of the associated modem."\
      INDEX { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide,\
              hdsl2ShdslEndpointWirePair}\
      ::= { hdsl2ShdslEndpointConfTable 1 }\
\
   Hdsl2ShdslEndpointConfEntry ::=\
      SEQUENCE\
      {\
\
\
\
Sikes, et al.               Standards Track                    [Page 27]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      hdsl2ShdslEndpointSide                   Hdsl2ShdslUnitSide,\
      hdsl2ShdslEndpointWirePair               Hdsl2ShdslWirePair,\
      hdsl2ShdslEndpointAlarmConfProfile       SnmpAdminString\
      }\
\
   hdsl2ShdslEndpointSide OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslUnitSide\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "The side of the unit associated with this segment endpoint --\
         Network/Customer side -- as per the Hdsl2ShdslUnitSide textual\
         convention."\
      ::= { hdsl2ShdslEndpointConfEntry 1 }\
\
   hdsl2ShdslEndpointWirePair OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslWirePair\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "The wire pair of the modem associated with this segment\
         endpoint as per the Hdsl2ShdslWirePair textual convention."\
      ::= { hdsl2ShdslEndpointConfEntry 2 }\
\
   hdsl2ShdslEndpointAlarmConfProfile OBJECT-TYPE\
      SYNTAX      SnmpAdminString (SIZE(0..32))\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object configures the alarm threshold values to be used\
         for this segment endpoint.  The values are obtained from the\
         alarm configuration profile referenced by this object.  The\
         value of this object is the index of the referenced profile in\
         the hdsl2ShdslEndpointAlarmConfProfileTable, or NULL (a\
         zero-length SnmpAdminString).  If the value is a zero-length\
         SnmpAdminString, the endpoint uses the default Alarm\
         Configuration Profile for the associated span as per the\
         hdsl2ShdslSpanConfAlarmProfile object in the\
         hdsl2ShdslSpanConfTable.  The default value of this object is\
         a zero-length SnmpAdminString.\
\
         Any attempt to set this object to a value that is not the value\
         of the index for an active entry in the profile table,\
         hdsl2ShdslEndpointAlarmConfProfileTable, MUST be rejected."\
      ::= { hdsl2ShdslEndpointConfEntry 3 }\
\
   -- Segment Endpoint Current Status/Performance Group\
   --\
\
\
\
Sikes, et al.               Standards Track                    [Page 28]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   hdsl2ShdslEndpointCurrTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslEndpointCurrEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table contains current status and performance information\
         for segment endpoints in HDSL2/SHDSL lines.  As with other\
         tables in this MIB module indexed by ifIndex, entries in this\
         table MUST be maintained in a persistent manner."\
      ::= { hdsl2ShdslMibObjects 5 }\
\
   hdsl2ShdslEndpointCurrEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslEndpointCurrEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslEndpointCurrTable.  Each entry\
         contains status and performance information relating to a\
         single segment endpoint.  It is indexed by the ifIndex of the\
         HDSL2/SHDSL line, the UnitId of the associated unit, the side\
         of the unit, and the wire pair of the associated modem."\
      INDEX { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide,\
              hdsl2ShdslEndpointWirePair }\
      ::= { hdsl2ShdslEndpointCurrTable 1 }\
\
   Hdsl2ShdslEndpointCurrEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslEndpointCurrAtn                Integer32,\
      hdsl2ShdslEndpointCurrSnrMgn             Integer32,\
      hdsl2ShdslEndpointCurrStatus             BITS,\
      hdsl2ShdslEndpointES                     Counter32,\
      hdsl2ShdslEndpointSES                    Counter32,\
      hdsl2ShdslEndpointCRCanomalies           Counter32,\
      hdsl2ShdslEndpointLOSWS                  Counter32,\
      hdsl2ShdslEndpointUAS                    Counter32,\
      hdsl2ShdslEndpointCurr15MinTimeElapsed\
                               Hdsl2ShdslPerfTimeElapsed,\
      hdsl2ShdslEndpointCurr15MinES            PerfCurrentCount,\
      hdsl2ShdslEndpointCurr15MinSES           PerfCurrentCount,\
      hdsl2ShdslEndpointCurr15MinCRCanomalies  PerfCurrentCount,\
      hdsl2ShdslEndpointCurr15MinLOSWS         PerfCurrentCount,\
      hdsl2ShdslEndpointCurr15MinUAS           PerfCurrentCount,\
      hdsl2ShdslEndpointCurr1DayTimeElapsed\
                                      Hdsl2ShdslPerfTimeElapsed,\
      hdsl2ShdslEndpointCurr1DayES\
                                     Hdsl2ShdslPerfCurrDayCount,\
      hdsl2ShdslEndpointCurr1DaySES\
\
\
\
Sikes, et al.               Standards Track                    [Page 29]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
                                     Hdsl2ShdslPerfCurrDayCount,\
      hdsl2ShdslEndpointCurr1DayCRCanomalies\
                                     Hdsl2ShdslPerfCurrDayCount,\
      hdsl2ShdslEndpointCurr1DayLOSWS\
                                     Hdsl2ShdslPerfCurrDayCount,\
      hdsl2ShdslEndpointCurr1DayUAS\
                                     Hdsl2ShdslPerfCurrDayCount,\
      hdsl2ShdslEndpointCurrTipRingReversal    INTEGER,\
      hdsl2ShdslEndpointCurrActivationState    INTEGER\
      }\
\
   hdsl2ShdslEndpointCurrAtn OBJECT-TYPE\
      SYNTAX      Integer32(-127..128)\
      UNITS       "dB"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "The current loop attenuation for this endpoint as reported in\
         a Network or Customer Side Performance Status message."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 1 }\
\
   hdsl2ShdslEndpointCurrSnrMgn OBJECT-TYPE\
      SYNTAX      Integer32(-127..128)\
      UNITS       "dB"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "The current SNR margin for this endpoint as reported in a\
         Status Response/SNR message."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 2 }\
\
   hdsl2ShdslEndpointCurrStatus OBJECT-TYPE\
      SYNTAX      BITS\
                  {\
                  noDefect(0),\
                  powerBackoff(1),\
                  deviceFault(2),\
                  dcContinuityFault(3),\
                  snrMarginAlarm(4),\
                  loopAttenuationAlarm(5),\
                  loswFailureAlarm(6),\
                  configInitFailure(7),\
                  protocolInitFailure(8),\
                  noNeighborPresent(9),\
                  loopbackActive(10)\
                  }\
\
\
\
Sikes, et al.               Standards Track                    [Page 30]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Contains the current state of the endpoint.  This is a\
         bit-map of possible conditions.  The various bit positions\
         are as follows:\
\
         noDefect               There are no defects on the line.\
\
         powerBackoff           Indicates enhanced Power Backoff.\
\
         deviceFault            Indicates that a vendor-dependent\
                                diagnostic or self-test fault\
                                has been detected.\
\
         dcContinuityFault      Indicates vendor-dependent\
                                conditions that interfere with\
                                span powering such as short and\
                                open circuits.\
\
         snrMarginAlarm         Indicates that the SNR margin\
                                has dropped below the alarm threshold.\
\
         loopAttenuationAlarm   Indicates that the loop attenuation\
                                exceeds the alarm threshold.\
\
         loswFailureAlarm       Indicates a forward LOSW alarm.\
\
         configInitFailure      Endpoint failure during initialization\
                                due to paired endpoint not able to\
                                support requested configuration.\
\
         protocolInitFailure    Endpoint failure during initialization\
                                due to incompatible protocol used by\
                                the paired endpoint.\
\
         noNeighborPresent      Endpoint failure during initialization\
                                due to no activation sequence detected\
                                from paired endpoint.\
\
         loopbackActive         A loopback is currently active at this\
                                segment endpoint.\
\
         This is intended to supplement ifOperStatus.  Note that there\
         is a 1:1 relationship between the status bits defined in this\
         object and the notification thresholds defined elsewhere in\
         this MIB module."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
\
\
\
Sikes, et al.               Standards Track                    [Page 31]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      ::= { hdsl2ShdslEndpointCurrEntry 3 }\
\
   hdsl2ShdslEndpointES OBJECT-TYPE\
      SYNTAX      Counter32\
      UNITS       "seconds"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of Errored Seconds (ES) on this endpoint since the xU\
         was last restarted."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 4 }\
\
   hdsl2ShdslEndpointSES OBJECT-TYPE\
      SYNTAX       Counter32\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Severely Errored Seconds (SES) on this endpoint\
         since the xU was last restarted."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 5 }\
\
   hdsl2ShdslEndpointCRCanomalies OBJECT-TYPE\
      SYNTAX       Counter32\
      UNITS        "detected CRC Anomalies"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of CRC anomalies on this endpoint since the xU was\
         last restarted."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 6 }\
\
   hdsl2ShdslEndpointLOSWS OBJECT-TYPE\
      SYNTAX       Counter32\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Loss of Sync Word (LOSW) Seconds on this endpoint\
         since the xU was last restarted."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 7 }\
\
   hdsl2ShdslEndpointUAS OBJECT-TYPE\
      SYNTAX       Counter32\
\
\
\
Sikes, et al.               Standards Track                    [Page 32]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Unavailable Seconds (UAS) on this endpoint since\
         the xU was last restarted."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 8 }\
\
   hdsl2ShdslEndpointCurr15MinTimeElapsed OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfTimeElapsed\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Total elapsed seconds in the current 15-minute interval."\
      ::= { hdsl2ShdslEndpointCurrEntry 9 }\
\
   hdsl2ShdslEndpointCurr15MinES OBJECT-TYPE\
      SYNTAX       PerfCurrentCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Errored Seconds (ES) in the current 15-minute\
         interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 10 }\
\
   hdsl2ShdslEndpointCurr15MinSES OBJECT-TYPE\
      SYNTAX       PerfCurrentCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Severely Errored Seconds (SES) in the current\
         15-minute interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 11 }\
\
   hdsl2ShdslEndpointCurr15MinCRCanomalies OBJECT-TYPE\
      SYNTAX       PerfCurrentCount\
      UNITS        "detected CRC Anomalies"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of CRC anomalies in the current 15-minute interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
\
\
\
Sikes, et al.               Standards Track                    [Page 33]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      ::= { hdsl2ShdslEndpointCurrEntry 12 }\
\
   hdsl2ShdslEndpointCurr15MinLOSWS OBJECT-TYPE\
      SYNTAX       PerfCurrentCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Loss of Sync Word (LOSW) Seconds in the current\
         15-minute interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 13 }\
\
   hdsl2ShdslEndpointCurr15MinUAS OBJECT-TYPE\
      SYNTAX       PerfCurrentCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Unavailable Seconds (UAS) in the current 15-minute\
         interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 14 }\
\
   hdsl2ShdslEndpointCurr1DayTimeElapsed OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfTimeElapsed\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Number of seconds that have elapsed since the beginning of\
         the current 1-day interval."\
      ::= { hdsl2ShdslEndpointCurrEntry 15 }\
\
   hdsl2ShdslEndpointCurr1DayES OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfCurrDayCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Errored Seconds (ES) during the current day as\
         measured by hdsl2ShdslEndpointCurr1DayTimeElapsed."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 16 }\
\
   hdsl2ShdslEndpointCurr1DaySES OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfCurrDayCount\
      UNITS        "seconds"\
\
\
\
Sikes, et al.               Standards Track                    [Page 34]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Severely Errored Seconds (SES) during the current\
         day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 17 }\
\
   hdsl2ShdslEndpointCurr1DayCRCanomalies OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfCurrDayCount\
      UNITS        "detected CRC Anomalies"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of CRC anomalies during the current day as measured\
         by hdsl2ShdslEndpointCurr1DayTimeElapsed."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 18 }\
\
   hdsl2ShdslEndpointCurr1DayLOSWS OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfCurrDayCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Loss of Sync Word (LOSW) Seconds during the current\
         day as measured by hdsl2ShdslEndpointCurr1DayTimeElapsed."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 19 }\
\
   hdsl2ShdslEndpointCurr1DayUAS OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfCurrDayCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Unavailable Seconds (UAS) during the current day as\
         measured by hdsl2ShdslEndpointCurr1DayTimeElapsed."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2ShdslEndpointCurrEntry 20 }\
\
   hdsl2ShdslEndpointCurrTipRingReversal OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  normal(1),\
                  reversed(2)\
                  }\
      MAX-ACCESS  read-only\
\
\
\
Sikes, et al.               Standards Track                    [Page 35]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      STATUS      current\
      DESCRIPTION\
        "This object indicates the state of the tip/ring for the\
         wire pair."\
      ::= { hdsl2ShdslEndpointCurrEntry 21 }\
\
   hdsl2ShdslEndpointCurrActivationState OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  preActivation(1),  -- PreTrain\
                  activation(2),     -- Training\
                  data(3)            -- Trained\
                  }\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "This object indicates the activation or training state of\
         the wire pair."\
      REFERENCE   "ITU-T G.991.2, Section 6.2 PMD Activation Sequence"\
      ::= { hdsl2ShdslEndpointCurrEntry 22 }\
\
   -- Segment Endpoint 15-Minute Interval Status/Performance Group\
   --\
\
   hdsl2Shdsl15MinIntervalTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2Shdsl15MinIntervalEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table provides one row for each HDSL2/SHDSL endpoint\
         performance data collection interval.  This table contains\
         live data from equipment.  As such, it is NOT persistent."\
      ::= { hdsl2ShdslMibObjects 6 }\
\
   hdsl2Shdsl15MinIntervalEntry OBJECT-TYPE\
      SYNTAX      Hdsl2Shdsl15MinIntervalEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2Shdsl15MinIntervalTable."\
      INDEX { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide,\
              hdsl2ShdslEndpointWirePair, hdsl2Shdsl15MinIntervalNumber}\
      ::= { hdsl2Shdsl15MinIntervalTable 1 }\
\
   Hdsl2Shdsl15MinIntervalEntry ::=\
      SEQUENCE\
      {\
      hdsl2Shdsl15MinIntervalNumber         Unsigned32,\
\
\
\
Sikes, et al.               Standards Track                    [Page 36]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      hdsl2Shdsl15MinIntervalES             PerfIntervalCount,\
      hdsl2Shdsl15MinIntervalSES            PerfIntervalCount,\
      hdsl2Shdsl15MinIntervalCRCanomalies   PerfIntervalCount,\
      hdsl2Shdsl15MinIntervalLOSWS          PerfIntervalCount,\
      hdsl2Shdsl15MinIntervalUAS            PerfIntervalCount\
      }\
\
   hdsl2Shdsl15MinIntervalNumber OBJECT-TYPE\
      SYNTAX      Unsigned32(1..96)\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "Performance Data Interval number.  Interval 1 is the most\
         recent previous interval; interval 96 is 24 hours ago.\
         Intervals 2..96 are optional."\
      ::= { hdsl2Shdsl15MinIntervalEntry 1 }\
\
   hdsl2Shdsl15MinIntervalES OBJECT-TYPE\
      SYNTAX      PerfIntervalCount\
      UNITS       "seconds"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of Errored Seconds (ES) during the interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl15MinIntervalEntry 2 }\
\
   hdsl2Shdsl15MinIntervalSES OBJECT-TYPE\
      SYNTAX      PerfIntervalCount\
      UNITS       "seconds"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of Severely Errored Seconds (SES) during the interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl15MinIntervalEntry 3 }\
\
   hdsl2Shdsl15MinIntervalCRCanomalies OBJECT-TYPE\
      SYNTAX      PerfIntervalCount\
      UNITS       "detected CRC Anomalies"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of CRC anomalies during the interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl15MinIntervalEntry 4 }\
\
   hdsl2Shdsl15MinIntervalLOSWS OBJECT-TYPE\
\
\
\
Sikes, et al.               Standards Track                    [Page 37]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      SYNTAX      PerfIntervalCount\
      UNITS       "seconds"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of Loss of Sync Word (LOSW) Seconds during the\
         interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl15MinIntervalEntry 5 }\
\
   hdsl2Shdsl15MinIntervalUAS OBJECT-TYPE\
      SYNTAX      PerfIntervalCount\
      UNITS       "seconds"\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "Count of Unavailable Seconds (UAS) during the interval."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl15MinIntervalEntry 6 }\
\
   -- Segment Endpoint 1-Day Interval Status/Performance Group\
   --\
\
   hdsl2Shdsl1DayIntervalTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2Shdsl1DayIntervalEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table provides one row for each HDSL2/SHDSL endpoint\
         performance data collection interval.  This table contains\
         live data from equipment.  As such, it is NOT persistent."\
      ::= { hdsl2ShdslMibObjects 7 }\
\
   hdsl2Shdsl1DayIntervalEntry OBJECT-TYPE\
      SYNTAX      Hdsl2Shdsl1DayIntervalEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2Shdsl1DayIntervalTable."\
      INDEX { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide,\
              hdsl2ShdslEndpointWirePair, hdsl2Shdsl1DayIntervalNumber }\
      ::= { hdsl2Shdsl1DayIntervalTable 1 }\
\
   Hdsl2Shdsl1DayIntervalEntry ::=\
      SEQUENCE\
      {\
      hdsl2Shdsl1DayIntervalNumber         Unsigned32,\
      hdsl2Shdsl1DayIntervalMoniSecs       Hdsl2ShdslPerfTimeElapsed,\
\
\
\
Sikes, et al.               Standards Track                    [Page 38]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      hdsl2Shdsl1DayIntervalES             Hdsl2Shdsl1DayIntervalCount,\
      hdsl2Shdsl1DayIntervalSES            Hdsl2Shdsl1DayIntervalCount,\
      hdsl2Shdsl1DayIntervalCRCanomalies   Hdsl2Shdsl1DayIntervalCount,\
      hdsl2Shdsl1DayIntervalLOSWS          Hdsl2Shdsl1DayIntervalCount,\
      hdsl2Shdsl1DayIntervalUAS            Hdsl2Shdsl1DayIntervalCount\
      }\
\
   hdsl2Shdsl1DayIntervalNumber OBJECT-TYPE\
      SYNTAX      Unsigned32(1..30)\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "History Data Interval number.  Interval 1 is the most\
         recent previous day; interval 30 is 30 days ago.  Intervals\
         2..30 are optional."\
      ::= { hdsl2Shdsl1DayIntervalEntry 1 }\
\
   hdsl2Shdsl1DayIntervalMoniSecs OBJECT-TYPE\
      SYNTAX       Hdsl2ShdslPerfTimeElapsed\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "The amount of time in the 1-day interval over which the\
         performance monitoring information is actually counted.\
         This value will be the same as the interval duration except\
         in a situation where performance monitoring data could not\
         be collected for any reason."\
      ::= { hdsl2Shdsl1DayIntervalEntry 2 }\
\
   hdsl2Shdsl1DayIntervalES OBJECT-TYPE\
      SYNTAX       Hdsl2Shdsl1DayIntervalCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Errored Seconds (ES) during the 1-day interval as\
         measured by hdsl2Shdsl1DayIntervalMoniSecs."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl1DayIntervalEntry 3 }\
\
   hdsl2Shdsl1DayIntervalSES OBJECT-TYPE\
      SYNTAX       Hdsl2Shdsl1DayIntervalCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Severely Errored Seconds (SES) during the 1-day\
\
\
\
Sikes, et al.               Standards Track                    [Page 39]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         interval as measured by hdsl2Shdsl1DayIntervalMoniSecs."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl1DayIntervalEntry 4 }\
\
   hdsl2Shdsl1DayIntervalCRCanomalies OBJECT-TYPE\
      SYNTAX       Hdsl2Shdsl1DayIntervalCount\
      UNITS        "detected CRC Anomalies"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of CRC anomalies during the 1-day interval as\
         measured by hdsl2Shdsl1DayIntervalMoniSecs."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl1DayIntervalEntry 5 }\
\
   hdsl2Shdsl1DayIntervalLOSWS OBJECT-TYPE\
      SYNTAX       Hdsl2Shdsl1DayIntervalCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Loss of Sync Word (LOSW) Seconds during the 1-day\
         interval as measured by hdsl2Shdsl1DayIntervalMoniSecs."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl1DayIntervalEntry 6 }\
\
   hdsl2Shdsl1DayIntervalUAS OBJECT-TYPE\
      SYNTAX       Hdsl2Shdsl1DayIntervalCount\
      UNITS        "seconds"\
      MAX-ACCESS   read-only\
      STATUS       current\
      DESCRIPTION\
        "Count of Unavailable Seconds (UAS) during the 1-day interval\
         as measured by hdsl2Shdsl1DayIntervalMoniSecs."\
      REFERENCE   "HDSL2 Section 7.5.3.7; SHDSL Section 9.5.5.7"\
      ::= { hdsl2Shdsl1DayIntervalEntry 7 }\
\
   -- Maintenance Group\
   --\
\
   hdsl2ShdslEndpointMaintTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslEndpointMaintEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table supports maintenance operations (e.g., loopbacks)\
         to be performed on HDSL2/SHDSL segment endpoints.  This table\
         contains live data from equipment.  As such, it is NOT\
\
\
\
Sikes, et al.               Standards Track                    [Page 40]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
         persistent."\
      ::= { hdsl2ShdslMibObjects 8 }\
\
   hdsl2ShdslEndpointMaintEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslEndpointMaintEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslEndpointMaintTable.  Each entry\
         corresponds to a single segment endpoint and is indexed by the\
         ifIndex of the HDSL2/SHDSL line, the UnitId of the associated\
         unit, and the side of the unit."\
      INDEX { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslEndpointSide }\
      ::= { hdsl2ShdslEndpointMaintTable 1 }\
\
   Hdsl2ShdslEndpointMaintEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslMaintLoopbackConfig      INTEGER,\
      hdsl2ShdslMaintTipRingReversal     INTEGER,\
      hdsl2ShdslMaintPowerBackOff        INTEGER,\
      hdsl2ShdslMaintSoftRestart         INTEGER\
      }\
\
   hdsl2ShdslMaintLoopbackConfig OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  noLoopback(1),\
                  normalLoopback(2),\
                  specialLoopback(3)\
                  }\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object controls configuration of loopbacks for the\
         associated segment endpoint.  The status of the loopback\
         is obtained via the hdsl2ShdslEndpointCurrStatus object."\
      ::= { hdsl2ShdslEndpointMaintEntry 1 }\
\
   hdsl2ShdslMaintTipRingReversal OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  normal(1),\
                  reversed(2)\
                  }\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
\
\
\
Sikes, et al.               Standards Track                    [Page 41]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
        "This object indicates the state of the tip/ring pair at the\
         associated segment endpoint."\
      ::= { hdsl2ShdslEndpointMaintEntry 2 }\
\
   hdsl2ShdslMaintPowerBackOff OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  default(1),\
                  enhanced(2)\
                  }\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object configures the receiver at the associated\
         segment endpoint to operate in default or enhanced power\
         backoff mode."\
      ::= { hdsl2ShdslEndpointMaintEntry 3 }\
\
   hdsl2ShdslMaintSoftRestart OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  ready(1),\
                  restart(2)\
                  }\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object enables the manager to trigger a soft restart\
         of the modem at the associated segment endpoint.  The\
         manager may only set this object to the 'restart(2)'\
         value, which initiates a restart.  The agent will perform a\
         restart after approximately 5 seconds.  Following the 5 second\
         period, the agent will restore the object to the 'ready(1)'\
         state."\
      ::= { hdsl2ShdslEndpointMaintEntry 4 }\
\
   hdsl2ShdslUnitMaintTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslUnitMaintEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This table supports maintenance operations for units in a\
         HDSL2/SHDSL line.  Entries in this table MUST be maintained\
         in a persistent manner."\
      ::= { hdsl2ShdslMibObjects 9 }\
\
   hdsl2ShdslUnitMaintEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslUnitMaintEntry\
\
\
\
Sikes, et al.               Standards Track                    [Page 42]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "An entry in the hdsl2ShdslUnitMaintTable.  Each entry\
         corresponds to a single unit and is indexed by the\
         ifIndex of the HDSL2/SHDSL line and the UnitId of the\
         associated unit."\
      INDEX { ifIndex, hdsl2ShdslInvIndex  }\
      ::= { hdsl2ShdslUnitMaintTable 1 }\
\
   Hdsl2ShdslUnitMaintEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslMaintLoopbackTimeout     Integer32,\
      hdsl2ShdslMaintUnitPowerSource     INTEGER\
      }\
\
   hdsl2ShdslMaintLoopbackTimeout OBJECT-TYPE\
      SYNTAX      Integer32(0..4095)\
      UNITS       "minutes"\
      MAX-ACCESS  read-write\
      STATUS      current\
      DESCRIPTION\
        "This object configures the timeout value for loopbacks\
         initiated at segments endpoints contained in the associated\
         unit.  A value of 0 disables the timeout."\
      ::= { hdsl2ShdslUnitMaintEntry 1 }\
\
   hdsl2ShdslMaintUnitPowerSource OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  local(1),\
                  span(2)\
                  }\
      MAX-ACCESS  read-only\
      STATUS      current\
      DESCRIPTION\
        "This object indicates the DC power source being used by the\
         associated unit."\
      ::= { hdsl2ShdslUnitMaintEntry 2 }\
\
   -- Span Configuration Profile Group\
   --\
\
   hdsl2ShdslSpanConfProfileTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslSpanConfProfileEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
\
\
\
Sikes, et al.               Standards Track                    [Page 43]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      DESCRIPTION\
        "This table supports definitions of span configuration\
         profiles for SHDSL lines.  HDSL2 does not support these\
         configuration options.  This table MUST be maintained\
         in a persistent manner."\
      ::= { hdsl2ShdslMibObjects 10 }\
\
   hdsl2ShdslSpanConfProfileEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslSpanConfProfileEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "Each entry corresponds to a single span configuration\
         profile.  Each profile contains a set of span configuration\
         parameters.  The configuration parameters in a profile are\
         applied to those lines referencing that profile (see the\
         hdsl2ShdslSpanConfProfile object).  Profiles may be\
         created/deleted using the row creation/deletion mechanism\
         via hdsl2ShdslSpanConfProfileRowStatus.  If an active\
         entry is referenced in hdsl2ShdslSpanConfProfile, the\
         entry MUST remain active until all references are removed."\
      INDEX { IMPLIED hdsl2ShdslSpanConfProfileName }\
      ::= { hdsl2ShdslSpanConfProfileTable 1 }\
\
   Hdsl2ShdslSpanConfProfileEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslSpanConfProfileName               SnmpAdminString,\
      hdsl2ShdslSpanConfWireInterface             INTEGER,\
      hdsl2ShdslSpanConfMinLineRate               Unsigned32,\
      hdsl2ShdslSpanConfMaxLineRate               Unsigned32,\
      hdsl2ShdslSpanConfPSD                       INTEGER,\
      hdsl2ShdslSpanConfTransmissionMode\
                              Hdsl2ShdslTransmissionModeType,\
      hdsl2ShdslSpanConfRemoteEnabled             INTEGER,\
      hdsl2ShdslSpanConfPowerFeeding              INTEGER,\
      hdsl2ShdslSpanConfCurrCondTargetMarginDown  Integer32,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginDown Integer32,\
      hdsl2ShdslSpanConfCurrCondTargetMarginUp    Integer32,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginUp   Integer32,\
      hdsl2ShdslSpanConfUsedTargetMargins         BITS,\
      hdsl2ShdslSpanConfReferenceClock\
                                Hdsl2ShdslClockReferenceType,\
      hdsl2ShdslSpanConfLineProbeEnable           INTEGER,\
      hdsl2ShdslSpanConfProfileRowStatus          RowStatus\
      }\
\
   hdsl2ShdslSpanConfProfileName OBJECT-TYPE\
\
\
\
Sikes, et al.               Standards Track                    [Page 44]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      SYNTAX      SnmpAdminString (SIZE(1..32))\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This object is the unique index associated with this profile.\
         Entries in this table are referenced via the object\
         hdsl2ShdslSpanConfProfile in Hdsl2ShdslSpanConfEntry."\
      ::= { hdsl2ShdslSpanConfProfileEntry 1 }\
\
   hdsl2ShdslSpanConfWireInterface OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  twoWire(1),\
                  fourWire(2),\
                  sixWire(3),\
                  eightWire(4)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the two-wire or optional four-wire,\
         six-wire, or eight-wire operation for SHDSL lines."\
      DEFVAL      { twoWire }\
      ::= { hdsl2ShdslSpanConfProfileEntry 2 }\
\
   hdsl2ShdslSpanConfMinLineRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the minimum transmission rate for\
         the associated SHDSL Line in bits-per-second (bps) and includes\
         both payload (user data) and any applicable framing overhead.\
         If the minimum line rate equals the maximum line rate\
         (hdsl2ShdslSpanMaxLineRate), the line rate is considered\
         'fixed'.  If the minimum line rate is less than the\
         maximum line rate, the line rate is considered\
         'rate-adaptive'."\
      DEFVAL      { 1552000 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 3 }\
\
   hdsl2ShdslSpanConfMaxLineRate OBJECT-TYPE\
      SYNTAX      Unsigned32(0..4294967295)\
      UNITS       "bps"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
\
\
\
Sikes, et al.               Standards Track                    [Page 45]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
        "This object configures the maximum transmission rate for\
         the associated SHDSL Line in bits-per-second (bps) and includes\
         both payload (user data) and any applicable framing overhead.\
         If the minimum line rate equals the maximum line rate\
         (hdsl2ShdslSpanMaxLineRate), the line rate is considered\
         'fixed'.  If the minimum line rate is less than the\
         maximum line rate, the line rate is considered\
         'rate-adaptive'."\
      DEFVAL      { 1552000 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 4 }\
\
   hdsl2ShdslSpanConfPSD OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  symmetric(1),\
                  asymmetric(2)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures use of symmetric/asymmetric PSD (Power\
         Spectral Density) Mask for the associated SHDSL Line.  Support\
         for symmetric PSD is mandatory for all supported data rates.\
         Support for asymmetric PSD is optional."\
      DEFVAL      { symmetric }\
      ::= { hdsl2ShdslSpanConfProfileEntry 5 }\
\
   hdsl2ShdslSpanConfTransmissionMode OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslTransmissionModeType\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object specifies the regional setting for the SHDSL\
         line."\
      DEFVAL      { { region1 } }\
      ::= { hdsl2ShdslSpanConfProfileEntry 6 }\
\
   hdsl2ShdslSpanConfRemoteEnabled OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  enabled(1),\
                  disabled(2)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object enables/disables support for remote management\
         of the units in an SHDSL line from the STU-R via the EOC."\
\
\
\
Sikes, et al.               Standards Track                    [Page 46]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      DEFVAL      { enabled }\
      ::= { hdsl2ShdslSpanConfProfileEntry 7 }\
\
   hdsl2ShdslSpanConfPowerFeeding OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  noPower(1),\
                  powerFeed(2),\
                  wettingCurrent(3)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object enables/disables support for optional power\
         feeding in an SHDSL line."\
      DEFVAL      { noPower }\
      ::= { hdsl2ShdslSpanConfProfileEntry 8 }\
\
   hdsl2ShdslSpanConfCurrCondTargetMarginDown OBJECT-TYPE\
      SYNTAX      Integer32(-10..21)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object specifies the downstream current condition target\
         SNR margin for an SHDSL line.  The SNR margin is the difference\
         between the desired SNR and the actual SNR.  Target SNR margin\
         is the desired SNR margin for a unit."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 9 }\
\
   hdsl2ShdslSpanConfWorstCaseTargetMarginDown OBJECT-TYPE\
      SYNTAX      Integer32(-10..21)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object specifies the downstream worst-case target SNR\
         margin for an SHDSL line.  The SNR margin is the difference\
         between the desired SNR and the actual SNR.  Target SNR\
         margin is the desired SNR margin for a unit."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 10 }\
\
   hdsl2ShdslSpanConfCurrCondTargetMarginUp OBJECT-TYPE\
      SYNTAX      Integer32(-10..21)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
\
\
\
Sikes, et al.               Standards Track                    [Page 47]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      STATUS      current\
      DESCRIPTION\
        "This object specifies the upstream current-condition target\
         SNR margin for an SHDSL line.  The SNR margin is the difference\
         between the desired SNR and the actual SNR.  Target SNR margin\
         is the desired SNR margin for a unit."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 11 }\
\
   hdsl2ShdslSpanConfWorstCaseTargetMarginUp OBJECT-TYPE\
      SYNTAX      Integer32(-10..21)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object specifies the upstream worst-case target SNR\
         margin for an SHDSL line.  The SNR margin is the difference\
         between the desired SNR and the actual SNR.  Target SNR margin\
         is the desired SNR margin for a unit."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslSpanConfProfileEntry 12 }\
\
   hdsl2ShdslSpanConfUsedTargetMargins OBJECT-TYPE\
      SYNTAX      BITS\
                  {\
                  currCondDown(0),\
                  worstCaseDown(1),\
                  currCondUp(2),\
                  worstCaseUp(3)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "Indicates whether a target SNR margin is enabled or\
         disabled.  This is a bit-map of possible settings.  The\
         various bit positions are as follows:\
\
         currCondDown   - current-condition downstream target SNR\
                          margin enabled\
\
         worstCaseDown  - worst-case downstream target SNR margin\
                          enabled\
\
         currCondUp     - current-condition upstream target SNR\
                          margin enabled\
\
         worstCaseUp    - worst-case upstream target SNR margin\
                          enabled."\
\
\
\
Sikes, et al.               Standards Track                    [Page 48]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      DEFVAL      { { currCondDown } }\
      ::= { hdsl2ShdslSpanConfProfileEntry 13 }\
\
   hdsl2ShdslSpanConfReferenceClock OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslClockReferenceType\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the clock reference for the STU-C\
         in an SHDSL Line."\
      DEFVAL      { localClk }\
      ::= { hdsl2ShdslSpanConfProfileEntry 14 }\
\
   hdsl2ShdslSpanConfLineProbeEnable OBJECT-TYPE\
      SYNTAX      INTEGER\
                  {\
                  disable(1),\
                  enable(2)\
                  }\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object enables/disables support for Line Probe of\
         the units in an SHDSL line.  When Line Probe is enabled, the\
         system performs Line Probing to find the best possible\
         rate.  If Line Probe is disabled, the rate adaptation phase\
         is skipped to shorten set up time."\
      DEFVAL      { disable }\
      ::= { hdsl2ShdslSpanConfProfileEntry 15 }\
\
   hdsl2ShdslSpanConfProfileRowStatus OBJECT-TYPE\
      SYNTAX      RowStatus\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object controls creation/deletion of the associated\
         entry in this table per the semantics of RowStatus.  If an\
         active entry is referenced in hdsl2ShdslSpanConfProfile, the\
         entry MUST remain active until all references are removed."\
      ::= { hdsl2ShdslSpanConfProfileEntry 16 }\
\
   -- Segment Endpoint Alarm Configuration Profile group\
   --\
\
   hdsl2ShdslEndpointAlarmConfProfileTable OBJECT-TYPE\
      SYNTAX      SEQUENCE OF Hdsl2ShdslEndpointAlarmConfProfileEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
\
\
\
Sikes, et al.               Standards Track                    [Page 49]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      DESCRIPTION\
        "This table supports definitions of alarm configuration\
         profiles for HDSL2/SHDSL segment endpoints.  This table\
         MUST be maintained in a persistent manner."\
      ::= { hdsl2ShdslMibObjects 11 }\
\
   hdsl2ShdslEndpointAlarmConfProfileEntry OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslEndpointAlarmConfProfileEntry\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "Each entry corresponds to a single alarm configuration profile.\
         Each profile contains a set of parameters for setting alarm\
         thresholds for various performance attributes monitored at\
         HDSL2/SHDSL segment endpoints.  Profiles may be created/deleted\
         using the row creation/deletion mechanism via\
         hdsl2ShdslEndpointAlarmConfProfileRowStatus.  If an active\
         entry is referenced in either hdsl2ShdslSpanConfAlarmProfile\
         or hdsl2ShdslEndpointAlarmConfProfile, the entry MUST remain\
         active until all references are removed."\
      INDEX { IMPLIED hdsl2ShdslEndpointAlarmConfProfileName }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileTable 1 }\
\
   Hdsl2ShdslEndpointAlarmConfProfileEntry ::=\
      SEQUENCE\
      {\
      hdsl2ShdslEndpointAlarmConfProfileName       SnmpAdminString,\
      hdsl2ShdslEndpointThreshLoopAttenuation      Integer32,\
      hdsl2ShdslEndpointThreshSNRMargin            Integer32,\
      hdsl2ShdslEndpointThreshES\
                                   Hdsl2ShdslPerfIntervalThreshold,\
      hdsl2ShdslEndpointThreshSES\
                                   Hdsl2ShdslPerfIntervalThreshold,\
      hdsl2ShdslEndpointThreshCRCanomalies         Integer32,\
      hdsl2ShdslEndpointThreshLOSWS\
                                   Hdsl2ShdslPerfIntervalThreshold,\
      hdsl2ShdslEndpointThreshUAS\
                                   Hdsl2ShdslPerfIntervalThreshold,\
      hdsl2ShdslEndpointAlarmConfProfileRowStatus  RowStatus\
      }\
\
   hdsl2ShdslEndpointAlarmConfProfileName OBJECT-TYPE\
      SYNTAX      SnmpAdminString (SIZE(1..32))\
      MAX-ACCESS  not-accessible\
      STATUS      current\
      DESCRIPTION\
        "This object is the unique index associated with this profile."\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 1 }\
\
\
\
Sikes, et al.               Standards Track                    [Page 50]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   hdsl2ShdslEndpointThreshLoopAttenuation OBJECT-TYPE\
      SYNTAX      Integer32(-127..128)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the loop attenuation alarm threshold.\
         When the current value of hdsl2ShdslEndpointCurrAtn reaches\
         or exceeds this threshold, an hdsl2ShdslLoopAttenCrossing\
         MAY be generated."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 2 }\
\
   hdsl2ShdslEndpointThreshSNRMargin OBJECT-TYPE\
      SYNTAX      Integer32(-127..128)\
      UNITS       "dB"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the SNR margin alarm threshold.\
         When the current value of hdsl2ShdslEndpointCurrSnrMgn\
         reaches or drops below this threshold, a\
         hdsl2ShdslSNRMarginCrossing MAY be generated."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 3 }\
\
   hdsl2ShdslEndpointThreshES OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslPerfIntervalThreshold\
      UNITS       "seconds"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the threshold for the number of\
         Errored Seconds (ES) within any given 15-minute performance\
         data collection interval.  If the value of Errored Seconds\
         in a particular 15-minute collection interval reaches/\
         exceeds this value, an hdsl2ShdslPerfESThresh MAY be\
         generated.  At most, one notification will be sent per\
         interval per endpoint."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 4 }\
\
   hdsl2ShdslEndpointThreshSES OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslPerfIntervalThreshold\
      UNITS       "seconds"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
\
\
\
Sikes, et al.               Standards Track                    [Page 51]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
        "This object configures the threshold for the number of\
         Severely Errored Seconds (SES) within any given 15-minute\
         performance data collection interval.  If the value of\
         Severely Errored Seconds in a particular 15-minute collection\
         interval reaches/exceeds this value, an hdsl2ShdslPerfSESThresh\
         MAY be generated.  At most, one notification will be sent per\
         interval per endpoint."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 5 }\
\
   hdsl2ShdslEndpointThreshCRCanomalies OBJECT-TYPE\
      SYNTAX      Integer32\
      UNITS       "detected CRC Anomalies"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the threshold for the number of\
         CRC anomalies within any given 15-minute performance data\
         collection interval.  If the value of CRC anomalies in a\
         particular 15-minute collection interval reaches/exceeds\
         this value, an hdsl2ShdslPerfCRCanomaliesThresh MAY be\
         generated.  At most, one notification will be sent per\
         interval per endpoint."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 6 }\
\
   hdsl2ShdslEndpointThreshLOSWS OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslPerfIntervalThreshold\
      UNITS       "seconds"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object configures the threshold for the number of\
         Loss of Sync Word (LOSW) Seconds within any given 15-minute\
         performance data collection interval.  If the value of LOSW\
         in a particular 15-minute collection interval reaches/exceeds\
         this value, an hdsl2ShdslPerfLOSWSThresh MAY be generated.\
         At most, one notification will be sent per interval per\
         endpoint."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 7 }\
\
   hdsl2ShdslEndpointThreshUAS OBJECT-TYPE\
      SYNTAX      Hdsl2ShdslPerfIntervalThreshold\
      UNITS       "seconds"\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
\
\
\
Sikes, et al.               Standards Track                    [Page 52]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
        "This object configures the threshold for the number of\
         Unavailable Seconds (UAS) within any given 15-minute\
         performance data collection interval.  If the value of UAS\
         in a particular 15-minute collection interval reaches/exceeds\
         this value, an hdsl2ShdslPerfUASThresh MAY be generated.\
         At most, one notification will be sent per interval per\
         endpoint."\
      DEFVAL      { 0 }\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 8 }\
\
   hdsl2ShdslEndpointAlarmConfProfileRowStatus OBJECT-TYPE\
      SYNTAX      RowStatus\
      MAX-ACCESS  read-create\
      STATUS      current\
      DESCRIPTION\
        "This object controls creation/deletion of the associated\
         entry in this table as per the semantics of RowStatus.\
         If an active entry is referenced in either\
         hdsl2ShdslSpanConfAlarmProfile or\
         hdsl2ShdslEndpointAlarmConfProfile, the entry MUST remain\
         active until all references are removed."\
      ::= { hdsl2ShdslEndpointAlarmConfProfileEntry 9 }\
\
   -- Notifications Group\
   --\
\
   hdsl2ShdslNotifications OBJECT IDENTIFIER ::= { hdsl2ShdslMIB 0 }\
\
   hdsl2ShdslLoopAttenCrossing NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrAtn,\
      hdsl2ShdslEndpointThreshLoopAttenuation\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the loop attenuation\
         threshold (as per the hdsl2ShdslEndpointThreshLoopAttenuation\
         value) has been reached/exceeded for the HDSL2/SHDSL segment\
         endpoint."\
      ::= { hdsl2ShdslNotifications 1 }\
\
   hdsl2ShdslSNRMarginCrossing NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrSnrMgn,\
      hdsl2ShdslEndpointThreshSNRMargin\
      }\
\
\
\
Sikes, et al.               Standards Track                    [Page 53]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the SNR margin threshold (as\
         per the hdsl2ShdslEndpointThreshSNRMargin value) has been\
         reached/exceeded for the HDSL2/SHDSL segment endpoint."\
      ::= { hdsl2ShdslNotifications 2 }\
\
   hdsl2ShdslPerfESThresh NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurr15MinES,\
      hdsl2ShdslEndpointThreshES\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the errored seconds\
         threshold (as per the hdsl2ShdslEndpointThreshES value)\
         has been reached/exceeded for the HDSL2/SHDSL segment\
         endpoint."\
      ::= { hdsl2ShdslNotifications 3 }\
\
   hdsl2ShdslPerfSESThresh NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurr15MinSES,\
      hdsl2ShdslEndpointThreshSES\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the severely errored seconds\
         threshold (as per the hdsl2ShdslEndpointThreshSES value) has\
         been reached/exceeded for the HDSL2/SHDSL segment endpoint."\
      ::= { hdsl2ShdslNotifications 4 }\
\
   hdsl2ShdslPerfCRCanomaliesThresh NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurr15MinCRCanomalies,\
      hdsl2ShdslEndpointThreshCRCanomalies\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the CRC anomalies threshold\
         (as per the hdsl2ShdslEndpointThreshCRCanomalies value) has\
         been reached/exceeded for the HDSL2/SHDSL segment endpoint."\
      ::= { hdsl2ShdslNotifications 5 }\
\
   hdsl2ShdslPerfLOSWSThresh NOTIFICATION-TYPE\
\
\
\
Sikes, et al.               Standards Track                    [Page 54]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurr15MinLOSWS,\
      hdsl2ShdslEndpointThreshLOSWS\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the LOSW Seconds threshold\
         (as per the hdsl2ShdslEndpointThreshLOSWS value) has been\
         reached/exceeded for the HDSL2/SHDSL segment endpoint."\
      ::= { hdsl2ShdslNotifications 6 }\
\
   hdsl2ShdslPerfUASThresh NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurr15MinUAS,\
      hdsl2ShdslEndpointThreshUAS\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that the unavailable seconds\
         threshold (as per the hdsl2ShdslEndpointThreshUAS value) has\
         been reached/exceeded for the HDSL2/SHDSL segment endpoint."\
      ::= { hdsl2ShdslNotifications 7 }\
\
   hdsl2ShdslSpanInvalidNumRepeaters NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslSpanConfNumRepeaters\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that a mismatch has been detected\
         between the number of repeater/regenerator units configured\
         for an HDSL2/SHDSL line via the hdsl2ShdslSpanConfNumRepeaters\
         object and the actual number of repeater/regenerator units\
         discovered via the EOC."\
      ::= { hdsl2ShdslNotifications 8 }\
\
   hdsl2ShdslLoopbackFailure NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslMaintLoopbackConfig\
      }\
      STATUS     current\
      DESCRIPTION\
        "This notification indicates that an endpoint maintenance\
         loopback command failed for an HDSL2/SHDSL segment."\
\
\
\
Sikes, et al.               Standards Track                    [Page 55]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      ::= { hdsl2ShdslNotifications 9 }\
\
   hdsl2ShdslpowerBackoff NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         powerBackoff in the hdsl2ShdslEndpointCurrStatus object for\
         this endpoint has changed."\
      ::= { hdsl2ShdslNotifications 10 }\
\
   hdsl2ShdsldeviceFault NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         deviceFault in the hdsl2ShdslEndpointCurrStatus object for\
         this endpoint has changed."\
      ::= { hdsl2ShdslNotifications 11 }\
\
   hdsl2ShdsldcContinuityFault NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         dcContinuityFault in the hdsl2ShdslEndpointCurrStatus object\
         for this endpoint has changed."\
      ::= { hdsl2ShdslNotifications 12 }\
\
   hdsl2ShdslconfigInitFailure NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         configInitFailure in the hdsl2ShdslEndpointCurrStatus object\
         for this endpoint has changed."\
\
\
\
Sikes, et al.               Standards Track                    [Page 56]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      ::= { hdsl2ShdslNotifications 13 }\
\
   hdsl2ShdslprotocolInitFailure NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         protocolInitFailure in the hdsl2ShdslEndpointCurrStatus\
         object for this endpoint has changed."\
      ::= { hdsl2ShdslNotifications 14 }\
\
   hdsl2ShdslnoNeighborPresent NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrStatus\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates that the bit setting for\
         noNeighborPresent in the hdsl2ShdslEndpointCurrStatus object\
         for this endpoint has changed."\
      ::= { hdsl2ShdslNotifications 15 }\
\
   hdsl2ShdslLocalPowerLoss NOTIFICATION-TYPE\
      OBJECTS\
      {\
      hdsl2ShdslInvVendorID\
      }\
      STATUS    current\
      DESCRIPTION\
        "This notification indicates impending unit failure due to\
         loss of local power (last gasp)."\
      ::= { hdsl2ShdslNotifications 16 }\
\
   -- conformance information\
   --\
\
   hdsl2ShdslConformance OBJECT IDENTIFIER ::= { hdsl2ShdslMIB 3 }\
   hdsl2ShdslGroups      OBJECT IDENTIFIER ::=\
                { hdsl2ShdslConformance 1 }\
   hdsl2ShdslCompliances OBJECT IDENTIFIER ::=\
                { hdsl2ShdslConformance 2 }\
\
   -- agent compliance statements\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 57]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   hdsl2ShdslLineMibCompliance MODULE-COMPLIANCE\
      STATUS  deprecated\
      DESCRIPTION\
        "The compliance statement for SNMP entities that implement\
        HDSL2 and SHDSL.  The version of SHDSL supported in this\
        compliance statement is g.shdsl.\
\
        **** This compliance statement is deprecated. ****"\
      MODULE\
      MANDATORY-GROUPS\
      {\
      hdsl2ShdslSpanConfGroup,\
      hdsl2ShdslSpanStatusGroup,\
      hdsl2ShdslInventoryGroup,\
      hdsl2ShdslEndpointConfGroup,\
      hdsl2ShdslEndpointCurrGroup,\
      hdsl2Shdsl15MinIntervalGroup,\
      hdsl2Shdsl1DayIntervalGroup,\
      hdsl2ShdslMaintenanceGroup,\
      hdsl2ShdslEndpointAlarmConfGroup,\
      hdsl2ShdslNotificationGroup\
      }\
\
   GROUP  hdsl2ShdslInventoryShdslGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP  hdsl2ShdslSpanShdslStatusGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP  hdsl2ShdslSpanConfProfileGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   OBJECT hdsl2ShdslSpanConfWireInterface\
      SYNTAX      INTEGER\
                  {\
                  twoWire(1),\
                  fourWire(2)\
                  }\
      DESCRIPTION\
        "An implementation only has to support the range as\
        applicable for the original g.shdsl specification defined\
        in RFC 3276."\
\
\
\
Sikes, et al.               Standards Track                    [Page 58]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   OBJECT hdsl2ShdslStatusMaxAttainableLineRate\
      SYNTAX      Unsigned32(0..4112000)\
      DESCRIPTION\
        "An implementation only has to support the range as\
        applicable for the original g.shdsl specification defined\
        in RFC 3276."\
\
   OBJECT hdsl2ShdslStatusActualLineRate\
      SYNTAX      Unsigned32(0..4112000)\
      DESCRIPTION\
        "An implementation only has to support the range as\
        applicable for the original g.shdsl specification defined\
        in RFC 3276."\
\
   OBJECT hdsl2ShdslSpanConfMinLineRate\
      SYNTAX      Unsigned32(0..4112000)\
      DESCRIPTION\
        "An implementation only has to support the range as\
        applicable for the original g.shdsl specification defined\
        in RFC 3276."\
\
   OBJECT hdsl2ShdslSpanConfMaxLineRate\
      SYNTAX      Unsigned32(0..4112000)\
      DESCRIPTION\
        "An implementation only has to support the range as\
        applicable for the original g.shdsl specification defined\
        in RFC 3276."\
\
      ::= { hdsl2ShdslCompliances 1 }\
\
   hdsl2GshdslbisLineMibCompliance MODULE-COMPLIANCE\
      STATUS  current\
      DESCRIPTION\
        "The compliance statement for SNMP entities that implement\
        HDSL2 and SHDSL.  The version of SHDSL supported in this\
        compliance statement is g.shdsl.bis."\
      MODULE\
      MANDATORY-GROUPS\
      {\
      hdsl2ShdslSpanConfGroup,\
      hdsl2ShdslSpanStatusGroup,\
      hdsl2ShdslInventoryGroup,\
      hdsl2ShdslEndpointConfGroup,\
      hdsl2ShdslEndpointCurrGroup,\
      hdsl2Shdsl15MinIntervalGroup,\
      hdsl2Shdsl1DayIntervalGroup,\
      hdsl2ShdslMaintenanceGroup,\
      hdsl2ShdslEndpointAlarmConfGroup,\
\
\
\
Sikes, et al.               Standards Track                    [Page 59]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      hdsl2ShdslNotificationGroup\
      }\
\
   GROUP  hdsl2ShdslInventoryShdslGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP  hdsl2ShdslSpanShdslStatusGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP  hdsl2ShdslSpanConfProfileGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP hdsl2ShdslWirePairGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
   GROUP hdsl2ShdslPayloadRateGroup\
      DESCRIPTION\
        "Support for this group is only required for implementations\
        supporting SHDSL lines."\
\
      ::= { hdsl2ShdslCompliances 2 }\
\
   -- units of conformance\
   --\
\
   hdsl2ShdslSpanConfGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslSpanConfNumRepeaters,\
      hdsl2ShdslSpanConfProfile,\
      hdsl2ShdslSpanConfAlarmProfile\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for configuring span-related\
         parameters for HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 1 }\
\
   hdsl2ShdslSpanStatusGroup OBJECT-GROUP\
      OBJECTS\
\
\
\
Sikes, et al.               Standards Track                    [Page 60]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      {\
      hdsl2ShdslStatusNumAvailRepeaters\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for retrieving span-related\
         status for HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 2 }\
\
   hdsl2ShdslInventoryShdslGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslInvTransmissionModeCapability\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for retrieving SHDSL-specific\
         inventory information."\
      ::= { hdsl2ShdslGroups 3 }\
\
   hdsl2ShdslSpanShdslStatusGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslStatusMaxAttainableLineRate,\
      hdsl2ShdslStatusActualLineRate,\
      hdsl2ShdslStatusTransmissionModeCurrent\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for retrieving SHDSL-specific\
         span-related status."\
      ::= { hdsl2ShdslGroups 4 }\
\
   hdsl2ShdslInventoryGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslInvVendorID,\
      hdsl2ShdslInvVendorModelNumber,\
      hdsl2ShdslInvVendorSerialNumber,\
      hdsl2ShdslInvVendorEOCSoftwareVersion,\
      hdsl2ShdslInvStandardVersion,\
      hdsl2ShdslInvVendorListNumber,\
      hdsl2ShdslInvVendorIssueNumber,\
      hdsl2ShdslInvVendorSoftwareVersion,\
      hdsl2ShdslInvEquipmentCode,\
      hdsl2ShdslInvVendorOther\
      }\
      STATUS      current\
\
\
\
Sikes, et al.               Standards Track                    [Page 61]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      DESCRIPTION\
        "This group supports objects that provide unit inventory\
         information about the units in HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 5 }\
\
   hdsl2ShdslEndpointConfGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrAtn\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for configuring parameters for\
         segment endpoints in HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 6 }\
\
   hdsl2ShdslEndpointCurrGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrAtn,\
      hdsl2ShdslEndpointCurrSnrMgn,\
      hdsl2ShdslEndpointCurrStatus,\
      hdsl2ShdslEndpointES,\
      hdsl2ShdslEndpointSES,\
      hdsl2ShdslEndpointCRCanomalies,\
      hdsl2ShdslEndpointLOSWS,\
      hdsl2ShdslEndpointUAS,\
      hdsl2ShdslEndpointCurr15MinTimeElapsed,\
      hdsl2ShdslEndpointCurr15MinES,\
      hdsl2ShdslEndpointCurr15MinSES,\
      hdsl2ShdslEndpointCurr15MinCRCanomalies,\
      hdsl2ShdslEndpointCurr15MinLOSWS,\
      hdsl2ShdslEndpointCurr15MinUAS,\
      hdsl2ShdslEndpointCurr1DayTimeElapsed,\
      hdsl2ShdslEndpointCurr1DayES,\
      hdsl2ShdslEndpointCurr1DaySES,\
      hdsl2ShdslEndpointCurr1DayCRCanomalies,\
      hdsl2ShdslEndpointCurr1DayLOSWS,\
      hdsl2ShdslEndpointCurr1DayUAS\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that provide current status and\
         performance measurements relating to segment endpoints in\
         HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 7 }\
\
   hdsl2Shdsl15MinIntervalGroup OBJECT-GROUP\
\
\
\
Sikes, et al.               Standards Track                    [Page 62]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      OBJECTS\
      {\
      hdsl2Shdsl15MinIntervalES,\
      hdsl2Shdsl15MinIntervalSES,\
      hdsl2Shdsl15MinIntervalCRCanomalies,\
      hdsl2Shdsl15MinIntervalLOSWS,\
      hdsl2Shdsl15MinIntervalUAS\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that maintain historic\
         performance measurements relating to segment endpoints in\
         HDSL2/SHDSL lines in 15-minute intervals."\
      ::= { hdsl2ShdslGroups 8 }\
\
   hdsl2Shdsl1DayIntervalGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2Shdsl1DayIntervalMoniSecs,\
      hdsl2Shdsl1DayIntervalES,\
      hdsl2Shdsl1DayIntervalSES,\
      hdsl2Shdsl1DayIntervalCRCanomalies,\
      hdsl2Shdsl1DayIntervalLOSWS,\
      hdsl2Shdsl1DayIntervalUAS\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that maintain historic\
         performance measurements relating to segment endpoints in\
         HDSL2/SHDSL lines in 1-day intervals."\
      ::= { hdsl2ShdslGroups 9 }\
\
   hdsl2ShdslMaintenanceGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslMaintLoopbackConfig,\
      hdsl2ShdslMaintTipRingReversal,\
      hdsl2ShdslMaintPowerBackOff,\
      hdsl2ShdslMaintSoftRestart,\
      hdsl2ShdslMaintLoopbackTimeout,\
      hdsl2ShdslMaintUnitPowerSource\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that provide support for\
         maintenance actions for HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 10 }\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 63]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   hdsl2ShdslEndpointAlarmConfGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslEndpointAlarmConfProfile,\
      hdsl2ShdslEndpointThreshLoopAttenuation,\
      hdsl2ShdslEndpointThreshSNRMargin,\
      hdsl2ShdslEndpointThreshES,\
      hdsl2ShdslEndpointThreshSES,\
      hdsl2ShdslEndpointThreshCRCanomalies,\
      hdsl2ShdslEndpointThreshLOSWS,\
      hdsl2ShdslEndpointThreshUAS,\
      hdsl2ShdslEndpointAlarmConfProfileRowStatus\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that allow configuration of alarm\
         thresholds for various performance parameters for HDSL2/SHDSL\
         lines."\
      ::= { hdsl2ShdslGroups 11 }\
\
   hdsl2ShdslNotificationGroup NOTIFICATION-GROUP\
      NOTIFICATIONS\
      {\
      hdsl2ShdslLoopAttenCrossing,\
      hdsl2ShdslSNRMarginCrossing,\
      hdsl2ShdslPerfESThresh,\
      hdsl2ShdslPerfSESThresh,\
      hdsl2ShdslPerfCRCanomaliesThresh,\
      hdsl2ShdslPerfLOSWSThresh,\
      hdsl2ShdslPerfUASThresh,\
      hdsl2ShdslSpanInvalidNumRepeaters,\
      hdsl2ShdslLoopbackFailure,\
      hdsl2ShdslpowerBackoff,\
      hdsl2ShdsldeviceFault,\
      hdsl2ShdsldcContinuityFault,\
      hdsl2ShdslconfigInitFailure,\
      hdsl2ShdslprotocolInitFailure,\
      hdsl2ShdslnoNeighborPresent,\
      hdsl2ShdslLocalPowerLoss\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports notifications of significant conditions\
         associated with HDSL2/SHDSL lines."\
      ::= { hdsl2ShdslGroups 12 }\
\
   hdsl2ShdslSpanConfProfileGroup OBJECT-GROUP\
      OBJECTS\
\
\
\
Sikes, et al.               Standards Track                    [Page 64]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      {\
      hdsl2ShdslSpanConfWireInterface,\
      hdsl2ShdslSpanConfMinLineRate,\
      hdsl2ShdslSpanConfMaxLineRate,\
      hdsl2ShdslSpanConfPSD,\
      hdsl2ShdslSpanConfTransmissionMode,\
      hdsl2ShdslSpanConfRemoteEnabled,\
      hdsl2ShdslSpanConfPowerFeeding,\
      hdsl2ShdslSpanConfCurrCondTargetMarginDown,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginDown,\
      hdsl2ShdslSpanConfCurrCondTargetMarginUp,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginUp,\
      hdsl2ShdslSpanConfUsedTargetMargins,\
      hdsl2ShdslSpanConfReferenceClock,\
      hdsl2ShdslSpanConfLineProbeEnable,\
      hdsl2ShdslSpanConfProfileRowStatus\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that constitute configuration\
         profiles for configuring span-related parameters in SHDSL\
         lines."\
      ::= { hdsl2ShdslGroups 13 }\
\
   hdsl2ShdslWirePairGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslEndpointCurrTipRingReversal,\
      hdsl2ShdslEndpointCurrActivationState\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects that provide the status\
         of SHDSL-specific wire pairs."\
      ::= { hdsl2ShdslGroups 14 }\
\
   hdsl2ShdslPayloadRateGroup OBJECT-GROUP\
      OBJECTS\
      {\
      hdsl2ShdslStatusMaxAttainablePayloadRate,\
      hdsl2ShdslStatusActualPayloadRate\
      }\
      STATUS      current\
      DESCRIPTION\
        "This group supports objects for retrieving payload rates\
         that exclude any framing overhead."\
      ::= { hdsl2ShdslGroups 15 }\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 65]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   END\
\
4.  Implementation Analysis\
\
   A management application that supports RFC 3276 could mistakenly flag\
   a unit that responds with a rate or wire pair that exceeds the ranges\
   and/or enumerations specified in RFC 3276.  For example, a\
   G.shdsl.bis line with four wire pairs would report statistics for\
   wire pairs that do not exist in RFC 3276.  That is, a GET-NEXT\
   request issues with the object identifier:\
\
      hdsl2ShdslEndpointCurrAtn.1.1.1.2\
\
   might return\
\
      hdsl2ShdslEndpointCurrAtn.1.1.1.3 = 0\
\
   with a G.shdsl.bis unit and\
\
      hdsl2ShdslEndpointCurrSnrMgn.1.1.1.1 = 0\
\
   with an HDSL2 unit as these objects are indexed by\
\
      INDEX  { ifIndex, hdsl2ShdslInvIndex, hdsl2ShdslendpointSide,\
               hdsl2ShdslEndpointWirePair }\
\
   A management application intended to manage G.shdsl.bis agents SHOULD\
   be modified to accept this sequence.\
\
   One should note that this same unmodified management application is\
   still capable of managing G.shdsl.bis agents albeit to the degree of\
   G.SHDSL (non-bis) limitations.  That is, it can create and monitor\
   configurations limited to two wire pairs with an upper-rate limit of\
   4112000 bits/second.\
\
5.  Security Considerations\
\
   There are a number of management objects defined in this MIB module\
   with a MAX-ACCESS clause of read-write and/or read-create.  Such\
   objects may be considered sensitive or vulnerable in some network\
   environments.  The support for SET operations in a non-secure\
   environment without proper protection can have a negative effect on\
   network operations.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 66]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   o  hdsl2ShdslSpanConfTable\
\
      The table consists of the following objects that support SET\
      operations:\
\
      *  hdsl2ShdslSpanConfNumRepeaters\
      *  hdsl2ShdslSpanConfProfile\
      *  hdsl2ShdslSpanConfAlarmProfile\
\
      Unauthorized changes to hdsl2ShdslSpanConfNumRepeaters could\
      result in an hdsl2ShdslSpanInvalidNumRepeaters notification.  Note\
      the discussion on hdsl2ShdslSpanInvalidNumRepeaters in the\
      Notifications section above.\
\
      Unauthorized changes to hdsl2ShdslSpanConfProfile could have an\
      adverse operational effect on a span.  Reference the\
      hdsl2ShdslSpanConfProfileTable discussion below.\
\
      Unauthorized changes to hdsl2ShdslSpanConfAlarmProfile could have\
      a contrary effect on notifications.  Reference the\
      hdsl2ShdslEndpointAlarmConfProfileTable discussion below.\
\
   o  hdsl2ShdslEndpointConfTable\
\
      This table contains one object,\
      hdsl2ShdslEndpointAlarmConfProfile, that supports SET operations.\
      Unauthorized changes could have an undesirable notifications.\
      Reference the hdsl2ShdslEndpointAlarmConfProfileTable discussion\
      below.\
\
   o  hdsl2ShdslEndpointMaintTable\
\
      The table consists of the following objects that support SET\
      operations:\
\
      *  hdsl2ShdslMaintLoopbackConfig\
      *  hdsl2ShdslMaintPowerBackoff\
      *  hdsl2ShdslMaintSoftRestart\
\
      Unauthorized changes to hdsl2ShdslMaintLoopbackConfig could\
      prevent end-to-end data transfer due to an activation of a\
      loopback.\
\
      Unauthorized changes to hdsl2ShdslMaintPowerBackoff could result\
      in an increased in bundle interference.\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 67]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      Unauthorized changes to hdsl2ShdslMaintSoftRestart could result in\
      a temporary interruption of end-to-end data transfer as the result\
      of the triggering of a soft restart.\
\
   o  hdsl2ShdslUnitMaintTable\
\
      This table contains one object, hdsl2ShdslMaintLoopbackTimeout,\
      that supports SET operations.  An unauthorized change to this\
      object could result in the timeout value for loopbacks being\
      increased, decreased, or disabled.\
\
   o  hdsl2ShdslSpanConfProfileTable\
\
      The table consists of the following objects that support SET\
      operations:\
\
      *  hdsl2ShdslSpanConfWireInterface\
      *  hdsl2ShdslSpanConfMinLineRate\
      *  hdsl2ShdslSpanConfMaxLineRate\
      *  hdsl2ShdslSpanConfPSD\
      *  hdsl2ShdslSpanConfTransmissionMode\
      *  hdsl2ShdslSpanConfRemoteEnabled\
      *  hdsl2ShdslSpanConfPowerFeeding\
      *  hdsl2ShdslSpanConfCurrCondTargetMarginDown\
      *  hdsl2ShdslSpanConfWorstCaseTargetMarginDown\
      *  hdsl2ShdslSpanConfCurrCondTargetMarginUp\
      *  hdsl2ShdslSpanConfWorstCaseTargetMarginUp\
      *  hdsl2ShdslSpanConfUsedTargetMargins\
      *  hdsl2ShdslSpanConfReferenceClock\
      *  hdsl2ShdslSpanConfLineProbeEnable\
      *  hdsl2ShdslSpanConfProfileRowStatus\
\
      Setting any of the objects to an incorrect value could have an\
      adverse operational effect on a span.\
\
      Unauthorized changes to the hdsl2ShdslSpanConfWireInterface could\
      result in the failure of a span to achieve activation to a state\
      that would permit data flow.  For example, setting this object to\
      six-wire or eight-wire operation when one of the units in the span\
      only supports two-wire or four-wire operation would likely prevent\
      an expected end-to-end data transfer capability.\
\
      Unauthorized changes to hdsl2ShdslSpanConfMinLineRate or\
      hdsl2ShdslSpanConfMaxLineRate could have an adverse effect on\
      performance.  The range of allowable line rates could be altered\
      such that the span may not be able to train to a line rate that\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 68]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      would permit any end-user data to traverse the span or the span\
      could train to a line rate that is either greater than or less\
      than the line rate that the provider has pledged.\
\
      Unauthorized changes to hdsl2ShdslSpanConfPSD or\
      hdsl2ShdslSpanConfTransmissionMode could have a detrimental effect\
      on loop reach, performance, or spectral compatibility.\
\
      Unauthorized changes to hdsl2ShdslSpanConfRemoteEnable could alter\
      the remote management ability of units.\
\
      Unauthorized changes to hdsl2ShdslSpanConfPowerFeeding could\
      shutdown units that are expected to be fed power remotely.\
      Changing the configuration such that wetting current is not\
      supplied may result in corrosion of electrical contacts.\
\
      Unauthorized changes to\
      hdsl2ShdslSpanConfCurrCondTargetMarginDown,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginDown,\
      hdsl2ShdslSpanConfCurrCondTargetMarginUp,\
      hdsl2ShdslSpanConfWorstCaseTargetMarginUp, or\
      hdsl2ShdslSpanConfUsedTargetMargins could result in invalid\
      parameters used to determine if a data rate can be supported under\
      current and worst-case noise.\
\
      Unauthorized changes to hdsl2ShdslSpanConfReferenceClock could\
      result in the selection of a clock source that might either\
      prevent any data from being transferred or impair data transfer.\
      In addition, an increase in CRC anomalies may be experienced.\
\
      Unauthorized changes to hdsl2ShdslSpanConfLineProbeEnable could\
      have a negative effect on selecting the optimum rate or power\
      level based on current line conditions.\
\
      Unauthorized changes to row status could result in unwanted\
      profiles being created or brought into service.  Also, changes to\
      the row status could result in profiles being inadvertently\
      deleted or taken out of service.\
\
   o  hdsl2ShdslEndpointAlarmConfProfileTable\
\
      The table consists of the following objects that support SET\
      operations:\
\
      *  hdsl2ShdslEndpointThreshLoopAttenuation\
      *  hdsl2ShdslEndpointThreshSNRMargin\
      *  hdsl2ShdslEndpointThreshES\
      *  hdsl2ShdslEndpointThreshSES\
\
\
\
Sikes, et al.               Standards Track                    [Page 69]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      *  hdsl2ShdslEndpointThreshCRCanomalies\
      *  hdsl2ShdslEndpointThreshLOSWS\
      *  hdsl2ShdslEndpointThreshUAS\
      *  hdsl2ShdslEndpointAlarmConfProfileRowStatus\
\
      Increasing any of the threshold values could result in a\
      notification being suppressed or deferred.  Setting a threshold to\
      0 could result in a notification being suppressed.  Suppressing or\
      deferring a notification could prevent the timely delivery of\
      important diagnostic information.  Decreasing any of the threshold\
      values could result in a notification being sent from the network\
      falsely reporting a threshold crossing.\
\
      Changing a threshold value could also have an impact on the amount\
      of notifications the agent sends.  This document adds a paragraph,\
      which was not in RFC 3276 [RFC3276], to the Notifications section\
      that provides general guidance to the rate limiting of\
      notifications.  Agent implementations not adhering to the rate-\
      limiting desires could result in notifications being generated at\
      an uncontrolled rate.  Unauthorized changes to a threshold value\
      could result in an undesired notification rate.\
\
      Unauthorized changes to row status could result in unwanted\
      profiles being created or brought into service.  Also, changes to\
      the row status could result in profiles being inadvertently\
      deleted or taken out of service.\
\
   Some of the readable objects in this MIB module (i.e., objects with a\
   MAX-ACCESS other than not-accessible) may be considered sensitive or\
   vulnerable in some network environments.  It is thus important to\
   control even GET and/or NOTIFY access to these objects and possibly\
   to even encrypt the values of these objects when sending them over\
   the network via SNMP.  These are the tables and objects and their\
   sensitivity/vulnerability:\
\
   o  hdsl2ShdslInventoryTable\
\
      Access to these objects would allow an intruder to obtain\
      information about which vendor's equipment is in use on the\
      network.  Further, such information is considered sensitive in\
      many environments for competitive reasons.\
\
      *  hdsl2ShdslInvVendorID\
      *  hdsl2ShdslInvVendorModelNumber\
      *  hdsl2ShdslInvVendorSerialNumber\
      *  hdsl2ShdslInvVendorEOCSoftwareVersion\
      *  hdsl2ShdslInvStandardVersion\
      *  hdsl2ShdslInvVendorListNumber\
\
\
\
Sikes, et al.               Standards Track                    [Page 70]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
      *  hdsl2ShdslInvVendorIssueNumber\
      *  hdsl2ShdslInvVendorSoftwareVersion\
      *  hdsl2ShdslInvEquipmentCode\
      *  hdsl2ShdslInvVendorOther\
      *  hdsl2ShdslInvTransmissionModeCapability\
\
   SNMP versions prior to SNMPv3 did not include adequate security.\
   Even if the network itself is secure (for example by using IPsec),\
   even then, there is no control as to who on the secure network is\
   allowed to access and GET/SET (read/change/create/delete) the objects\
   in this MIB module.\
\
   It is RECOMMENDED that implementers consider the security features as\
   provided by the SNMPv3 framework (see [RFC3410], Section 8),\
   including full support for the SNMPv3 cryptographic mechanisms (for\
   authentication and privacy).\
\
   Further, deployment of SNMP versions prior to SNMPv3 is NOT\
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\
   enable cryptographic security.  It is then a customer/operator\
   responsibility to ensure that the SNMP entity giving access to an\
   instance of this MIB module is properly configured to give access to\
   the objects only to those principals (users) that have legitimate\
   rights to indeed GET or SET (change/create/delete) them.\
\
6.  Acknowledgements\
\
   The authors are deeply grateful to the authors of the ADSL LINE MIB\
   (RFC 2662 [RFC2662]), Gregory Bathrick and Faye Ly, as much of the\
   text and structure of this document originate in their documents.\
\
   The authors are also grateful to the authors of FR MFR MIB (RFC 3020\
   [RFC3020]), Prayson Pate, Bob Lynch, and Kenneth Rehbehn, as the\
   majority of the Security Considerations section was lifted from their\
   document.\
\
   The authors also acknowledge the importance of the contributions and\
   suggestions regarding interface indexing structures received from\
   David Horton of CITR.\
\
   The authors are extremely thankful to Bert Wijnen, Randy Presuhn, and\
   C. M. Heard for their extensive review and the many suggestions they\
   provided.\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 71]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   Other contributions were received from the following:\
\
         Matt Beanland (Extel Communications)\
         Philip Bergstresser (Adtran)\
         Steve Blackwell (Centillium)\
         Umberto Bonollo (NEC Australia)\
         John Egan (Metalink BroadBand)\
         Yagal Hachmon (RAD)\
         Mark Johnson (Red Point)\
         Sharon Mantin (Orckit)\
         Moti Morgenstern (ECI)\
         Raymond Murphy (Ericsson)\
         Lee Nipper (Verilink)\
         Randy Presuhn (BMC Software)\
         Katy Sherman (Orckit)\
         Mike Sneed (ECI)\
         Jon Turney (DSL Solutions)\
         Aron Wahl (Memotec)\
         Bert Wijnen (Lucent)\
         Jim Wilson (for Mindspeed)\
         Michael Wrobel (Memotec)\
\
7.  References\
\
7.1.  Normative References\
\
   [G.991.2]  Blackwell, S., "Single-Pair High-Speed Digital Subscriber\
              Line (SHDSL) Transceivers", ITU-T G.991.2, December 2003.\
\
   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate\
              Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2578]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
              "Structure of Management Information Version 2 (SMIv2)",\
              STD 58, RFC 2578, April 1999.\
\
   [RFC2579]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
              "Textual Conventions for SMIv2", STD 58, RFC 2579, April\
              1999.\
\
   [RFC2580]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\
              "Conformance Statements for SMIv2", STD 58, RFC 2580,\
              April 1999.\
\
   [RFC2863]  McCloghrie, K. and F. Kastenholz, "The Interfaces Group\
              MIB", RFC 2863, June 2000.\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 72]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
   [RFC3411]  Harrington, D., Presuhn, R., and B. Wijnen, "An\
              Architecture for Describing Simple Network Management\
              Protocol (SNMP) Management Frameworks", STD 62, RFC 3411,\
              December 2002.\
\
   [RFC3593]  Tesink, K., "Textual Conventions for MIB Modules Using\
              Performance History Based on 15 Minute Intervals", RFC\
              3593, September 2003.\
\
   [T1E1.4]   American National Standards Institute, "ANSI T1E1.4/2000-\
              006", February 2000.\
\
7.2.  Informative References\
\
   [RFC2662]  Bathrick, G. and F. Ly, "Definitions of Managed Objects\
              for the ADSL Lines", RFC 2662, August 1999.\
\
   [RFC3020]  Pate, P., Lynch, B., and K. Rehbehn, "Definitions of\
              Managed Objects for Monitoring and Controlling the UNI/NNI\
              Multilink Frame Relay Function", RFC 3020, December 2000.\
\
   [RFC3276]  Ray, B. and R. Abbi, "Definitions of Managed Objects for\
              High Bit-Rate DSL - 2nd generation (HDSL2) and Single-Pair\
              High-Speed Digital Subscriber Line (SHDSL) Lines\
              Processing", RFC 3276, May 2002.\
\
   [RFC3410]  Case, J., Mundy, R., Partain, D., and B. Stewart,\
              "Introduction and Applicability Statements for Internet-\
              Standard Management Framework", RFC 3410, December 2002.\
\
   [RFC3418]  Presuhn, R., "Management Information Base (MIB) for the\
              Simple Network Management Protocol (SNMP)", STD 62, RFC\
              3418, December 2002.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 73]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
Authors' Addresses\
\
   Clay Sikes\
   Zhone Technologies, Inc.\
   Florida Design Center\
   8454 126th Ave. N.\
   Largo, FL  33773\
   US\
\
   Phone: +1 727 530 8257\
   Fax:   +1 727 532 5698\
   EMail: csikes@zhone.com\
\
\
   Bob Ray\
   PESA Switching Systems, Inc.\
   330-A Wynn Drive\
   Huntsville, AL  35805\
   US\
\
   Phone: +1 256 726 9200 ext. 142\
   Fax:   +1 256 726 9271\
   EMail: rray@pesa.com\
\
\
   Rajesh Abbi\
   Alcatel USA\
   2301 Sugar Bush Road\
   Raleigh, NC  27612\
   US\
\
   Phone: +1 919-850-6194\
   Fax:   +1 919-850-6670\
   EMail: Rajesh.Abbi@alcatel.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 74]\
\
RFC 4319                  HDSL2-SHDSL-LINE-MIB             December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Sikes, et al.               Standards Track                    [Page 75]\
\

doc 14
  field 0
    name titolo
    type string
    value rfc4322.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                      M. Richardson\
Request for Comments: 4322                                           SSW\
Category: Informational                                  D.H. Redelmeier\
                                                                  Mimosa\
                                                           December 2005\
\
\
     Opportunistic Encryption using the Internet Key Exchange (IKE)\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document describes opportunistic encryption (OE) as designed and\
   implemented by the Linux FreeS/WAN project.  OE uses the Internet Key\
   Exchange (IKE) and IPsec protocols.  The objective is to allow\
   encryption for secure communication without any pre-arrangement\
   specific to the pair of systems involved.  DNS is used to distribute\
   the public keys of each system involved.  This is resistant to\
   passive attacks.  The use of DNS Security (DNSSEC) secures this\
   system against active attackers as well.\
\
   As a result, the administrative overhead is reduced from the square\
   of the number of systems to a linear dependence, and it becomes\
   possible to make secure communication the default even when the\
   partner is not known in advance.\
\
Table of Contents\
\
   1. Introduction ....................................................3\
      1.1. Motivation .................................................3\
      1.2. Encryption Regimes .........................................4\
      1.3. Peer Authentication in Opportunistic Encryption ............4\
      1.4. Use of RFC 2119 Terms ......................................5\
   2. Overview ........................................................6\
      2.1. Reference Diagram ..........................................6\
      2.2. Terminology ................................................6\
      2.3. Model of Operation .........................................8\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 1]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   3. Protocol Specification ..........................................9\
      3.1. Forwarding Plane State Machine .............................9\
      3.2. Keying Daemon -- Initiator ................................12\
      3.3. Keying Daemon -- Responder ................................20\
      3.4. Renewal and Teardown ......................................22\
   4. Impacts on IKE .................................................24\
      4.1. ISAKMP/IKE Protocol .......................................24\
      4.2. Gateway Discovery Process .................................24\
      4.3. Self Identification .......................................24\
      4.4. Public Key Retrieval Process ..............................25\
      4.5. Interactions with DNSSEC ..................................25\
      4.6. Required Proposal Types ...................................25\
   5. DNS Issues .....................................................26\
      5.1. Use of KEY Record .........................................26\
      5.2. Use of TXT Delegation Record ..............................27\
      5.3. Use of FQDN IDs ...........................................29\
      5.4. Key Roll-Over .............................................29\
   6. Network Address Translation Interaction ........................30\
      6.1. Co-Located NAT/NAPT .......................................30\
      6.2. Security Gateway behind a NAT/NAPT ........................30\
      6.3. End System behind a NAT/NAPT ..............................31\
   7. Host Implementations ...........................................31\
   8. Multi-Homing ...................................................31\
   9. Failure Modes ..................................................33\
      9.1. DNS Failures ..............................................33\
      9.2. DNS Configured, IKE Failures ..............................33\
      9.3. System Reboots ............................................34\
   10. Unresolved Issues .............................................34\
      10.1. Control of Reverse DNS ...................................34\
   11. Examples ......................................................34\
      11.1. Clear-Text Usage (Permit Policy) .........................34\
      11.2. Opportunistic Encryption .................................36\
   12. Security Considerations .......................................39\
      12.1. Configured versus Opportunistic Tunnels ..................39\
      12.2. Firewalls versus Opportunistic Tunnels ...................40\
      12.3. Denial of Service ........................................41\
   13. Acknowledgements ..............................................41\
   14. References ....................................................41\
      14.1. Normative References .....................................41\
      14.2. Informative References ...................................42\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 2]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
1.  Introduction\
\
1.1.  Motivation\
\
   The objective of opportunistic encryption is to allow encryption\
   without any pre-arrangement specific to the pair of systems involved.\
   Each system administrator adds public key information to DNS records\
   to support opportunistic encryption and then enables this feature in\
   the nodes' IPsec stack.  Once this is done, any two such nodes can\
   communicate securely.\
\
   This document describes opportunistic encryption as designed and\
   implemented by the Linux FreeS/WAN project in revisions up and\
   including 2.00.  Note that 2.01 and beyond implements [RFC3445] in a\
   backward compatible way.  A future document [IPSECKEY] will describe\
   a variation that complies with RFC 3445.  For project information,\
   see http://www.freeswan.org.\
\
   The Internet Architecture Board (IAB) and Internet Engineering\
   Steering Group (IESG) have taken a strong stand that the Internet\
   should use powerful encryption to provide security and privacy\
   [RFC1984].  The Linux FreeS/WAN project attempts to provide a\
   practical means to implement this policy.\
\
   The project uses the IPsec, ISAKMP/IKE, DNS, and DNSSEC protocols\
   because they are standardized, widely available, and can often be\
   deployed very easily without changing hardware or software, or\
   retraining users.\
\
   The extensions to support opportunistic encryption are simple.  No\
   changes to any on-the-wire formats are needed.  The only changes are\
   to the policy decision making system.  This means that opportunistic\
   encryption can be implemented with very minimal changes to an\
   existing IPsec implementation.\
\
   Opportunistic encryption creates a "fax effect".  The proliferation\
   of the fax machine was possible because it did not require that\
   everyone buy one overnight.  Instead, as each person installed one,\
   the value of having one increased because there were more people that\
   could receive faxes.  Once opportunistic encryption is installed, it\
   automatically recognizes other boxes using opportunistic encryption,\
   without any further configuration by the network administrator.  So,\
   as opportunistic encryption software is installed on more boxes, its\
   value as a tool increases.\
\
   This document describes the infrastructure to permit deployment of\
   Opportunistic Encryption.\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 3]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   The term S/WAN is a trademark of RSA Data Systems, and is used with\
   permission by this project.\
\
1.2.  Encryption Regimes\
\
   To aid in understanding the relationship between security processing\
   and IPsec, we divide policies controlling network traffic into four\
   categories.  The traffic is categorized by destination address using\
   longest prefix match.  Therefore, each category is enumerated by a\
   set of network prefixes.  The categories are mutually exclusive; a\
   particular prefix should only occur in one category.\
\
   * Deny: network prefixes to which traffic is always forbidden.\
   * Permit: network prefixes to which traffic in the clear is\
     permitted.\
   * Opportunistic tunnel: network prefixes to which traffic is\
     encrypted if possible, when it otherwise might be sent in the\
     clear.\
   * Configured tunnel: network prefixes to which traffic must be\
     encrypted, and traffic in the clear is never permitted.  A\
     traditionally defined Virtual Private Network (VPN) is a form of\
     configured tunnel.\
\
   Traditional firewall devices handle the first two categories.  No\
   authentication is required.  The permit policy is currently the\
   default on the Internet.\
\
   This document describes the third category: opportunistic tunnel,\
   which is proposed as the new default for the Internet.\
\
   Category four's policy is a very strict "encrypt it or drop it"\
   policy, which requires authentication of the endpoints.  As the\
   number of endpoints is typically bounded and is typically under a\
   single authority, arranging for distribution of authentication\
   material, while difficult, does not require any new technology.  The\
   mechanism described here, however, does provides an additional way to\
   distribute the authentication materials; it is a public key method\
   that does not require deployment of an X.509 based infrastructure.\
\
1.3.  Peer Authentication in Opportunistic Encryption\
\
   Opportunistic encryption creates tunnels between nodes that are\
   essentially strangers.  This is done without any prior bilateral\
   arrangement.  Therefore, there is the difficult question of how one\
   knows to whom one is talking.\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 4]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   One possible answer is that since no useful authentication can be\
   done, none should be tried.  This mode of operation is named\
   "anonymous encryption".  An active man-in-the-middle attack can be\
   used to thwart the privacy of this type of communication.  Without\
   peer authentication, there is no way to prevent this kind of attack.\
\
   Although it is a useful mode, anonymous encryption is not the goal of\
   this project.  Simpler methods are available that can achieve\
   anonymous encryption only, but authentication of the peer is a\
   desirable goal.  Authentication of the peer is achieved through key\
   distribution in DNS, leveraging upon the authentication of the DNS in\
   DNSSEC.\
\
   Peers are, therefore, authenticated with DNSSEC when available.\
   Local policy determines how much trust to extend when DNSSEC is not\
   available.\
\
   An essential premise of building private connections with strangers\
   is that datagrams received through opportunistic tunnels are no more\
   special than datagrams that arrive in the clear.  Unlike in a VPN,\
   these datagrams should not be given any special exceptions when it\
   comes to auditing, further authentication, or firewalling.\
\
   When initiating outbound opportunistic encryption, local\
   configuration determines what happens if tunnel setup fails.  The\
   packet may go out in the clear, or it may be dropped.\
\
1.4.  Use of RFC 2119 Terms\
\
   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\
   document, are to be interpreted as described in [RFC2119]\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 5]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
2.  Overview\
\
2.1.  Reference Diagram\
\
   The following network diagram is used in the rest of this document as\
   the canonical diagram:\
\
                              [Q]  [R]\
                               .    .              AS2\
      [A]----+----[SG-A].......+....+.......[SG-B]-------[B]\
             |                 ......\
         AS1 |                 ..PI..\
             |                 ......\
      [D]----+----[SG-D].......+....+.......[C] AS3\
\
                    Figure 1: Reference Network Diagram\
\
   In this diagram, there are four end-nodes: A, B, C, and D.  There are\
   three security gateways, SG-A, SG-B, SG-D.  A, D, SG-A, and SG-D are\
   part of the same administrative authority, AS1.  SG-A and SG-D are on\
   two different exit paths from organization 1.  SG-B and B are part of\
   an independent organization, AS2.  Nodes Q and R are nodes on the\
   Internet.  PI is the Public Internet ("The Wild").\
\
2.2.  Terminology\
\
   Note: The network numbers used in this document are for illustrative\
   purposes only.  This document could not use the reserved example\
   network numbers of [RFC3330] because multiple address ranges were\
   needed.\
\
   The following terminology is used in this document:\
\
   Security gateway (or simply gateway): a system that performs IPsec\
      tunnel mode encapsulation/decapsulation.  [SG-x] in the diagram.\
\
   Alice: node [A] in the diagram.  When an IP address is needed, this\
      is 192.1.0.65.\
\
   Bob: node [B] in the diagram.  When an IP address is needed, this is\
      192.2.0.66.\
\
   Carol: node [C] in the diagram.  When an IP address is needed, this\
      is 192.1.1.67.\
\
   Dave: node [D] in the diagram.  When an IP address is needed, this is\
      192.3.0.68.\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 6]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   SG-A: Alice's security gateway.  Internally it is 192.1.0.1,\
      externally it is 192.1.1.4.\
\
   SG-B: Bob's security gateway.  Internally it is 192.2.0.1, externally\
      it is 192.1.1.5.\
\
   SG-D: Dave's security gateway.  Also Alice's backup security gateway.\
      Internally it is 192.3.0.1, externally it is 192.1.1.6.\
\
   Configured tunnel: a tunnel that is directly and deliberately hand-\
      configured on participating gateways.  Configured tunnels are\
      typically given a higher level of trust than opportunistic\
      tunnels.\
\
   Road warrior tunnel: a configured tunnel connecting one node with a\
      fixed IP address and one node with a variable IP address.  A road\
      warrior (RW) connection must be initiated by the variable node,\
      since the fixed node cannot know the current address for the road\
      warrior.\
\
   Anonymous encryption: the process of encrypting a session without any\
      knowledge of who the other parties are.  No authentication of\
      identities is done.\
\
   Opportunistic encryption: the process of encrypting a session with\
      authenticated knowledge of who the other party is without\
      prearrangement.\
\
   Lifetime: the period in seconds (bytes or datagrams) for which a\
      security association will remain alive before rekeying is needed.\
\
   Lifespan: the effective time for which a security association remains\
      useful.  A security association with a lifespan shorter than its\
      lifetime would be removed when no longer needed.  A security\
      association with a lifespan longer than its lifetime would need to\
      be re-keyed one or more times.\
\
   Phase 1 SA: an ISAKMP/IKE security association sometimes referred to\
      as a keying channel.\
\
   Phase 2 SA: an IPsec security association.\
\
   Tunnel: another term for a set of phase 2 SA (one in each direction).\
\
   NAT: Network Address Translation (see [RFC2663]).\
\
   NAPT: Network Address and Port Translation (see [RFC2663]).\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 7]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   AS: an autonomous system.\
\
   FQDN: Fully-Qualified Domain Name\
\
   Default-free zone: a set of routers that maintain a complete set of\
      routes to all currently reachable destinations.  Having such a\
      list, these routers never make use of a default route.  A datagram\
      with a destination address not matching any route will be dropped\
      by such a router.\
\
2.3.  Model of Operation\
\
   The opportunistic encryption security gateway (OE gateway) is a\
   regular gateway node, as described in [RFC0791] section 2.4 and\
   [RFC1812], with the additional capabilities described here and in\
   [RFC2401].  The algorithm described here provides a way to determine,\
   for each datagram, whether or not to encrypt and tunnel the datagram.\
   Two important things that must be determined are whether or not to\
   encrypt and tunnel and, if so, the destination address or name of the\
   tunnel endpoint that should be used.\
\
2.3.1.  Tunnel Authorization\
\
   The OE gateway determines whether or not to create a tunnel based on\
   the destination address of each packet.  Upon receiving a packet with\
   a destination address not recently seen, the OE gateway performs a\
   lookup in DNS for an authorization resource record (see Section 5.2).\
   The record is located using the IP address to perform a search in the\
   in-addr.arpa (IPv4) or ip6.arpa (IPv6) maps.  If an authorization\
   record is found, the OE gateway interprets this as a request for a\
   tunnel to be formed.\
\
2.3.2.  Tunnel Endpoint Discovery\
\
   The authorization resource record also provides the address or name\
   of the tunnel endpoint that should be used.\
\
   The record may also provide the public RSA key of the tunnel end\
   point itself.  This is provided for efficiency only.  If the public\
   RSA key is not present, the OE gateway performs a second lookup to\
   find a KEY resource record for the endpoint address or name.\
\
   Origin and integrity protection of the resource records is provided\
   by DNSSEC (see [RFC4033]).  Section 3.2.4.1 documents an optional\
   restriction on the tunnel endpoint if DNSSEC signatures are not\
   available for the relevant records.\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 8]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
2.3.3.  Caching of Authorization Results\
\
   The OE gateway maintains a cache, in the forwarding plane, of\
   source/destination pairs for which opportunistic encryption has been\
   attempted.  This cache maintains a record of whether or not OE was\
   successful so that subsequent datagrams can be forwarded properly\
   without additional delay.\
\
   Successful negotiation of OE instantiates a new security association.\
   Failure to negotiate OE results in creation of a forwarding policy\
   entry either to deny or permit transmission in the clear future\
   datagrams.  This negative cache is necessary to avoid the possibly\
   lengthy process of repeatedly looking up the same information.\
\
   The cache is timed out periodically, as described in Section 3.4.\
   This removes entries that are no longer being used and permits the\
   discovery of changes in authorization policy.\
\
3.  Protocol Specification\
\
   The OE gateway is modeled to have a forwarding plane and a control\
   plane.  A control channel, such as PF_KEY [RFC2367], connects the two\
   planes.\
\
   The forwarding plane performs per-datagram operations.  The control\
   plane contains a keying daemon, such as ISAKMP/IKE, and performs all\
   authorization, peer authentication, and key derivation functions.\
\
3.1.  Forwarding Plane State Machine\
\
   Let the OE gateway maintain a collection of objects -- a superset of\
   the security policy database (SPD) specified in [RFC2401].  For each\
   combination of source and destination address, an SPD object exists\
   in one of five following states.  Prior to forwarding each datagram,\
   the responder uses the source and destination addresses to pick an\
   entry from the SPD.  The SPD then determines if and how the packet is\
   forwarded.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                      [Page 9]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
         .--------------.\
         | nonexistent  |\
         |    policy    |\
         `--------------'\
                |\
                | PF_ACQUIRE\
                |\
                |<---------.\
                V          | new packet\
         .--------------.  | (maybe resend PF_ACQUIRE)\
         |  hold policy |--'\
         |              |--.\
         `--------------'   \\  pass\
            |        |       \\ msg    .---------.\
            |        |        \\       V         | forward\
            |        |         .-------------.  | packet\
     create |        |         | pass policy |--'\
     IPsec  |        |         `-------------'\
     SA     |        |\
            |         \\\
            |          \\\
            V           \\ deny\
      .---------.        \\ msg\
      | encrypt |         \\\
      | policy  |          \\         ,---------.\
      `---------'           \\        |         | discard\
                             \\       V         | packet\
                              .-------------.  |\
                              | deny policy |--'\
                              `-------------'\
\
3.1.1.  Nonexistent Policy\
\
   If the gateway does not find an entry, then this policy applies.  The\
   gateway creates an entry with an initial state of "hold policy" and\
   requests keying material from the keying daemon.  The gateway does\
   not forward the datagram; rather, it SHOULD attach the datagram to\
   the SPD entry as the "first" datagram and retain it for eventual\
   transmission in a new state.\
\
3.1.2.  Hold Policy\
\
   The gateway requests keying material.  If the interface to the keying\
   system is lossy (PF_KEY, for instance, can be), the implementation\
   SHOULD include a mechanism to retransmit the keying request at a rate\
   limited to less than 1 request per second.  The gateway does not\
   forward the datagram.  The gateway SHOULD attach the datagram to the\
   SPD entry as the "last" datagram, where it is retained for eventual\
\
\
\
Richardson & Redelmeier      Informational                     [Page 10]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   transmission.  If there is a datagram already stored in this way,\
   then that already-stored datagram is discarded.\
\
   The rationale behind saving the "first" and "last" datagrams are as\
   follows: The "first" datagram is probably a TCP SYN packet.  Once\
   there is keying established, the gateway will release this datagram,\
   avoiding the need for the endpoint to retransmit the datagram.  In\
   the case where the connection was not a TCP connection, but was\
   instead a streaming protocol or a DNS request, the "last" datagram\
   that was retained is likely the most recent data.  The difference\
   between "first" and "last" may also help the endpoints determine\
   which data was dropped while negotiation took place.\
\
3.1.3.  Pass-Through Policy\
\
   The gateway forwards the datagram using the normal forwarding table.\
   The gateway enters this state only by command from the keying daemon,\
   and upon entering this state, also forwards the "first" and "last"\
   datagrams.\
\
3.1.4.  Deny Policy\
\
   The gateway discards the datagram.  The gateway enters this state\
   only by command from the keying daemon, and upon entering this state,\
   discards the "first" and "last" datagrams.  An implementation MAY\
   provide the administrator with a control to determine if further\
   datagrams cause ICMP messages to be generated (i.e., ICMP Destination\
   Unreachable, Communication Administratively Prohibited.  type=3,\
   code=13).\
\
3.1.5.  Encrypt Policy\
\
   The gateway encrypts the datagram using the indicated security\
   association database (SAD) entry.  The gateway enters this state only\
   by command from the keying daemon, and upon entering this state,\
   releases and forwards the "first" and "last" datagrams using the new\
   encrypt policy.\
\
   If the associated SAD entry expires because of byte, packet or time\
   limits, then the entry returns to the Hold policy, and an expire\
   message is sent to the keying daemon.\
\
   All states may be created directly by the keying daemon while acting\
   as a gateway.\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 11]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.2.  Keying Daemon -- Initiator\
\
   Let the keying daemon maintain a collection of objects.  Let them be\
   called "connections" or "conn"s.  There are two categories of\
   connection objects: classes and instances.  A class represents an\
   abstract policy (i.e., what could be).  An instance represents an\
   actual connection (i.e., what is running at the time).\
\
   Let there be two further subtypes of connections: keying channels\
   (Phase 1 SAs) and data channels (Phase 2 SAs).  Each data channel\
   object may have a corresponding SPD and SAD entry maintained by the\
   datagram state machine.\
\
   For the purposes of opportunistic encryption, there MUST, at least,\
   be connection classes known as "deny", "always-clear-text", "OE-\
   permissive", and "OE-paranoid".  The latter two connection classes\
   define a set of destination prefixes for which opportunistic\
   encryption will be attempted.  The administrator MAY set policy\
   options in a number of additional places.  An implementation MAY\
   create additional connection classes to further refine these\
   policies.\
\
   The simplest system may need only the "OE-permissive" connection, and\
   would list its own (single) IP address as the source address of this\
   policy and the wild-card address 0.0.0.0/0 as the destination IPv4\
   address.  That is, the simplest policy is to try opportunistic\
   encryption with all destinations.\
\
   This simplest policy SHOULD be offered as a preconfigured default.\
\
   The distinction between permissive and paranoid Opportunistic\
   Encryption ("OE-paranoid" below) use will become clear in the state\
   transition differences.\
\
   In brief, an OE-permissive policy means to permit traffic to flow in\
   the clear when there is a failure to find and/or use the encryption\
   keys.  OE-permissive permits the network to function, even if in an\
   insecure manner.\
\
   On failure, a paranoid OE ("OE-paranoid") will install a drop policy.\
   OE-paranoid permits traffic to flow only when appropriate security is\
   available.\
\
   In this description of the keying machine's state transitions, the\
   states associated with the keying system itself are omitted because\
   they are best documented in the keying system ([RFC2407], [RFC2408],\
   and [RFC2409] for ISAKMP/IKE), and the details are keying system\
   specific.  Opportunistic encryption is not dependent upon any\
\
\
\
Richardson & Redelmeier      Informational                     [Page 12]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   specific keying protocol, but this document does provide requirements\
   for those using ISAKMP/IKE to assure that implementations inter-\
   operate.\
\
   The state transitions that may be involved in communicating with the\
   forwarding plane are omitted.  PF_KEY and similar protocols have\
   their own set of states required for message sends and completion\
   notifications.\
\
   Finally, the retransmits and recursive lookups that are normal for\
   DNS are not included in this description of the state machine.\
\
                         |\
                         | PF_ACQUIRE\
                         |\
                         V\
                 .---------------.\
                 |  nonexistent  |\
                 |  connection   |\
                 `---------------'\
                  |      |      |\
           send   ,      |      \\\
 expired   pass  /       |       \\ send\
 conn.     msg  /        |        \\ deny\
   ^           /         |         \\ msg\
   |          V          | do       \\\
 .---------------.       | DNS       \\   .---------------.\
 |  clear-text   |       | lookup     `->|     deny      |--->expired\
 |  connection   |       | for           |  connection   |  connection\
 `---------------'       | destination   `---------------'\
    ^ ^                  |                   ^\
    | | no record        |                   |\
    | | OE-permissive    V                   | no record\
    | |            .---------------.         | OE-paranoid\
    | `------------|  potential OE |---------'\
    |              |  connection   |         ^\
    |              `---------------'         |\
    |                    |                   |\
    |                    | got TXT record    | DNSSEC failure\
    |                    | reply             |\
    |                    V                   | wrong\
    |              .---------------.         | failure\
    |              |  authenticate |---------'\
    |              | & parse TXT RR|         ^\
    | repeated     `---------------'         |\
    | ICMP               |                   |\
    | failures           | initiate IKE to   |\
    | (short timeout)    | responder         |\
\
\
\
Richardson & Redelmeier      Informational                     [Page 13]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
    |                    V                   |\
    | phase-2      .---------------.         | failure\
    | failure      |   pending     |---------'\
    | (normal      |     OE        |         ^\
    |  timeout)    |               |invalid  | phase-2 fail (normal\
    |              |               |<--.SPI  |               timeout)\
    |              |               |   |     | ICMP failures (short\
    |              | +=======+     |---'     |                timeout)\
    |              | |  IKE  |     |   ^     |\
    `----------------| states|---------------'\
                   | +=======+     |   |\
                   `---------------'   |\
                         | IPsec SA    | invalid SPI\
                         | established |\
                         V             | rekey time\
                   .--------------.    |\
                   |   keyed      |<---|------------------------------.\
                   |  connection  |----'                              |\
                   `--------------'                                   |\
                         | timer                                      |\
                         |                                            |\
                         V                                            |\
                   .--------------.     connection still active       |\
   clear-text----->|   expired    |-----------------------------------'\
         deny----->|  connection  |\
                   `--------------'\
                         | dead connection - deleted\
                         V\
\
3.2.1.  Nonexistent Connection\
\
   There is no connection instance for a given source/destination\
   address pair.  Upon receipt of a request for keying material for this\
   source/destination pair, the initiator searches through the\
   connection classes to determine the most appropriate policy.  Upon\
   determining an appropriate connection class, an instance object is\
   created of that type.  Both of the OE types result in a potential OE\
   connection.\
\
   Failure to find an appropriate connection class results in an\
   administrator-defined default.\
\
   In each case, when the initiator finds an appropriate class for the\
   new flow, an instance connection is made of the class that matched.\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 14]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.2.2.  Clear-Text Connection\
\
   The nonexistent connection makes a transition to this state when an\
   always-clear-text class is instantiated, or when an OE-permissive\
   connection fails.  During the transition, the initiator creates a\
   pass-through policy object in the forwarding plane for the\
   appropriate flow.\
\
   Timing out is the only way to leave this state (see Section 3.2.7).\
\
3.2.3.  Deny Connection\
\
   The empty connection makes a transition to this state when a deny\
   class is instantiated, or when an OE-paranoid connection fails.\
   During the transition, the initiator creates a deny policy object in\
   the forwarding plane for the appropriate flow.\
\
   Timing out is the only way to leave this state (see Section 3.2.7).\
\
3.2.4.  Potential OE Connection\
\
   The empty connection makes a transition to this state when one of\
   either OE class is instantiated.  During the transition to this\
   state, the initiator creates a hold policy object in the forwarding\
   plane for the appropriate flow.\
\
   In addition, when making a transition into this state, DNS lookup is\
   done in the reverse-map for a TXT delegation resource record (see\
   Section 5.2).  The lookup key is the destination address of the flow.\
\
   There are three ways to exit this state:\
\
   1.  DNS lookup finds a TXT delegation resource record.\
\
   2.  DNS lookup does not find a TXT delegation resource record.\
\
   3.  DNS lookup times out.\
\
   Based upon the results of the DNS lookup, the potential OE connection\
   makes a transition to the pending OE connection state.  The\
   conditions for a successful DNS look are:\
\
   1.  DNS finds an appropriate resource record.\
\
   2.  It is properly formatted according to Section 5.2.\
\
   3.  If DNSSEC is enabled, then the signature has been vouched for.\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 15]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   Note that if the initiator does not find the public key present in\
   the TXT delegation record, then the public key must be looked up as a\
   sub-state.  Only successful completion of all the DNS lookups is\
   considered a success.\
\
   If DNS lookup does not find a resource record or if DNS times out,\
   then the initiator considers the receiver not OE capable.  If this is\
   an OE-paranoid instance, then the potential OE connection makes a\
   transition to the deny connection state.  If this is an OE-permissive\
   instance, then the potential OE connection makes a transition to the\
   clear-text connection state.\
\
   If the initiator finds a resource record, but it is not properly\
   formatted, or if DNSSEC is enabled and reports a failure to\
   authenticate, then the potential OE connection makes a transition to\
   the deny connection state.  This action SHOULD be logged.  If the\
   administrator wishes to override this transition between states, then\
   an always-clear class can be installed for this flow.  An\
   implementation MAY make this situation a new class.\
\
3.2.4.1.  Restriction on Unauthenticated TXT Delegation Records\
\
   An implementation SHOULD also provide an additional administrative\
   control on delegation records and DNSSEC.  This control would apply\
   to delegation records (the TXT records in the reverse-map) that are\
   not protected by DNSSEC.  Records of this type are only permitted to\
   delegate to their own address as a gateway.  When this option is\
   enabled, an active attack on DNS will be unable to redirect packets\
   to other than the original destination.\
\
3.2.5.  Pending OE Connection\
\
   The potential OE connection makes a transition to this state when the\
   initiator determines that all the information required from the DNS\
   lookup is present.  Upon entering this state, the initiator attempts\
   to initiate keying to the gateway provided.\
\
   Exit from this state occurs with either a successfully created IPsec\
   SA or a failure of some kind.  Successful SA creation results in a\
   transition to the key connection state.\
\
   Three failures have caused significant problems.  They are clearly\
   not the only possible failures from keying.\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 16]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   Note that if there are multiple gateways available in the TXT\
   delegation records, then a failure can only be declared after all of\
   them have been tried.  Further, creation of a phase 1 SA does not\
   constitute success.  A set of phase 2 SAs (a tunnel) is considered\
   success.\
\
   The first failure occurs when an ICMP port unreachable is\
   consistently received without any other communication, or when there\
   is silence from the remote end.  This usually means that either the\
   gateway is not alive, or the keying daemon is not functional.  For an\
   OE-permissive connection, the initiator makes a transition to the\
   clear-text connection, but with a low lifespan.  For an OE-\
   pessimistic connection, the initiator makes a transition to the deny\
   connection again with a low lifespan.  The lifespan in both cases is\
   kept low because the remote gateway may be in the process of\
   rebooting or be otherwise temporarily unavailable.\
\
   The length of time to wait for the remote keying daemon to wake up is\
   a matter of some debate.  If there is a routing failure, 5 minutes is\
   usually long enough for the network to re-converge.  Many systems can\
   reboot in that amount of time as well.  However, 5 minutes is far too\
   long for most users to wait to hear that they can not connect using\
   OE.  Implementations SHOULD make this a tunable parameter.\
\
   The second failure occurs after a phase 1 SA has been created, but\
   there is either no response to the phase 2 proposal, or the initiator\
   receives a negative notify (the notify must be authenticated).  The\
   remote gateway is not prepared to do OE at this time.  As before, the\
   initiator makes a transition to the clear-text or the deny connection\
   based upon connection class, but this time with a normal lifespan.\
\
   The third failure occurs when there is signature failure while\
   authenticating the remote gateway.  This can occur when there has\
   been a key roll-over, but DNS has not caught up.  In this case again,\
   the initiator makes a transition to the clear-text or the deny\
   connection based upon the connection class.  However, the lifespan\
   depends upon the remaining time to live in the DNS.  (Note that\
   DNSSEC signed resource records have a different expiry time from\
   non-signed records.)\
\
3.2.6.  Keyed Connection\
\
   The pending OE connection makes a transition to this state when\
   session keying material (the phase 2 SAs) is derived.  The initiator\
   creates an encrypt policy in the forwarding plane for this flow.\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 17]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   There are three ways to exit this state.  The first is by receipt of\
   an authenticated delete message (via the keying channel) from the\
   peer.  This is normal teardown and results in a transition to the\
   expired connection state.\
\
   The second exit is by expiry of the forwarding plane keying material.\
   This starts a re-key operation with a transition back to pending OE\
   connection.  In general, the soft expiry occurs with sufficient time\
   left to continue using the keys.  A re-key can fail, which may result\
   in the connection failing to clear-text or deny as appropriate.  In\
   the event of a failure, the forwarding plane policy does not change\
   until the phase 2 SA (IPsec SA) reaches its hard expiry.\
\
   The third exit is in response to a negotiation from a remote gateway.\
   If the forwarding plane signals the control plane that it has\
   received an unknown SPI from the remote gateway, or an ICMP is\
   received from the remote gateway indicating an unknown SPI, the\
   initiator should consider that the remote gateway has rebooted or\
   restarted.  Since these indications are easily forged, the\
   implementation must exercise care.  The initiator should make a\
   cautious (rate-limited) attempt to re-key the connection.\
\
3.2.7.  Expiring Connection\
\
   The initiator will periodically place each of the deny, clear-text,\
   and keyed connections into this sub-state.  See Section 3.4 for more\
   details of how often this occurs.  The initiator queries the\
   forwarding plane for last use time of the appropriate policy.  If the\
   last use time is relatively recent, then the connection returns to\
   the previous deny, clear-text or keyed connection state.  If not,\
   then the connection enters the expired connection state.\
\
   The DNS query and answer that lead to the expiring connection state\
   are also examined.  The DNS query may become stale.  (A negative,\
   i.e., no such record, answer is valid for the period of time given by\
   the MINIMUM field in an attached SOA record.  See [RFC1034] section\
   4.3.4.)  If the DNS query is stale, then a new query is made.  If the\
   results change, then the connection makes a transition to a new state\
   as described in potential OE connection state.\
\
   Note that when considering how stale a connection is, both outgoing\
   SPD and incoming SAD must be queried as some flows may be\
   unidirectional for some time.\
\
   Also note that the policy at the forwarding plane is not updated\
   unless there is a conclusion that there should be a change.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 18]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.2.8.  Expired Connection\
\
   Entry to this state occurs when no datagrams have been forwarded\
   recently via the appropriate SPD and SAD objects.  The objects in the\
   forwarding plane are removed (logging any final byte and packet\
   counts, if appropriate) and the connection instance in the keying\
   plane is deleted.\
\
   The initiator sends an ISAKMP/IKE delete to clean up the phase 2 SAs\
   as described in Section 3.4.\
\
   Whether or not to delete the phase 1 SAs at this time is left as a\
   local implementation issue.  Implementations that do delete the phase\
   1 SAs MUST send authenticated delete messages to indicate that they\
   are doing so.  There is an advantage to keeping the phase 1 SAs until\
   they expire: they may prove useful again in the near future.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 19]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.3.  Keying Daemon -- Responder\
\
   The responder has a set of objects identical to those of the\
   initiator.\
\
   The responder receives an invitation to create a keying channel from\
   an initiator.\
\
                   |\
                   | IKE main mode\
                   |  phase 1\
                   V\
           .-----------------.\
           | unauthenticated |\
           |     OE peer     |\
           `-----------------'\
                   |\
                   | lookup KEY RR in in-addr.arpa\
                   |             (if ID_IPV4_ADDR)\
                   | lookup KEY RR in forward\
                   |             (if ID_FQDN)\
                   V\
           .-----------------.  RR not found\
           |   received DNS  |---------------> log failure\
           |     reply       |\
           `----+--------+---'\
             phase 2 |        \\      misformatted\
            proposal |         `------------------> log failure\
                     V\
           .----------------.\
           |  authenticated |  identical initiator\
           |     OE peer    |--------------------> initiator\
           `----------------'  connection found    state machine\
                 |\
                 | look for TXT record for initiator\
                 |\
                 V\
           .---------------.\
           |  authorized   |---------------------> log failure\
           |    OE peer    |\
           `---------------'\
                 |\
                 |\
                 V\
            potential OE\
            connection in\
            initiator state\
               machine\
\
\
\
Richardson & Redelmeier      Informational                     [Page 20]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.3.1.  Unauthenticated OE Peer\
\
   Upon entering this state, the responder starts a DNS lookup for a KEY\
   record for the initiator.  The responder looks in the reverse-map for\
   a KEY record for the initiator if the initiator has offered an\
   ID_IPV4_ADDR, and in the forward map if the initiator has offered an\
   ID_FQDN type.  (See [RFC2407] section 4.6.2.1.)\
\
   The responder exits this state upon successful receipt of a KEY from\
   DNS, and use of the key to verify the signature of the initiator.\
\
   Successful authentication of the peer results in a transition to the\
   authenticated OE Peer state.\
\
   Note that the unauthenticated OE peer state generally occurs in the\
   middle of the key negotiation protocol.  It is really a form of\
   pseudo-state.\
\
3.3.2.  Authenticated OE Peer\
\
   The peer will eventually propose one or more phase 2 SAs.  The\
   responder uses the source and destination address in the proposal to\
   finish instantiating the connection state using the connection class\
   table.  The responder MUST search for an identical connection object\
   at this point.\
\
   If an identical connection is found, then the responder deletes the\
   old instance, and the new object makes a transition to the pending OE\
   connection state.  This means that new ISAKMP connections with a\
   given peer will always use the latest instance, which is the correct\
   one if the peer has rebooted in the interim.\
\
   If an identical connection is not found, then the responder makes the\
   transition according to the rules given for the initiator: it\
   installs appropriate policy: clear, drop, or OE.\
\
   If OE, and the phase 2 ID (source IP) is different than the phase 1\
   ID, then additional authorization is required.  A TXT record\
   associated with the proposed phase 2 source IP is requested.  This is\
   used to confirm authorization for the phase 1 identity to encrypt on\
   behalf of the phase 2.  Successful retrieval results in a transition\
   to "Authorized OE Peer".\
\
   Note that if the initiator is in OE-paranoid mode and the responder\
   is in either always-clear-text or deny, then no communication is\
   possible according to policy.  An implementation is permitted to\
   create new types of policies such as "accept OE but do not initiate\
   it".  This is a local matter.\
\
\
\
Richardson & Redelmeier      Informational                     [Page 21]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
3.3.3.  Authorized OE Peer\
\
   This state is entered from the Authenticated OE Peer state, upon\
   successful retrieval of the TXT record.  The contents of the record\
   are confirmed -- any failures lead to errors, as indicated in Section\
   3.2.4.\
\
3.4.  Renewal and Teardown\
\
3.4.1.  Aging\
\
   A potentially unlimited number of tunnels may exist.  In practice,\
   only a few tunnels are used during a period of time.  Unused tunnels\
   MUST, therefore, be torn down.  Detecting when tunnels are no longer\
   in use is the subject of this section.\
\
   There are two methods for removing tunnels: explicit deletion or\
   expiry.\
\
   Explicit deletion requires an IKE delete message.  The deletes MUST\
   be authenticated, so both ends of the tunnel must maintain the keying\
   channel (phase 1 ISAKMP SA).  An implementation that refuses to\
   either maintain or recreate the keying channel SA will be unable to\
   use this method.\
\
   The tunnel expiry method simply allows the IKE daemon to expire\
   normally without attempting to re-key it.\
\
   Regardless of which method is used to remove tunnels, the\
   implementation MUST use a method to determine if the tunnel is still\
   in use.  The specifics are a local matter, but the FreeS/WAN project\
   uses the following criteria.  These criteria are currently\
   implemented in the key management daemon, but could also be\
   implemented at the SPD layer using an idle timer.\
\
   Set a short initial (soft) lifespan of 1 minute since many net flows\
   last only a few seconds.\
\
   At the end of the lifespan, check to see if the tunnel was used by\
   traffic in either direction during the last 30 seconds.  If so,\
   assign a longer tentative lifespan of 20 minutes, after which, look\
   again.  If the tunnel is not in use, then close the tunnel.\
\
   The expiring state in the key management system (see Section 3.2.7)\
   implements these timeouts.  The timer above may be in the forwarding\
   plane, but then it must be resettable.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 22]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   The tentative lifespan is independent of re-keying; it is just the\
   time when the tunnel's future is next considered.  (The term lifespan\
   is used here rather than lifetime for this reason.)  Unlike re-\
   keying, this tunnel use check is not costly and should happen\
   reasonably frequently.\
\
   A multi-step back-off algorithm is not considered worth the effort\
   here.\
\
   If the security gateway and the client host are the same, and not a\
   Bump-in-the-Stack or Bump-in-the-Wire implementation, tunnel teardown\
   decisions MAY pay attention to TCP connection status as reported by\
   the local TCP layer.  A still-open TCP connection is almost a\
   guarantee that more traffic is expected.  Closing of the only TCP\
   connection through a tunnel is a strong hint that no more traffic is\
   expected.\
\
3.4.2.  Teardown and Cleanup\
\
   Teardown should always be coordinated between the two ends of the\
   tunnel by interpreting and sending delete notifications.  There is a\
   detailed sub-state in the expired connection state of the key manager\
   that relates to retransmits of the delete notifications, but this is\
   considered to be a keying system detail.\
\
   On receiving a delete for the outbound SAs of a tunnel (or some\
   subset of them), tear down the inbound ones also and notify the\
   remote end with a delete.  If the local system receives a delete for\
   a tunnel that is no longer in existence, then two delete messages\
   have crossed paths.  Ignore the delete.  The operation has already\
   been completed.  Do not generate any messages in this situation.\
\
   Tunnels are to be considered as bidirectional entities, even though\
   the low-level protocols don't treat them this way.\
\
   When the deletion is initiated locally, rather than as a response to\
   a received delete, send a delete for (all) the inbound SAs of a\
   tunnel.  If the local system does not receive a responding delete for\
   the outbound SAs, try re-sending the original delete.  Three tries\
   spaced 10 seconds apart seems a reasonable level of effort.  A\
   failure of the other end to respond after 3 attempts indicates that\
   the possibility of further communication is unlikely.  Remove the\
   outgoing SAs.  (The remote system may be a mobile node that is no\
   longer present or powered on.)\
\
   After re-keying, transmission should switch to using the new outgoing\
   SAs (ISAKMP or IPsec) immediately, and the old leftover outgoing SAs\
   should be cleared out promptly (delete should be sent for the\
\
\
\
Richardson & Redelmeier      Informational                     [Page 23]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   outgoing SAs) rather than waiting for them to expire.  This reduces\
   clutter and minimizes confusion for the operator doing diagnostics.\
\
4.  Impacts on IKE\
\
4.1.  ISAKMP/IKE Protocol\
\
   The IKE wire protocol needs no modifications.  The major changes are\
   implementation issues relating to how the proposals are interpreted,\
   and from whom they may come.\
\
   As opportunistic encryption is designed to be useful between peers\
   without prior operator configuration, an IKE daemon must be prepared\
   to negotiate phase 1 SAs with any node.  This may require a large\
   amount of resources to maintain cookie state, as well as large\
   amounts of entropy for nonces, cookies, and so on.\
\
   The major changes to support opportunistic encryption are at the IKE\
   daemon level.  These changes relate to handling of key acquisition\
   requests, lookup of public keys and TXT records, and interactions\
   with firewalls and other security facilities that may be co-resident\
   on the same gateway.\
\
4.2.  Gateway Discovery Process\
\
   In a typical configured tunnel, the address of SG-B is provided via\
   configuration.  Furthermore, the mapping of an SPD entry to a gateway\
   is typically a 1:1 mapping.  When the 0.0.0.0/0 SPD entry technique\
   is used, then the mapping to a gateway is determined by the reverse\
   DNS records.\
\
   The need to do a DNS lookup and wait for a reply will typically\
   introduce a new state and a new event source (DNS replies) to IKE.\
   Although a synchronous DNS request can be implemented for proof of\
   concept, experience is that it can cause very high latencies when a\
   queue of queries must all timeout in series.\
\
   Use of an asynchronous DNS lookup will also permit overlap of DNS\
   lookups with some of the protocol steps.\
\
4.3.  Self Identification\
\
   SG-A will have to establish its identity.  Use an IPv4 (IPv6) ID in\
   phase 1.\
\
   There are many situations where the administrator of SG-A may not be\
   able to control the reverse DNS records for SG-A's public IP address.\
   Typical situations include dialup connections and most residential-\
\
\
\
Richardson & Redelmeier      Informational                     [Page 24]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   type broadband Internet access (ADSL, cable-modem) connections.  In\
   these situations, a fully qualified domain name that is under the\
   control of SG-A's administrator may be used when acting as an\
   initiator only.  The FQDN ID should be used in phase 1.  See Section\
   5.3 for more details and restrictions.\
\
4.4.  Public Key Retrieval Process\
\
   Upon receipt of a phase 1 SA proposal with either an IPv4 (IPv6) ID\
   or an FQDN ID, an IKE daemon needs to examine local caches and\
   configuration files to determine if this is part of a configured\
   tunnel.  If no configured tunnels are found, then the implementation\
   should attempt to retrieve a KEY record from the reverse DNS in the\
   case of an IPv4/IPv6 ID, or from the forward DNS in the case of FQDN\
   ID.\
\
   It is reasonable that if other non-local sources of policy are used\
   (COPS, LDAP), they be consulted concurrently, but that some clear\
   ordering of policy be provided.  Note that due to variances in\
   latency, implementations must wait for positive or negative replies\
   from all sources of policy before making any decisions.\
\
4.5.  Interactions with DNSSEC\
\
   The implementation described (FreeS/WAN 1.98) neither uses DNSSEC\
   directly to explicitly verify the authenticity of zone information,\
   nor uses the NSEC records to provide authentication of the absence of\
   a TXT or KEY record.  Rather, this implementation uses a trusted path\
   to a DNSSEC-capable caching resolver.\
\
   To distinguish between an authenticated and an unauthenticated DNS\
   resource record, a stub resolver capable of returning DNSSEC\
   information MUST be used.\
\
4.6.  Required Proposal Types\
\
4.6.1.  Phase 1 Parameters\
\
   Main mode MUST be used.\
\
   The initiator MUST offer at least one proposal using some combination\
   of: 3DES, HMAC-MD5 or HMAC-SHA1, DH group 2 or 5.  Group 5 SHOULD be\
   proposed first.  (See [RFC3526])\
\
   The initiator MAY offer additional proposals, but the cipher MUST not\
   be weaker than 3DES.  The initiator SHOULD limit the number of\
   proposals such that the IKE datagrams do not need to be fragmented.\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 25]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   The responder MUST accept one of the proposals.  If any configuration\
   of the responder is required, then the responder is not acting in an\
   opportunistic way.\
\
   The initiator SHOULD use an ID_IPV4_ADDR (ID_IPV6_ADDR for IPv6) of\
   the external interface of the initiator for phase 1.  (There is an\
   exception, see Section 5.3.)  The authentication method MUST be RSA\
   public key signatures.  The RSA key for the initiator SHOULD be\
   placed into a DNS KEY record in the reverse space of the initiator\
   (i.e., using in-addr.arpa or ip6.arpa).\
\
4.6.2.  Phase 2 Parameters\
\
   The initiator MUST propose a tunnel between the ultimate sender\
   ("Alice" or "A") and ultimate recipient ("Bob" or "B") using 3DES-CBC\
   mode, MD5, or SHA1 authentication.  Perfect Forward Secrecy MUST be\
   specified.\
\
   Tunnel mode MUST be used.\
\
   Identities MUST be ID_IPV4_ADDR_SUBNET with the mask being /32.\
\
   Authorization for the initiator to act on Alice's behalf is\
   determined by looking for a TXT record in the reverse-map at Alice's\
   IP address.\
\
   Compression SHOULD NOT be mandatory.  It MAY be offered as an option.\
\
5.  DNS Issues\
\
5.1.  Use of KEY Record\
\
   In order to establish their own identities, security gateways SHOULD\
   publish their public keys in their reverse DNS via DNSSEC's KEY\
   record.  See section 3 of RFC 2535 [RFC2535].\
\
   For example:\
\
   KEY 0x4200 4 1 AQNJjkKlIk9...nYyUkKK8\
\
   0x4200: The flag bits, indicating that this key is prohibited for\
      confidentiality use (it authenticates the peer only, a separate\
      Diffie-Hellman exchange is used for confidentiality), and that\
      this key is associated with the non-zone entity whose name is the\
      RR owner name.  No other flags are set.\
\
   4: This indicates that this key is for use by IPsec.\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 26]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   1: An RSA key is present.\
\
   AQNJjkKlIk9...nYyUkKK8: The public key of the host as described in\
      [RFC3110].\
\
   Use of several KEY records allows for key roll-over.  The SIG Payload\
   in IKE phase 1 SHOULD be accepted if the public key, given by any KEY\
   RR, validates it.\
\
5.2.  Use of TXT Delegation Record\
\
   If, for example, machine Alice wishes SG-A to act on her behalf, then\
   she publishes a TXT record to provide authorization for SG-A to act\
   on Alice's behalf.  This is done similarly for Bob and SG-B.\
\
   These records are located in the reverse DNS (in-addr.arpa or\
   ip6.arpa) for their respective IP addresses.  The reverse DNS SHOULD\
   be secured by DNSSEC.  DNSSEC is required to defend against active\
   attacks.\
\
   If Alice's address is P.Q.R.S, then she can authorize another node to\
   act on her behalf by publishing records at:\
\
      S.R.Q.P.in-addr.arpa\
\
   The contents of the resource record are expected to be a string that\
   uses the following syntax, as suggested in RFC1464 [RFC1464].  (Note\
   that the reply to query may include other TXT resource records used\
   by other applications.)\
\
      X-IPsec-Server(P)=A.B.C.D public-key\
\
               Figure 2: Format of reverse delegation record\
\
   P: Specifies a precedence for this record.  This is similar to MX\
      record preferences.  Lower numbers have stronger preference.\
\
   A.B.C.D: Specifies the IP address of the Security Gateway for this\
      client machine.\
\
   public-key: Is the encoded RSA Public key of the Security Gateway.\
      The public-key is provided here to avoid a second DNS lookup.  If\
      this field is absent, then a KEY resource record should be looked\
      up in the reverse-map of A.B.C.D.  The key is transmitted in\
      base64 format.\
\
   The fields of the record MUST be separated by whitespace.  This MAY\
   be: space, tab, newline, or carriage return.  A space is preferred.\
\
\
\
Richardson & Redelmeier      Informational                     [Page 27]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   In the case where Alice is located at a public address behind a\
   security gateway that has no fixed address (or no control over its\
   reverse-map), then Alice may delegate to a public key by domain name.\
\
      X-IPsec-Server(P)=@FQDN public-key\
\
       Figure 3: Format of reverse delegation record (FQDN version)\
\
   P: Is as above.\
   FQDN: Specifies the FQDN that the Security Gateway will identify\
      itself with.\
   public-key: Is the encoded RSA Public key of the Security Gateway.\
\
   If there is more than one such TXT record with strongest (lowest\
   numbered) precedence, one Security Gateway is picked arbitrarily from\
   those specified in the strongest-preference records.\
\
5.2.1.  Long TXT Records\
\
   When packed into wire-format, TXT records that are longer than 255\
   characters are divided into smaller <character-strings>.  (See\
   [RFC1035] section 3.3 and 3.3.14.)  These MUST be reassembled into a\
   single string for processing.  Whitespace characters in the base64\
   encoding are to be ignored.\
\
5.2.2.  Choice of TXT Record\
\
   It has been suggested to use the KEY, OPT, CERT, or KX records\
   instead of a TXT record.  None is satisfactory.\
\
   The KEY RR has a protocol field that could be used to indicate a new\
   protocol, and an algorithm field that could be used to indicate\
   different contents in the key data.  However, the KEY record is\
   clearly not intended for storing what are really authorizations, it\
   is just for identities.  Other uses have been discouraged.\
\
   OPT resource records, as defined in [RFC2671], are not intended to be\
   used for storage of information.  They are not to be loaded, cached\
   or forwarded.  They are, therefore, inappropriate for use here.\
\
   CERT records [RFC2538] can encode almost any set of information.  A\
   custom type code could be used permitting any suitable encoding to be\
   stored, not just X.509.  According to the RFC, the certificate RRs\
   are to be signed internally, which may add undesirable and\
   unnecessary bulk.  Larger DNS records may require TCP instead of UDP\
   transfers.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 28]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   At the time of protocol design, the CERT RR was not widely deployed\
   and could not be counted upon.  Use of CERT records will be\
   investigated, and may be proposed in a future revision of this\
   document.\
\
   KX records are ideally suited for use instead of TXT records, but had\
   not been deployed at the time of implementation.\
\
5.3.  Use of FQDN IDs\
\
   Unfortunately, not every administrator has control over the contents\
   of the reverse-map.  Where the initiator (SG-A) has no suitable\
   reverse-map, the authorization record present in the reverse-map of\
   Alice may refer to a FQDN instead of an IP address.\
\
   In this case, the client's TXT record gives the fully qualified\
   domain name (FQDN) in place of its security gateway's IP address.\
   The initiator should use the ID_FQDN ID-payload in phase 1.  A\
   forward lookup for a KEY record on the FQDN must yield the\
   initiator's public key.\
\
   This method can also be used when the external address of SG-A is\
   dynamic.\
\
   If SG-A is acting on behalf of Alice, then Alice must still delegate\
   authority for SG-A to do so in her reverse-map.  When Alice and SG-A\
   are one and the same (i.e., Alice is acting as an end-node) then\
   there is no need for this when initiating only.\
\
   However, Alice must still delegate to herself if she wishes others to\
   initiate OE to her.  See Figure 3.\
\
5.4.  Key Roll-Over\
\
   Good cryptographic hygiene says that one should replace\
   public/private key pairs periodically.  Some administrators may wish\
   to do this as often as daily.  Typical DNS propagation delays are\
   determined by the SOA Resource Record MINIMUM parameter, which\
   controls how long DNS replies may be cached.  For reasonable\
   operation of DNS servers, administrators usually want this value to\
   be at least several hours, sometimes as a long as a day.  This\
   presents a problem: a new key MUST not be used prior to its\
   propagation through DNS.\
\
   This problem is dealt with by having the Security Gateway generate a\
   new public/private key pair, at least MINIMUM seconds in advance of\
   using it.  It then adds this key to the DNS (both as a second KEY\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 29]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   record and in additional TXT delegation records) at key generation\
   time.  Note: only one key is allowed in each TXT record.\
\
   When authenticating, all gateways MUST have available all public keys\
   that are found in DNS for this entity.  This permits the\
   authenticating end to check both the key for "today" and the key for\
   "tomorrow".  Note that it is the end which is creating the signature\
   (possesses the private key) that determines which key is to be used.\
\
6.  Network Address Translation Interaction\
\
   There are no fundamentally new issues for implementing opportunistic\
   encryption in the presence of network address translation.  Rather,\
   there are only the regular IPsec issues with NAT traversal.\
\
   There are several situations to consider for NAT.\
\
6.1.  Co-Located NAT/NAPT\
\
   If a security gateway is also performing network address translation\
   on behalf of an end-system, then the packet should be translated\
   prior to being subjected to opportunistic encryption.  This is in\
   contrast to typically configured tunnels, which often exist to bridge\
   islands of private network address space.  The security gateway will\
   use the translated source address for phase 2, and so the responding\
   security gateway will look up that address to confirm SG-A's\
   authorization.\
\
   In the case of NAT (1:1), the address space into which the\
   translation is done MUST be globally unique, and control over the\
   reverse-map is assumed.  Placing of TXT records is possible.\
\
   In the case of NAPT (m:1), the address will be the security gateway\
   itself.  The ability to get KEY and TXT records in place will again\
   depend upon whether or not there is administrative control over the\
   reverse-map.  This is identical to situations involving a single host\
   acting on behalf of itself.  For initiators (but not responders), an\
   FQDN-style ID can be used to get around a lack of a reverse-map.\
\
6.2.  Security Gateway behind a NAT/NAPT\
\
   If there is a NAT or NAPT between the security gateways, then normal\
   IPsec NAT traversal problems occur.  In addition to the transport\
   problem, which may be solved by other mechanisms, there is the issue\
   of what phase 1 and phase 2 IDs to use.  While FQDN could be used\
   during phase 1 for the security gateway, there is no appropriate ID\
   for phase 2.  Due to the NAT, the end systems live in different IP\
   address spaces.\
\
\
\
Richardson & Redelmeier      Informational                     [Page 30]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
6.3.  End System behind a NAT/NAPT\
\
   If the end system is behind a NAT (perhaps SG-B), then there is, in\
   fact, no way for another end system to address a packet to this end\
   system.  Not only is opportunistic encryption impossible, but it is\
   also impossible for any communication to be initiated to the end\
   system.  It may be possible for this end system to initiate such\
   communication.  This creates an asymmetry, but this is common for\
   NAPT.\
\
7.  Host Implementations\
\
   When Alice and SG-A are components of the same system, they are\
   considered to be a host implementation.  The packet sequence scenario\
   remains unchanged.\
\
   Components marked Alice are the upper layers (TCP, UDP, the\
   application), and SG-A is the IP layer.\
\
   Note that tunnel mode is still required.\
\
   As Alice and SG-A are acting on behalf of themselves, no TXT based\
   delegation record is necessary for Alice to initiate.  She can rely\
   on FQDN in a forward map.  This is particularly attractive to mobile\
   nodes such as notebook computers at conferences.  To respond,\
   Alice/SG-A will still need an entry in Alice's reverse-map.\
\
8.  Multi-Homing\
\
   If there are multiple paths between Alice and Bob (as illustrated in\
   the diagram with SG-D), then additional DNS records are required to\
   establish authorization.\
\
   In Figure 1, Alice has two ways to exit her network: SG-A and SG-D.\
   Previously, SG-D has been ignored.  Postulate that there are routers\
   between Alice and her set of security gateways (denoted by the +\
   signs and the marking of an autonomous system number for Alice's\
   network).  Datagrams may, therefore, travel to either SG-A or SG-D en\
   route to Bob.\
\
   As long as all network connections are in good order, it does not\
   matter how datagrams exit Alice's network.  When they reach either\
   security gateway, the security gateway will find the TXT delegation\
   record in Bob's reverse-map, and establish an SA with SG-B.\
\
   SG-B has no problem establishing that either of SG-A or SG-D may\
   speak for Alice, because Alice has published two equally weighted TXT\
   delegation records:\
\
\
\
Richardson & Redelmeier      Informational                     [Page 31]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
      X-IPsec-Server(10)=192.1.1.5 AQMM...3s1Q==\
      X-IPsec-Server(10)=192.1.1.6 AAJN...j8r9==\
\
          Figure 4: Multiple gateway delegation example for Alice\
\
   Alice's routers can now do any kind of load sharing needed.  Both\
   SG-A and SG-D send datagrams addressed to Bob through their tunnel to\
   SG-B.\
\
   Alice's use of non-equal weight delegation records to show preference\
   of one gateway over another, has relevance only when SG-B is\
   initiating to Alice.\
\
   If the precedences are the same, then SG-B has a more difficult time.\
   It must decide which of the two tunnels to use.  SG-B has no\
   information about which link is less loaded, nor which security\
   gateway has more cryptographic resources available.  SG-B, in fact,\
   has no knowledge of whether both gateways are even reachable.\
\
   The Public Internet's default-free zone may well know a good route to\
   Alice, but the datagrams that SG-B creates must be addressed to\
   either SG-A or SG-D; they can not be addressed to Alice directly.\
\
   SG-B may make a number of choices:\
\
   1.  It can ignore the problem and round robin among the tunnels.\
       This causes losses during times when one or the other security\
       gateway is unreachable.  If this worries Alice, she can change\
       the weights in her TXT delegation records.\
   2.  It can send to the gateway from which it most recently received\
       datagrams.  This assumes that routing and reachability are\
       symmetrical.\
   3.  It can listen to BGP information from the Internet to decide\
       which system is currently up.  This is clearly much more\
       complicated, but if SG-B is already participating in the BGP\
       peering system to announce Bob, the results data may already be\
       available to it.\
   4.  It can refuse to negotiate the second tunnel.  (It is unclear\
       whether or not this is even an option.)\
   5.  It can silently replace the outgoing portion of the first tunnel\
       with the second one while still retaining the incoming portions\
       of both.  Thus, SG-B can accept datagrams from either SG-A or\
       SG-D, but send only to the gateway that most recently re-keyed\
       with it.\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 32]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   Local policy determines which choice SG-B makes.  Note that even if\
   SG-B has perfect knowledge about the reachability of SG-A and SG-D,\
   Alice may not be reachable from either of these security gateways\
   because of internal reachability issues.\
\
   FreeS/WAN implements option 5.  Implementing a different option is\
   being considered.  The multi-homing aspects of OE are not well\
   developed and may be the subject of a future document.\
\
9.  Failure Modes\
\
9.1.  DNS Failures\
\
   If a DNS server fails to respond, local policy decides whether or not\
   to permit communication in the clear as embodied in the connection\
   classes in Section 3.2.  It is easy to mount a denial of service\
   attack on the DNS server responsible for a particular network's\
   reverse-map.  Such an attack may cause all communication with that\
   network to go in the clear if the policy is permissive, or fail\
   completely if the policy is paranoid.  Please note that this is an\
   active attack.\
\
   There are still many networks that do not have properly configured\
   reverse-maps.  Further, if the policy is not to communicate, the\
   above denial of service attack isolates the target network.\
   Therefore, the decision of whether or not to permit communication in\
   the clear MUST be a matter of local policy.\
\
9.2.  DNS Configured, IKE Failures\
\
   DNS records claim that opportunistic encryption should occur, but the\
   target gateway either does not respond on port 500, or refuses the\
   proposal.  This may be because of a crash or reboot, a faulty\
   configuration, or a firewall filtering port 500.\
\
   The receipt of ICMP port, host or network unreachable messages\
   indicates a potential problem, but MUST NOT cause communication to\
   fail immediately.  ICMP messages are easily forged by attackers.  If\
   such a forgery caused immediate failure, then an active attacker\
   could easily prevent any encryption from ever occurring, possibly\
   preventing all communication.\
\
   In these situations a log should be produced and local policy should\
   dictate if communication is then permitted in the clear.\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 33]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
9.3.  System Reboots\
\
   Tunnels sometimes go down because the remote end crashes,\
   disconnects, or has a network link break.  In general there is no\
   notification of this.  Even in the event of a crash and successful\
   reboot, other SGs don't hear about it unless the rebooted SG has\
   specific reason to talk to them immediately.  Over-quick response to\
   temporary network outages is undesirable.  Note that a tunnel can be\
   torn down and then re-established without any effect visible to the\
   user except a pause in traffic.  On the other hand, if one end\
   reboots, the other end can't get datagrams to it at all (except via\
   IKE) until the situation is noticed.  So a bias toward quick response\
   is appropriate, even at the cost of occasional false alarms.\
\
   A mechanism for recovery after reboot is a topic of current research\
   and is not specified in this document.\
\
   A deliberate shutdown should include an attempt, using delete\
   messages, to notify all other SGs currently connected by phase 1 SAs\
   that communication is about to fail.  Again, a remote SG will assume\
   this is a teardown.  Attempts by the remote SGs to negotiate new\
   tunnels as replacements should be ignored.  When possible, SGs should\
   attempt to preserve information about currently-connected SGs in\
   non-volatile storage, so that after a crash, an Initial-Contact can\
   be sent to previous partners to indicate loss of all previously\
   established connections.\
\
10.  Unresolved Issues\
\
10.1.  Control of Reverse DNS\
\
   The method of obtaining information by reverse DNS lookup causes\
   problems for people who cannot control their reverse DNS bindings.\
   This is an unresolved problem in this version, and is out of scope.\
\
11.  Examples\
\
11.1.  Clear-Text Usage (Permit Policy)\
\
   Two example scenarios follow.  In the first example, GW-A (Gateway A)\
   and GW-B (Gateway B) have always-clear-text policies, and in the\
   second example they have an OE policy.  The clear-text policy serves\
   as a reference for what occurs in TCP/IP in the absence of\
   Opportunistic Encryption.\
\
   Alice wants to communicate with Bob.  Perhaps she wants to retrieve a\
   web page from Bob's web server.  In the absence of opportunistic\
   encryptors, the following events occur:\
\
\
\
Richardson & Redelmeier      Informational                     [Page 34]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
     Alice         SG-A       DNS       SG-B           Bob\
      Human or application\
      'clicks' with a name.\
      (1)\
\
       ------(2)-------------->\
       Application looks up\
       name in DNS to get\
       IP address.\
\
       <-----(3)---------------\
       Resolver returns "A" RR\
       to application with IP\
       address.\
\
      (4)\
      Application starts a TCP session\
      or UDP session and OS sends\
      first datagram\
\
     Alice         SG-A       DNS       SG-B           Bob\
          ----(5)----->\
          Datagram is seen at first gateway\
          from Alice (SG-A).\
\
                      ----------(6)------>\
                      Datagram traverses\
                      network.\
\
                                          ------(7)----->\
                                          Datagram arrives\
                                          at Bob, is provided\
                                          to TCP.\
\
                                         <------(8)------\
                                          A reply is sent.\
\
                      <----------(9)------\
                      Datagram traverses\
                      network.\
       <----(10)-----\
       Alice receives\
       answer.\
\
     Alice         SG-A       DNS       SG-B           Bob\
      (11)----------->\
       A second exchange\
       occurs.\
\
\
\
Richardson & Redelmeier      Informational                     [Page 35]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
                      ----------(12)----->\
                                          -------------->\
                                         <---------------\
                      <-------------------\
       <-------------\
\
                Figure 5: Timing of regular transaction\
\
11.2.  Opportunistic Encryption\
\
   In the presence of properly configured opportunistic encryptors, the\
   event list is extended.  Only changes are annotated.\
\
   The following symbols are used in the time-sequence diagram:\
\
   -  A single dash represents clear-text datagrams.\
   =  An equals sign represents phase 2 (IPsec) cipher-text datagrams.\
   ~  A single tilde represents clear-text phase 1 datagrams.\
   #  A hash sign represents phase 1 (IKE) cipher-text datagrams.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 36]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
     Alice          SG-A      DNS       SG-B           Bob\
      (1)\
       ------(2)-------------->\
       <-----(3)---------------\
      (4)----(5)----->+\
                     ----(5B)->\
                     <---(5C)--\
                     ~~~~~~~~~~~~~(5D)~~~>\
                     <~~~~~~~~~~~~(5E)~~~~\
                     ~~~~~~~~~~~~~(5F)~~~>\
                     <~~~~~~~~~~~~(5G)~~~~\
                     #############(5H)###>\
                              <----(5I)---\
                              -----(5J)-->\
                     <############(5K)####\
                     #############(5L)###>\
                              <----(5M)---\
                              -----(5N)-->\
                     <############(5O)####\
                     #############(5P)###>\
                      ============(6)====>\
                                          ------(7)----->\
                                         <------(8)------\
                     <==========(9)======\
       <-----(10)----\
      (11)----------->\
                      ==========(12)=====>\
                                          -------------->\
                                         <---------------\
                      <===================\
       <-------------\
\
         Figure 6: Timing of opportunistic encryption transaction\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 37]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   For the purposes of this section, we will describe only the changes\
   that occur between Figure 5 and Figure 6.  This corresponds to time\
   points 5, 6, 7, 9, and 10 on the list above.\
\
   At point (5), SG-A intercepts the datagram because this\
   source/destination pair lacks a policy (the nonexistent policy\
   state).  SG-A creates a hold policy, and buffers the datagram.  SG-A\
   requests keys from the keying daemon.\
\
   (5B) DNS query for TXT record.\
   (5C) DNS response for TXT record.\
   (5D) Initial IKE message to responder.\
   (5E) Message 2 of phase 1 exchange.\
        SG-B receives the message.  A new connection instance is created\
        in the unauthenticated OE peer state.\
   (5F) Message 3 of phase 1 exchange.\
        SG-A sends a Diffie-Hellman exponent.  This is an internal state\
        of the keying daemon.\
   (5G) Message 4 of phase 1 exchange.\
        SG-B responds with a Diffie-Hellman exponent.  This is an\
        internal state of the keying protocol.\
   (5H) Message 5 of phase 1 exchange.\
        SG-A uses the phase 1 SA to send its identity under encryption.\
        The choice of identity is discussed in Section 4.6.1.  This is\
        an internal state of the keying protocol.\
   (5I) Responder lookup of initiator key.  SG-B asks DNS for the public\
        key of the initiator.  DNS looks for a KEY record by IP address\
        in the reverse-map.  That is, a KEY resource record is queried\
        for 4.1.1.192.in-addr.arpa (recall that SG-A's external address\
        is 192.1.1.4).  SG-B uses the resulting public key to\
        authenticate the initiator.  See Section 5.1 for further\
        details.\
   (5J) DNS replies with public key of initiator.\
        Upon successfully authenticating the peer, the connection\
        instance makes a transition to authenticated OE peer on SG-B.\
        The format of the TXT record returned is described in\
        Section 5.2.\
        Responder replies with ID and authentication.\
        SG-B sends its ID along with authentication material, completing\
        the phase 1 negotiation.\
   (5L) IKE phase 2 negotiation.\
        Having established mutually agreeable authentications (via KEY)\
        and authorizations (via TXT), SG-A proposes to create an IPsec\
        tunnel for datagrams transiting from Alice to Bob.  This tunnel\
        is established only for the Alice/Bob combination, not for any\
        subnets that may be behind SG-A and SG-B.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 38]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   (5M) Authorization for SG-A to speak for Alice.\
        While the identity of SG-A has been established, its authority\
        to speak for Alice has not yet been confirmed.  SG-B does a\
        reverse lookup on Alice's address for a TXT record.\
   (5N) Responder determines initiator's authority.\
        A TXT record is returned.  It confirms that SG-A is authorized\
        to speak for Alice.\
        Upon receiving this specific proposal, SG-B's connection\
        instance makes a transition into the potential OE connection\
        state.  SG-B may already have an instance, and the check is made\
        as described above.\
   (5O) Responder agrees to proposal.\
        SG-B, satisfied that SG-A is authorized, proceeds with the\
        phase 2 exchange.\
        The responder MUST setup the inbound IPsec SAs before sending\
        its reply.\
   (5P) Final acknowledgement from initiator.\
        The initiator agrees with the responder's choice of proposal and\
        sets up the tunnel.  The initiator sets up the inbound and\
        outbound IPsec SAs.\
        Upon receipt of this message, the responder may now setup the\
        outbound IPsec SAs.\
   (6)  IPsec succeeds and sets up a tunnel for communication between\
        Alice and Bob.\
\
      SG-A sends the datagram saved at step (5) through the newly\
      created tunnel to SG-B, where it gets decrypted and forwarded.\
      Bob receives it at (7) and replies at (8).  SG-B already has a\
      tunnel up with G1 and uses it.  At (9), SG-B has already\
      established an SPD entry mapping Bob->Alice via a tunnel, so this\
      tunnel is simply applied.  The datagram is encrypted to SG-A,\
      decrypted by SG-A, and passed to Alice at (10).\
\
12.  Security Considerations\
\
12.1.  Configured versus Opportunistic Tunnels\
\
   Configured tunnels are setup using bilateral mechanisms: exchanging\
   public keys (raw RSA, DSA, PKIX), pre-shared secrets, or by\
   referencing keys that are in known places (distinguished name from\
   LDAP, DNS).  These keys are then used to configure a specific tunnel.\
\
   A pre-configured tunnel may be on all the time, or may be keyed only\
   when needed.  The endpoints of the tunnel are not necessarily static;\
   many mobile applications (road warrior) are considered to be\
   configured tunnels.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 39]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   The primary characteristic is that configured tunnels are assigned\
   specific security properties.  They may be trusted in different ways\
   relating to exceptions to firewall rules, exceptions to NAT\
   processing, and to bandwidth or other quality of service\
   restrictions.\
\
   Opportunistic tunnels are not inherently trusted in any strong way.\
   They are created without prior arrangement.  As the two parties are\
   strangers, there MUST be no confusion of datagrams that arrive from\
   opportunistic peers and those that arrive from configured tunnels.  A\
   security gateway MUST take care that an opportunistic peer cannot\
   impersonate a configured peer.\
\
   Ingress filtering MUST be used to make sure that only datagrams\
   authorized by negotiation (and the concomitant authentication and\
   authorization) are accepted from a tunnel.  This is to prevent one\
   peer from impersonating another.\
\
   An implementation suggestion is to treat opportunistic tunnel\
   datagrams as if they arrive on a logical interface distinct from\
   other configured tunnels.  As the number of opportunistic tunnels\
   that may be created automatically on a system is potentially very\
   high, careful attention to scaling should be taken into account.\
\
   As with any IKE negotiation, opportunistic encryption cannot be\
   secure without authentication.  Opportunistic encryption relies on\
   DNS for its authentication information and, therefore, cannot be\
   fully secure without a secure DNS.  Without secure DNS, opportunistic\
   encryption can protect against passive eavesdropping but not against\
   active man-in-the-middle attacks.\
\
12.2.  Firewalls versus Opportunistic Tunnels\
\
   Typical usage of per datagram access control lists is to implement\
   various kinds of security gateways.  These are typically called\
   "firewalls".\
\
   Typical usage of a virtual private network (VPN) within a firewall is\
   to bypass all or part of the access controls between two networks.\
   Additional trust (as outlined in the previous section) is given to\
   datagrams that arrive in the VPN.\
\
   Datagrams that arrive via opportunistically configured tunnels MUST\
   not be trusted.  Any security policy that would apply to a datagram\
   arriving in the clear SHOULD also be applied to datagrams arriving\
   opportunistically.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 40]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
12.3.  Denial of Service\
\
   There are several different forms of denial of service that an\
   implementor should be concerned with.  Most of these problems are\
   shared with security gateways that have large numbers of mobile peers\
   (road warriors).\
\
   The design of ISAKMP/IKE, and its use of cookies, defend against many\
   kinds of denial of service.  Opportunism changes the assumption that\
   if the phase 1 (ISAKMP) SA is authenticated, that it was worthwhile\
   creating.  Because the gateway will communicate with any machine, it\
   is possible to form phase 1 SAs with any machine on the Internet.\
\
13.  Acknowledgements\
\
   Substantive portions of this document are based upon previous work by\
   Henry Spencer.  [OEspec]\
\
   Thanks to Tero Kivinen, Sandy Harris, Wes Hardarker, Robert\
   Moskowitz, Jakob Schlyter, Bill Sommerfeld, John Gilmore, and John\
   Denker for their comments and constructive criticism.\
\
   Sandra Hoffman and Bill Dickie did the detailed proof reading and\
   editing.\
\
14.  References\
\
14.1.  Normative References\
\
   [RFC1035]  Mockapetris, P., "Domain names - implementation and\
              specification", STD 13, RFC 1035, November 1987.\
\
   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate\
              Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2401]  Kent, S. and R. Atkinson, "Security Architecture for the\
              Internet Protocol", RFC 2401, November 1998.\
\
   [RFC2407]  Piper, D., "The Internet IP Security Domain of\
              Interpretation for ISAKMP", RFC 2407, November 1998.\
\
   [RFC2408]  Maughan, D., Schneider, M., and M. Schertler, "Internet\
              Security Association and key Management Protocol\
              (ISAKMP)", RFC 2408, November 1998.\
\
   [RFC2409]  Harkins, D. and D. Carrel, "The Internet key Exchange\
              (IKE)", RFC 2409, November 1998.\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 41]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   [RFC2535]  Eastlake, D., "Domain Name System Security Extensions",\
              RFC 2535, March 1999.\
\
   [RFC3110]  Eastlake, D., "RSA/SHA-1 SIGs and RSA KEYs in the Domain\
              Name System (DNS)", RFC 3110, May 2001.\
\
14.2.  Informative References\
\
   [IPSECKEY] Richardson, M., "A Method for Storing IPsec keying\
              Material in DNS", RFC 4025, March 2005.\
\
   [OEspec]   H. Spencer and Redelmeier, D., "Opportunistic Encryption",\
              paper, http://www.freeswan.org/\
              oeid/opportunism-spec.txt, May 2001.\
\
   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791, September\
              1981.\
\
   [RFC1034]  Mockapetris, P., "Domain names - concepts and facilities",\
              STD 13, RFC 1034, November 1987.\
\
   [RFC1464]  Rosenbaum, R., "Using the Domain Name System To Store\
              Arbitrary String Attributes", RFC 1464, May 1993.\
\
   [RFC1812]  Baker, F., "Requirements for IP Version 4 Routers", RFC\
              1812, June 1995.\
\
   [RFC1984]  IAB, IESG, Carpenter, B., and F. Baker, "IAB and IESG\
              Statement on Cryptographic Technology and the Internet",\
              RFC 1984, August 1996.\
\
   [RFC2367]  McDonald, D., Metz, C. and B. Phan, "PF_KEY Key Management\
              API, Version 2", RFC 2367, July 1998.\
\
   [RFC2538]  Eastlake, D. and O. Gudmundsson, "Storing Certificates in\
              the Domain Name System (DNS)", RFC 2538, March 1999.\
\
   [RFC2663]  Srisuresh, P. and M. Holdrege, "IP Network Address\
              Translator (NAT) Terminology and Considerations", RFC\
              2663, August 1999.\
\
   [RFC2671]  Vixie, P., "Extension Mechanisms for DNS (EDNS0)", RFC\
              2671, August 1999.\
\
   [RFC3330]  IANA, "Special-Use IPv4 Addresses", RFC 3330, September\
              2002.\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 42]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
   [RFC3445]  Massey, D. and S. Rose, "Limiting the Scope of the KEY\
              Resource Record (RR)", RFC 3445, December 2002.\
\
   [RFC3526]  Kivinen, T. and M. Kojo, "More Modular Exponential (MODP)\
              Diffie-Hellman groups for Internet Key Exchange (IKE)",\
              RFC 3526, May 2003.\
\
   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\
              Rose, "DNS Security Introduction and Requirements", RFC\
              4033, March 2005.\
\
Authors' Addresses\
\
   Michael C. Richardson\
   Sandelman Software Works\
   470 Dawson Avenue\
   Ottawa, ON  K1Z 5V7\
   CA\
\
   EMail: mcr@sandelman.ottawa.on.ca\
   URI:   http://www.sandelman.ottawa.on.ca/\
\
\
   D. Hugh Redelmeier\
   Mimosa Systems Inc.\
   29 Donino Avenue\
   Toronto, ON  M4N 2W6\
   CA\
\
   EMail: hugh@mimosa.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 43]\
\
RFC 4322           Opportunistic Encryption using IKE      December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78 and at www.rfc-editor.org/copyright.html, and\
   except as set forth therein, the authors retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Richardson & Redelmeier      Informational                     [Page 44]\
\

doc 15
  field 0
    name titolo
    type string
    value rfc4326.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                       G. Fairhurst\
Request for Comments: 4326                        University of Aberdeen\
Category: Standards Track                              B. Collini-Nocker\
                                                  University of Salzburg\
                                                           December 2005\
\
\
           Unidirectional Lightweight Encapsulation (ULE) for\
   Transmission of IP Datagrams over an MPEG-2 Transport Stream (TS)\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   The MPEG-2 Transport Stream (TS) has been widely accepted not only\
   for providing digital TV services, but also as a subnetwork\
   technology for building IP networks.\
\
   This document describes a Unidirectional Lightweight Encapsulation\
   (ULE) mechanism for the transport of IPv4 and IPv6 Datagrams and\
   other network protocol packets directly over the ISO MPEG-2 Transport\
   Stream as TS Private Data.  ULE specifies a base encapsulation format\
   and supports an extension format that allows it to carry additional\
   header information to assist in network/Receiver processing.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 1]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
Table of Contents\
\
   1. Introduction ....................................................3\
   2. Conventions Used in This Document ...............................4\
   3. Description of the Method .......................................8\
   4. SNDU Format .....................................................9\
      4.1. Destination Address Absent (D) Field ......................10\
      4.2. Length Field ..............................................10\
      4.3. End Indicator .............................................10\
      4.4. Type Field ................................................10\
           4.4.1. Type 1: Next-Header Type Fields ....................11\
           4.4.2. Type 2: EtherType Compatible Type Fields ...........11\
      4.5. SNDU Destination Address Field ............................12\
      4.6. SNDU Trailer CRC ..........................................12\
      4.7. Description of SNDU Formats ...............................13\
           4.7.1. End Indicator ......................................14\
           4.7.2. IPv4 SNDU Encapsulation ............................14\
           4.7.3. IPv6 SNDU Encapsulation ............................15\
   5. Extension Headers ..............................................16\
      5.1. Test SNDU .................................................18\
      5.2. Bridged Frame SNDU Encapsulation ..........................18\
      5.3. Extension-Padding Optional Extension Header ...............21\
   6. Processing at the Encapsulator .................................22\
      6.1. SNDU Encapsulation ........................................22\
      6.2. Procedure for Padding and Packing .........................24\
   7. Receiver Processing ............................................25\
      7.1. Idle State ................................................26\
           7.1.1. Idle State Payload Pointer Checking ................26\
      7.2. Processing of a Received SNDU .............................26\
           7.2.1. Reassembly Payload Pointer Checking ................28\
      7.3. Other Error Conditions ....................................28\
   8. Summary ........................................................29\
   9. Acknowledgements ...............................................29\
   10. Security Considerations .......................................29\
   11. IANA Considerations ...........................................30\
      11.1. IANA Guidelines ..........................................30\
   12. References ....................................................31\
      12.1. Normative References .....................................31\
      12.2. Informative References ...................................32\
   Appendix A. SNDU Packing Examples .................................35\
   Appendix B. SNDU Encapsulation ....................................40\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 2]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
1.  Introduction\
\
   This document describes an encapsulation for the transport of IP\
   datagrams, or other network-layer packets, over ISO MPEG-2 Transport\
   Streams [ISO-MPEG2, RFC4259].  The encapsulation satisfies the\
   requirement for a lightweight encapsulation defined in section 4 of\
   [RFC4259].  The basic header provides the required set of protocol\
   fields.  Extension headers may also be defined.  This header\
   structure is significantly simpler to parse and process [SOOR05] than\
   current alternative methods (e.g., MPE [ETSI-DAT], which builds upon\
   the DSM-CC Table Section syntax [ISO-DSMCC]).\
\
   The encapsulation is suited to services based on MPEG-2; for example,\
   the Digital Video Broadcast (DVB) architecture, the Advanced\
   Television Systems Committee (ATSC) system [ATSC, ATSC-G], and other\
   similar MPEG-2-based transmission systems.  Such systems provide\
   unidirectional (simplex) physical and link-layer standards.  Support\
   has been defined for a wide range of physical media (e.g.,\
   Terrestrial TV [ETSI-DVBT, ATSC-PSIP-TC], Satellite TV [ETSI-DVBS,\
   ATSC-S], and Cable Transmission [ETSI-DVBC, ATSC-PSIP-TC]).\
   Bi-directional (duplex) links may also be established using these\
   standards (e.g., DVB defines a range of return channel technologies,\
   including the use of two-way satellite links [ETSI-RCS]) and dial-up\
   modem links [RFC3077].\
\
   Protocol Data Units (PDUs), such as Ethernet Frames, IP datagrams, or\
   other network-layer packets, used for transmission over an MPEG-2\
   Transport Multiplex are passed to an Encapsulator.  This formats each\
   PDU into a SubNetwork Data Unit (SNDU) by adding an encapsulation\
   header and an integrity check trailer.  The SNDU is fragmented into a\
   series of one or more MPEG-2 Transport Stream (TS) Packets that are\
   sent over a single TS Logical Channel.\
\
   The MPEG-2 specification [ISO-MPEG2] requires that conformant TS\
   Multiplexes provide Program Specific Information (PSI) for each\
   stream in the TS Multiplex.  Other MPEG-2-based transmission\
   standards may also define Service Information (SI).\
\
   A format_identifier value has been registered for ULE [ULE1].  This\
   32 bit number has a hexadecimal value of 0x554C4531.  Transport\
   Streams that utilise the Programme Map Table (PMT) defined in ISO\
   13818-1 [ISO-MPEG2] and that use the ULE format defined in this\
   document, SHOULD insert a descriptor with this value in the PMT\
   ES_info descriptor loop.  ULE Streams may also be identified by the\
   stream_type value of 0x91 [ATSC-REG] in a SI/PSI Table [ISO_MPEG2].\
\
   This information may allow Receivers and Re-multiplexors [RFC4259] to\
   locate a specific ULE Stream (i.e., the PID value of the TS Logical\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 3]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   Channel that carries a ULE Stream).  The conditions under which this\
   information is required and the format in which it is to be provided\
   are beyond the scope of this document.  Addressing and mapping issues\
   for ULE over MPEG-2 are also described in [IPDVB-AR].\
\
2.  Conventions Used in This Document\
\
   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",\
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and\
   "OPTIONAL" in this document are to be interpreted as described in\
   [RFC2119].\
\
   Other terms used in this document are defined below:\
\
   Adaptation Field: An optional variable-length extension field of the\
   fixed-length TS Packet header, intended to convey clock references\
   and timing and synchronization information as well as stuffing over\
   an MPEG-2 Multiplex [ISO-MPEG2].\
\
   AFC: Adaptation Field Control [ISO-MPEG2].  A pair of bits carried in\
   the TS Packet header that signal the presence of the Adaptation Field\
   and/or TS Packet payload.\
\
   ATSC: Advanced Television Systems Committee [ATSC].  A framework and\
   a set of associated standards for the transmission of video, audio,\
   and data using the ISO MPEG-2 standard.\
\
   b: bit.  For example, one byte consists of 8b.\
\
   B: Byte.  Groups of bytes are represented in Internet byte order.\
\
   DSM-CC: Digital Storage Media Command and Control [ISO-DSMCC].  A\
   format for transmission of data and control information in an MPEG-2\
   Private Section, defined by the ISO MPEG-2 standard.\
\
   DVB: Digital Video Broadcast.  A framework and set of associated\
   standards published by the European Telecommunications Standards\
   Institute (ETSI) (e.g., [ETSI-DVBC, ETSI-DVBS, ETSI-DVBT]) for the\
   transmission of video, audio, and data using the ISO MPEG-2 Standard\
   [ISO-MPEG2].\
\
   Encapsulator: A network device that receives PDUs and formats these\
   into Payload Units (known here as SNDUs) for output as a stream of TS\
   Packets.\
\
   End Indicator: A value that indicates to the Receiver that there are\
   no further SNDUs present within the current TS Packet.\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 4]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   LLC: Logical Link Control [ISO-8802-2, IEEE-802.2].  A link-layer\
   protocol defined by the IEEE 802 standard, which follows the Ethernet\
   MAC Header.\
\
   MAC: Medium Access Control [IEEE-802.3].  A link-layer protocol\
   defined by the IEEE 802.3 standard (or by Ethernet v2 [DIX]).\
\
   MAC Header: The link-layer header of the IEEE 802.3 standard\
   [IEEE-802.3] or Ethernet v2 [DIX].  It consists of a 6B destination\
   address, 6B source address, and 2B Type field (see also NPA, LLC).\
\
   MPE: Multiprotocol Encapsulation [ETSI-DAT, ATSC-DAT, ATSC-DATG].  A\
   scheme that encapsulates PDUs, forming a DSM-CC Table Section.  Each\
   Section is sent in a series of TS Packets using a single TS Logical\
   Channel.\
\
   MPEG-2: A set of standards specified by the Motion Picture Experts\
   Group (MPEG) and standardized by the International Standards\
   Organisation (ISO/IEC 13818-1) [ISO-MPEG2], and ITU-T (in H.222\
   [ITU-H222]).\
\
   Next-Header: A Type value indicating an Extension Header.\
\
   NPA: Network Point of Attachment.  In this document, refers to a\
   6-byte destination address (resembling an IEEE MAC address) within\
   the MPEG-2 transmission network that is used to identify individual\
   Receivers or groups of Receivers.\
\
   Packing Threshold: A period of time an Encapsulator is willing to\
   defer transmission of a partially filled TS-Packet to accumulate more\
   SNDUs, rather than use Padding.  After the Packet Threshold period,\
   the Encapsulator uses Padding to send the partially filled TS-Packet.\
\
   Padding: A method that fills the remaining unused bytes in a TS\
   Packet payload using the specific pattern of 0xFF.\
\
   Payload Unit, PU.  A sequence of bytes sent using a TS.  Examples of\
   Payload Units include: an MPEG-2 Table Section or a ULE SNDU.\
\
   PDU: Protocol Data Unit.  Examples of a PDU include Ethernet frames,\
   IPv4 or IPv6 datagrams, and other network packets.\
\
   PES: Packetized Elementary Steam [ISO-MPEG2].  A format of MPEG-2 TS\
   packet payload usually used for video or audio information.\
\
   PID: Packet Identifier  [ISO-MPEG2].  A 13-bit field carried in the\
   header of TS Packets.  This is used to identify the TS Logical\
   Channel to which a TS Packet belongs [ISO-MPEG2].  The TS Packets\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 5]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   forming the parts of a Table Section, PES, or other Payload Unit must\
   all carry the same PID value.  The all-zeros PID 0x0000 as well as\
   other PID values are reserved for specific PSI/SI Tables [ISO-MPEG2].\
   The all-ones PID value 0x1FFF indicates a Null TS Packet introduced\
   to maintain a constant bit rate of a TS Multiplex.  There is no\
   required relationship between the PID values used for TS Logical\
   Channels transmitted using different TS Multiplexes.\
\
   PP: Payload Pointer [ISO-MPEG2].  An optional one-byte pointer that\
   directly follows the 4-byte TS Packet header.  It contains the number\
   of bytes that follow the Payload Pointer, up to the start of the\
   first Payload Unit (counted from the first byte of the TS Packet\
   payload field, and excluding the PP field itself).  The presence of\
   the Payload Pointer is indicated by the value of the PUSI bit in the\
   TS Packet header.  The Payload Pointer is present in DSM-CC, Table\
   Sections, and ULE.  It is not present in TS Logical Channels that use\
   the PES-format.\
\
   Private Section: A syntactic structure constructed in accordance with\
   Table 2-30 of [ISO-MPEG2].  The structure may be used to identify\
   private information (i.e., not defined by [ISO-MPEG2]) relating to\
   one or more elementary streams, or a specific MPEG-2 program, or the\
   entire Transport Stream.  Other Standards bodies, e.g., ETSI, ATSC,\
   have defined sets of table structures using the private_section\
   structure.  A Private Section is transmitted as a sequence of TS\
   Packets using a TS Logical Channel.  A TS Logical Channel may carry\
   sections from more than one set of tables.\
\
   PSI: Program Specific Information [ISO-MPEG2].  Tables used to convey\
   information about the service carried in a TS Multiplex.  The\
   information is carried in one of four specifically identified Table\
   Sections defined by MPEG-2 [ISO-MPEG2].  See also SI Table.\
\
   PU: Payload Unit.\
\
   PUSI: Payload_Unit_Start_Indicator [ISO-MPEG2].  A single-bit flag\
   carried in the TS Packet header.  A PUSI value of zero indicates that\
   the TS Packet does not carry the start of a new Payload Unit.  A PUSI\
   value of one indicates that the TS Packet does carry the start of a\
   new Payload Unit.  In ULE, a PUSI bit set to 1 also indicates the\
   presence of a one-byte Payload Pointer (PP).\
\
   Receiver: Equipment that processes the signal from a TS Multiplex and\
   performs filtering and forwarding of encapsulated PDUs to the\
   network-layer service (or bridging module when operating at the link\
   layer).\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 6]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   SI Table: Service Information Table [ISO-MPEG2].  In this document,\
   this term describes a table that is defined by another standards body\
   to convey information about the services carried in a TS Multiplex.\
   A Table may consist of one or more Table Sections; however, all\
   sections of a particular SI Table must be carried over a single TS\
   Logical Channel [ISO-MPEG2].\
\
   SNDU: SubNetwork Data Unit.  An encapsulated PDU sent as an MPEG-2\
   Payload Unit.\
\
   Table Section: A Payload Unit carrying all or part of an SI or PSI\
   Table [ISO-MPEG2].\
\
   TS: Transport Stream [ISO-MPEG2], a method of transmission at the\
   MPEG-2 level using TS Packets; it represents layer 2 of the ISO/OSI\
   reference model.  See also TS Logical Channel and TS Multiplex.\
\
   TS Header: The 4-byte header of a TS Packet [ISO-MPEG2].  Each 188B\
   TS Packet incorporates a 4B header with the following fields (those\
   referenced within this document are marked with *):\
\
        Field Length            Name/Purpose\
         (in bits)\
\
         8b             Synchronisation pattern equal to 0x47\
        *1b             Transport Error Indicator\
        *1b             Payload Unit Start Indicator (PUSI)\
         1b             Transport Priority\
        *13b            Packet IDentifier (PID)\
         2b             Transport Scrambling Control\
        *2b             Adaptation Field Control (AFC)\
        *4b             Continuity Counter (CC)\
\
   If the PUSI bit is set to a value of 1, there is one\
   additional field following the TS packet header:\
\
        *8b             Payload Pointer (PP)\
\
   TS Logical Channel: Transport Stream Logical Channel.  In this\
   document, this term identifies a channel at the MPEG-2 level\
   [ISO-MPEG2].  It exists at level 2 of the ISO/OSI reference model.\
   All packets sent over a TS Logical Channel carry the same PID value\
   (this value is unique within a specific TS Multiplex).  The term\
   "Stream" is defined in MPEG-2 [ISO-MPEG2] to describe the content\
   carried by a specific TS Logical Channel (see ULE Stream).  Some PID\
   values are reserved (by MPEG-2) for specific signalling.  Other\
   standards (e.g., ATSC, DVB) also reserve specific PID values.\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 7]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   TS Multiplex: In this document, this term defines a set of MPEG-2 TS\
   Logical Channels sent over a single lower-layer connection.  This may\
   be a common physical link (i.e., a transmission at a specified symbol\
   rate, FEC setting, and transmission frequency) or an encapsulation\
   provided by another protocol layer (e.g., Ethernet, or RTP over IP).\
   The same TS Logical Channel may be repeated over more than one TS\
   Multiplex (possibly associated with a different PID value) [RFC4259];\
   for example, to redistribute the same multicast content to two\
   terrestrial TV transmission cells.\
\
   TS Packet: A fixed-length 188B unit of data sent over a TS Multiplex\
   [ISO-MPEG2].  Each TS Packet carries a 4B header, plus optional\
   overhead including an Adaptation Field, encryption details, and time\
   stamp information to synchronise a set of related TS Logical\
   Channels.\
\
   ULE Stream: An MPEG-2 TS Logical Channel that carries only ULE\
   encapsulated PDUs.  ULE Streams may be identified by definition of a\
   stream_type in SI/PSI [ISO-MPEG2].\
\
3.  Description of the Method\
\
   PDUs (IP packets, Ethernet frames or packets from other network\
   protocols) are encapsulated to form a Subnetwork Data Unit (SNDU).\
   The SNDU is transmitted over an MPEG-2 transmission network either by\
   being placed in the payload of a single TS Packet, or, if required,\
   by being fragmented into a series of TS Packets.  Where there is\
   sufficient space, the method permits a single TS Packet to carry more\
   than one SNDU (or part thereof), a practice sometimes known as\
   Packing.  All TS Packets comprising an SNDU MUST be assigned the same\
   PID, and therefore form a part of the same TS Logical Channel.\
\
   The ULE encapsulation is limited to TS private streams only.  The\
   header of each TS Packet carries a one-bit Payload Unit Start\
   Indicator (PUSI) field.  A PUSI field with a value of 1 indicates the\
   start of at least one Payload Unit (SNDU) within the TS Packet\
   payload.  The semantics of the PUSI bit are defined for PES and PSI\
   packets [ISO-MPEG2]; for private data, its use is not defined in the\
   MPEG-2 Standard.  Although ULE uses private data, the operation\
   follows that of PSI packets.  Hence, the following PUSI values are\
   defined:\
\
        0: The TS Packet does NOT contain the start of an SNDU, but\
        contains the continuation, or end, of an SNDU;\
\
        1: The TS Packet contains the start of an SNDU, and a one byte\
        Payload Pointer follows the last byte of the TS Packet header.\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 8]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   If a Payload Unit (SNDU) finishes before the end of a TS Packet\
   payload, but it is not intended to start another Payload Unit, a\
   stuffing procedure (known as Padding) fills the remainder of the TS\
   Packet payload with bytes with a value 0xFF [ISO-MPEG2].\
\
   A Receiver processing MPEG-2 Table Sections that receives a value of\
   0xFF in the first byte of a Table Section (table_Id) interprets this\
   as Padding/Stuffing and silently discards the remainder of the TS\
   Packet payload.  The payload of the next TS Packet for the same TS\
   Logical Channel will begin with a Payload Pointer of value 0x00,\
   indicating that the next Payload Unit immediately follows the TS\
   Packet header.  The ULE protocol resembles this, but differs in the\
   exact procedure (see the following sections).\
\
   The TS Packet Header also carries a two-bit Adaptation Field Control\
   (AFC) value.  This adaptation field may extend the TS Packet Header\
   to carry timing and synchronisation information and may also be used\
   to include stuffing bytes before a TS Packet payload.  Adaptation\
   Field stuffing is NOT used in this encapsulation method, and TS\
   Packets from a ULE Encapsulator MUST be sent with an AFC value of\
   '01'.  For TS Logical Channels supporting ULE, Receivers MUST discard\
   TS Packets that carry other AFC values.\
\
4.  SNDU Format\
\
   PDUs are encapsulated using ULE to form an SNDU.  (Each SNDU is an\
   MPEG-2 Payload Unit.) The encapsulation format to be used for PDUs is\
   illustrated below:\
\
   < ----------------------------- SNDU ----------------------------- >\
   +-+-------------------------------------------------------+--------+\
   |D| Length | Type | Dest Address* |           PDU         | CRC-32 |\
   +-+-------------------------------------------------------+--------+\
\
       Figure 1: SNDU Encapsulation (* optional Destination Address)\
\
   All multi-byte values in ULE (including the Length/End Indicator\
   (4.2,4.3), Type (4.4), Destination Address (4.5), and Extension\
   Headers (5)) are transmitted in network byte order (most significant\
   byte first).  The most significant bit of each byte is placed in the\
   left-most position of the 8-bit field.  Appendix A provides\
   informative examples of usage.\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                     [Page 9]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
4.1.  Destination Address Absent (D) Field\
\
   The most significant bit of the Length field carries the value of the\
   Destination Address Absent Field, the D-bit.  A value of 0 indicates\
   the presence of the Destination Address Field (see section 4.5).  A\
   value of 1 indicates that a Destination Address Field is not present.\
\
   An End Indicator (4.3) MUST be sent with a D-bit value of 1.  Other\
   SNDUs MAY be sent with a D-bit value of 0 or 1.  The default method\
   SHOULD use a D-bit value of 0 (see section 4.5).\
\
4.2.  Length Field\
\
   A 15-bit value that indicates the length, in bytes, of the SNDU\
   counted from the byte following the Type field of the SNDU base\
   header (figure 9) up to and including the CRC.  This Length includes\
   the size of any extension headers that may be present (section 5).\
   Note the special case described in section 4.3.\
\
4.3.  End Indicator\
\
   When the first two bytes following an SNDU have the value 0xFFFF,\
   this denotes an End Indicator (i.e., all ones length combined with a\
   D-bit value of 1).  This indicates to the Receiver that there are no\
   further SNDUs present within the current TS Packet (see section 6),\
   and that no Destination Address Field is present.  The value 0xFF has\
   specific semantics in MPEG-2 framing, where it is used to indicate\
   the presence of Padding.  This use resembles [ISO-DSMCC].\
\
4.4.  Type Field\
\
   The 16-bit Type field indicates the type of payload carried in an\
   SNDU, or the presence of a Next-Header.  The set of values that may\
   be assigned to this field is divided into two parts, similar to the\
   allocations for Ethernet.\
\
   EtherTypes were originally specified by Xerox under the Ethernet v2\
   Specification  [DIX].  After specification of IEEE 802.3 [IEEE-802.3,\
   ISO-8802-2], the set of EtherTypes less than 1536 (0x0600) assumed\
   the role of a length indicator.  Ethernet receivers use this feature\
   to discriminate LLC format frames.  Hence, any IEEE EtherType < 1536\
   indicates an LLC frame, and the actual value indicates the length of\
   the LLC frame.\
\
   There is a potential ambiguous case when a Receiver receives a PDU\
   with two Length fields:  The Receiver would need to validate the\
   actual length and the Length field and ensure that inconsistent\
   values are not propagated by the network.  Specification of two\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 10]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   independent Length fields is therefore undesirable.  In the ULE\
   header, this is avoided in the SNDU header by including only one\
   length value, but bridging of LLC frames re-introduces this\
   consideration (section 5.2).\
\
   The Ethernet LLC mode of identification is not required in ULE, since\
   the SNDU format always carries an explicit Length field, and\
   therefore the procedure in ULE is modified, as below:\
\
   The first set of ULE Type field values comprise the set of values\
   less than 1536 in decimal.  These Type field values are IANA assigned\
   (see section 4.4.1) and indicate the Next-Header.\
\
   The second set of ULE Type field values comprise the set of values\
   greater than or equal to 1536 in decimal.  In ULE, this value is\
   identical to the corresponding type codes specified by the IEEE/DIX\
   type assignments for Ethernet and recorded in the IANA EtherType\
   registry.\
\
4.4.1.  Type 1: Next-Header Type Fields\
\
   The first part of the Type space corresponds to the values 0 to 1535\
   decimal.  These values may be used to identify link-specific\
   protocols and/or to indicate the presence of Extension Headers that\
   carry additional optional protocol fields (e.g., a bridging\
   encapsulation).  Use of these values is co-ordinated by an IANA\
   registry.  The following types are defined in this document:\
\
           0x0000: Test SNDU (see section 5.1)\
           0x0001: Bridged Frame (see section 5.2)\
           0x0100: Extension-Padding (see section 5.3)\
\
\
   The remaining values within the first part of the Type space are\
   reserved for Next-Header values allocated by the IANA.\
\
4.4.2.  Type 2: EtherType Compatible Type Fields\
\
   The second part of the Type space corresponds to the values between\
   0x600 (1536 decimal) and 0xFFFF.  This set of type assignments\
   follows DIX/IEEE assignments (but excludes use of this field as a\
   frame length indicator).  All assignments in this space MUST use the\
   values defined for IANA EtherType.  The following two Type values are\
   used as examples (taken from the IANA EtherTypes registry):\
\
           0x0800: IPv4 Payload (see section 4.7.2)\
           0x86DD: IPv6 Payload (see section 4.7.3)\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 11]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
4.5.  SNDU Destination Address Field\
\
   The SNDU Destination Address Field is optional (see section 4.1).\
   This field MUST be carried (i.e., D=0) for IP unicast packets\
   destined to routers that are sent using shared links (i.e., where the\
   same link connects multiple Receivers).  A sender MAY omit this field\
   (D=1) for an IP unicast packet and/or multicast packets delivered to\
   Receivers that are able to utilise a discriminator field (e.g., the\
   IPv4/IPv6 destination address, or a bridged MAC destination address),\
   which, in combination with the PID value, could be interpreted as a\
   Link-Level address.\
\
   When the SNDU header indicates the presence of an SNDU Destination\
   Address field (i.e., D=0), a Network Point of Attachment (NPA) field\
   directly follows the fourth byte of the SNDU header.  NPA destination\
   addresses are 6 Byte numbers, normally expressed in hexadecimal, used\
   to identify the Receiver(s) in a MPEG-2 transmission network that\
   should process a received SNDU.  The value 0x00:00:00:00:00:00 MUST\
   NOT be used as a destination address in an SNDU.  The least\
   significant bit of the first byte of the address is set to 1 for\
   multicast frames, and the remaining bytes specify the link-layer\
   multicast address.  The specific value 0xFF:FF:FF:FF:FF:FF is the\
   link broadcast address, indicating that this SNDU is to be delivered\
   to all Receivers.\
\
   IPv4 packets carrying an IPv4 subnetwork broadcast address need to be\
   delivered to all systems with the same network prefix.  When a SNDU\
   Destination Address is present (D=0), the value MUST be set to the\
   NPA link broadcast address (0xFF:FF:FF:FF:FF:FF).\
\
   When the PDU is an IP multicast packet and an SNDU Destination\
   Address is present (D=0), the IP group destination address of the\
   multicast packet MUST be mapped to the multicast SNDU Destination\
   Address (following the method used to generate a destination MAC\
   address in Ethernet).  The method for mapping IPv4 multicast\
   addresses is specified in [RFC1112].  The method for mapping IPv6\
   multicast addresses is specified in [RFC2464].\
\
4.6.  SNDU Trailer CRC\
\
   Each SNDU MUST carry a 32-bit CRC field in the last four bytes of the\
   SNDU.  This position eases CRC computation by hardware.  The CRC-32\
   polynomial is to be used.  Examples where this polynomial is also\
   employed include Ethernet, DSM-CC section syntax [ISO-DSMCC], and\
   AAL5 [ITU-3563].  This is a 32-bit value calculated according to the\
   generator polynomial represented 0x104C11DB7 in hexadecimal:\
\
   x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0.\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 12]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   The Encapsulator initialises the CRC-32 accumulator register to the\
   value 0xFFFF FFFF.  It then accumulates a transmit value for the\
   CRC32 that includes all bytes from the start of the SNDU header to\
   the end of the SNDU (excluding the 32-bit trailer holding the\
   CRC-32), and places this in the CRC Field.  In ULE, the bytes are\
   processed in order of increasing position within the SNDU; the order\
   of processing bits is NOT reversed.  This use resembles, but is\
   different from that in SCTP [RFC3309].\
\
   The Receiver performs an integrity check by independently calculating\
   the same CRC value and comparing this with the transmitted value in\
   the SNDU trailer.  SNDUs that do not have a valid CRC are discarded,\
   causing the Receiver to enter the Idle State.\
\
   This description may be suited for hardware implementation, but this\
   document does not imply any specific implementation.  Software-based\
   table-lookup or hardware-assisted software-based implementations are\
   also possible.  Appendix B provides an example of an Encapsulated PDU\
   that includes the computed CRC-32 value.\
\
   The primary purpose of this CRC is to protect the SNDU (header and\
   payload) from undetected reassembly errors and errors introduced by\
   unexpected software/hardware operation while the SNDU is in transit\
   across the MPEG-2 subnetwork and during processing at the\
   Encapsulator and/or the Receiver.  It may also detect the presence of\
   uncorrected errors from the physical link (however, these may also be\
   detected by other means, e.g., section 7.3).\
\
4.7.  Description of SNDU Formats\
\
   The format of an SNDU is determined by the combination of the\
   Destination Address Absent bit (D) and the SNDU Type field.  The\
   simplest encapsulation places a PDU directly into an SNDU payload.\
   Some Type 1 encapsulations may require additional header fields.\
   These are inserted in the SNDU following the NPA destination address\
   and directly preceding the PDU.\
\
   The following SNDU Formats are defined here:\
\
   End Indicator: The Receiver should enter the Idle State (4.7.1).\
   IPv4 SNDU: The payload is a complete IPv4 datagram (4.7.2).\
   IPv6 SNDU: The payload is a complete IPv6 datagram (4.7.3).\
   Test SNDU: The payload will be discarded by the Receiver (5.1).\
   Bridged SNDU: The payload carries a bridged MAC frame (5.2).\
\
   Other formats may be defined through relevant assignments in the IEEE\
   and IANA registries.\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 13]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
4.7.1.  End Indicator\
\
   The format of the End Indicator is shown in figure 2.  This format\
   MUST carry a D-bit value of 1.\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |1|            0x7FFF           |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                                                               |\
      =   A sequence of zero or more bytes with a value 0xFF filling  =\
      |           the remainder of the TS Packet Payload              |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 2: Format for a ULE End Indicator\
\
4.7.2.  IPv4 SNDU Encapsulation\
\
   IPv4 datagrams are directly transported using one of the two standard\
   SNDU structures, in which the PDU is placed directly in the SNDU\
   payload.  The two encapsulations are shown in Figures 3 and 4.  (Note\
   that in this, and the following figures, the IP datagram payload is\
   of variable size and is directly followed by the CRC-32).\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |0|        Length  (15b)        |         Type = 0x0800         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |            Receiver Destination NPA Address  (6B)             |\
      +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                               |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                                                               |\
      =                           IPv4 datagram                       =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 3: SNDU Format for an IPv4 Datagram using L2 filtering (D=0)\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 14]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |1|        Length  (15b)        |         Type = 0x0800         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                               |\
      =                           IPv4 datagram                       =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 4: SNDU Format for an IPv4 Datagram using L3 filtering (D=1)\
\
4.7.3.  IPv6 SNDU Encapsulation\
\
   IPv6 datagrams are directly transported using one of the two standard\
   SNDU structures, in which the PDU is placed directly in the SNDU\
   payload.  The two encapsulations are shown in Figures 5 and 6.\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |0|        Length  (15b)        |         Type = 0x86DD         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |            Receiver Destination NPA Address  (6B)             |\
      +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                               |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                                                               |\
      =                           IPv6 datagram                       =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 5: SNDU Format for an IPv6 Datagram using L2 filtering (D=0)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 15]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |1|        Length  (15b)        |         Type = 0x86DD         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                               |\
      =                           IPv6 datagram                       =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 6: SNDU Format for an IPv6 Datagram using L3 filtering (D=1)\
\
5.  Extension Headers\
\
   This section describes an extension format for the ULE encapsulation.\
   In ULE, a Type field value less than 1536 decimal indicates an\
   Extension Header.  These values are assigned from a separate IANA\
   registry defined for ULE.\
\
   The use of a single Type/Next-Header field simplifies processing and\
   eliminates the need to maintain multiple IANA registries.  The cost\
   is that each Extension Header requires at least 2 bytes.  This is\
   justified, on the basis of simplified processing and maintaining a\
   simple lightweight header for the common case when no extensions are\
   present.\
\
   A ULE Extension Header is identified by a 16-bit value in the Type\
   field.  This field is organised as a 5-bit zero prefix, a 3-bit H-LEN\
   field, and an 8-bit H-Type field, as follows:\
\
           0                   1\
           0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
          |0 0 0 0 0|H-LEN|    H-Type     |\
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 7: Structure of ULE Next-Header Field\
\
   The H-LEN Assignment is described below:\
\
   0    Indicates a Mandatory Extension Header\
   1    Indicates an Optional Extension Header of length 2B (Type only)\
   2    Indicates an Optional Extension Header of length 4B (Type + 2B)\
   3    Indicates an Optional Extension Header of length 6B (Type + 4B)\
   4    Indicates an Optional Extension Header of length 8B (Type + 6B)\
   5    Indicates an Optional Extension Header of length 10B (Type + 8B)\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 16]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   >=6  The combined H-LEN and H-TYPE values indicate the EtherType\
        of a PDU that directly follows this Type field.\
\
   The H-LEN value indicates the total number of bytes in an Optional\
   Extension Header (including the 2B Type field).\
\
   An H-LEN value of zero indicates a Mandatory Extension Header.  Each\
   Mandatory Extension Header has a pre-defined length that is not\
   communicated in the H-LEN field.  No additional limit is placed on\
   the maximum length of a Mandatory Extension Header.  A Mandatory\
   Extension Header MAY modify the format or encoding of the enclosed\
   PDU (e.g., to perform encryption and/or compression).\
\
   The H-Type is a one-byte field that is either one of 256 Mandatory\
   Header Extensions or one of 256 Optional Header Extensions.  The set\
   of currently permitted values for both types of Extension Headers are\
   defined by an IANA Registry (section 15).  Registry values for\
   Optional Extensions are specified in the form H=1 (i.e., a decimal\
   number in the range 256-511), but may be used with an H-Length value\
   in the range 1-5 (see example in section 5.3).\
\
   Two examples of Extension Headers are the Test SNDU and the use of\
   Extension-Padding.  The Test SNDU Mandatory Extension Header results\
   in the entire PDU's being discarded.  The Extension-Padding Optional\
   Extension Header results in the following (if any) option header\
   being ignored (i.e., a total of H-LEN 16-bit words).\
\
   The general format for an SNDU with Extension Headers is:\
\
   < --------------------------   SNDU   ------------------------- >\
   +---+--------------------------------------------------+--------+\
   |D=0| Length | T1 | NPA Address | H1 | T2 |    PDU     | CRC-32 |\
   +---+--------------------------------------------------+--------+\
   < ULE base header >             <  ext 1  >\
\
   Figure 8: SNDU Encapsulation with one Extension Header (for D=0)\
\
   Where:\
   D  is the ULE D_bit (in this example D=0; however, NPA addresses may\
      also be omitted when using Extension Headers).\
   T1 is the base header Type field.  In this case, specifying a\
      Next-Header value.\
   H1 is a set of fields defined for header type T1.  There may be 0\
      or more bytes of information for a specific ULE Extension Header.\
   T2 is the Type field of the next header, or an EtherType > 1535 B\
      indicating the type of the PDU being carried.\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 17]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   < --------------------------   SNDU   ------------------------- >\
   +---+---------------------------------------------------+--------+\
   |D=1| Length | T1 | H1 | T2 | H2 | T3 |       PDU       | CRC-32 |\
   +---+---------------------------------------------------+--------+\
   < ULE base header >< ext 1  >< ext 2  >\
\
   Figure 9: SNDU Encapsulation with two Extension Headers (D=1)\
\
   Using this method, several Extension Headers MAY be chained in\
   series.  Figure 12 shows an SNDU including two Extension Headers.  In\
   the example, the values of T1 and T2 are both less than 1536 decimal.\
   Each indicates the presence of an Extension Header, rather than a\
   directly following PDU.  T3 has a value > 1535 indicating the\
   EtherType of the PDU being carried.  Although an SNDU may contain an\
   arbitrary number of consecutive Extension Headers, it is not expected\
   that SNDUs will generally carry a large number of extensions.\
\
5.1.  Test SNDU\
\
   A Test SNDU (Figure 10) is a Mandatory Extension Header of Type 1.\
   This header must be the final (or only) extension header specified in\
   the header chain of an SNDU.  The structure of the Data portion of\
   this SNDU is not defined by this document.  Receivers MAY record\
   reception in a log file, but MUST then discard any Test SNDUs.  The\
   D-bit MAY be set in a TEST SNDU.\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |D|        Length  (15b)        |         Type = 0x0000         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                               |\
      =               Data (not forwarded by a Receiver)              =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 10: SNDU Format for a Test SNDU\
\
5.2.  Bridged Frame SNDU Encapsulation\
\
   A bridged SNDU is a Mandatory Extension Header of Type 1.  It MUST be\
   the final (or only) extension header specified in the header chain of\
   an SNDU.  The payload includes MAC address and EtherType [DIX] or LLC\
   Length [ISO-8802-2] fields together with the contents of a bridged\
   MAC frame.  The SNDU has the format shown in Figures 11 and 12.\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 18]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   When an NPA address is specified (D=0), Receivers MUST discard all\
   SNDUs that carry an NPA destination address that does NOT match their\
   own NPA address (or a broadcast/multicast address); the payload of\
   the remaining SNDUs are processed by the bridging rules that follow.\
   An SNDU without an NPA address (D=1) results in a Receiver performing\
   bridging processing on the payload of all received SNDUs.\
\
   An Encapsulator MAY also use this encapsulation format to directly\
   communicate network protocol packets that require the LLC\
   encapsulation [IEEE-802.2, ISO-8802-2].  To do this, it constructs an\
   SNDU with a Bridge Extension Header containing the intended\
   destination MAC address, the MAC source address of the Encapsulator,\
   and the LLC-Length.  The PDU comprises an LLC header followed by the\
   required payload.  The Encapsulator MAY choose to suppress the NPA\
   address (see 4.5).\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |0|        Length  (15b)        |         Type = 0x0001         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |            Receiver Destination NPA Address  (6B)             |\
      +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                               |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                MAC Destination Address  (6B)                  |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                    MAC Source Address  (6B)                   |\
      +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                               |   EtherType/LLC-Length (2B)   |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                               |\
      =                 (Contents of bridged MAC frame)               =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 11: SNDU Format for a Bridged Payload (D=0)\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 19]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
       0                   1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |1|        Length  (15b)        |         Type = 0x0001         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                   MAC Destination Address  (6B)               |\
      +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                               |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                     MAC Source Address  (6B)                  |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |   EtherType/LLC-Length (2B)   |                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\
      |                                                               |\
      =                 (Contents of bridged MAC frame)               =\
      |                                                               |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                             (CRC-32)                          |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Figure 12: SNDU Format for a Bridged Payload (D=1)\
\
   The EtherType/LLC-Length field of a frame is defined according to\
   IEEE 802.3 [IEEE-802.2] (see section 5).\
\
   In this special case, the Mandatory Extension Header format may be\
   interpreted as either an EtherType [DIX] or an LLC Length field,\
   specified by IEEE 802 [IEEE-802.3] rather than as a value assigned in\
   the ULE Next-Header Registry maintained by the IANA.\
\
   The MAC addresses in the frame being bridged SHOULD be assigned\
   according to the rules specified by the IEEE and denote unknown,\
   unicast, broadcast, and multicast link addresses.  These MAC\
   addresses denote the intended recipient in the destination LAN, and\
   therefore have a different function from the NPA addresses carried in\
   the SNDU header.\
\
   A frame Type < 1536 for a bridged frame introduces a LLC Length\
   field.  The Receiver MUST check this length and discard any frame\
   with a length greater than permitted by the SNDU payload size.\
\
   In normal operation, it is expected that any padding appended to the\
   Ethernet frame SHOULD be removed prior to forwarding.  This requires\
   the sender to be aware of such Ethernet padding (e.g., [DIX,\
   IEEE-802.3]).\
\
   Ethernet frames received at the Encapsulator for onward transmission\
   over ULE carry a Local Area Network Frame Check sequence (LAN FCS)\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 20]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   field (e.g., CRC-32 for Ethernet [DIX, IEEE-802.3]).  The\
   Encapsulator MUST check the LAN-FCS value of all frames received,\
   prior to further processing.  Frames received with an invalid LAN FCS\
   MUST be discarded.  After checking, the LAN FCS is then removed\
   (i.e., it is NOT forwarded in the bridged SNDU).  As in other ULE\
   frames, the Encapsulator appends a CRC-32 to the transmitted SNDU.\
   At the Receiver, an appropriate LAN-FCS field will be appended to the\
   bridged frame prior to onward transmission on the Ethernet interface.\
\
   This design is readily implemented using existing network interface\
   cards and does not introduce an efficiency cost by\
   calculating/verifying two integrity check fields for bridged frames.\
   However, it also introduces the possibility that a frame corrupted\
   within the processing performed at an Encapsulator and/or Receiver\
   may not be detected by the final recipient(s) (i.e., such corruption\
   would not normally result in an invalid LAN FCS).\
\
5.3.  Extension-Padding Optional Extension Header\
\
   The Extension-Padding Optional Extension Header is specified by an\
   IANA-assigned H-Type value of 0x100.  As in other Optional\
   Extensions, the total length of the extension is indicated by the\
   H-LEN field (specified in 16-bit words).  The extension field is\
   formed of a group of one to five 16-bit fields.\
\
   For this specific option, only the last 16-bit word has an assigned\
   value; the sender SHOULD set the remaining values to 0x0000.  The\
   last 16-bit field forms the Next-Header Type field.  A Receiver MUST\
   interpret the Type field, but MUST ignore any other fields of this\
   Extension Header.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 21]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
6.  Processing at the Encapsulator\
\
   The Encapsulator forms the PDUs queued for transmission into SNDUs by\
   adding a header and trailer to each PDU (section 4).  It then\
   segments the SNDU into a series of TS Packet payloads (Figure 13).\
   These are transmitted using a single TS Logical Channel over a TS\
   Multiplex.  The TS Multiplex may be processed by a number of MPEG-2\
   (re)multiplexors before it is finally delivered to a Receiver\
   [RFC4259].\
\
                +------+--------------------------------+------+\
                | ULE  |        Protocol Data Unit      | ULE  |\
                |Header|                                |CRC-32|\
                +------+--------------------------------+------+\
               /         /                             \\       \\\
              /         /                               \\       \\\
             /         /                                 \\       \\\
   +--------+---------+   +--------+---------+   +--------+---------+\
   |MPEG-2TS| MPEG-2  |...|MPEG-2TS| MPEG-2  |...|MPEG-2TS| MPEG-2  |\
   | Header | Payload |   | Header | Payload |   | Header | Payload |\
   +--------+---------+   +--------+---------+   +--------+---------+\
\
   Figure 13: Encapsulation of an SNDU into a series of TS Packets\
\
6.1.  SNDU Encapsulation\
\
   When an Encapsulator has not previously sent a TS Packet for a\
   specific TS Logical Channel, or after an Idle period, it starts to\
   send an SNDU in the first available TS Packet.  This first TS Packet\
   generated MUST carry a PUSI value of 1.  It MUST also carry a Payload\
   Pointer value of zero, indicating that the SNDU starts immediately\
   after the Payload Pointer in the TS Packet payload.\
\
   The Encapsulation MUST ensure that all TS Packets set the MPEG-2\
   Continuity Counter carried in the TS Packet header, according to\
   [ISO-MPEG2].  This value MUST be incremented by one (modulo 16) for\
   each successive TS Packet containing a fragment/complete SNDU sent\
   using the same TS Logical Channel.\
\
   An Encapsulator MAY decide not to send another SNDU immediately, even\
   if space is available in a partially filled TS Packet.  This\
   procedure is known as Padding (Figure 14).  The End Indicator informs\
   the Receiver that there are no more SNDUs in this TS Packet payload.\
   The End Indicator is followed by zero or more unused bytes until the\
   end of the TS Packet payload.  All unused bytes MUST be set to the\
   value of 0xFF, following current practice in MPEG-2 [ISO-DSMCC].  The\
   Padding procedure trades decreased efficiency against improved\
   latency.\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 22]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
                 +-/------------+\
                 |  SubNetwork  |\
                 |     DU 1     |\
                 +-/------------+\
                        \\        \\\
                         \\        \\\
                          \\        \\\
                 +--------+--------+--------+----------+\
                 |MPEG-2TS| End of | 0xFFFF |  Unused  |\
                 | Header | SNDU 1 |        |  Bytes   |\
                 +--------+--------+--------+----------+\
                   PUSI=0            ULE\
                                     End\
                                     Indicator\
\
   Figure 14: A TS Packet carrying the end of SNDU 1, followed by an\
              End Indicator\
\
   Alternatively, when more packets are waiting at an Encapsulator, and\
   a TS Packet has sufficient space remaining in the payload, the\
   Encapsulator can follow a previously encapsulated SNDU with another\
   SNDU using the next available byte of the TS Packet payload (see\
   6.2).  This is called Packing (Figure 15).\
\
              +-/----------------+       +----------------/-+\
              |   Subnetwork     |       |   Subnetwork     |\
              |      DU 2        |       |      DU 3        |\
              +-/----------------+       +----------------/-+\
                         \\        \\     /          /\\\
                          \\        \\   /          /  \\\
                           \\        \\ /          /    \\. . .\
          +--------+--------+--------+----------+\
          |MPEG-2TS| Payload| end of | start of |\
          | Header | Pointer| SNDU 2 | SNDU 3   |\
          +--------+--------+--------+----------+\
            PUSI=1     |              ^\
                       |              |\
                       +--------------+\
\
   Figure 15: A TS Packet with the end of SNDU 2, followed by SNDU 3\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 23]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
6.2.  Procedure for Padding and Packing\
\
   Five possible actions may occur when an Encapsulator has completed\
   encapsulation of an SNDU:\
\
   (i) If the TS Packet has no remaining space, the Encapsulator\
   transmits this TS Packet.  It starts transmission of the next SNDU in\
   a new TS Packet.  (The standard rules [ISO-MPEG2] require that the\
   header of this new TS Packet carry a PUSI value of 1 followed by a\
   Payload Pointer value of 0x00.)\
\
   (ii) If the TS Packet carrying the final part of an SNDU has one byte\
   of unused payload, the Encapsulator MUST place the value 0xFF in this\
   final byte and transmit the TS Packet.  This rule provides a simple\
   mechanism to resolve the complex behaviour that may arise when the TS\
   Packet has no PUSI set.  To send another SNDU in the current TS\
   Packet would otherwise require the addition of a Payload Pointer that\
   would consume the last remaining byte of TS Packet payload.  The\
   behaviour follows similar practice for other MPEG-2 payload types\
   [ISO-DSMCC].  The Encapsulator MUST start transmission of the next\
   SNDU in a new TS Packet.  (The standard rules require the header of\
   this new TS Packet to carry a PUSI value of 1 followed by a Payload\
   Pointer value of 0x00.)\
\
   (iii) If the TS Packet carrying the final part of an SNDU has exactly\
   two bytes of unused payload, and the PUSI was NOT already set, the\
   Encapsulator MUST place the value 0xFFFF in these final two bytes,\
   providing an End Indicator (section 4.3), and transmit the TS Packet.\
   This rule prevents fragmentation of the SNDU Length field over two TS\
   Packets.  The Encapsulator MUST start transmission of the next SNDU\
   in a new TS Packet.  (The standard rules require the header of this\
   new TS Packet to carry a PUSI value of 1 followed by a Payload\
   Pointer value of 0x00.)\
\
   (iv) If the TS Packet has more than two bytes of unused payload, the\
   Encapsulator MAY transmit this partially full TS Packet but MUST\
   first place the value 0xFF in all remaining unused bytes (i.e.,\
   setting an End Indicator followed by Padding).  The Encapsulator MUST\
   then start transmission of the next SNDU in a new TS Packet.  (The\
   standard rules [ISO-MPEG2] require that the header of this new TS\
   Packet carry a PUSI value of 1 and a Payload Pointer value of 0x00.)\
\
   (v) If at least two bytes are available for SNDU data in the TS\
   Packet payload (i.e., three bytes if the PUSI was NOT previously set,\
   and two bytes if it was previously set), the Encapsulator MAY\
   encapsulate further queued PDUs, by starting the next SNDU in the\
   next available byte of the current TS Packet payload.  When the\
   Encapsulator packs further SNDUs into a TS Packet where the PUSI has\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 24]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   NOT already been set, the PUSI MUST be updated (set to 1), and an\
   8-bit Payload Pointer MUST be inserted in the first byte directly\
   following the TS Packet header.  (This reduces the size of the TS\
   Packet payload field that is available for data by one byte.)  The\
   value of the Payload Pointer MUST be set to the position of the byte\
   following the end of the first SNDU in the TS Packet payload.  If no\
   further PDUs are available, an Encapsulator MAY wait for additional\
   PDUs to fill the incomplete TS Packet.  The maximum period of time an\
   Encapsulator can wait, known as the Packing Threshold, MUST be\
   bounded and SHOULD be configurable in the Encapsulator.  If\
   sufficient additional PDUs are NOT received to complete the TS Packet\
   within the Packing Threshold, the Encapsulator MUST insert an End\
   Indicator (using rule iv).\
\
   Use of the Packing method (v) by an Encapsulator is optional and may\
   be determined on a per-session, per-packet, or per-SNDU basis.\
\
   When an SNDU is less than the size of a TS Packet payload, a TS\
   Packet may be formed that carries a PUSI value of one and also an End\
   Indicator (using rule iv).\
\
7.  Receiver Processing\
\
   A Receiver tunes to a specific TS Multiplex carrying a ULE Stream and\
   sets a receive filter to accept all TS Packets with a specific PID.\
   These TS Packets are associated with a specific TS Logical Channel\
   and are reassembled to form a stream of SNDUs.  A single Receiver may\
   be able to receive multiple TS Logical Channels, possibly using a\
   range of TS Multiplexes.  In each case, reassembly MUST be performed\
   independently for each TS Logical Channel.  To perform this\
   reassembly, the Receiver may use a buffer to hold the partially\
   assembled SNDU, referred to here as the Current SNDU buffer.  Other\
   implementations may choose to use other data structures, but MUST\
   provide equivalent operations.\
\
   Receipt of a TS Packet with a PUSI value of 1 indicates that the TS\
   Packet contains the start of a new SNDU.  It also indicates the\
   presence of the Payload Pointer (indicating the number of bytes to\
   the start of the first SNDU in the TS-Packet currently being\
   reassembled).  It is illegal to receive a Payload Pointer value\
   greater than 181, and this MUST cause the SNDU reassembly to be\
   aborted and the Receiver to enter the Idle State.  This event SHOULD\
   be recorded as a payload pointer error.\
\
   A Receiver MUST support the use of both the Packing and Padding\
   method for any received SNDU and MUST support reception of SNDUs with\
   or without a Destination Address Field (i.e., D=0 and D=1).\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 25]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
7.1.  Idle State\
\
   After initialisation or errors, or on receipt of an End Indicator,\
   the Receiver enters the Idle State.  In this state, the Receiver\
   discards all TS Packets until it discovers the start of a new SNDU,\
   upon which it then enters the Reassembly State.  Figure 16 outlines\
   these state transitions:\
\
                                +-------+\
                                | START |\
                                +---+---+\
                                    |\
                                   \\/\
                               +----------+\
                              \\|   Idle   |/\
                      +-------/|   State  |\\-------+\
         Insufficient |        +----+-----+        |\
         unused space |             | PUSI set     | MPEG-2 TS Error\
         or           |            \\/              | or\
         End Indicator|        +----------+        | SNDU Error\
                      |        |Reassembly|        |\
                      +--------|  State   |--------+\
                               +----------+\
\
   Figure 16: Receiver state transitions\
\
7.1.1.  Idle State Payload Pointer Checking\
\
   A Receiver in the Idle State MUST check the PUSI value in the header\
   of all received TS Packets.  A PUSI value of 1 indicates the presence\
   of a Payload Pointer.  Following a loss of synchronisation, values\
   between 0 and 181 are permitted, in which case the Receiver MUST\
   discard the number of bytes indicated by the Payload Pointer (counted\
   from the first byte of the TS Packet payload field, and excluding the\
   PP field itself), before leaving the Idle State.  It then enters the\
   Reassembly State, and starts reassembly of a new SNDU at this point.\
\
7.2. Processing of a Received SNDU\
\
   When in the Reassembly State, the Receiver reads a 2-byte SNDU Length\
   field from the TS Packet payload.  If the value is less than or equal\
   to 4, or equal to 0xFFFF, the Receiver discards the Current SNDU and\
   the remaining TS Packet payload and returns to the Idle State.\
   Receipt of an invalid Length field is an error event and SHOULD be\
   recorded as an SNDU length error.\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 26]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   If the Length of the Current SNDU is greater than 4, the Receiver\
   accepts bytes from the TS Packet payload to the Current SNDU buffer\
   until either Length bytes in total are received, or the end of the TS\
   Packet is reached (see also 7.2.1).  When the Current SNDU length\
   equals the value of the Length field, the Receiver MUST calculate and\
   verify the CRC value (see 4.6).  SNDUs that contain an invalid CRC\
   value MUST be discarded.  Mismatch of the CRC is an error event and\
   SHOULD be recorded as a CRC error.  The underlying physical-layer\
   processing (e.g., forward error correction coding) often results in\
   patterns of errors, rather than single bit errors, so the Receiver\
   needs to be robust to arbitrary patterns of corruption to the TS\
   Packet and payload, including potential corruption of the PUSI, PP,\
   and SNDU Length fields.  Therefore, a Receiver SHOULD discard the\
   remaining TS Packet payload (if any) following a CRC mismatch and\
   return to the Idle State.\
\
   When the Destination Address is present (D=0), the Receiver accepts\
   SNDUs that match one of a set of addresses specified by the Receiver\
   (this includes the NPA address of the Receiver, the NPA broadcast\
   address, and any required multicast NPA addresses).  The Receiver\
   MUST silently discard an SNDU with an unmatched address.\
\
   After receiving a valid SNDU, the Receiver MUST check the Type field\
   (and process any Type 1 Extension Headers).  The SNDU payload is then\
   passed to the next protocol layer specified.  An SNDU with an unknown\
   Type value < 1536 MUST be discarded.  This error event SHOULD be\
   recorded as an SNDU type error.\
\
   The Receiver then starts reassembly of the next SNDU.  This MAY\
   directly follow the previously reassembled SNDU within the TS Packet\
   payload.\
\
   (i) If the Current SNDU finishes at the end of a TS Packet payload,\
   the Receiver MUST enter the Idle State.\
\
   (ii) If only one byte remains unprocessed in the TS Packet payload\
   after completion of the Current SNDU, the Receiver MUST discard this\
   final byte of TS Packet payload.  It then enters the Idle State.  It\
   MUST NOT record an error when the value of the remaining byte is\
   identical to 0xFF.\
\
   (iii) If two or more bytes of TS Packet payload data remain after\
   completion of the Current SNDU, the Receiver accepts the next 2 bytes\
   and examines whether this is an End Indicator.  When an End Indicator\
   is received, a Receiver MUST silently discard the remainder of the TS\
   Packet payload and transition to the Idle State.  Otherwise, this is\
   the start of the next Packed SNDU, and the Receiver continues by\
   processing this SNDU.  (This is provided that the TS Packet has a\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 27]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   PUSI value of 1, see 7.2.1; otherwise, the Receiver has detected a\
   delimiting error and MUST discard all remaining bytes in the TS\
   Packet payload and transitions to the Idle State.)\
\
7.2.1.  Reassembly Payload Pointer Checking\
\
   A Receiver that has partially received an SNDU (in the Current SNDU\
   buffer) MUST check the PUSI value in the header of all subsequent TS\
   Packets with the same PID (i.e., same TS Logical Channel).  If it\
   receives a TS Packet with a PUSI value of 1, it MUST then verify the\
   Payload Pointer.  If the Payload Pointer does NOT equal the number of\
   bytes remaining to complete the Current SNDU (i.e., the difference\
   between the SNDU Length field and the number of reassembled bytes),\
   the Receiver has detected a delimiting error.\
\
   Following a delimiting error, the Receiver MUST discard the partially\
   assembled SNDU (in the Current SNDU buffer) and SHOULD record a\
   reassembly error.  It MUST then re-enter the Idle State.\
\
7.3.  Other Error Conditions\
\
   The Receiver SHOULD check the MPEG-2 Transport Error Indicator\
   carried in the TS Packet header [ISO-MPEG2].  This flag indicates a\
   transmission error for a TS Logical Channel.  If the flag is set to a\
   value of one, a transmission error event SHOULD be recorded.  Any\
   partially received SNDU MUST be discarded.  The Receiver then enters\
   the Idle State.\
\
   The Receiver MUST check the MPEG-2 Continuity Counter carried in the\
   TS Packet header [ISO-MPEG2].  If two (or more) successive TS Packets\
   within the same TS Logical Channel carry the same Continuity Counter\
   value, the duplicate TS Packets MUST be silently discarded.  If the\
   received value is NOT identical to that in the previous TS Packet,\
   and it does NOT increment by one for successive TS Packets (modulo\
   16), the Receiver has detected a continuity error.  Any partially\
   received SNDU MUST be discarded.  A continuity counter error event\
   SHOULD be recorded.  The Receiver then enters the Idle State.\
\
   Note that an MPEG2-2 Transmission network is permitted to carry\
   duplicate TS Packets [ISO-MPEG2], which are normally detected by the\
   MPEG-2 Continuity Counter.  A Receiver that does not perform the\
   above Continuity Counter check would accept duplicate copies of TS\
   Packets to the reassembly procedure.  In most cases, the SNDU CRC-32\
   integrity check will result in discard of these SNDUs, leading to\
   unexpected PDU loss; however, in some cases, duplicate PDUs (fitting\
   into one TS Packet) could pass undetected to the next layer protocol.\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 28]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
8.  Summary\
\
   This document defines a Unidirectional Lightweight Encapsulation\
   (ULE) that performs efficient and flexible support for IPv4 and IPv6\
   network services over networks built upon the MPEG-2 Transport Stream\
   (TS).  The encapsulation is also suited to transport of other\
   protocol packets and bridged Ethernet frames.\
\
   ULE also provides an Extension Header format and defines an\
   associated IANA registry for efficient and flexible support of both\
   mandatory and optional SNDU headers.  This allows for future\
   extension of the protocol, while providing backwards compatibility\
   with existing implementations.  In particular, Optional Extension\
   Headers may safely be ignored by Receivers that do not implement\
   them, or choose not to process them.\
\
9.  Acknowledgements\
\
   This document is based on a previous document authored by: Horst D.\
   Clausen, Bernhard Collini-Nocker, Hilmar Linder, and Gorry Fairhurst.\
   The authors wish to thank the members of the ip-dvb mailing list for\
   their input; in particular, the many comments received from Art\
   Allison, Carstsen Borman, Patrick Cipiere, Wolgang Fritsche, Hilmar\
   Linder, Alain Ritoux, and William Stanislaus.  Alain also provided\
   the original examples of usage.\
\
10.  Security Considerations\
\
   The security considerations for ULE resemble those that arise when\
   the existing Multi-Protocol Encapsulation (MPE) is used.  ULE does\
   not add specific new threats that will impact the security of the\
   general Internet.\
\
   There is a known security issue with un-initialised stuffing bytes.\
   In ULE, these bytes are set to 0xFF (normal practice in MPEG-2).\
\
   There are known integrity issues with the removal of the LAN FCS in a\
   bridged networking environment.  The removal for bridged frames\
   exposes the traffic to potentially undetected corruption while being\
   processed by the Encapsulator and/or Receiver.\
\
   There is a potential security issue when a Receiver receives a PDU\
   with two Length fields:  The Receiver would need to validate the\
   actual length and the Length field and ensure that inconsistent\
   values are not propagated by the network.  In direct encapsulation of\
   IPv4/IPv6 in ULE, this is avoided by including only one SNDU Length\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 29]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   Field.  However, this issue still arises in bridged LLC frames, and\
   frames with a LLC Length greater than the SNDU payload size MUST be\
   discarded, and an SNDU payload length error SHOULD be recorded.\
\
   In the future, a ULE Mandatory Extension Header may be used to define\
   a method to perform link encryption of the SNDU payload.  This is as\
   an additional security mechanism to IP-, transport-, or application-\
   layer security, not a replacement [RFC4259].  The approach is generic\
   and decouples the encapsulation from future security extensions.  The\
   operation provides functions that resemble those currently used with\
   the MPE encapsulation.\
\
   Additional security control fields may be provided as part of this\
   link encryption Extension Header, e.g., to associate an SNDU with one\
   of a set of Security Association (SA) parameters.  As a part of the\
   encryption process, it may also be desirable to authenticate some or\
   all of the SNDU headers.  The method of encryption and the way in\
   which keys are exchanged is beyond the scope of this specification,\
   as are the definition of the SA format and that of the related\
   encryption keys.\
\
11.  IANA Considerations\
\
   The IANA has created the ULE Next-Header Type field registry as\
   defined in this document.\
\
   ULE Next-Header registry\
\
      This registry allocates Next-Header values within the range 0-511\
      (decimal).  For each allocated value, it also specifies the set of\
      allowed H-LEN values (see section 5).  In combination, these\
      define a set of allowed values in the range 0-1535 for the first\
      part of the ULE Type space (see section 4.4.1).\
\
11.1.  IANA Guidelines\
\
   The following contains the IANA guidelines for management of the ULE\
   Next-Header registry.  This registry allocates values 0-511 decimal\
   (0x0000-0x01FF, hexadecimal).  It MUST NOT allocate values greater\
   than 0x01FF (decimal).\
\
   It subdivides the Next-Header registry in the following way:\
\
   1) 0-255 (decimal) IANA-assigned values, indicating Mandatory\
      Extension Headers (or link-dependent Type fields) for ULE,\
      requiring expert review leading to prior issue of an IETF RFC.\
      This specification MUST define the value and the name associated\
      with the Extension Header, together with the procedure for\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 30]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
      processing the Extension Header.  It MUST also define the need for\
      the Mandatory Extension and the intended use.  The size of the\
      Extension Header MUST be specified.\
\
      Assignments have been made in this document, and registered by\
      IANA:\
\
      Type      Name                             Reference\
\
      0:       Test-SNDU                        Section 5.1\
      1:       Bridged-SNDU                     Section 5.2\
\
   2) 256-511 (decimal) IANA-assigned values, indicating Optional\
      Extension Headers for ULE, requiring expert review leading to\
      prior issue of an IETF RFC.  This specification MUST define the\
      value and the name associated with the Extension Header, together\
      with the procedure for processing the Extension Header.  The entry\
      MUST specify the range of allowable H-LEN values that are\
      permitted (in the range 1-5).  It MUST also define the need for\
      the Optional Extension and the intended use.\
\
      Assignments have been made in this document, and registered by\
      IANA:\
\
      Type      Name                    H-LEN   Reference\
\
      256:      Extension-Padding       1-5     Section 5.3\
\
12. References\
\
12.1.  Normative References\
\
   [ISO-MPEG2]    IS 13818-1, "Information technology -- Generic coding\
                  of moving pictures and associated audio information --\
                  Part 1: Systems", International Standards Organisation\
                  (ISO), 2000.\
\
   [RFC2119]      Bradner, S., "Key Words for Use in RFCs to Indicate\
                  Requirement Levels", BCP 14, RFC 2119, 1997.\
\
   [RFC1112]      Deering, S., "Host extensions for IP multicasting",\
                  STD 5, RFC 1112, August 1989.\
\
   [RFC2464]      Crawford, M., "Transmission of IPv6 Packets over\
                  Ethernet Networks", RFC 2464, December 1998.\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 31]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   [ULE1]         Registration for format_identifier ULE1, SMPTE\
                  Registration Authority, LLC,\
                  http://www.smpte-ra.org/ule1.html.\
\
12.2.  Informative References\
\
   [IPDVB-AR]     Fairhurst, G. and M-J. Montpetit, "Address Resolution\
                  for IP datagrams over MPEG-2 Networks", Work in\
                  Progress, September 2005.\
\
   [ATSC]         A/53, "ATSC Digital Television Standard", Advanced\
                  Television Systems Committee (ATSC), Doc. A/53 Rev.C,\
                  2004\
\
   [ATSC-DAT]     A/90, "ATSC Data Broadcast Standard", Advanced\
                  Television Systems Committee (ATSC), Doc. A/090, 2000.\
\
   [ATSC-DATG]    A/91, "Recommended Practice: Implementation Guidelines\
                  for the ATSC Data Broadcast Standard", Advanced\
                  Television Systems Committee (ATSC), Doc. A/91, 2001.\
\
   [ATSC-G]       A/54, "Guide to the use of the ATSC Digital Television\
                  Standard", Advanced Television Systems Committee\
                  (ATSC), Doc. A/54, 1995.\
\
   [ATSC-PSIP-TC] A/65B, "Program and System Information Protocol for\
                  Terrestrial Broadcast and Cable", Advanced Television\
                  Systems Committee (ATSC), Doc. A/65B, 2003.\
\
   [ATSC-REG]     ATSC "Code Point Registry"\
                  www.atsc.org/standards/Code_Point_Registry.pdf.\
\
   [ATSC-S]       A/80, "Modulation and Coding Requirements for Digital\
                  TV (DTV) Applications over Satellite", Advanced\
                  Television Systems Committee (ATSC), Doc. A/80, 1999.\
\
   [DIX]          Digital Equipment Corp, Intel Corp, Xerox Corp,\
                  "Ethernet Local Area Network Specification" Version\
                  2.0, November 1982.\
\
   [ETSI-DAT]     EN 301 192, "Specifications for Data Broadcasting",\
                  European Telecommunications Standards Institute\
                  (ETSI), 2004.\
\
   [ETSI-DVBC]    EN 300 800, "Digital Video Broadcasting (DVB); DVB\
                  interaction channel for Cable TV distribution systems\
                  (CATV)", European Telecommunications Standards\
                  Institute (ETSI), 1998.\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 32]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   [ETSI-DVBS]    EN 300 421, "Digital Video Broadcasting (DVB);\
                  Modulation and Coding for DBS satellite systems at\
                  11/12 GHz", European Telecommunications Standards\
                  Institute (ETSI), 1997.\
\
   [ETSI-DVBT]    EN 300 744, "Digital Video Broadcasting (DVB); Framing\
                  structure, channel coding and modulation for digital\
                  terrestrial television (DVB-T)", European\
                  Telecommunications Standards Institute (ETSI), 2004.\
\
   [ETSI-RCS]     ETSI 301 790, "Digital Video Broadcasting (DVB);\
                  Interaction Channel for Satellite Distribution\
                  Systems", European Telecommunications Standards\
                  Institute (ETSI), 2005.\
\
   [IEEE-802.2]   IEEE 802.2, "Local and metropolitan area networks-\
                  Specific requirements Part 2: Logical Link Control",\
                  IEEE Computer Society, (also ISO/IEC 8802-2), 1998.\
\
   [IEEE-802.3]   IEEE 802.3, "Local and metropolitan area networks-\
                  Specific requirements Part 3: Carrier sense multiple\
                  access with collision detection (CSMA/CD) access\
                  method and physical layer specifications", IEEE\
                  Computer Society, (also ISO/IEC 8802-3), 2002.\
\
   [ISO-DSMCC]    IS 13818-6, "Information technology -- Generic coding\
                  of moving pictures and associated audio information --\
                  Part 6: Extensions for DSM-CC", International\
                  Standards Organisation (ISO), 1998.\
\
   [ITU-H222]     H.222.0, "Information technology - Generic coding of\
                  moving pictures and associated audio information:\
                  Systems", International Telecommunication Union,\
                  (ITU-T), 1995.\
\
   [ITU-3563]     I.363.5, "B-ISDN ATM Adaptation Layer specification:\
                  Type 5 AAL", International Telecommunication Union,\
                  (ITU-T), 1996.\
\
   [ISO-8802-2]   ISO/IEC 8802.2, "Logical Link Control", International\
                  Standards Organisation (ISO), 1998.\
\
   [RFC3077]      Duros, E., Dabbous, W., Izumiyama, H., Fujii, N., and\
                  Y. Zhang, "A Link-Layer Tunneling Mechanism for\
                  Unidirectional Links", RFC 3077, March 2001.\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 33]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   [RFC3309]      Stone, J., Stewart, R., and D. Otis, "Stream Control\
                  Transmission Protocol (SCTP) Checksum Change", RFC\
                  3309, September 2002.\
\
   [RFC4259]      Montpetit, M.-J., Fairhurst, G., Clausen, H.,\
                  Collini-Nocker, B., and H. Linder, "A Framework for\
                  Transmission of IP Datagrams over MPEG-2 Networks",\
                  RFC 4259, November 2005.\
\
   [SOOR05]       M. Sooriyabandara, G. Fairhurst, A. Ang, B. Collini-\
                  Nocker, H. Linder, W. Stering  "A Lightweight\
                  Encapsulation Protocol for IP over MPEG-2 Networks:\
                  Design, Implementation and Analysis", Computer\
                  Networks 48 p5-19, 2005.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 34]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
Appendix A: SNDU Packing Examples\
\
   This appendix provides some examples of use.  The appendix is\
   informative.  It does not provide a description of the protocol.  The\
   examples provide the complete TS Packet sequence for some sample\
   encapsulated IP packets.\
\
   The specification of the TS Packet header operation and field values\
   is provided in [ISO-MPEG2].  The specification of ULE is provided in\
   the body of this document.\
\
   The key below is provided for the following examples.\
\
   HDR    4B TS Packet Header\
   PUSI   Payload Unit Start Indicator\
   PP     Payload Pointer\
   ***    TS Packet Payload Pointer (PP)\
\
   Example A.1: Two 186B PDUs.\
\
     SNDU A is 200 bytes (including the ULE destination NPA address)\
     SNDU B is 200 bytes (including the ULE destination NPA address)\
\
   The sequence comprises 3 TS Packets:\
\
                      SNDU\
           PP=0      Length\
   +-----+------+------+------+-   -+------+\
   | HDR | 0x00 | 0x00 | 0xC4 | ... | A182 |\
   +-----+----*-+-*----+------+-   -+------+\
   PUSI=1     *   *\
              *****\
                                          SNDU\
           PP=17           CRC for A     Length\
   +-----+------+------+-   -+--- --+------+------+-   -+------+\
   | HDR | 0x11 | A183 | ... | A199 | 0x00 | 0xC4 | ... | B165 |\
   +-----+----*-+------+-   -+------+-*----+------+-   -+------+\
   PUSI=1     *                       *\
              *************************\
\
                                 End     Stuffing\
                    CRC for A Indicator   Bytes\
   +-----+------+-   -+------+----+----+-   -+----+\
   | HDR | B166 | ... | B199 |0xFF|0xFF| ... |0xFF|\
   +-----+------+-   -+------+----+----+-   -+----+\
   PUSI=0\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 35]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   Example A.2: Usage of last byte in a TS-Packet\
\
     SNDU A is 183 bytes\
     SNDU B is 182 bytes\
     SNDU C is 181 bytes\
     SNDU D is 185 bytes\
\
   The sequence comprises 4 TS Packets:\
\
                       SNDU\
            PP=0      Length     CRC for A\
    +-----+------+------+------+-   -+------+\
    | HDR | 0x00 | 0x00 | 0xB3 | ... | A182 |\
    +-----+----*-+-*----+------+-   -+------+\
    PUSI=1     *   *\
               *****\
                       SNDU                  Unused\
            PP=0      Length       CRC for B  byte\
    +-----+------+------+------+-   -+------+------+\
    | HDR | 0x00 | 0x00 | 0xB2 | ... | B181 | 0xFF |\
    +-----+---*--+-*----+------+-   -+------+------+\
    PUSI=1    *    *\
              ******\
                       SNDU                       SNDU\
            PP=0      Length      CRC for C      Length\
    +-----+------+------+------+-   -+------+------+------+\
    | HDR | 0x00 | 0x00 | 0xB1 | ... | C180 | 0x00 | 0x65 |\
    +-----+---*--+-*----+------+-   -+------+------+------+\
    PUSI=1    *    *\
              ******           Unused\
                                byte\
    +-----+------+-   -+------+------+\
    | HDR | D002 | ... | D184 | 0xFF |\
    +-----+------+-   -+------+------+\
     PUSI=0\
\
   Example A.3: Large SNDUs\
\
   SNDU A is 732 bytes\
   SNDU B is 284 bytes\
\
   The sequence comprises 6 TS Packets:\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 36]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
                       SNDU\
            PP=0      Length\
    +-----+------+------+------+-   -+------+\
    | HDR | 0x00 | 0x02 | 0xD8 | ... | A182 |\
    +-----+---*--+-*----+------+-   -+------+\
    PUSI=1    *    *\
              ******\
\
    +-----+------+-   -+------+\
    | HDR | A183 | ... | A366 |\
    +-----+------+-   -+------+\
    PUSI=0\
\
    +-----+------+-   -+------+\
    | HDR | A367 | ... | A550 |\
    +-----+------+-   -+------+\
    PUSI=0\
\
                                           SNDU\
            PP=181         CRC for A      Length\
    +-----+------+------+-   -+------+------+------+\
    | HDR | 0xB5 | A551 | ... | A731 | 0x01 | 0x18 |\
    +-----+---*--+------+-   -+------+*-----+------+\
    PUSI=1    *                       *\
              *************************\
\
    +-----+------+-   -+------+\
    | HDR | B002 | ... | B185 |\
    +-----+------+-   -+------+\
    PUSI=0\
\
                                    End          Stuffing\
                                 Indicator        Bytes\
    +-----+------+-   -+------+------+------+-   -+------+\
    | HDR | B186 | ... | B283 | 0xFF | 0xFF | ... | 0xFF |\
    +-----+------+-   -+------+------+------+-   -+------+\
    PUSI=0\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 37]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   Example A.4: Illustration of SNDU Length field\
\
     SNDU A is 200 bytes\
     SNDU B is 60 bytes\
     SNDU C is 60 bytes\
\
   The sequence comprises two TS Packets:\
\
                       SNDU\
            PP=0      Length\
    +-----+------+------+------+-   -+------+\
    | HDR | 0x00 | 0x00 | 0xC4 | ... | A182 |\
    +-----+----*-+-*----+------+-   -+------+\
    PUSI=1     *   *  +      +\
               *****  ++++++++\
                       +\
                       +++++++++++++++++\
                                       +   SNDU\
            PP=17           CRC for A  +  Length\
    +-----+------+------+-   -+------+-+----+------+-\
    | HDR | 0x11 | A183 | ... | A199 | 0x00 | 0x38 | ...\
    +-----+----*-+------+-   -+------+*-----+------+-\
    PUSI=1     *                      *  +       +\
               ************************  +++++++++\
                                          +\
    +++++++++++++++++++++++++++++++++++++++\
    +\
    +                  SNDU                       End      Stuffing\
    +                 Length                   Indicator     bytes\
    +    -+------+------+------+  -+------+------+------+- -+------+\
    + ... | B59  | 0x00 | 0x38 |...| C59  | 0xFF | 0xFF |...| 0xFF |\
    +    -+------+-+----+------+  -+------+-+----+------+- -+------+\
    +              +  +      +              +\
    +              +  ++++++++              +\
    +              +   +                    +\
    ++++++++++++++++   ++++++++++++++++++++++\
\
   *** TS Packet Payload Pointer (PP)\
   +++ ULE Length Indicator\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 38]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
   Example A.5: Three 44B PDUs.\
\
     SNDU A is 52 bytes (no ULE destination NPA address) SNDU B is 52\
     bytes (no ULE destination NPA address) SNDU C is 52 bytes (no ULE\
     destination NPA address)\
\
   The sequence comprises 1 TS Packet:\
\
                      SNDU\
           PP=0      Length\
   +-----+------+------+------+-   -+-----+------+------+-   -+-----+-\
   | HDR | 0x00 | 0x80 | 0x30 | ... | A51 | 0x80 | 0x30 | ... | B51 | ..\
   +-----+----*-+-*----+------+-   -+-----+------+------+-   -+-----+-\
   PUSI=1     *   *\
              *****\
\
                                           End        Stuffing\
                                         Indicator     bytes\
                -----+------+-   -+-----+---------+- -+------+\
            ... 0x80 | 0x30 | ... | C51 |0xFF|0xFF|   | 0xFF |\
                -----+------+-   -+-----+---------+- -+------+\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 39]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
Appendix B: SNDU Encapsulation\
\
   An example of ULE encapsulation carrying an ICMPv6 packet generated\
   by ping6.\
\
   ULE SNDU Length  :            63 decimal\
   D-bit value  :                0 (NPA destination address present)\
   ULE Protocol Type :           0x86dd (IPv6)\
   Destination ULE NPA Address : 00:01:02:03:04:05\
   ULE CRC32 :                   0x7c171763\
\
   Source IPv6 :                 2001:DB8:3008:1965::1\
   Destination IPv6 :            2001:DB8:2509:1962::2\
\
   SNDU contents (including CRC-32):\
\
   0000: 00 3f 86 dd 00 01 02 03 04 05 60 00 00 00 00 0d\
   0016: 3a 40 20 01 0d b8 30 08 19 65 00 00 00 00 00 00\
   0032: 00 01 20 01 0d b8 25 09 19 62 00 00 00 00 00 00\
   0048: 00 02 80 00 9d 8c 06 38 00 04 00 00 00 00 00 7c\
   0064: 17 17 63\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 40]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
Authors' Addresses\
\
   Godred Fairhurst\
   Department of Engineering\
   University of Aberdeen\
   Aberdeen, AB24 3UE\
   UK\
\
   EMail: gorry@erg.abdn.ac.uk\
   Web: http://www.erg.abdn.ac.uk/users/Gorry\
\
\
   Bernhard Collini-Nocker\
   Department of Scientific Computing\
   University of Salzburg\
   Jakob Haringer Str. 2\
   5020 Salzburg\
   Austria\
\
   EMail: bnocker@cosy.sbg.ac.at\
   Web: http://www.scicomp.sbg.ac.at/\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 41]\
\
RFC 4326              ULE for IP over MPEG-2/DVB           December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Fairhurst & Collini-Nocker  Standards Track                    [Page 42]\
\

doc 16
  field 0
    name titolo
    type string
    value rfc4321.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          R. Sparks\
Request for Comments: 4321                              Estacado Systems\
Category: Informational                                     January 2006\
\
\
                Problems Identified Associated with the\
       Session Initiation Protocol's (SIP) Non-INVITE Transaction\
\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document describes several problems that have been identified\
   with the Session Initiation Protocol's (SIP) non-INVITE transaction.\
\
Table of Contents\
\
   1. Problems under the Current Specifications .......................2\
      1.1. NITs must complete immediately or risk losing a race .......2\
      1.2. Provisional responses can delay recovery from lost\
           final responses ............................................3\
      1.3. Delayed responses will temporarily blacklist an element ....4\
      1.4. 408 for non-INVITE is not useful ...........................6\
      1.5. Non-INVITE timeouts doom forking proxies ...................7\
      1.6. Mismatched timer values make winning the race harder .......7\
   2. Security Considerations .........................................8\
   3. Acknowledgements ................................................8\
   4. Informative References ..........................................9\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sparks                       Informational                      [Page 1]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
1.  Problems under the Current Specifications\
\
   There are a number of unpleasant edge conditions created by the SIP\
   non-INVITE transaction (NIT) model's fixed duration.  The negative\
   aspects of some of these are exacerbated by the effect that\
   provisional responses have on the non-INVITE transaction state\
   machines as currently defined.\
\
1.1.  NITs must complete immediately or risk losing a race\
\
   The non-INVITE transaction defined in RFC 3261 [1] is designed to\
   have a fixed and finite duration (dependent on T1).  A consequence of\
   this design is that participants must strive to complete the\
   transaction as quickly as possible.  Consider the race condition\
   shown in Figure 1.\
\
                         UAC           UAS\
                          |   request   |\
                     ---  |---.         |\
                      ^   |    `---.    |\
                      |   |         `-->|  ---\
                      |   |             |   ^\
                      |   |             |   |\
                    64*T1 |             |   |\
                      |   |             |   |\
                      |   |             | 64*T1\
                      |   |             |   |\
                      |   |             |   |\
                      v   |             |   |\
        timeout <=== ---  |   200 OK    |   |\
                          |         .---|   v\
                          |    .---'    |  ---\
                          |<--'         |\
\
                Figure 1: Non-Invite Race Condition\
\
   The User Agent Server (UAS) in this figure believes it has responded\
   to the request in time, and that the request succeeded.  The User\
   Agent Client (UAC), on the other hand, believes the request has\
   timed-out, hence failed.  No longer having a matching client\
   transaction, the UAC core will ignore what it believes to be a\
   spurious response.  As far as the UAC is concerned, it received no\
   response at all to its request.  The ultimate result is that the UAS\
   and UAC have conflicting views of the outcome of the transaction.\
\
\
\
\
\
\
\
Sparks                       Informational                      [Page 2]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
   Therefore, a UAS cannot wait until the last possible moment to send a\
   final response within a NIT.  It must, instead, send its response so\
   that it will arrive at the UAC before that UAC times out.\
   Unfortunately, the UAS has no way to accurately measure the\
   propagation time of the request or predict the propagation time of\
   the response.  The uncertainty it faces is compounded by each proxy\
   that participates in the transaction.  Thus, the UAS's only choice is\
   to send its final response as soon as it possibly can and hope for\
   the best.\
\
   This result constrains the set of problems that can be solved with a\
   single NIT.  Any delay introduced during processing of a request\
   increases the probability of losing the race.  If the timing\
   characteristics of that processing are not predictable and\
   controllable, a single NIT is an inappropriate model for handling the\
   request.  One viable alternative is to accept the request with a 202\
   and send the ultimate results in a new request in the reciprocal\
   direction.\
\
   In specialized networks, a UAS might have some reliable knowledge of\
   inter-hop latency and could use that knowledge to determine if it has\
   time to delay its final response in order to perform some processing\
   such as a database lookup while mitigating its risk of losing the\
   race in Figure 1.  Establishing this knowledge across arbitrary\
   networks (perhaps using resource reservation techniques and\
   deterministic transports) is not currently feasible.\
\
1.2.  Provisional responses can delay recovery from lost final responses\
\
   The non-INVITE client transaction state machine provides reliability\
   for NITs over unreliable transports (UDP) through retransmission of\
   the request message.  Timer E is set to T1 when a request is\
   initially transmitted.  As long as the machine remains in the Trying\
   state, each time Timer E fires, it will be reset to twice its\
   previous value (capping at T2) and the request is retransmitted.\
\
   If the non-INVITE client transaction state machine sees a provisional\
    response, it transitions to the Proceeding state, where\
   retransmission continues, but the algorithm for resetting Timer E is\
   simply to use T2 instead of doubling at each firing.  (Note that\
   Timer E is not altered during the transition to Proceeding.)\
\
   Making the transition to the Proceeding state before Timer E is reset\
   to T2 can cause recovery from a lost final response to take extra\
   time.  Figure 2 shows recovery from a lost final response with and\
   without a provisional message during this window.  Recovery occurs\
   within 2*T1 in the case without the provisional.  With the\
   provisional, recovery is delayed until T2, which by default is 8*T1.\
\
\
\
Sparks                       Informational                      [Page 3]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
   In practical terms, a provisional response to a NIT in currently\
   deployed networks can delay transaction completion by up to 3.5\
   seconds.\
\
                 UAC       UAS               UAC        UAS\
                  |         |                 |          |\
            ---   |----.    |            ---  |----.     |\
             ^    |     `-->|             ^   |     `--->|\
         E = T1   |         |         E = T1  |    .-----|(provisional)\
             v    |         |             v   |<--'      |\
            ---   |----.    |            ---  |----.     |\
             ^    |     `-->|             ^   |     `--->|\
             |    |   X<----|(lost final) |   |   X<-----|(lost final)\
             |    |         |             |   |          |\
         E = 2*T1 |         |             |   |          |\
             |    |         |             |   |          |\
             |    |         |             |   |          |\
             v    |         |             |   |          |\
            ---   |----.    |             |   |          |\
                  |     `-->|             |   |          |\
                  |   .-----|(final)      |   |          |\
                  |<-'      |             |   |          |\
                  |         |             |   |          |\
                 \\/\\       /\\/           /\\/ /\\/        /\\/\
                                      E = T2\
                 \\/\\       /\\/           /\\/ /\\/        /\\/\
                  |         |             |   |          |\
                  |         |             v   |          |\
                  |         |            ---  |----.     |\
                  |         |                 |     `--->|\
                  |         |                 |    .-----|(final)\
                  |         |                 |<--'      |\
                  |         |                 |          |\
\
                   Figure 2: Provisionals Can Harm Recovery\
\
   No additional delay is introduced if the first provisional response\
   is received after Timer E has reached its maximum reset interval of\
   T2.\
\
1.3.  Delayed responses will temporarily blacklist an element\
\
   A SIP element's use of DNS Service Record Resource Records [3] is\
   specified in RFC 3263 [2].  That specification discusses how SIP\
   ensures high availability by having upstream elements detect failure\
   of downstream elements.  It proceeds to define several types of\
   failure detection and instructions for failover.  Two of the\
   behaviors it describes are important to this document:\
\
\
\
Sparks                       Informational                      [Page 4]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
   o  Within a transaction, transport failure is detected either through\
      an explicit report from the transport layer or through timeout.\
      Note specifically that timeout will indicates transport failure\
      regardless of the transport in use.  When transport failure is\
      detected, the request is retried at the next element from the\
      sorted results of the SRV query.\
\
   o  Between transactions, locations reporting temporary failure\
      (through 503/Retry-After, for example) are not used until their\
      requested black-out period expires.\
\
   The specification notes the benefit of caching locations that are\
   successfully contacted, but does not discuss how such a cache is\
   maintained.  It is unclear whether an element should stop using\
   (temporarily blacklist) a location returned in the SRV query that\
   results in a transport error.  If it does, when should such a\
   location be removed from the blacklist?\
\
   Without such a blacklist (or equivalent mechanism), the intended\
   availability mechanism fails miserably.  Consider traffic between two\
   domains.  Proxy pA in domain A needs to forward a sequence of non-\
   INVITE requests to domain B.  Through DNS SRV, pA discovers pB1 and\
   pB2, and the ordering rules of [2] and [3] indicate it should use pB1\
   first.  The first request to pB1 times out.  Since pA is a proxy and\
   a NIT has a fixed duration, pA has no opportunity to retry the\
   request at pB2.  If pA does not remember pB1's failure, the second\
   request (and all subsequent non-INVITE requests until pB1 recovers)\
   are doomed to the same failure.  Caching would allow the subsequent\
   requests to be tried at pB2.\
\
   Since miserable failure is not acceptable in deployed networks, we\
   should anticipate that elements will, in fact, cache timeout failures\
   between transactions.  Then the race in Figure 1 becomes important.\
   If an element fails to respond "soon enough", it has effectively not\
   responded at all and will be blacklisted at its peer for some period\
   of time.\
\
   (Note that even with caching, the first request timeout results in a\
   timeout failure all the way back to the original submitter.  The\
   failover mechanisms in [2] work well to increase the resiliency of a\
   given INVITE transaction, but do nothing for a given non-INVITE\
   transaction.)\
\
\
\
\
\
\
\
\
\
Sparks                       Informational                      [Page 5]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
1.4.  408 for non-INVITE is not useful\
\
   Consider the race condition in Figure 1 when the final response is\
   408 instead of 200.  Under the current specification, the race is\
   guaranteed to be lost.  Most existing endpoints will emit a 408 for a\
   non-INVITE request 64*T1 after receiving the request if they have not\
   emitted an earlier final response.  Such a 408 is guaranteed to\
   arrive at the next upstream element too late to be useful.  In fact,\
   in the presence of proxies, these messages are even harmful.  When\
   the 408 arrives, each proxy will have already terminated its\
   associated client transaction due to timeout.  Therefore, each proxy\
   must forward the 408 upstream statelessly.  This, in turn, is\
   guaranteed to arrive too late.  As Figure 3 shows, this can\
   ultimately result in bombarding the original requester with spurious\
   408s.  (Note that the proxy's client transaction state machine never\
   enters the Completed state, so Timer K does not enter into play.)\
\
                     UAC        P1         P2         P3         UAS\
                      |          |          |          |          |\
                ---  ===---.     |          |          |          |\
                 ^    |     `-->===---.     |          |          |\
                 |    |          |     `-->===---.     |          |\
                 |    |          |          |     `-->===---.     |\
               64*T1  |          |          |          |     `-->===\
                 |    |          |          |          |          |\
                 |    |          |          |          |          |\
                 v    |          |          |          |          |\
      (timeout) ---  ===         |          |          |          |\
                      |    .-408===         |          |          |\
                      |<--'      |    .-408===         |          |\
                      |    .-408-|<--'      |    .-408===         |\
                      |<--'      |    .-408-|<--'      |    .-408===\
                      |    .-408-|<--'      |    .-408-|<--'      |\
                      |<--'      |    .-408-|<--'      |          |\
                      |    .-408-|<--'      |          |          |\
                      |<--'      |          |          |          |\
                      |          |          |          |          |\
\
                     Figure 3: Late 408s to Non-INVITEs\
\
   This response bombardment is not limited to the 408 response, though\
   it only exists when participating client transaction state machines\
   are timing out.  Figure 4 generalizes Figure 1 to include multiple\
   hops.  Note that even though the UAS responds "in time" to P3, the\
   response is too late for P2, P1, and the UAC.\
\
\
\
\
\
\
Sparks                       Informational                      [Page 6]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
                     UAC        P1         P2         P3         UAS\
                      |          |          |          |          |\
                ---  ===---.     |          |          |          |\
                 ^    |     `-->===---.     |          |          |\
                 |    |          |     `-->===---.     |          |\
                 |    |          |          |     `-->===---.     |\
               64*T1  |          |          |          |     `-->===\
                 |    |          |          |          |          |\
                 |    |          |          |          |          |\
                 v    |          |          |          |          |\
      (timeout) ---  ===         |          |          |          |\
                      |    .-408===         |          |    .-200-|\
                      |<--'      |    .-408===   .-200-|<--'      |\
                      |    .-408-|<--'.-200-|<--'     ===         |\
                      |<--'.-200-|<--'      |          |         ===\
                      |<--'      |          |          |          |\
                      |          |          |          |          |\
\
                  Figure 4: Additional Timeout-Related Error\
\
1.5.  Non-INVITE timeouts doom forking proxies\
\
   A single branch with a delayed or missing final response will\
   dominate the processing at proxy that receives no 2xx responses to a\
   forked non-INVITE request.  This proxy is required to allow all of\
   its client transactions to terminate before choosing a "best\
   response".  This forces the proxy's server transaction to lose the\
   race in Figure 1.  Any response it ultimately forwards (a 401, for\
   example) will arrive at the upstream elements too late to be used.\
   Thus, if no element among the branches would return a 2xx response,\
   failure of a single element (or its transport) dooms the proxy to\
   failure.\
\
1.6.  Mismatched timer values make winning the race harder\
\
   There are many failure scenarios due to misconfiguration or\
   misbehavior that the SIP specification does not discuss.  One is\
   placing two elements with different configured values for T1 and T2\
   on the same network.  Review of Figure 1 illustrates that the race\
   failure is only made more likely in this misconfigured state (it may\
   appear that shortening T1 at the element behaving as a UAS improves\
   this particular situation, but remember that these elements may trade\
   roles on the next request).  Since the protocol provides no mechanism\
   for discovering/negotiating a peer's timer values, exceptional care\
   must be taken when deploying systems with non-defaults to ensure that\
   they will never directly communicate with elements with default\
   values.\
\
\
\
\
Sparks                       Informational                      [Page 7]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
2.  Security Considerations\
\
   This document describes some problems in the core SIP specification\
   [1] related to the SIP non-INVITE requests, the messages other than\
   INVITE that begin transactions.  A few of the problems lead to\
   flooding or forgery risk, and could possibly be exploited by an\
   adversary in a denial of service attack.  Solutions are defined in\
   the companion document [4].\
\
   One solution there prohibits proxies and User Agents from sending 408\
   responses to non-INVITE transactions.  Without this change, proxies\
   automatically generate a storm of useless responses.  An attacker\
   could capitalize on this by enticing User Agents to send non-INVITE\
   requests to a black hole (through social engineering or DNS\
   poisoning) or by selectively dropping responses.\
\
   Another solution prohibits proxies from forwarding late responses.\
   Without this change, an attacker could easily forge messages which\
   appear to be late responses.  All proxies compliant with RFC 3261 are\
   required to forward these responses, wasting bandwidth and CPU and\
   potentially overwhelming target User Agents (especially those with\
   low speed connections).\
\
3.  Acknowledgements\
\
   This document captures many conversations about non-INVITE issues.\
   Significant contributers include Ben Campbell, Gonzalo Camarillo,\
   Steve Donovan, Rohan Mahy, Dan Petrie, Adam Roach, Jonathan\
   Rosenberg, and Dean Willis.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sparks                       Informational                      [Page 8]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
4. Informative References\
\
   [1]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\
        Peterson, J., Sparks, R., Handley, M., and E. Schooler, "SIP:\
        Session Initiation Protocol", RFC 3261, June 2002.\
\
   [2]  Rosenberg, J. and H. Schulzrinne, "Session Initiation Protocol\
        (SIP): Locating SIP Servers", RFC 3263, June 2002.\
\
   [3]  Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for\
        specifying the location of services (DNS SRV)", RFC 2782,\
        February 2000.\
\
   [4]  Sparks, R., "Actions Addressing Identified Issues with the\
        Session Initiation Protocol's (SIP) Non-INVITE Transaction", RFC\
        4320, January 2006.\
\
Author's Address\
\
   Robert J. Sparks\
   Estacado Systems\
   17210 Campbell Road\
   Suite 250\
   Dallas, TX 75252-4203\
\
   EMail: rjsparks@estacado.net\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sparks                       Informational                      [Page 9]\
\
RFC 4321                SIP Non-INVITE Problems             January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Sparks                       Informational                     [Page 10]\
\

doc 17
  field 0
    name titolo
    type string
    value rfc4325.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                       S. Santesson\
Request for Comments: 4325                                     Microsoft\
Updates: 3280                                                 R. Housley\
Category: Standards Track                                 Vigil Security\
                                                           December 2005\
\
\
     Internet X.509 Public Key Infrastructure Authority Information\
           Access Certificate Revocation List (CRL) Extension\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This document updates RFC 3280 by defining the Authority Information\
   Access Certificate Revocation List (CRL) extension.  RFC 3280 defines\
   the Authority Information Access certificate extension using the same\
   syntax.  The CRL extension provides a means of discovering and\
   retrieving CRL issuer certificates.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Terminology ................................................3\
   2. Authority Information Access CRL Extension ......................3\
   3. Security Considerations .........................................5\
   4. References ......................................................5\
      4.1. Normative References .......................................5\
      4.2. Informative References .....................................6\
\
\
\
\
\
\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 1]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
1.  Introduction\
\
   RFC 3280 [PKIX1] specifies the validation of certification paths.\
   One aspect involves the determination that a certificate has not been\
   revoked, and one revocation checking mechanism is the Certificate\
   Revocation List (CRL).  CRL validation is also specified in RFC 3280,\
   which involves the constructions of a valid certification path for\
   the CRL issuer.  Building a CRL issuer certification path from the\
   signer of the CRL to a trust anchor is straightforward when the\
   certificate of the CRL issuer is present in the certification path\
   associated with the target certificate, but it can be complex in\
   other situations.\
\
   There are several legitimate scenarios where the certificate of the\
   CRL issuer is not present, or easily discovered, from the target\
   certification path.  This can be the case when indirect CRLs are\
   used, when the Certification Authority (CA) that issued the target\
   certificate changes its certificate signing key, or when the CA\
   employs separate keys for certificate signing and CRL signing.\
\
   Methods of finding the certificate of the CRL issuer are currently\
   available, such as through an accessible directory location or\
   through use of the Subject Information Access extension in\
   intermediary CA certificates.\
\
   Directory lookup requires existence and access to a directory that\
   has been populated with all of the necessary certificates.  The\
   Subject Information Access extension, which supports building the CRL\
   issuer certification path top-down (in the direction from the trust\
   anchor to the CRL issuer), requires that some certificates in the CRL\
   issuer certification path includes an appropriate Subject Information\
   Access extension.\
\
   RFC 3280 [PKIX1] provides for bottom-up discovery of certification\
   paths through the Authority Information Access extension, where the\
   id-ad-caIssuers access method may specify one or more accessLocation\
   fields that reference CA certificates associated with the certificate\
   containing this extension.\
\
   This document enables the use of the Authority Information Access\
   extension in CRLs, enabling a CRL checking application to use the\
   access method (id-ad-caIssuers) to locate certificates that may be\
   useful in the construction of a valid CRL issuer certification path\
   to an appropriate trust anchor.\
\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 2]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
1.1.  Terminology\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [RFC2119].\
\
2.  Authority Information Access CRL Extension\
\
   This section defines the use of the Authority Information Access\
   extension in a CRL.  The syntax and semantics defined in RFC 3280\
   [PKIX1] for the certificate extensions are also used for the CRL\
   extension.\
\
   This CRL extension MUST NOT be marked critical.\
\
   This extension MUST be identified by the extension object identifier\
   (OID) defined in RFC 3280 (1.3.6.1.5.5.7.1.1), and the\
   AuthorityInfoAccessSyntax MUST be used to form the extension value.\
   For convenience, the ASN.1 [X.680] definition of the Authority\
   Information Access extension is repeated below.\
\
      id-pe-authorityInfoAccess OBJECT IDENTIFIER  ::=  { id-pe 1 }\
\
      AuthorityInfoAccessSyntax  ::=  SEQUENCE SIZE (1..MAX) OF\
                               AccessDescription\
\
      AccessDescription  ::=  SEQUENCE {\
         accessMethod          OBJECT IDENTIFIER,\
         accessLocation        GeneralName  }\
\
      id-ad OBJECT IDENTIFIER  ::=  { id-pkix 48 }\
\
      id-ad-caIssuers OBJECT IDENTIFIER  ::=  { id-ad 2 }\
\
   When present in a CRL, this extension MUST include at least one\
   AccessDescription specifying id-ad-caIssuers as the accessMethod.\
   Access method types other than id-ad-caIssuers MUST NOT be included.\
   At least one instance of AccessDescription SHOULD specify an\
   accessLocation that is an HTTP [HTTP/1.1] or Lightweight Directory\
   Access Protocol [LDAP] Uniform Resource Identifier [URI].\
\
   Where the information is available via HTTP or FTP, accessLocation\
   MUST be a uniformResourceIdentifier and the URI MUST point to a\
   certificate containing file.  The certificate file MUST contain\
   either a single Distinguished Encoding Rules (DER) [X.690] encoded\
   certificate (indicated by the .cer file extension) or a collection of\
   certificates (indicated by the .p7c file extension):\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 3]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
      .cer   A single DER encoded certificate as specified in\
             RFC 2585 [PKIX-CERT].\
\
      .p7c   A "certs-only" CMS message as specified in RFC 2797 [CMC].\
\
     Conforming applications that support HTTP or FTP for accessing\
     certificates MUST be able to accept .cer files and SHOULD be able\
     to accept .p7c files.\
\
     HTTP server implementations accessed via the URI SHOULD use the\
     appropriate MIME content-type for the certificate containing file.\
     Specifically, the HTTP server SHOULD use the content-type\
     application/pkix-cert [PKIX-CERT] for a single DER encoded\
     certificate and application/pkcs7-mime [CMC] for CMS certs-only\
     (PKCS#7).  Consuming clients may use the MIME type and file\
     extension as a hint to the file content, but should not depend\
     solely on the presence of the correct MIME type or file extension\
     in the server response.\
\
     When the accessLocation is a directoryName, the information is to\
     be obtained by the application from whatever directory server is\
     locally configured.  When one CA public key is used to validate\
     signatures on certificates and CRLs, the desired CA certificate is\
     stored in the crossCertificatePair and/or cACertificate attributes\
     as specified in [RFC2587].  When different public keys are used to\
     validate signatures on certificates and CRLs, the desired\
     certificate is stored in the userCertificate attribute as specified\
     in [RFC2587].  Thus, implementations that support the directoryName\
     form of accessLocation MUST be prepared to find the needed\
     certificate in any of these three attributes.  The protocol that an\
     application uses to access the directory (e.g., DAP or LDAP) is a\
     local matter.\
\
     Where the information is available via LDAP, the accessLocation\
     SHOULD be a uniformResourceIdentifier.  The URI MUST specify a\
     distingishedName and attribute(s) and MAY specify a host name\
     (e.g., ldap://ldap.example.com/cn=example%20CA,dc=example,dc=com?\
     cACertificate;binary,crossCertificatePair;binary).  Omitting the\
     host name (e.g.,\
     ldap:///cn=example%20CA,dc=example,dc=com?cACertificate;binary) has\
     the effect of specifying the use of whatever LDAP server is locally\
     configured.  The URI MUST list appropriate attribute descriptions\
     for one or more attributes holding certificates or cross-\
     certificate pairs.\
\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 4]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
3.  Security Considerations\
\
     Implementers should take into account the possible existence of\
     multiple unrelated CAs and CRL issuers with the same name.\
\
     Implementers should be aware of risks involved if the Authority\
     Information Access extensions of corrupted CRLs contain links to\
     malicious code.  Implementers should always take the steps of\
     validating the retrieved data to ensure that the data is properly\
     formed.\
\
4.  References\
\
4.1.  Normative References\
\
   [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate\
               Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2587]   Boeyen, S., Howes, T., and P. Richard, "Internet X.509\
               Public Key Infrastructure: LDAPv2 Schema", RFC 2587, June\
               1999.\
\
   [PKIX1]     Housley, R., Polk, W., Ford, W., and D. Solo, "Internet\
               X.509 Public Key Infrastructure Certificate and\
               Certificate Revocation List (CRL) Profile", RFC 3280,\
               April 2002.\
\
   [HTTP/1.1]  Fielding,  R., Gettys, J., Mogul, J., Frystyk, H.,\
               Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext\
               Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.\
\
   [URI]       Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform\
               Resource Identifier (URI): Generic Syntax", STD 66, RFC\
               3986, January 2005.\
\
   [LDAP]      Wahl, M., Howes, T., and S. Kille, "Lightweight Directory\
               Access Protocol (v3)", RFC 2251, December 1997.\
\
   [PKIX-CERT] Housley, R. and P. Hoffman, "Internet X.509 Public Key\
               Infrastructure Operational Protocols: FTP and HTTP", RFC\
               2585, May 1999.\
\
   [CMC]       Myers, M., Liu, X., Schaad, J., and J. Weinstein,\
               "Certificate Management Messages over CMS", RFC 2797,\
               April 2000.\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 5]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
4.2.  Informative References\
\
   [X.680]     ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002),\
               Information Technology - Abstract Syntax Notation One,\
               2002.\
\
   [X.690]     ITU-T Recommendation X.690 Information Technology - ASN.1\
               encoding rules: Specification of Basic Encoding Rules\
               (BER), Canonical Encoding Rules (CER) and Distinguished\
               Encoding Rules (DER), 1997.\
\
Authors' Addresses\
\
   Stefan Santesson\
   Microsoft\
   Tuborg Boulevard 12\
   2900 Hellerup\
   Denmark\
\
   EMail: stefans@microsoft.com\
\
\
   Russell Housley\
   Vigil Security, LLC\
   918 Spring Knoll Drive\
   Herndon, VA 20170\
   USA\
\
   EMail: housley@vigilsec.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 6]\
\
RFC 4325       Authority Information Access CRL Extension  December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Santesson & Housley         Standards Track                     [Page 7]\
\

doc 18
  field 0
    name titolo
    type string
    value rfc4320.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          R. Sparks\
Request for Comments: 4320                              Estacado Systems\
Updates: 3261                                               January 2006\
Category: Standards Track\
\
\
             Actions Addressing Identified Issues with the\
       Session Initiation Protocol's (SIP) Non-INVITE Transaction\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document describes modifications to the Session Initiation\
   Protocol (SIP) to address problems that have been identified with the\
   SIP non-INVITE transaction.  These modifications reduce the\
   probability of messages losing the race condition inherent in the\
   non-INVITE transaction and reduce useless network traffic.  They also\
   improve the robustness of SIP networks when elements stop responding.\
   These changes update behavior defined in RFC 3261.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Improving the Situation When Responses Are Only Delayed .........2\
      2.1. Action 1: Make the best use of provisional responses .......2\
      2.2. Action 2: Remove the useless late-response storm ...........3\
   3. Improving the Situation When an Element Is Not Going to\
      Respond .........................................................4\
   4. Normative Updates to RFC 3261 ...................................4\
      4.1. Action 1 ...................................................4\
      4.2. Action 2 ...................................................5\
   5. Security Considerations .........................................5\
   6. Contributors ....................................................5\
   7. Normative References ............................................6\
\
\
\
\
\
\
Sparks                      Standards Track                     [Page 1]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
1.  Introduction\
\
   There are a number of unpleasant edge conditions created by the SIP\
   non-INVITE transaction (NIT) model's fixed duration.  The negative\
   aspects of some of these are exacerbated by the effect that\
   provisional responses have on the non-INVITE transaction state\
   machines.  These problems are documented in [3].  In summary:\
\
      A non-INVITE transaction must complete immediately or risk losing\
      a race\
\
      Losing the race will cause the requester to stop sending traffic\
      to the responder (the responder will be temporarily blacklisted)\
\
      Provisional responses can delay recovery from lost final responses\
\
      The 408 response is useless for the non-INVITE transaction\
\
      As non-INVITE transactions through N proxies time-out, there can\
      be an O(N^2) storm of the useless 408 responses\
\
   This document specifies updates to RFC 3261 [1] to improve the\
   behavior of SIP elements when these edge conditions arise.\
\
2.  Improving the Situation When Responses Are Only Delayed\
\
   There are two goals to achieve when we constrain the problem to those\
   cases where all elements are ultimately responsive and networks\
   ultimately deliver messages:\
\
   o  Reduce the probability of losing the race, preferably to the point\
      that it is negligible\
\
   o  Reduce or eliminate useless messaging\
\
2.1.  Action 1: Make the best use of provisional responses\
\
   o  Disallow non-100 provisionals to non-INVITE requests\
\
   o  Disallow 100 Trying to non-INVITE requests before Timer E reaches\
      T2 (for UDP hops)\
\
   o  Allow 100 Trying after Timer E reaches T2 (for UDP hops)\
\
   o  Allow 100 Trying for hops over reliable transports\
\
\
\
\
\
\
Sparks                      Standards Track                     [Page 2]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
   Since non-INVITE transactions must complete rapidly ([3]), any\
   information beyond "I'm here" (which can be provided by a 100 Trying)\
   can be just as usefully delayed to the final response.  Sending non-\
   100 provisionals wastes bandwidth.\
\
   As shown in [3], sending any provisional response inside a NIT before\
   Timer E reaches T2 damages recovery from failure of an unreliable\
   transport.\
\
   Without a provisional, a late final response is the same as no\
   response at all and will likely result in blacklisting the late-\
   responding element ([3]).  If an element is delaying its final\
   response at all, sending a 100 Trying after Timer E reaches T2\
   prevents this blacklisting without damaging recovery from unreliable\
   transport failure.\
\
   Blacklisting on a late response occurs even over reliable transports.\
   Thus, if an element processing a request received over a reliable\
   transport is delaying its final response at all, sending a 100 Trying\
   well in advance of the timeout will prevent blacklisting.  Sending a\
   100 Trying immediately will not harm the transaction as it would over\
   UDP, but a policy of always sending such a message results in\
   unnecessary traffic.  A policy of sending a 100 Trying after the\
   period of time in which Timer E reaches T2 had this been a UDP hop is\
   one reasonable compromise.\
\
2.2.  Action 2: Remove the useless late-response storm\
\
   o  Disallow 408 to non-INVITE requests\
\
   o  Absorb stray non-INVITE responses at proxies\
\
   A 408 to non-INVITE will always arrive too late to be useful ([3]),\
   The client already has full knowledge of the timeout.  The only\
   information this message would convey is whether or not the server\
   believed the transaction timed out.  However, with the current design\
   of the NIT, a client cannot do anything with this knowledge.  Thus,\
   the 408 is simply wasting network resources and contributes to the\
   response bombardment illustrated in [3].\
\
   Late non-INVITE responses by definition arrive after the client\
   transaction's Timer F has fired and the client transaction has\
   entered the Terminated state.  Thus, these responses cannot be\
   distinguished from strays.  Changing the protocol behavior to\
   prohibit forwarding non-INVITE stray responses stops the late-\
   response storm.  It also improves the proxy's defenses against\
   malicious users counting on the RFC 3261 requirement to forward such\
   strays.\
\
\
\
Sparks                      Standards Track                     [Page 3]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
3.  Improving the Situation When an Element Is Not Going to Respond\
\
   When we expand the scope of the problem to also deal with element or\
   network failure, we have more goals to achieve:\
\
   o  Identifying when an element is non-responsive\
\
   o  Minimizing or eliminating falsely identifying responsive elements\
      as non-responsive\
\
   o  Avoiding non-responsive elements with future requests\
\
   Action 1 helps with the first two goals, dramatically improving an\
   element's ability to distinguish between failure and delayed response\
   from the next downstream element.  Some response, either provisional\
   or final, will almost certainly be received before the transaction\
   times out.  So, an element can more safely assume that no response at\
   all indicates that the peer is not available and follow the existing\
   requirements in [1] and [2] for that case.\
\
   Achieving the third goal requires more aggressive changes to the\
   protocol.  As noted in [3], future non-INVITE transactions are likely\
   to fail again unless the implementation takes steps beyond what is\
   defined in [1] and [2] to remember non-responsive destinations\
   between transactions.  Standardizing these extra steps is left to\
   future work.\
\
4.  Normative Updates to RFC 3261\
\
4.1.  Action 1\
\
   An SIP element MUST NOT send any provisional response with a Status-\
   Code other than 100 to a non-INVITE request.\
\
   An SIP element MUST NOT respond to a non-INVITE request with a\
   Status-Code of 100 over any unreliable transport, such as UDP, before\
   the amount of time it takes a client transaction's Timer E to be\
   reset to T2.\
\
   An SIP element MAY respond to a non-INVITE request with a Status-Code\
   of 100 over a reliable transport at any time.\
\
   Without regard to transport, an SIP element MUST respond to a non-\
   INVITE request with a Status-Code of 100 if it has not otherwise\
   responded after the amount of time it takes a client transaction's\
   Timer E to be reset to T2.\
\
\
\
\
\
Sparks                      Standards Track                     [Page 4]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
4.2.  Action 2\
\
   A transaction-stateful SIP element MUST NOT send a response with\
   Status-Code of 408 to a non-INVITE request.  As a consequence, an\
   element that cannot respond before the transaction expires will not\
   send a final response at all.\
\
   A transaction-stateful SIP proxy MUST NOT send any response to a\
   non-INVITE request unless it has a matching server transaction that\
   is not in the Terminated state.  As a consequence, this proxy will\
   not forward any "late" non-INVITE responses.\
\
5.  Security Considerations\
\
   This document makes a number of small changes to the core SIP\
   specification [1] to improve the robustness of SIP non-INVITE\
   transactions.  Many of these actions also prevent flooding and\
   denial-of-service attacks.\
\
   One change prohibits proxies and user agents from sending 408\
   responses to non-INVITE transactions.  Without this change, proxies\
   automatically generate a storm of useless responses as described in\
   [3].  An attacker could capitalize on this by enticing user agents to\
   send non-INVITE requests to a black hole (through social engineering\
   or DNS poisoning) or by selectively dropping responses.\
\
   Another change prohibits proxies from forwarding late responses.\
   Without this change, an attacker could easily forge messages that\
   appear to be late responses.  All proxies compliant with RFC 3261 are\
   required to forward these responses, wasting bandwidth and CPU and\
   potentially overwhelming target user agents (especially those with\
   low-speed connections).\
\
   The remainder of these changes do not affect the security of the SIP\
   protocol.\
\
6.  Contributors\
\
   Rohan Mahy provided the Security Considerations section.\
\
\
\
\
\
\
\
\
\
\
\
\
Sparks                      Standards Track                     [Page 5]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
7.  Normative References\
\
   [1]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\
        Peterson, J., Sparks, R., Handley, M., and E. Schooler, "SIP:\
        Session Initiation Protocol", RFC 3261, June 2002.\
\
   [2]  Rosenberg, J. and H. Schulzrinne, "Session Initiation Protocol\
        (SIP): Locating SIP Servers", RFC 3263, June 2002.\
\
   [3]  Sparks, R., "Problems Identified Associated with the Session\
        Initiation Protocol's (SIP) Non-INVITE Transaction", RFC 4321,\
        January 2006.\
\
Author's Address\
\
   Robert J. Sparks\
   Estacado Systems\
   17210 Campbell Road\
   Suite 250\
   Dallas, TX 75252-4203\
\
   EMail: rjsparks@estacado.net\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Sparks                      Standards Track                     [Page 6]\
\
RFC 4320                 SIP Non-INVITE Actions             January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Sparks                      Standards Track                     [Page 7]\
\

doc 19
  field 0
    name titolo
    type string
    value rfc4311.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          R. Hinden\
Request for Comments: 4311                                         Nokia\
Updates: 2461                                                  D. Thaler\
Category: Standards Track                                      Microsoft\
                                                           November 2005\
\
                    IPv6 Host-to-Router Load Sharing\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   The original IPv6 conceptual sending algorithm does not do load\
   sharing among equivalent IPv6 routers, and suggests schemes that can\
   be problematic in practice.  This document updates the conceptual\
   sending algorithm in RFC 2461 so that traffic to different\
   destinations can be distributed among routers in an efficient\
   fashion.\
\
1.  Introduction\
\
   In the conceptual sending algorithm in [ND] and in the optional\
   extension in [ROUTERSEL], a next hop is chosen when no destination\
   cache entry exists for an off-link destination or when communication\
   through an existing router is failing.  Normally, a router is\
   selected the first time traffic is sent to a specific destination IP\
   address.  Subsequent traffic to the same destination address\
   continues to use the same router unless there is some reason to\
   change to a different router (e.g., a redirect message is received,\
   or the router is found to be unreachable).\
\
   In addition, as described in [ADDRSEL], the choice of next hop may\
   also affect the choice of source address, and hence indirectly (and\
   to a lesser extent) may affect the router used for inbound traffic as\
   well.\
\
\
\
\
\
\
Hinden & Thaler             Standards Track                     [Page 1]\
\
RFC 4311            IPv6 Host-to-Router Load Sharing       November 2005\
\
\
   In both the base sending algorithm and in the optional extension,\
   sometimes a host has a choice of multiple equivalent routers for a\
   destination.  That is, all other factors are equal and a host must\
   break a tie via some implementation-specific means.\
\
   It is often desirable when there is more than one equivalent router\
   that hosts distribute their outgoing traffic among these routers.\
   This shares the load among multiple routers and provides better\
   performance for the host's traffic.\
\
   On the other hand, load sharing can be undesirable in situations\
   where sufficient capacity is available through a single router and\
   the traffic patterns could be more predictable by using a single\
   router; in particular, this helps to diagnose connectivity problems\
   beyond the first-hop routers.\
\
   [ND] does not require any particular behavior in this respect.  It\
   specifies that an implementation may always choose the same router\
   (e.g., the first in the list) or may cycle through the routers in a\
   round-robin manner.  Both of these suggestions are problematic.\
\
   Clearly, always choosing the same router does not provide load\
   sharing.  Some problems with load sharing using naive tie-breaking\
   techniques such as round-robin and random are discussed in\
   [MULTIPATH].  While the destination cache provides some stability\
   since the determination is not per packet, cache evictions or\
   timeouts can still result in unstable or unpredictable paths over\
   time, lowering the performance and making it harder to diagnose\
   problems.  Round-robin selection may also result in synchronization\
   issues among hosts, where in the worst case the load is concentrated\
   on one router at a time.\
\
   In the remainder of this document, the key words "MUST", "MUST NOT",\
   "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",\
   "RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as\
   described in [RFC2119].\
\
2.  Load Sharing\
\
   When a host chooses from multiple equivalent routers, it SHOULD\
   support choosing using some method that distributes load for\
   different destinations among the equivalent routers rather than\
   always choosing the same router (e.g., the first in the list).  This\
   memo takes no stance on whether the support for load sharing should\
   be turned on or off by default.  Furthermore, a host that does\
   attempt to distribute load among routers SHOULD use a hash-based\
   scheme that takes (at least) the destination IP address into account,\
   such as those described in [MULTIPATH], for choosing a router to use.\
\
\
\
Hinden & Thaler             Standards Track                     [Page 2]\
\
RFC 4311            IPv6 Host-to-Router Load Sharing       November 2005\
\
\
   Note that traffic for a given destination address will use the same\
   router as long as the Destination Cache Entry for the destination\
   address is not deleted.  With a hash-based scheme, traffic for a\
   given destination address will use the same router over time even if\
   the Destination Cache Entry is deleted, as long as the list of\
   equivalent routers remains the same.\
\
3.  Security Considerations\
\
   As mentioned in [MULTIPATH], when next-hop selection is predictable,\
   an application can synthesize traffic that will all hash the same,\
   making it possible to launch a denial-of-service attack against the\
   load-sharing algorithm, and overload a particular router.  This can\
   even be done by a remote application that can cause a host to respond\
   to a given destination address.  A special case of this is when the\
   same (single) next-hop is always selected, such as in the algorithm\
   allowed by [ND].  Introducing hashing can make such an attack more\
   difficult; the more unpredictable the hash is, the harder it becomes\
   to conduct a denial-of-service attack against any single router.\
\
   However, a malicious local application can bypass the algorithm for\
   its own traffic by using mechanisms such as raw sockets, and remote\
   attackers can still overload the routers directly.  Hence, the\
   mechanisms discussed herein have no significant incremental impact on\
   Internet infrastructure security.\
\
4.  Acknowledgements\
\
   The authors of this document would like to thank Erik Nordmark, Brian\
   Haberman, Steve Deering, Aron Silverton, Christian Huitema, and Pekka\
   Savola.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden & Thaler             Standards Track                     [Page 3]\
\
RFC 4311            IPv6 Host-to-Router Load Sharing       November 2005\
\
\
5.  Normative References\
\
   [ND]         Narten, T., Nordmark, E., and W. Simpson, "Neighbor\
                Discovery for IP Version 6 (IPv6)", RFC 2461, December\
                1998.\
\
   [RFC2119]    Bradner, S., "Key words for use in RFCs to Indicate\
                Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [ADDRSEL]    Draves, R., "Default Address Selection for Internet\
                Protocol version 6 (IPv6)", RFC 3484, February 2003.\
\
   [ROUTERSEL]  Draves, R. and D. Thaler, "Default Router Preferences\
                and More-Specific Routes", RFC 4191, November 2005.\
\
6.  Informative References\
\
   [MULTIPATH]  Thaler, D. and C. Hopps, "Multipath Issues in Unicast\
                and Multicast Next-Hop Selection", RFC 2991, November\
                2000.\
\
Authors' Addresses\
\
   Robert Hinden\
   Nokia\
   313 Fairchild Drive\
   Mountain View, CA  94043\
\
   Phone: +1 650 625-2004\
   EMail: bob.hinden@nokia.com\
\
\
   Dave Thaler\
   Microsoft Corporation\
   One Microsoft Way\
   Redmond, WA  98052\
\
   Phone: +1 425 703 8835\
   EMail: dthaler@microsoft.com\
\
\
\
\
\
\
\
\
\
\
\
\
Hinden & Thaler             Standards Track                     [Page 4]\
\
RFC 4311            IPv6 Host-to-Router Load Sharing       November 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Hinden & Thaler             Standards Track                     [Page 5]\
\

doc 20
  field 0
    name titolo
    type string
    value rfc4330.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           D. Mills\
Request for Comments: 4330                        University of Delaware\
Obsoletes: 2030, 1769                                       January 2006\
Category: Informational\
\
\
             Simple Network Time Protocol (SNTP) Version 4\
                         for IPv4, IPv6 and OSI\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This memorandum describes the Simple Network Time Protocol Version 4\
   (SNTPv4), which is a subset of the Network Time Protocol (NTP) used\
   to synchronize computer clocks in the Internet.  SNTPv4 can be used\
   when the ultimate performance of a full NTP implementation based on\
   RFC 1305 is neither needed nor justified.  When operating with\
   current and previous NTP and SNTP versions, SNTPv4 requires no\
   changes to the specifications or known implementations, but rather\
   clarifies certain design features that allow operation in a simple,\
   stateless remote-procedure call (RPC) mode with accuracy and\
   reliability expectations similar to the UDP/TIME protocol described\
   in RFC 868.\
\
   This memorandum obsoletes RFC 1769, which describes SNTP Version 3\
   (SNTPv3), and RFC 2030, which describes SNTPv4.  Its purpose is to\
   correct certain inconsistencies in the previous documents and to\
   clarify header formats and protocol operations for NTPv3 (IPv4) and\
   SNTPv4 (IPv4, IPv6, and OSI), which are also used for SNTP.  A\
   further purpose is to provide guidance for home and business client\
   implementations for routers and other consumer devices to protect the\
   server population from abuse.  A working knowledge of the NTPv3\
   specification, RFC 1305, is not required for an implementation of\
   SNTP.\
\
\
\
\
\
\
\
\
Mills                        Informational                      [Page 1]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Specification of Requirements ..............................5\
   2. Operating Modes and Addressing ..................................5\
   3. NTP Timestamp Format ............................................6\
   4. Message Format ..................................................8\
   5. SNTP Client Operations .........................................13\
   6. SNTP Server Operations .........................................16\
   7. Configuration and Management ...................................19\
   8. The Kiss-o'-Death Packet .......................................20\
   9. On Being a Good Network Citizen ................................21\
   10. Best Practices ................................................21\
   11. Security Considerations .......................................24\
   12. Acknowledgements ..............................................24\
   13. Contributors ..................................................24\
   14. Informative References ........................................25\
\
1.  Introduction\
\
   The Network Time Protocol Version 3 (NTPv3), specified in RFC 1305\
   [MIL92], is widely used to synchronize computer clocks in the global\
   Internet.  It provides comprehensive mechanisms to access national\
   time and frequency dissemination services, organize the NTP subnet of\
   servers and clients, and adjust the system clock in each participant.\
   In most places of the Internet of today, NTP provides accuracies of\
   1-50 ms, depending on the characteristics of the synchronization\
   source and network paths.\
\
   RFC 1305 specifies the NTP protocol machine in terms of events,\
   states, transition functions and actions, and engineered algorithms\
   to improve the timekeeping quality and to mitigate several\
   synchronization sources, some of which may be faulty.  To achieve\
   accuracies in the low milliseconds over paths spanning major portions\
   of the Internet, these intricate algorithms, or their functional\
   equivalents, are necessary.  In many applications, accuracies on the\
   order of significant fractions of a second are acceptable.  In simple\
   home router applications, accuracies of up to a minute may suffice.\
   In such cases, simpler protocols, such as the Time Protocol specified\
   in RFC 868 [POS83], have been used for this purpose.  These protocols\
   involve an RPC exchange where the client requests the time of day and\
   the server returns it in seconds past a known reference epoch.\
\
   NTP is designed for use by clients and servers with a wide range of\
   capabilities and over a wide range of network jitter and clock\
   frequency wander characteristics.  Many users of NTP in the Internet\
   of today use a software distribution available from www.ntp.org.  The\
   distribution, which includes the full suite of NTP options,\
\
\
\
Mills                        Informational                      [Page 2]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   mitigation algorithms, and security schemes, is a relatively complex,\
   real-time application.  Although the software has been ported to a\
   wide variety of hardware platforms ranging from personal computers to\
   supercomputers, its sheer size and complexity is not appropriate for\
   many applications.  Accordingly, it is useful to explore alternative\
   strategies using simpler software appropriate for less stringent\
   accuracy expectations.\
\
   This memo describes the Simple Network Time Protocol Version 4\
   (SNTPv4), which is a simplified access paradigm for servers and\
   clients using current and previous versions of NTP and SNTP.  The\
   access paradigm is identical to the UDP/TIME Protocol, and, in fact,\
   it should be easy to adapt a UDP/TIME client implementation, say for\
   a personal computer, to operate using SNTP.  Moreover, SNTP is also\
   designed to operate in a dedicated server configuration including an\
   integrated radio clock.  With careful design and control of the\
   various latencies in the system, which is practical in a dedicated\
   design, it is possible to deliver time accurate on the order of\
   microseconds.\
\
   The only significant protocol change in SNTPv4 from previous SNTP\
   versions is a modified header interpretation to accommodate Internet\
   Protocol Version 6 (IPv6) (RFC 2460) and OSI (RFC 1629) addressing.\
   However, SNTPv4 includes certain optional extensions to the basic NTP\
   Version 3 (NTPv3) model, including a manycast mode and a public-key-\
   based authentication scheme designed specifically for broadcast and\
   manycast applications.  Although the manycast mode is described in\
   this memo, the authentication scheme is described in another RFC to\
   be submitted later.  Until such time that a definitive NTPv4\
   specification is published, the manycast and authentication features\
   should be considered provisional.  In addition, this memo introduces\
   the kiss-o'-death message, which can be used by servers to suppress\
   client requests as circumstances require.\
\
   When operating with current and previous versions of NTP and SNTP,\
   SNTPv4 requires no changes to the protocol or implementations now\
   running or likely to be implemented specifically for future NTP or\
   SNTP versions.  The NTP and SNTP packet formats are the same, and the\
   arithmetic operations to calculate the client time, clock offset, and\
   roundtrip delay are the same.  To an NTP or SNTP server, NTP and SNTP\
   clients are indistinguishable; to an NTP or SNTP client, NTP and SNTP\
   servers are indistinguishable.  Like NTP servers operating in non-\
   symmetric modes, SNTP servers are stateless and can support large\
   numbers of clients; however, unlike most NTP clients, SNTP clients\
   normally operate with only a single server at a time.\
\
   The full degree of reliability ordinarily expected of NTP servers is\
   possible only using redundant sources, diverse paths, and the crafted\
\
\
\
Mills                        Informational                      [Page 3]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   algorithms of a full NTP implementation.  It is strongly recommended\
   that SNTP clients be used only at the extremities of the\
   synchronization subnet.  SNTP clients should operate only at the\
   leaves (highest stratum) of the subnet and in configurations where no\
   NTP or SNTP client is dependent on another SNTP client for\
   synchronization.  SNTP servers should operate only at the root\
   (stratum 1) of the subnet, and then only in configurations where no\
   other source of synchronization other than a reliable radio clock or\
   telephone modem is available.\
\
   An important provision in this memo is the interpretation of certain\
   NTP header fields that provide for IPv6 [DEE98] and OSI [COL94]\
   addressing.  The only significant difference between the NTP and\
   SNTPv4 header formats is the four-octet Reference Identifier field,\
   which is used primarily to detect and avoid synchronization loops.\
   In all NTP and SNTP versions providing IPv4 addressing, primary\
   servers use a four-character ASCII reference clock identifier in this\
   field, whereas secondary servers use the 32-bit IPv4 address of the\
   synchronization source.  In SNTPv4 providing IPv6 and OSI addressing,\
   primary servers use the same clock identifier, but secondary servers\
   use the first 32 bits of the MD5 hash of the IPv6 or NSAP address of\
   the synchronization source.  A further use of this field is when the\
   server sends a kiss-o'-death message, documented later in this memo.\
\
      NTP Version 4 (NTPv4), now in deployment, but not yet the subject\
      of a standards document, uses the same Reference Identifier field\
      as SNTPv4.\
\
   In the case of OSI, the Connectionless Transport Service (CLTS) is\
   used as in [ISO86].  Each SNTP packet is transmitted as the TS-\
   Userdata parameter of a T-UNITDATA Request primitive.  Alternately,\
   the header can be encapsulated in a Transport Protocol Data Unit\
   (TPDU), which itself is transported using UDP, as described in RFC\
   1240 [DOB91].  It is not advised that NTP be operated at the upper\
   layers of the OSI stack, such as might be inferred from RFC 1698\
   [FUR94], as this could seriously degrade accuracy.  With the header\
   formats defined in this memo, it is in principle possible to\
   interwork between servers and clients of one protocol family and\
   another, although the practical difficulties may make this\
   inadvisable.\
\
      In the following, indented paragraphs such as this one contain\
      information not required by the formal protocol specification, but\
      considered good practice in protocol implementations.\
\
   This memo is organized as follows.  Section 2 describes how the\
   protocol works, the various modes, and how IP addresses and UDP ports\
   are used.  Section 3 describes the NTP timestamp format, and Section\
\
\
\
Mills                        Informational                      [Page 4]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   4 the NTP message format.  Section 5 summarizes SNTP client\
   operations, and Section 6 summarizes SNTP server operations.  Section\
   7 summarizes operation and management issues.  Section 8 describes\
   the kiss-o'-death message, newly minted with functions similar to the\
   ICMP Source Quench and ICMP Destination Unreachable messages.\
   Section 9 summarizes design issues important for good network\
   citizenry and presents an example algorithm designed to give good\
   reliability while minimizing network and server resource demands.\
\
1.1.  Specification of Requirements\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [BRA97].\
\
2.  Operating Modes and Addressing\
\
   Unless excepted in context, a reference to broadcast address means\
   IPv4 broadcast address, IPv4 multicast group address, or IPv6 address\
   of appropriate scope.  Further information on the broadcast/multicast\
   model is in RFC 1112 [DEE89].  Details of address format, scoping\
   rules, etc., are beyond the scope of this memo.  SNTPv4 can operate\
   with either unicast (point to point), broadcast (point to\
   multipoint), or manycast (multipoint to point) addressing modes.  A\
   unicast client sends a request to a designated server at its unicast\
   address and expects a reply from which it can determine the time and,\
   optionally, the roundtrip delay and clock offset relative to the\
   server.  A broadcast server periodically sends an unsolicited message\
   to a designated broadcast address.  A broadcast client listens on\
   this address and ordinarily sends no requests.\
\
   Manycast is an extension of the anycast paradigm described in RFC\
   1546 [PAR93].  It is designed for use with a set of cooperating\
   servers whose addresses are not known beforehand.  The manycast\
   client sends an ordinary NTP client request to a designated broadcast\
   address.  One or more manycast servers listen on that address.  Upon\
   receiving a request, a manycast server sends an ordinary NTP server\
   reply to the client.  The client then mobilizes an association for\
   each server found and continues operation with all of them.\
   Subsequently, the NTP mitigation algorithms operate to cast out all\
   except the best three.\
\
      Broadcast servers should respond to client unicast requests, as\
      well as send unsolicited broadcast messages.  Broadcast clients\
      may send unicast requests in order to measure the network\
      propagation delay between the server and client and then continue\
      operation in listen-only mode.  However, broadcast servers may\
\
\
\
\
Mills                        Informational                      [Page 5]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
      choose not to respond to unicast requests, so unicast clients\
      should be prepared to abandon the measurement and assume a default\
      value for the delay.\
\
   The client and server addresses are assigned following the usual\
   IPv4, IPv6 or OSI conventions.  For NTP multicast, the IANA has\
   reserved the IPv4 group address 224.0.1.1 and the IPv6 address ending\
   :101 with appropriate scope.  The NTP broadcast address for OSI has\
   yet to be determined.  Notwithstanding the IANA reserved addresses,\
   other multicast addresses can be used that do not conflict with\
   others assigned in scope.  The scoping, routing, and group membership\
   procedures are determined by considerations beyond the scope of this\
   memo.\
\
      It is important to adjust the time-to-live (TTL) field in the IP\
      header of multicast messages to a reasonable value in order to\
      limit the network resources used by this (and any other) multicast\
      service.  Only multicast clients in scope will receive multicast\
      server messages.  Only cooperating manycast servers in scope will\
      reply to a client request.  The engineering principles that\
      determine the proper values to be used are beyond the scope of\
      this memo.\
\
      In the case of SNTP as specified herein, there is a very real\
      vulnerability that SNTP broadcast clients can be disrupted by\
      misbehaving or hostile SNTP or NTP broadcast servers elsewhere in\
      the Internet.  It is strongly recommended that access controls\
      and/or cryptographic authentication means be provided for\
      additional security in such cases.\
\
      It is intended that IP broadcast addresses will be used primarily\
      in IP subnets and LAN segments including a fully functional NTP\
      server with a number of dependent SNTP broadcast clients on the\
      same subnet, and that IP multicast group addresses will be used\
      only in cases where the TTL is engineered specifically for each\
      service domain.  However, these uses are not integral to the SNTP\
      specification.\
\
3.  NTP Timestamp Format\
\
   SNTP uses the standard NTP timestamp format described in RFC 1305 and\
   previous versions of that document.  In conformance with standard\
   Internet practice, NTP data are specified as integer or fixed-point\
   quantities, with bits numbered in big-endian fashion from 0 starting\
   at the left or most significant end.  Unless specified otherwise, all\
   quantities are unsigned and may occupy the full field width with an\
   implied 0 preceding bit 0.\
\
\
\
\
Mills                        Informational                      [Page 6]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   Because NTP timestamps are cherished data and, in fact, represent the\
   main product of the protocol, a special timestamp format has been\
   established.  NTP timestamps are represented as a 64-bit unsigned\
   fixed-point number, in seconds relative to 0h on 1 January 1900.  The\
   integer part is in the first 32 bits, and the fraction part in the\
   last 32 bits.  In the fraction part, the non-significant low-order\
   bits are not specified and are ordinarily set to 0.\
\
      It is advisable to fill the non-significant low-order bits of the\
      timestamp with a random, unbiased bitstring, both to avoid\
      systematic roundoff errors and to provide loop detection and\
      replay detection (see below).  It is important that the bitstring\
      be unpredictable by an intruder.  One way of doing this is to\
      generate a random 128-bit bitstring at startup.  After that, each\
      time the system clock is read, the string consisting of the\
      timestamp and bitstring is hashed with the MD5 algorithm, then the\
      non-significant bits of the timestamp are copied from the result.\
\
   The NTP format allows convenient multiple-precision arithmetic and\
   conversion to UDP/TIME message (seconds), but does complicate the\
   conversion to ICMP Timestamp message (milliseconds) and Unix time\
   values (seconds and microseconds or seconds and nanoseconds).  The\
   maximum number that can be represented is 4,294,967,295 seconds with\
   a precision of about 232 picoseconds, which should be adequate for\
   even the most exotic requirements.\
\
                           1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                           Seconds                             |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                  Seconds Fraction (0-padded)                  |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Note that since some time in 1968 (second 2,147,483,648), the most\
   significant bit (bit 0 of the integer part) has been set and that the\
   64-bit field will overflow some time in 2036 (second 4,294,967,296).\
   There will exist a 232-picosecond interval, henceforth ignored, every\
   136 years when the 64-bit field will be 0, which by convention is\
   interpreted as an invalid or unavailable timestamp.\
\
      As the NTP timestamp format has been in use for over 20 years, it\
      is possible that it will be in use 32 years from now, when the\
      seconds field overflows.  As it is probably inappropriate to\
      archive NTP timestamps before bit 0 was set in 1968, a convenient\
      way to extend the useful life of NTP timestamps is the following\
      convention: If bit 0 is set, the UTC time is in the range 1968-\
      2036, and UTC time is reckoned from 0h 0m 0s UTC on 1 January\
\
\
\
Mills                        Informational                      [Page 7]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
      1900.  If bit 0 is not set, the time is in the range 2036-2104 and\
      UTC time is reckoned from 6h 28m 16s UTC on 7 February 2036.  Note\
      that when calculating the correspondence, 2000 is a leap year, and\
      leap seconds are not included in the reckoning.\
\
      The arithmetic calculations used by NTP to determine the clock\
      offset and roundtrip delay require the client time to be within 34\
      years of the server time before the client is launched.  As the\
      time since the Unix base 1970 is now more than 34 years, means\
      must be available to initialize the clock at a date closer to the\
      present, either with a time-of-year (TOY) chip or from firmware.\
\
4.  Message Format\
\
   Both NTP and SNTP are clients of the User Datagram Protocol (UDP)\
   specified in RFC 768 [POS80].  The structures of the IP and UDP\
   headers are described in the cited specification documents and will\
   not be detailed further here.  The UDP port number assigned by the\
   IANA to NTP is 123.  The SNTP client should use this value in the UDP\
   Destination Port field for client request messages.  The Source Port\
   field of these messages can be any nonzero value chosen for\
   identification or multiplexing purposes.  The server interchanges\
   these fields for the corresponding reply messages.\
\
      This differs from the RFC 2030 specifications, which required both\
      the source and destination ports to be 123.  The intent of this\
      change is to allow the identification of particular client\
      implementations (which are now allowed to use unreserved port\
      numbers, including ones of their choosing) and to attain\
      compatibility with Network Address Port Translation (NAPT)\
      described in RFC 2663 [SRI99] and RFC 3022 [SRI01].\
\
   Figure 1 is a description of the NTP and SNTP message format, which\
   follows the IP and UDP headers in the message.  This format is\
   identical to the NTP message format described in RFC 1305, with the\
   exception of the Reference Identifier field described below.  For\
   SNTP client messages, most of these fields are zero or initialized\
   with pre-specified data.  For completeness, the function of each\
   field is briefly summarized below.\
\
\
\
\
\
\
\
\
\
\
\
\
Mills                        Informational                      [Page 8]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
                           1                   2                   3\
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9  0  1\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |LI | VN  |Mode |    Stratum    |     Poll      |   Precision    |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                          Root  Delay                           |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                       Root  Dispersion                         |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                     Reference Identifier                       |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                                |\
      |                    Reference Timestamp (64)                    |\
      |                                                                |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                                |\
      |                    Originate Timestamp (64)                    |\
      |                                                                |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                                |\
      |                     Receive Timestamp (64)                     |\
      |                                                                |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                                |\
      |                     Transmit Timestamp (64)                    |\
      |                                                                |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                 Key Identifier (optional) (32)                 |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
      |                                                                |\
      |                                                                |\
      |                 Message Digest (optional) (128)                |\
      |                                                                |\
      |                                                                |\
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
                        Figure 1.  NTP Packet Header\
\
   Leap Indicator (LI): This is a two-bit code warning of an impending\
   leap second to be inserted/deleted in the last minute of the current\
   day.  This field is significant only in server messages, where the\
   values are defined as follows:\
\
\
\
\
\
\
\
\
\
Mills                        Informational                      [Page 9]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
      LI       Meaning\
      ---------------------------------------------\
      0        no warning\
      1        last minute has 61 seconds\
      2        last minute has 59 seconds\
      3        alarm condition (clock not synchronized)\
\
   On startup, servers set this field to 3 (clock not synchronized), and\
   set this field to some other value when synchronized to the primary\
   reference clock.  Once set to a value other than 3, the field is\
   never set to that value again, even if all synchronization sources\
   become unreachable or defective.\
\
   Version Number (VN): This is a three-bit integer indicating the\
   NTP/SNTP version number, currently 4.  If necessary to distinguish\
   between IPv4, IPv6, and OSI, the encapsulating context must be\
   inspected.\
\
   Mode: This is a three-bit number indicating the protocol mode.  The\
   values are defined as follows:\
\
      Mode     Meaning\
      ------------------------------------\
      0        reserved\
      1        symmetric active\
      2        symmetric passive\
      3        client\
      4        server\
      5        broadcast\
      6        reserved for NTP control message\
      7        reserved for private use\
\
   In unicast and manycast modes, the client sets this field to 3\
   (client) in the request, and the server sets it to 4 (server) in the\
   reply.  In broadcast mode, the server sets this field to 5\
   (broadcast).  The other modes are not used by SNTP servers and\
   clients.\
\
   Stratum: This is an eight-bit unsigned integer indicating the\
   stratum.  This field is significant only in SNTP server messages,\
   where the values are defined as follows:\
\
      Stratum  Meaning\
      ----------------------------------------------\
      0        kiss-o'-death message (see below)\
      1        primary reference (e.g., synchronized by radio clock)\
      2-15     secondary reference (synchronized by NTP or SNTP)\
      16-255   reserved\
\
\
\
Mills                        Informational                     [Page 10]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   Poll Interval: This is an eight-bit unsigned integer used as an\
   exponent of two, where the resulting value is the maximum interval\
   between successive messages in seconds.  This field is significant\
   only in SNTP server messages, where the values range from 4 (16 s) to\
   17 (131,072 s -- about 36 h).\
\
   Precision: This is an eight-bit signed integer used as an exponent of\
   two, where the resulting value is the precision of the system clock\
   in seconds.  This field is significant only in server messages, where\
   the values range from -6 for mains-frequency clocks to -20 for\
   microsecond clocks found in some workstations.\
\
   Root Delay: This is a 32-bit signed fixed-point number indicating the\
   total roundtrip delay to the primary reference source, in seconds\
   with the fraction point between bits 15 and 16.  Note that this\
   variable can take on both positive and negative values, depending on\
   the relative time and frequency offsets.  This field is significant\
   only in server messages, where the values range from negative values\
   of a few milliseconds to positive values of several hundred\
   milliseconds.\
\
      Code       External Reference Source\
      ------------------------------------------------------------------\
      LOCL       uncalibrated local clock\
      CESM       calibrated Cesium clock\
      RBDM       calibrated Rubidium clock\
      PPS        calibrated quartz clock or other pulse-per-second\
                 source\
      IRIG       Inter-Range Instrumentation Group\
      ACTS       NIST telephone modem service\
      USNO       USNO telephone modem service\
      PTB        PTB (Germany) telephone modem service\
      TDF        Allouis (France) Radio 164 kHz\
      DCF        Mainflingen (Germany) Radio 77.5 kHz\
      MSF        Rugby (UK) Radio 60 kHz\
      WWV        Ft. Collins (US) Radio 2.5, 5, 10, 15, 20 MHz\
      WWVB       Boulder (US) Radio 60 kHz\
      WWVH       Kauai Hawaii (US) Radio 2.5, 5, 10, 15 MHz\
      CHU        Ottawa (Canada) Radio 3330, 7335, 14670 kHz\
      LORC       LORAN-C radionavigation system\
      OMEG       OMEGA radionavigation system\
      GPS        Global Positioning Service\
\
                     Figure 2.  Reference Identifier Codes\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 11]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   Root Dispersion: This is a 32-bit unsigned fixed-point number\
   indicating the maximum error due to the clock frequency tolerance, in\
   seconds with the fraction point between bits 15 and 16.  This field\
   is significant only in server messages, where the values range from\
   zero to several hundred milliseconds.\
\
   Reference Identifier: This is a 32-bit bitstring identifying the\
   particular reference source.  This field is significant only in\
   server messages, where for stratum 0 (kiss-o'-death message) and 1\
   (primary server), the value is a four-character ASCII string, left\
   justified and zero padded to 32 bits.  For IPv4 secondary servers,\
   the value is the 32-bit IPv4 address of the synchronization source.\
   For IPv6 and OSI secondary servers, the value is the first 32 bits of\
   the MD5 hash of the IPv6 or NSAP address of the synchronization\
   source.\
\
   Primary (stratum 1) servers set this field to a code identifying the\
   external reference source according to Figure 2.  If the external\
   reference is one of those listed, the associated code should be used.\
   Codes for sources not listed can be contrived, as appropriate.\
\
      In previous NTP and SNTP secondary servers and clients, this field\
      was often used to walk-back the synchronization subnet to the root\
      (primary server) for management purposes.  In SNTPv4 with IPv6 or\
      OSI, this feature is not available, because the addresses are\
      longer than 32 bits, and only a hash is available.  However, a\
      walk-back can be accomplished using the NTP control message and\
      the reference identifier field described in RFC 1305.\
\
   Reference Timestamp: This field is the time the system clock was last\
   set or corrected, in 64-bit timestamp format.\
\
   Originate Timestamp: This is the time at which the request departed\
   the client for the server, in 64-bit timestamp format.\
\
   Receive Timestamp: This is the time at which the request arrived at\
   the server or the reply arrived at the client, in 64-bit timestamp\
   format.\
\
   Transmit Timestamp: This is the time at which the request departed\
   the client or the reply departed the server, in 64-bit timestamp\
   format.\
\
   Authenticator (optional): When the NTP authentication scheme is\
   implemented, the Key Identifier and Message Digest fields contain the\
   message authentication code (MAC) information defined in Appendix C\
   of RFC 1305.\
\
\
\
\
Mills                        Informational                     [Page 12]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
5.  SNTP Client Operations\
\
   An SNTP client can operate in unicast, broadcast, or manycast modes.\
   In unicast mode, the client sends a request (NTP mode 3) to a\
   designated unicast server and expects a reply (NTP mode 4) from that\
   server.  In broadcast client mode, it sends no request and waits for\
   a broadcast (NTP mode 5) from one or more broadcast servers.  In\
   manycast mode, the client sends a request (NTP mode 3) to a\
   designated broadcast address and expects a reply (NTP mode 4) from\
   one or more manycast servers.  The client uses the first reply\
   received to establish the particular server for subsequent unicast\
   operations.  Later replies from this server (duplicates) or any other\
   server are ignored.  Other than the selection of address in the\
   request, the operations of manycast and unicast clients are\
   identical.\
\
      Client requests are normally sent at intervals depending on the\
      frequency tolerance of the client clock and the required accuracy.\
      However, under no conditions should requests be sent at less than\
      one minute intervals.  Further discussion on this point is in\
      Section 9.\
\
   A unicast or manycast client initializes the NTP message header,\
   sends the request to the server, and strips the time of day from the\
   Transmit Timestamp field of the reply.  For this purpose, all the NTP\
   header fields shown above are set to 0, except the Mode, VN, and\
   optional Transmit Timestamp fields.\
\
   NTP and SNTP clients set the mode field to 3 (client) for unicast and\
   manycast requests.  They set the VN field to any version number that\
   is supported by the server, selected by configuration or discovery,\
   and that can interoperate with all previous version NTP and SNTP\
   servers.  Servers reply with the same version as the request, so the\
   VN field of the request also specifies the VN field of the reply.  A\
   prudent SNTP client can specify the earliest acceptable version on\
   the expectation that any server of that or a later version will\
   respond.  NTP Version 3 (RFC 1305) and Version 2 (RFC 1119) servers\
   accept all previous versions, including Version 1 (RFC 1059).  Note\
   that Version 0 (RFC 959) is no longer supported by current and future\
   NTP and SNTP servers.\
\
   Although setting the Transmit Timestamp field in the request to the\
   time of day according to the client clock in NTP timestamp format is\
   not necessary in a conforming client implementation, it is highly\
   recommended in unicast and manycast modes.  This allows a simple\
   calculation to determine the propagation delay between the server and\
   client and to align the system clock generally within a few tens of\
   milliseconds relative to the server.  In addition, this provides a\
\
\
\
Mills                        Informational                     [Page 13]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   simple method for verifying that the server reply is in fact a\
   legitimate response to the specific client request and thereby for\
   avoiding replays.  In broadcast mode, the client has no information\
   to calculate the propagation delay or to determine the validity of\
   the server, unless one of the NTP authentication schemes is used.\
\
   To calculate the roundtrip delay d and system clock offset t relative\
   to the server, the client sets the Transmit Timestamp field in the\
   request to the time of day according to the client clock in NTP\
   timestamp format.  For this purpose, the clock need not be\
   synchronized.  The server copies this field to the Originate\
   Timestamp in the reply and sets the Receive Timestamp and Transmit\
   Timestamp fields to the time of day according to the server clock in\
   NTP timestamp format.\
\
   When the server reply is received, the client determines a\
   Destination Timestamp variable as the time of arrival according to\
   its clock in NTP timestamp format.  The following table summarizes\
   the four timestamps.\
\
      Timestamp Name          ID   When Generated\
      ------------------------------------------------------------\
      Originate Timestamp     T1   time request sent by client\
      Receive Timestamp       T2   time request received by server\
      Transmit Timestamp      T3   time reply sent by server\
      Destination Timestamp   T4   time reply received by client\
\
   The roundtrip delay d and system clock offset t are defined as:\
\
      d = (T4 - T1) - (T3 - T2)     t = ((T2 - T1) + (T3 - T4)) / 2.\
\
   Note that in general both delay and offset are signed quantities and\
   can be less than zero; however, a delay less than zero is possible\
   only in symmetric modes, which SNTP clients are forbidden to use.\
   The following table summarizes the required SNTP client operations in\
   unicast, manycast, and broadcast modes.  The recommended error checks\
   are shown in the Reply and Broadcast columns in the table.  The\
   message should be considered valid only if all the fields shown\
   contain values in the respective ranges.  Whether to believe the\
   message if one or more of the fields marked "ignore" contain invalid\
   values is at the discretion of the implementation.\
\
\
\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 14]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
      Field Name               Unicast/Manycast            Broadcast\
                               Request     Reply\
      ---------------------------------------------------------------\
      LI                       0           0-3            0-3\
\
      VN                       1-4         copied from    1-4\
                                           request\
\
      Mode                     3           4              5\
\
      Stratum                  0           0-15           0-15\
\
      Poll                     0           ignore         ignore\
\
      Precision                0           ignore         ignore\
\
      Root Delay               0           ignore         ignore\
\
      Root Dispersion          0           ignore         ignore\
\
      Reference Identifier     0           ignore         ignore\
\
      Reference Timestamp      0           ignore         ignore\
\
      Originate Timestamp      0           (see text)     ignore\
\
      Receive Timestamp        0           (see text)     ignore\
\
      Transmit Timestamp       (see text)  nonzero        nonzero\
\
      Authenticator            optional    optional       optional\
\
   Although not required in a conforming SNTP client implementation, it\
   is wise to consider a suite of sanity checks designed to avoid\
   various kinds of abuse that might happen as the result of server\
   implementation errors or malicious attack.  Following is a list of\
   suggested checks.\
\
   1.  When the IP source and destination addresses are available for\
       the client request, they should match the interchanged addresses\
       in the server reply.\
\
   2.  When the UDP source and destination ports are available for the\
       client request, they should match the interchanged ports in the\
       server reply.\
\
   3.  The Originate Timestamp in the server reply should match the\
       Transmit Timestamp used in the client request.\
\
\
\
Mills                        Informational                     [Page 15]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   4.  The server reply should be discarded if any of the LI, Stratum,\
       or Transmit Timestamp fields is 0 or the Mode field is not 4\
       (unicast) or 5 (broadcast).\
\
   5.  A truly paranoid client can check that the Root Delay and Root\
       Dispersion fields are each greater than or equal to 0 and less\
       than infinity, where infinity is currently a cozy number like one\
       second.  This check avoids using a server whose synchronization\
       source has expired for a very long time.\
\
6.  SNTP Server Operations\
\
   A SNTP server operating with either an NTP or SNTP client of the same\
   or previous versions retains no persistent state.  Because an SNTP\
   server ordinarily does not implement the full suite of grooming and\
   mitigation algorithms intended to support redundant servers and\
   diverse network paths, it should be operated only in conjunction with\
   a source of external synchronization, such as a reliable radio clock\
   or telephone modem.  In this case it operates as a primary (stratum\
   1) server.\
\
   A SNTP server can operate with any unicast, manycast, or broadcast\
   address or any combination of these addresses.  A unicast or manycast\
   server receives a request (NTP mode 3), modifies certain fields in\
   the NTP header, and sends a reply (NTP mode 4), possibly using the\
   same message buffer as the request.  A manycast server listens on the\
   designated broadcast address, but uses its own unicast IP address in\
   the source address field of the reply.  Other than the selection of\
   address in the reply, the operations of manycast and unicast servers\
   are identical.  Broadcast messages are normally sent at intervals\
   from 64 s to 1024 s, depending on the expected frequency tolerance of\
   the client clocks and the required accuracy.\
\
   Unicast and manycast servers copy the VN and Poll fields of the\
   request intact to the reply and set the Stratum field to 1.\
\
      Note that SNTP servers normally operate as primary (stratum 1)\
      servers.  Although operating at higher strata (up to 15) while\
      synchronizing to an external source such as a GPS receiver is not\
      forbidden, this is strongly discouraged.\
\
   If the Mode field of the request is 3 (client), the reply is set to 4\
   (server).  If this field is set to 1 (symmetric active), the reply is\
   set to 2 (symmetric passive).  This allows clients configured in\
   either client (NTP mode 3) or symmetric active (NTP mode 1) to\
   interoperate successfully, even if configured in possibly suboptimal\
   ways.  For any other value in the Mode field, the request is\
\
\
\
\
Mills                        Informational                     [Page 16]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   discarded.  In broadcast (unsolicited) mode, the VN field is set to\
   4, the Mode field is set to 5 (broadcast), and the Poll field set to\
   the nearest integer base-2 logarithm of the poll interval.\
\
      Note that it is highly desirable that a broadcast server also\
      supports unicast clients.  This is so a potential broadcast client\
      can calculate the propagation delay using a client/server exchange\
      prior to switching to broadcast client (listen-only) mode.  By\
      design, a manycast server is also a unicast server.  There does\
      not seem to be a great advantage for a server to operate as both\
      broadcast and manycast at the same time, although the protocol\
      specification does not forbid it.\
\
   A broadcast or manycast server does not send packets if not\
   synchronized to a correctly operating reference source.  It may or\
   may not respond to a client request if it is not synchronized, but\
   the preferred option is to respond because this allows reachability\
   to be determined regardless of synchronization state.  If the server\
   has never synchronized to a reference source, the LI field is set to\
   3 (unsynchronized).  Once synchronized to a reference source, the LI\
   field is set to one of the other three values and remains at the last\
   value set even if the reference source becomes unreachable or turns\
   faulty.\
\
   If the server is synchronized to a reference source, the Stratum\
   field is set to 1, and the Reference Identifier field is set to the\
   ASCII source identifier shown in Figure 2.  If the server is not\
   synchronized, the Stratum field is set to zero, and the Reference\
   Identifier field is set to an ASCII error identifier described below.\
\
   The Precision field is set to reflect the maximum reading error of\
   the system clock.  For all practical cases it is computed as the\
   negative base-2 logarithm of the number of significant bits to the\
   right of the decimal point in the NTP timestamp format.  The Root\
   Delay and Root Dispersion fields are set to 0 for a primary server.\
\
   The timestamp fields in the server message are set as follows.  If\
   the server is unsynchronized or first coming up, all timestamp fields\
   are set to zero, with one exception.  If the message is a reply to a\
   previously received client request, the Transmit Timestamp field of\
   the request is copied unchanged to the Originate Timestamp field of\
   the reply.  It is important that this field be copied intact, as an\
   NTP or SNTP client uses it to avoid bogus messages.\
\
   If the server is synchronized, the Reference Timestamp is set to the\
   time the last update was received from the reference source.  The\
   Originate Timestamp field is set as in the unsynchronized case above.\
   The Transmit Timestamp field is set to the time of day when the\
\
\
\
Mills                        Informational                     [Page 17]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   message is sent.  In broadcast messages the Receive Timestamp field\
   is set to zero and copied from the Transmit Timestamp field in other\
   messages.  The following table summarizes these actions.\
\
      Field Name             Unicast/Manycast             Broadcast\
                             Request     Reply\
      ----------------------------------------------------------------\
      LI                     ignore      as needed       as needed\
\
      VN                     1-4         copied from     4\
                                         request\
\
      Mode                   3           4               5\
\
      Stratum                ignore      1               1\
\
      Poll                   ignore      copied from     log2 poll\
                                         request         interval\
\
      Precision              ignore      -log2 server    -log2 server\
                                         significant     significant\
                                         bits            bits\
\
      Root Delay             ignore      0               0\
\
      Root Dispersion        ignore      0               0\
\
      Reference Identifier   ignore      source ident    source ident\
\
      Reference Timestamp    ignore      time of last    time of last\
                                         source update   source update\
\
      Originate Timestamp    ignore      copied from     0\
                                         transmit\
                                         timestamp\
\
      Receive Timestamp      ignore      time of day     0\
\
      Transmit Timestamp     (see text)  time of day     time of day\
\
      Authenticator          optional    optional        optional\
\
   There is some latitude on the part of most clients to forgive invalid\
   timestamps, such as might occur when the server is first coming up or\
   during periods when the reference source is inoperative.  The most\
   important indicator of an unhealthy server is the Stratum field, in\
\
\
\
\
\
Mills                        Informational                     [Page 18]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   which a value of 0 indicates an unsynchronized condition.  When this\
   value is displayed, clients should discard the server message,\
   regardless of the contents of other fields.\
\
7.  Configuration and Management\
\
   Initial setup for SNTP servers and clients can be done using a web\
   client, if available, or a serial port, if not.  Some folks hoped\
   that in-service management of NTP and SNTPv4 servers and clients\
   could be performed using SNMP and a suitable MIB to be published, and\
   this has happened in some commercial SNTP servers.  But, the means\
   that have been used in the last two decades and probably will be used\
   in the next is the NTP control and monitoring protocol defined in RFC\
   1305.  Ordinarily, SNTP servers and clients are expected to operate\
   with little or no site-specific configuration, other than specifying\
   the client IP address, subnet mask, and gateway.\
\
   Unicast clients must be provided with one or more designated server\
   names or IP addresses.  If more than one server is provided, one can\
   be used for active operation and one of the others for backup should\
   the active one fail or show an error condition.  It is not normally\
   useful to use more than one server at a time, as with millions of\
   SNTP-enabled devices expected in the near future, such use would\
   represent unnecessary drain on network and server resources.\
\
   Broadcast servers and manycast clients must be provided with the TTL\
   and local broadcast or multicast group address.  Unicast and manycast\
   servers and broadcast clients may be configured with a list of\
   address-mask pairs for access control, so that only those clients or\
   servers known to be trusted will be accepted.  Multicast servers and\
   clients must implement the IGMP protocol and be provided with the\
   local broadcast or multicast group address as well.  The\
   configuration data for cryptographic authentication is beyond the\
   scope of this memo.\
\
   There are several scenarios that provide automatic server discovery\
   and selection for SNTP clients with no pre-specified server\
   configuration.  For instance, a role server with CNAME such as\
   pool.ntp.org returns a randomized list of volunteer secondary server\
   addresses, and the client can select one or more as candidates.  For\
   an IP subnet or LAN segment including an NTP or SNTP server, SNTP\
   clients can be configured as broadcast clients.  The same approach\
   can be used with multicast servers and clients.  In both cases,\
   provision of an access control list is a good way to ensure that only\
   trusted sources can be used to set the system clock.\
\
\
\
\
\
\
Mills                        Informational                     [Page 19]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   In another scenario suitable for an extended network with significant\
   network propagation delays, clients can be configured for manycast\
   addresses, both upon initial startup and after some period when the\
   currently selected unicast source has not been heard.  Following the\
   defined protocol, the client binds to the server from which the first\
   reply is received and continues operation in unicast mode.\
\
8.  The Kiss-o'-Death Packet\
\
   In the rambunctious Internet of today, it is imperative that some\
   means be available to tell a client to stop making requests and to go\
   somewhere else.  A recent experience involved a large number of\
   home/office routers all configured to use a particular university\
   time server.  Under some error conditions, a substantial fraction of\
   these routers would send packets at intervals of one second.  The\
   resulting traffic spike was dramatic, and extreme measures were\
   required to diagnose the problem and to bring it under control.  The\
   conclusion is that clients must respect the means available to\
   targeted servers to stop them from sending packets.\
\
   According to the NTP specification RFC 1305, if the Stratum field in\
   the NTP header is 1, indicating a primary server, the Reference\
   Identifier field contains an ASCII string identifying the particular\
   reference clock type.  However, in RFC 1305 nothing is said about the\
   Reference Identifier field if the Stratum field is 0, which is called\
   out as "unspecified".  However, if the Stratum field is 0, the\
   Reference Identifier field can be used to convey messages useful for\
   status reporting and access control.  In NTPv4 and SNTPv4, packets of\
   this kind are called Kiss-o'-Death (KoD) packets, and the ASCII\
   messages they convey are called kiss codes.  The KoD packets got\
   their name because an early use was to tell clients to stop sending\
   packets that violate server access controls.\
\
   In general, an SNTP client should stop sending to a particular server\
   if that server returns a reply with a Stratum field of 0, regardless\
   of kiss code, and an alternate server is available.  If no alternate\
   server is available, the client should retransmit using an\
   exponential-backoff algorithm described in the next section.\
\
   The kiss codes can provide useful information for an intelligent\
   client.  These codes are encoded in four-character ASCII strings left\
   justified and zero filled.  The strings are designed for character\
   displays and log files.  Usually, only a few of these codes can occur\
   with SNTP clients, including DENY, RSTR, and RATE.  Others can occur\
   more rarely, including INIT and STEP, when the server is in some\
   special temporary condition.  Figure 3 shows a list of the kiss codes\
   currently defined.  These are for informational purposes only; the\
   list might be modified or extended in the future.\
\
\
\
Mills                        Informational                     [Page 20]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
      Code    Meaning\
      --------------------------------------------------------------\
      ACST    The association belongs to a anycast server\
      AUTH    Server authentication failed\
      AUTO    Autokey sequence failed\
      BCST    The association belongs to a broadcast server\
      CRYP    Cryptographic authentication or identification failed\
      DENY    Access denied by remote server\
      DROP    Lost peer in symmetric mode\
      RSTR    Access denied due to local policy\
      INIT    The association has not yet synchronized for the first\
              time\
      MCST    The association belongs to a manycast server\
      NKEY    No key found.  Either the key was never installed or\
              is not trusted\
      RATE    Rate exceeded.  The server has temporarily denied access\
              because the client exceeded the rate threshold\
      RMOT    Somebody is tinkering with the association from a remote\
              host running ntpdc.  Not to worry unless some rascal has\
              stolen your keys\
      STEP    A step change in system time has occurred, but the\
              association has not yet resynchronized\
\
                           Figure 3.  Kiss Codes\
\
9.  On Being a Good Network Citizen\
\
   SNTP and its big brother NTP have been in explosive growth over the\
   last few years, mirroring the growth of the Internet.  Just about\
   every Internet appliance has some kind of NTP support, including\
   Windows XP, Cisco routers, embedded controllers, and software systems\
   of all kinds.  This is the first edition of the SNTP RFC where it has\
   become necessary to lay down rules of engagement in the form of\
   design criteria for SNTP client implementations.  This is necessary\
   to educate software developers regarding the proper use of Internet\
   time server resources as the Internet expands and demands on time\
   servers increase, and to prevent the recurrence of the sort of\
   problem mentioned above.\
\
10.  Best Practices\
\
   NTP and SNTP clients can consume considerable network and server\
   resources if they are not good network citizens.  There are now\
   consumer Internet commodity devices numbering in the millions that\
   are potential customers of public and private NTP and SNTP servers.\
   Recent experience strongly suggests that device designers pay\
   particular attention to minimizing resource impacts, especially if\
   large numbers of these devices are deployed.  The most important\
\
\
\
Mills                        Informational                     [Page 21]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   design consideration is the interval between client requests, called\
   the poll interval.  It is extremely important that the design use the\
   maximum poll interval consistent with acceptable accuracy.\
\
   1.  A client MUST NOT under any conditions use a poll interval less\
       than 15 seconds.\
\
   2.  A client SHOULD increase the poll interval using exponential\
       backoff as performance permits and especially if the server does\
       not respond within a reasonable time.\
\
   3.  A client SHOULD use local servers whenever available to avoid\
       unnecessary traffic on backbone networks.\
\
   4.  A client MUST allow the operator to configure the primary and/or\
       alternate server names or addresses in addition to or in place of\
       a firmware default IP address.\
\
   5.  If a firmware default server IP address is provided, it MUST be a\
       server operated by the manufacturer or seller of the device or\
       another server, but only with the operator's permission.\
\
   6.  A client SHOULD use the Domain Name System (DNS) to resolve the\
       server IP addresses, so the operator can do effective load\
       balancing among a server clique and change IP address binding to\
       canonical names.\
\
   7.  A client SHOULD re-resolve the server IP address at periodic\
       intervals, but not at intervals less than the time-to-live field\
       in the DNS response.\
\
   8.  A client SHOULD support the NTP access-refusal mechanism so that\
       a server kiss-o'-death reply in response to a client request\
       causes the client to cease sending requests to that server and to\
       switch to an alternate, if available.\
\
   The following algorithm can be used as a pattern for specific\
   implementations.  It uses the following variables:\
\
   Timer: This is a counter that decrements at a fixed rate.  When it\
   reaches zero, a packet is sent, and the timer is initialized with the\
   timeout for the next packet.\
\
   Maximum timeout: This is the maximum timeout determined from the\
   given oscillator frequency tolerance and the required accuracy.\
\
\
\
\
\
\
Mills                        Informational                     [Page 22]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   Server Name: This is the DNS name of the server.  There may be more\
   than one of them, to be selected by some algorithm not considered\
   here.\
\
   Server IP Address: This is the IPv4, IPv6, or OSI address of the\
   server.\
\
   If the firmware or documentation includes specific server names, the\
   names should be those the manufacturer or seller operates as a\
   customer convenience or those for which specific permission has been\
   obtained from the operator.  A DNS request for a generic server name,\
   such as ntp.mytimeserver.com, should result in a random selection of\
   server IP addresses available for that purpose.  Each time a DNS\
   request is received, a new randomized list is returned.  The client\
   ordinarily uses the first address on the list.\
\
      When candidate SNTP or NTP servers are selected, it is imperative\
      to respect the server operator's conditions of access.  Lists of\
      public servers and their conditions of access are available at\
      www.ntp.org.  A semi-automatic server discovery scheme using DNS\
      is described at that site.  Some ISPs operate public servers,\
      although finding them via their help desks can be difficult.\
\
   A well-behaved client operates as follows (note that steps 2-4\
   constitute a synchronization loop):\
\
   1.  Consider the specified frequency tolerance of the system clock\
       oscillator.  Define the required accuracy of the system clock,\
       then calculate the maximum timeout.  For instance, if the\
       frequency tolerance is 200 parts per million (PPM) and the\
       required accuracy is one minute, the maximum timeout is about 3.5\
       days.  Use the longest maximum timeout possible given the system\
       constraints to minimize time server aggregate load, but never\
       make it less than 15 minutes.\
\
   2.  When the client is first coming up or after reset, randomize the\
       timeout from one to five minutes.  This is to minimize shock when\
       3000 PCs are rebooted at the same time power is restored after a\
       blackout.  Assume at this time that the IP address is unknown and\
       that the system clock is unsynchronized.  Otherwise, use the\
       timeout value as calculated in previous loop steps.  Note that it\
       may be necessary to refrain from implementing the aforementioned\
       random delay for some classes of International Computer Security\
       Association (ICSA) certification.\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 23]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   3.  When the timer reaches zero, if the IP address is not known, send\
       a DNS query packet; otherwise, send an NTP request packet to that\
       address.  If no reply packet has been heard since the last\
       timeout, double the timeout, but do not make it greater than the\
       maximum timeout.  If primary and secondary time servers have been\
       configured, alternate queries between the primary and secondary\
       servers when no successful response has been received.\
\
   4.  If a DNS reply packet is received, save the IP address and\
       continue at step 2.  If a KoD packet is received, remove that\
       time server from the list, activate the secondary time server,\
       and continue at step 2.  If a received packet fails the sanity\
       checks, drop that packet and also continue at step 2.  If a valid\
       NTP packet is received, update the system clock, set the timeout\
       to the maximum, and continue at step 2.\
\
11.  Security Considerations\
\
   Without cryptographic authentication, SNTPv4 service is vulnerable to\
   disruption by misbehaving or hostile SNTP or NTP broadcast servers\
   elsewhere in the Internet.  It is strongly recommended that access\
   controls and/or cryptographic authentication means be provided for\
   additional security.  This document includes protocol provisions for\
   adding such security mechanisms, but it does not define the\
   mechanisms themselves.  A separate document [MIL03] in preparation\
   will define a cryptographic security mechanism for SNTP.\
\
12.  Acknowledgements\
\
   Jeff Learman was helpful in developing the OSI model for this\
   protocol.  Ajit Thyagarajan provided valuable suggestions and\
   corrections.\
\
13.  Contributors\
\
   D. Plonka\
\
   J. Montgomery\
\
\
\
\
\
\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 24]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
14.  Informative References\
\
   [BRA97]  Bradner, S., "Key words for use in RFCs to Indicate\
            Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [COL94]  Colella, R., Callon, R., Gardner, E., and Y. Rekhter,\
            "Guidelines for OSI NSAP Allocation in the Internet", RFC\
            1629, May 1994.\
\
   [DEE89]  Deering, S., "Host extensions for IP multicasting", STD 5,\
            RFC 1112, August 1989.\
\
   [DEE98]  Deering, S. and R. Hinden, "Internet Protocol, Version 6\
            (IPv6) Specification", RFC 2460, December 1998.\
\
   [DOB91]  Shue, C., Haggerty, W., and K. Dobbins, "OSI connectionless\
            transport services on top of UDP: Version 1", RFC 1240, June\
            1991.\
\
   [FUR94]  Furniss, P., "Octet Sequences for Upper-Layer OSI to Support\
            Basic Communications Applications", RFC 1698, October 1994.\
\
   [ISO86]  International Standards 8602 - Information Processing\
            Systems - OSI: Connectionless Transport Protocol\
            Specification.  International Standards Organization,\
            December 1986.\
\
   [MIL92]  Mills, D., "Network Time Protocol (Version 3) Specification,\
            Implementation and Analysis", RFC 1305, March 1992.\
\
   [MIL03]  Mills, D., "The Autokey Security Architecture, Protocol and\
            Algorithms", http://eecis.udel.edu/~mills/database/reports/\
            stime/stime.pdf, August 2003.\
\
   [PAR93]  Partridge, C., Mendez, T., and W. Milliken, "Host Anycasting\
            Service", RFC 1546, November 1993.\
\
   [POS80]  Postel, J., "User Datagram Protocol", STD 6, RFC 768, August\
            1980.\
\
   [POS83]  Postel, J. and K. Harrenstien, "Time Protocol", STD 26, RFC\
            868, May 1983.\
\
   [SRI99]  Srisuresh, P. and M. Holdrege, "IP Network Address\
            Translator (NAT) Terminology and Considerations", RFC 2663,\
            August 1999.\
\
\
\
\
\
Mills                        Informational                     [Page 25]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
   [SRI01]  Srisuresh, P. and K. Egevang, "Traditional IP Network\
            Address Translator (Traditional NAT)", RFC 3022, January\
            2001.\
\
Author's Address\
\
   David L. Mills\
   Electrical and Computer Engineering Department\
   University of Delaware\
   Newark, DE 19716\
\
   Phone: (302) 831-8247\
   EMail: mills@udel.edu\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 26]\
\
RFC 4330             SNTPv4 for IPv4, IPv6 and OSI          January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78 and at www.rfc-editor.org/copyright.html, and\
   except as set forth therein, the authors retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Mills                        Informational                     [Page 27]\
\

doc 21
  field 0
    name titolo
    type string
    value rfc4336.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           S. Floyd\
Request for Comments: 4336                                          ICIR\
Category: Informational                                       M. Handley\
                                                                     UCL\
                                                               E. Kohler\
                                                                    UCLA\
                                                              March 2006\
\
\
                       Problem Statement for the\
              Datagram Congestion Control Protocol (DCCP)\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document describes for the historical record the motivation\
   behind the Datagram Congestion Control Protocol (DCCP), an unreliable\
   transport protocol incorporating end-to-end congestion control.  DCCP\
   implements a congestion-controlled, unreliable flow of datagrams for\
   use by applications such as streaming media or on-line games.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Floyd, et al.                Informational                      [Page 1]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Problem Space ...................................................3\
      2.1. Congestion Control for Unreliable Transfer .................4\
      2.2. Overhead ...................................................6\
      2.3. Firewall Traversal .........................................6\
      2.4. Parameter Negotiation ......................................7\
   3. Solution Space for Congestion Control of Unreliable Flows .......7\
      3.1. Providing Congestion Control Above UDP .....................8\
           3.1.1. The Burden on the Application Designer ..............8\
           3.1.2. Difficulties with ECN ...............................8\
           3.1.3. The Evasion of Congestion Control ..................10\
      3.2. Providing Congestion Control Below UDP ....................10\
           3.2.1. Case 1: Congestion Feedback at the Application .....11\
           3.2.2. Case 2: Congestion Feedback at a Layer Below UDP ...11\
      3.3. Providing Congestion Control at the Transport Layer .......12\
           3.3.1. Modifying TCP? .....................................12\
           3.3.2. Unreliable Variants of SCTP? .......................13\
           3.3.3. Modifying RTP? .....................................14\
           3.3.4. Designing a New Transport Protocol .................14\
   4. Selling Congestion Control to Reluctant Applications ...........15\
   5. Additional Design Considerations ...............................15\
   6. Transport Requirements of Request/Response Applications ........16\
   7. Summary of Recommendations .....................................17\
   8. Security Considerations ........................................18\
   9. Acknowledgements ...............................................18\
   Informative References ............................................19\
\
1.  Introduction\
\
   Historically, the great majority of Internet unicast traffic has used\
   congestion-controlled TCP, with UDP making up most of the remainder.\
   UDP has mainly been used for short, request-response transfers, like\
   DNS and SNMP, that wish to avoid TCP's three-way handshake,\
   retransmission, and/or stateful connections.  UDP also avoids TCP's\
   built-in end-to-end congestion control, and UDP applications tended\
   not to implement their own congestion control.  However, since UDP\
   traffic volume was small relative to congestion-controlled TCP flows,\
   the network didn't collapse.\
\
   Recent years have seen the growth of applications that use UDP in a\
   different way.  These applications, including streaming audio,\
   Internet telephony, and multiplayer and massively multiplayer on-line\
   games, share a preference for timeliness over reliability.  TCP can\
   introduce arbitrary delay because of its reliability and in-order\
   delivery requirements; thus, the applications use UDP instead.  This\
   growth of long-lived non-congestion-controlled traffic, relative to\
\
\
\
Floyd, et al.                Informational                      [Page 2]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   congestion-controlled traffic, poses a real threat to the overall\
   health of the Internet [RFC2914, RFC3714].\
\
   Applications could implement their own congestion control mechanisms\
   on a case-by-case basis, with encouragement from the IETF.  Some\
   already do this.  However, experience shows that congestion control\
   is difficult to get right, and many application writers would like to\
   avoid reinventing this particular wheel.  We believe that a new\
   protocol is needed, one that combines unreliable datagram delivery\
   with built-in congestion control.  This protocol will act as an\
   enabling technology: existing and new applications could easily use\
   it to transfer timely data without destabilizing the Internet.\
\
   This document provides a problem statement for such a protocol.  We\
   list the properties the protocol should have, then explain why those\
   properties are necessary.  We describe why a new protocol is the best\
   solution for the more general problem of bringing congestion control\
   to unreliable flows of unicast datagrams, and discuss briefly\
   subsidiary requirements for mobility, defense against Denial of\
   Service (DoS) attacks and spoofing, interoperation with RTP, and\
   interactions with Network Address Translators (NATs) and firewalls.\
\
   One of the design preferences that we bring to this question is a\
   preference for a clean, understandable, low-overhead, and minimal\
   protocol.  As described later in this document, this results in the\
   design decision to leave functionality such as reliability or Forward\
   Error Correction (FEC) to be layered on top, rather than provided in\
   the transport protocol itself.\
\
   This document began in 2002 as a formalization of the goals of DCCP,\
   the Datagram Congestion Control Protocol [RFC4340].  We intended DCCP\
   to satisfy this problem statement, and thus the original reasoning\
   behind many of DCCP's design choices can be found here.  However, we\
   believed, and continue to believe, that the problem should be solved\
   whether or not DCCP is the chosen solution.\
\
2.  Problem Space\
\
   We perceive a number of problems related to the use of unreliable\
   data flows in the Internet.  The major issues are the following:\
\
   o  The potential for non-congestion-controlled datagram flows to\
      cause congestion collapse of the network.  (See Section 5 of\
      [RFC2914] and Section 2 of [RFC3714].)\
\
\
\
\
\
\
\
Floyd, et al.                Informational                      [Page 3]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   o  The difficulty of correctly implementing effective congestion\
      control mechanisms for unreliable datagram flows.\
\
   o  The lack of a standard solution for reliably transmitting\
      congestion feedback for an unreliable data flow.\
\
   o  The lack of a standard solution for negotiating Explicit\
      Congestion Notification (ECN) [RFC3168] usage for unreliable\
      flows.\
\
   o  The lack of a choice of TCP-friendly congestion control\
      mechanisms.\
\
   We assume that most application writers would use congestion control\
   for long-lived unreliable flows if it were available in a standard,\
   easy-to-use form.\
\
   More minor issues include the following:\
\
   o  The difficulty of deploying applications using UDP-based flows in\
      the presence of firewalls.\
\
   o  The desire to have a single way to negotiate congestion control\
      parameters for unreliable flows, independently of the signalling\
      protocol used to set up the flow.\
\
   o  The desire for low per-packet byte overhead.\
\
   The subsections below discuss these problems of providing congestion\
   control, traversing firewalls, and negotiating parameters in more\
   detail.  A separate subsection also discusses the problem of\
   minimizing the overhead of packet headers.\
\
2.1.  Congestion Control for Unreliable Transfer\
\
   We aim to bring easy-to-use congestion control mechanisms to\
   applications that generate large or long-lived flows of unreliable\
   datagrams, such as RealAudio, Internet telephony, and multiplayer\
   games.  Our motivation is to avoid congestion collapse.  (The short\
   flows generated by request-response applications, such as DNS and\
   SNMP, don't cause congestion in practice, and any congestion control\
   mechanism would take effect between flows, not within a single end-\
   to-end transfer of information.)  However, before designing a\
   congestion control mechanism for these applications, we must\
   understand why they use unreliable datagrams in the first place, lest\
   we destroy the very properties they require.\
\
\
\
\
\
Floyd, et al.                Informational                      [Page 4]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   There are several reasons why protocols currently use UDP instead of\
   TCP, among them:\
\
   o  Startup Delay: they wish to avoid the delay of a three-way\
      handshake before initiating data transfer.\
\
   o  Statelessness: they wish to avoid holding connection state, and\
      the potential state-holding attacks that come with this.\
\
   o  Trading of Reliability against Timing: the data being sent is\
      timely in the sense that if it is not delivered by some deadline\
      (typically a small number of RTTs), then the data will not be\
      useful at the receiver.\
\
   Of these issues, applications that generate large or long-lived flows\
   of datagrams, such as media transfer and games, mostly care about\
   controlling the trade-off between timing and reliability.  Such\
   applications use UDP because when they send a datagram, they wish to\
   send the most appropriate data in that datagram.  If the datagram is\
   lost, they may or may not resend the same data, depending on whether\
   the data will still be useful at the receiver.  Data may no longer be\
   useful for many reasons:\
\
   o  In a telephony or streaming video session, data in a packet\
      comprises a timeslice of a continuous stream.  Once a timeslice\
      has been played out, the next timeslice is required immediately.\
      If the data comprising that timeslice arrives at some later time,\
      then it is no longer useful.  Such applications can cope with\
      masking the effects of missing packets to some extent, so when the\
      sender transmits its next packet, it is important for it to only\
      send data that has a good chance of arriving in time for its\
      playout.\
\
   o  In an interactive game or virtual-reality session, position\
      information is transient.  If a datagram containing position\
      information is lost, resending the old position does not usually\
      make sense -- rather, every position information datagram should\
      contain the latest position information.\
\
   In a congestion-controlled flow, the allowed packet sending rate\
   depends on measured network congestion.  Thus, some control is given\
   up to the congestion control mechanism, which determines precisely\
   when packets can be sent.  However, applications could still decide,\
   at transmission time, which information to put in a packet.  TCP\
   doesn't allow control over this; these applications demand it.\
\
   Often, these applications (especially games and telephony\
   applications) work on very short playout timescales.  Whilst they are\
\
\
\
Floyd, et al.                Informational                      [Page 5]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   usually able to adjust their transmission rate based on congestion\
   feedback, they do have constraints on how this adaptation can be\
   performed so that it has minimal impact on the quality of the\
   session.  Thus, they tend to need some control over the short-term\
   dynamics of the congestion control algorithm, whilst being fair to\
   other traffic on medium timescales.  This control includes, but is\
   not limited to, some influence on which congestion control algorithm\
   should be used -- for example, TCP-Friendly Rate Control (TFRC)\
   [RFC3448] rather than strict TCP-like congestion control.  (TFRC has\
   been standardized in the IETF as a congestion control mechanism that\
   adjusts its sending rate more smoothly than TCP does, while\
   maintaining long-term fair bandwidth sharing with TCP [RFC3448].)\
\
2.2.  Overhead\
\
   The applications we are concerned with often send compressed data, or\
   send frequent small packets.  For example, when Internet telephony or\
   streaming media are used over low-bandwidth modem links, highly\
   compressing the payload data is essential.  For Internet telephony\
   applications and for games, the requirement is for low delay, and\
   hence small packets are sent frequently.\
\
   For example, a telephony application sending a 5.6 Kbps data stream\
   but wanting moderately low delay may send a packet every 20 ms,\
   sending only 14 data bytes in each packet.  In addition, 20 bytes is\
   taken up by the IP header, with additional bytes for transport and/or\
   application headers.  Clearly, it is desirable for such an\
   application to have a low-overhead transport protocol header.\
\
   In some cases, the correct solution would be to use link-based packet\
   header compression to compress the packet headers, although we cannot\
   guarantee the availability of such compression schemes on any\
   particular link.\
\
   The delay of data until after the completion of a handshake also\
   represents potentially unnecessary overhead.  A new protocol might\
   therefore allow senders to include some data on their initial\
   datagrams.\
\
2.3.  Firewall Traversal\
\
   Applications requiring a flow of unreliable datagrams currently tend\
   to use signalling protocols such as the Real Time Streaming Protocol\
   (RTSP) [RFC2326], SIP [RFC3261], and H.323 in conjunction with UDP\
   for the data flow.  The initial setup request uses a signalling\
   protocol to locate the correct remote end-system for the data flow,\
   sometimes after being redirected or relayed to other machines.\
\
\
\
\
Floyd, et al.                Informational                      [Page 6]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   As UDP flows contain no explicit setup and teardown, it is hard for\
   firewalls to handle them correctly.  Typically, the firewall needs to\
   parse RTSP, SIP, and H.323 to obtain the information necessary to\
   open a hole in the firewall.  Although, for bi-directional flows, the\
   firewall can open a bi-directional hole if it receives a UDP packet\
   from inside the firewall, in this case the firewall can't easily know\
   when to close the hole again.\
\
   While we do not consider these to be major problems, they are\
   nonetheless issues that application designers face.  Currently,\
   streaming media players attempt UDP first, and then switch to TCP if\
   UDP is not successful.  Streaming media over TCP is undesirable and\
   can result in the receiver needing to temporarily halt playout while\
   it "rebuffers" data.  Telephony applications don't even have this\
   option.\
\
2.4.  Parameter Negotiation\
\
   Different applications have different requirements for congestion\
   control, which may map into different congestion feedback.  Examples\
   include ECN capability and desired congestion control dynamics (the\
   choice of congestion control algorithm and, therefore, the form of\
   feedback information required).  Such parameters need to be reliably\
   negotiated before congestion control can function correctly.\
\
   While this negotiation could be performed using signalling protocols\
   such as SIP, RTSP, and H.323, it would be desirable to have a single\
   standard way of negotiating these transport parameters.  This is of\
   particular importance with ECN, where sending ECN-marked packets to a\
   non-ECN-capable receiver can cause significant congestion problems to\
   other flows.  We discuss the ECN issue in more detail below.\
\
3.  Solution Space for Congestion Control of Unreliable Flows\
\
   We thus want to provide congestion control for unreliable flows,\
   providing both ECN and the choice of different forms of congestion\
   control, and providing moderate overhead in terms of packet size,\
   state, and CPU processing.  There are a number of options for\
   providing end-to-end congestion control for the unicast traffic that\
   currently uses UDP, in terms of the layer that provides the\
   congestion control mechanism:\
\
   o  Congestion control above UDP.\
\
   o  Congestion control below UDP.\
\
   o  Congestion control at the transport layer in an alternative to\
      UDP.\
\
\
\
Floyd, et al.                Informational                      [Page 7]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   We explore these alternatives in the sections below.  The concerns\
   from the discussions below have convinced us that the best way to\
   provide congestion control for unreliable flows is to provide\
   congestion control at the transport layer, as an alternative to the\
   use of UDP and TCP.\
\
3.1.  Providing Congestion Control Above UDP\
\
   One possibility would be to provide congestion control at the\
   application layer, or at some other layer above UDP.  This would\
   allow the congestion control mechanism to be closely integrated with\
   the application itself.\
\
3.1.1.  The Burden on the Application Designer\
\
   A key disadvantage of providing congestion control above UDP is that\
   it places an unnecessary burden on the application-level designer,\
   who might be just as happy to use the congestion control provided by\
   a lower layer.  If the application can rely on a lower layer that\
   gives a choice between TCP-like or TFRC-like congestion control, and\
   that offers ECN, then this might be highly satisfactory to many\
   application designers.\
\
   The long history of debugging TCP implementations [RFC2525, PF01]\
   makes the difficulties in implementing end-to-end congestion control\
   abundantly clear.  It is clearly more robust for congestion control\
   to be provided for the application by a lower layer.  In rare cases,\
   there might be compelling reasons for the congestion control\
   mechanism to be implemented in the application itself, but we do not\
   expect this to be the general case.  For example, applications that\
   use RTP over UDP might be just as happy if RTP itself implemented\
   end-to-end congestion control.  (See Section 3.3.3 for more\
   discussion of RTP.)\
\
   In addition to congestion control issues, we also note the problems\
   with firewall traversal and parameter negotiation discussed in\
   Sections 2.3 and 2.4.  Implementing on top of UDP requires that the\
   application designer also address these issues.\
\
3.1.2.  Difficulties with ECN\
\
   There is a second problem with providing congestion control above\
   UDP: it would require either giving up the use of ECN or giving the\
   application direct control over setting and reading the ECN field in\
   the IP header.  Giving up the use of ECN would be problematic, since\
   ECN can be particularly useful for unreliable flows, where a dropped\
   packet will not be retransmitted by the data sender.\
\
\
\
\
Floyd, et al.                Informational                      [Page 8]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   With the development of the ECN nonce, ECN can be useful even in the\
   absence of network support.  The data sender can use the ECN nonce,\
   along with feedback from the data receiver, to verify that the data\
   receiver is correctly reporting all lost packets.  This use of ECN\
   can be particularly useful for an application using unreliable\
   delivery, where the receiver might otherwise have little incentive to\
   report lost packets.\
\
   In order to allow the use of ECN by a layer above UDP, the UDP socket\
   would have to allow the application to control the ECN field in the\
   IP header.  In particular, the UDP socket would have to allow the\
   application to specify whether or not the ECN-Capable Transport (ECT)\
   codepoints should be set in the ECN field of the IP header.\
\
   The ECN contract is that senders who set the ECT codepoint must\
   respond to Congestion Experienced (CE) codepoints by reducing their\
   sending rates.  Therefore, the ECT codepoint can only safely be set\
   in the packet header of a UDP packet if the following is guaranteed:\
\
   o  if the CE codepoint is set by a router, the receiving IP layer\
      will pass the CE status to the UDP layer, which will pass it to\
      the receiving application at the data receiver; and\
\
   o  upon receiving a packet that had the CE codepoint set, the\
      receiving application will take the appropriate congestion control\
      action, such as informing the data sender.\
\
   However, the UDP implementation at the data sender has no way of\
   knowing if the UDP implementation at the data receiver has been\
   upgraded to pass a CE status up to the receiving application, let\
   alone whether or not the application will use the conformant end-to-\
   end congestion control that goes along with use of ECN.\
\
   In the absence of the widespread deployment of mechanisms in routers\
   to detect flows that are not using conformant congestion control,\
   allowing applications arbitrary control of the ECT codepoints for UDP\
   packets would seem like an unnecessary opportunity for applications\
   to use ECN while evading the use of end-to-end congestion control.\
   Thus, there is an inherent "chicken-and-egg" problem of whether first\
   to deploy policing mechanisms in routers, or first to enable the use\
   of ECN by UDP flows.  Without the policing mechanisms in routers, we\
   would not advise adding ECN-capability to UDP sockets at this time.\
\
   In the absence of more fine-grained mechanisms for dealing with a\
   period of sustained congestion, one possibility would be for routers\
   to discontinue using ECN with UDP packets during the congested\
   period, and to use ECN only with TCP or DCCP packets.  This would be\
   a reasonable response, for example, if TCP or DCCP flows were found\
\
\
\
Floyd, et al.                Informational                      [Page 9]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   to be more likely to be using conformant end-to-end congestion\
   control than were UDP flows.  If routers were to adopt such a policy,\
   then DCCP flows could be more likely to receive the benefits of ECN\
   in times of congestion than would UDP flows.\
\
3.1.3.  The Evasion of Congestion Control\
\
   A third problem of providing congestion control above UDP is that\
   relying on congestion control at the application level makes it\
   somewhat easier for some users to evade end-to-end congestion\
   control.  We do not claim that a transport protocol such as DCCP\
   would always be implemented in the kernel, and do not attempt to\
   evaluate the relative difficulty of modifying code inside the kernel\
   vs. outside the kernel in any case.  However, we believe that putting\
   the congestion control at the transport level rather than at the\
   application level makes it just slightly less likely that users will\
   go to the trouble of modifying the code in order to avoid using end-\
   to-end congestion control.\
\
3.2.  Providing Congestion Control Below UDP\
\
   Instead of providing congestion control above UDP, a second\
   possibility would be to provide congestion control for unreliable\
   applications at a layer below UDP, with applications using UDP as\
   their transport protocol.  Given that UDP does not itself provide\
   sequence numbers or congestion feedback, there are two possible forms\
   for this congestion feedback:\
\
   1) Feedback at the application: The application above UDP could\
      provide sequence numbers and feedback to the sender, which would\
      then communicate loss information to the congestion control\
      mechanism.  This is the approach currently standardized by the\
      Congestion Manager (CM) [RFC3124].\
\
   2) Feedback at the layer below UDP: The application could use UDP,\
      and a protocol could be implemented using a shim header between IP\
      and UDP to provide sequence number information for data packets\
      and return feedback to the data sender.  The original proposal for\
      the Congestion Manager [BRS99] suggested providing this layer for\
      applications that did not have their own feedback about dropped\
      packets.\
\
   We discuss these two cases separately below.\
\
\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 10]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
3.2.1.  Case 1: Congestion Feedback at the Application\
\
   In this case, the application provides sequence numbers and\
   congestion feedback above UDP, but communicates that feedback to a\
   congestion manager below UDP, which regulates when packets can be\
   sent.  This approach suffers from most of the problems described in\
   Section 3.1, namely, forcing the application designer to reinvent the\
   wheel each time for packet formats and parameter negotiation, and\
   problems with ECN usage, firewalls, and evasion.\
\
   It would avoid the application writer needing to implement the\
   control part of the congestion control mechanism, but it is unclear\
   how easily multiple congestion control algorithms (such as receiver-\
   based TFRC) can be supported, given that the form of congestion\
   feedback usually needs to be closely coupled to the congestion\
   control algorithm being used.  Thus, this design limits the choice of\
   congestion control mechanisms available to applications while\
   simultaneously burdening the applications with implementations of\
   congestion feedback.\
\
3.2.2.  Case 2: Congestion Feedback at a Layer Below UDP\
\
   Providing feedback at a layer below UDP would require an additional\
   packet header below UDP to carry sequence numbers in addition to the\
   8-byte header for UDP itself.  Unless this header were an IP option\
   (which is likely to cause problems for many IPv4 routers), its\
   presence would need to be indicated using a different IP protocol\
   value from UDP.  Thus, the packets would no longer look like UDP on\
   the wire, and the modified protocol would face deployment challenges\
   similar to those of an entirely new protocol.\
\
   To use congestion feedback at a layer below UDP most effectively, the\
   semantics of the UDP socket Application Programming Interface (API)\
   would also need changing, both to support a late decision on what to\
   send and to provide access to sequence numbers (so that the\
   application wouldn't need to duplicate them for its own purposes).\
   Thus, the socket API would no longer look like UDP to end hosts.\
   This would effectively be a new transport protocol.\
\
   Given these complications, it seems cleaner to actually design a new\
   transport protocol, which also allows us to address the issues of\
   firewall traversal, flow setup, and parameter negotiation.  We note\
   that any new transport protocol could also use a Congestion Manager\
   approach to share congestion state between flows using the same\
   congestion control algorithm, if this were deemed to be desirable.\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 11]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
3.3.  Providing Congestion Control at the Transport Layer\
\
   The concerns from the discussions above have convinced us that the\
   best way to provide congestion control to applications that currently\
   use UDP is to provide congestion control at the transport layer, in a\
   transport protocol used as an alternative to UDP.  One advantage of\
   providing end-to-end congestion control in an unreliable transport\
   protocol is that it could be used easily by a wide range of the\
   applications that currently use UDP, with minimal changes to the\
   application itself.  The application itself would not have to provide\
   the congestion control mechanism, or even the feedback from the data\
   receiver to the data sender about lost or marked packets.\
\
   The question then arises of whether to adapt TCP for use by\
   unreliable applications, to use an unreliable variant of the Stream\
   Control Transmission Protocol (SCTP) or a version of RTP with built-\
   in congestion control, or to design a new transport protocol.\
\
   As we argue below, the desire for minimal overhead results in the\
   design decision to use a transport protocol containing only the\
   minimal necessary functionality, and to leave other functionality\
   such as reliability, semi-reliability, or Forward Error Correction\
   (FEC) to be layered on top.\
\
3.3.1.  Modifying TCP?\
\
   One alternative might be to create an unreliable variant of TCP, with\
   reliability layered on top for applications desiring reliable\
   delivery.  However, our requirement is not simply for TCP minus in-\
   order reliable delivery, but also for the application to be able to\
   choose congestion control algorithms.  TCP's feedback mechanism works\
   well for TCP-like congestion control, but is inappropriate (or at the\
   very least, inefficient) for TFRC.  In addition, TCP sequence numbers\
   are in bytes, not datagrams.  This would complicate both congestion\
   feedback and any attempt to allow the application to decide, at\
   transmission time, what information should go into a packet.\
   Finally, there is the issue of whether a modified TCP would require a\
   new IP protocol number as well; a significantly modified TCP using\
   the same IP protocol number could have unwanted interactions with\
   some of the middleboxes already deployed in the network.\
\
   It seems best simply to leave TCP as it is, and to create a new\
   congestion control protocol for unreliable transfer.  This is\
   especially true since any change to TCP, no matter how small, takes\
   an inordinate amount of time to standardize and deploy, given TCP's\
   importance in the current Internet and the historical difficulty of\
   getting TCP implementations right.\
\
\
\
\
Floyd, et al.                Informational                     [Page 12]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
3.3.2.  Unreliable Variants of SCTP?\
\
   SCTP, the Stream Control Transmission Protocol [RFC2960], was in part\
   designed to accommodate multiple streams within a single end-to-end\
   connection, modifying TCP's semantics of reliable, in-order delivery\
   to allow out-of-order delivery.  However, explicit support for\
   multiple streams over a single flow at the transport layer is not\
   necessary for an unreliable transport protocol such as DCCP, which of\
   necessity allows out-of-order delivery.  Because an unreliable\
   transport does not need streams support, applications should not have\
   to pay the penalties in terms of increased header size that accompany\
   the use of streams in SCTP.\
\
   The basic underlying structure of the SCTP packet, of a common SCTP\
   header followed by chunks for data, SACK information, and so on, is\
   motivated by SCTP's goal of accommodating multiple streams.  However,\
   this use of chunks comes at the cost of an increased header size for\
   packets, as each chunk must be aligned on 32-bit boundaries, and\
   therefore requires a fixed-size 4-byte chunk header.  For example,\
   for a connection using ECN, SCTP includes separate control chunks for\
   the Explicit Congestion Notification Echo (ECNE) and Congestion\
   Window Reduced (CWR) functions, with the ECNE and CWR chunks each\
   requiring 8 bytes.  As another example, the common header includes a\
   4-byte verification tag to validate the sender.\
\
   As a second concern, SCTP as currently specified uses TCP-like\
   congestion control, and does not provide support for alternative\
   congestion control algorithms such as TFRC that would be more\
   attractive to some of the applications currently using UDP flows.\
   Thus, the current version of SCTP would not meet the requirements for\
   a choice between forms of end-to-end congestion control.\
\
   Finally, the SCTP Partial Reliability extension [RFC3758] allows a\
   sender to selectively abandon outstanding messages, which ceases\
   retransmissions and allows the receiver to deliver any queued\
   messages on the affected streams.  This service model, although\
   well-suited for some applications, differs from, and provides the\
   application somewhat less flexibility than, UDP's fully unreliable\
   service.\
\
   One could suggest adding support for alternative congestion control\
   mechanisms as an option to SCTP, and adding a fully-unreliable\
   variant that does not include the mechanisms for multiple streams.\
   We would argue against this.  SCTP is well-suited for applications\
   that desire limited retransmission with multistream or multihoming\
   support.  Adding support for fully-unreliable variants, multiple\
   congestion control profiles, and reduced single-stream headers would\
   risk introducing unforeseen interactions and make further\
\
\
\
Floyd, et al.                Informational                     [Page 13]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   modifications ever more difficult.  We have chosen instead to\
   implement a minimal protocol, designed for fully-unreliable datagram\
   service, that provides only end-to-end congestion control and any\
   other mechanisms that cannot be provided in a higher layer.\
\
3.3.3.  Modifying RTP?\
\
   Several of our target applications currently use RTP layered above\
   UDP to transfer their data.  Why not modify RTP to provide end-to-end\
   congestion control?\
\
   When RTP lives above UDP, modifying it to support congestion control\
   might create some of the problems described in Section 3.1.  In\
   particular, user-level RTP implementations would want access to ECN\
   bits in UDP datagrams.  It might be difficult or undesirable to allow\
   that access for RTP, but not for other user-level programs.\
\
   Kernel implementations of RTP would not suffer from this problem.  In\
   the end, the argument against modifying RTP is the same as that\
   against modifying SCTP: Some applications, such as the export of flow\
   information from routers, need congestion control but don't need much\
   of RTP's functionality.  From these applications' point of view, RTP\
   would induce unnecessary overhead.  Again, we would argue for a clean\
   and minimal protocol focused on end-to-end congestion control.\
\
   RTP would commonly be used as a layer above any new transport\
   protocol, however.  The design of that new transport protocol should\
   take this into account, either by avoiding undue duplication of\
   information available in the RTP header, or by suggesting\
   modifications to RTP, such as a reduced RTP header that removes any\
   fields redundant with the new protocol's headers.\
\
3.3.4.  Designing a New Transport Protocol\
\
   In the first half of this document, we have argued for providing\
   congestion control at the transport layer as an alternative to UDP,\
   instead of relying on congestion control supplied only above or below\
   UDP.  In this section, we have examined the possibilities of\
   modifying SCTP, modifying TCP, and designing a new transport\
   protocol.  In large part because of the requirement for unreliable\
   transport, and for accommodating TFRC as well as TCP-like congestion\
   control, we have concluded that modifications of SCTP or TCP are not\
   the best answer and that a new transport protocol is needed.  Thus,\
   we have argued for the need for a new transport protocol that offers\
   unreliable delivery, accommodates TFRC as well as TCP-like congestion\
   control, accommodates the use of ECN, and requires minimal overhead\
   in packet size and in the state and CPU processing required at the\
   data receiver.\
\
\
\
Floyd, et al.                Informational                     [Page 14]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
4.  Selling Congestion Control to Reluctant Applications\
\
   The goal of this work is to provide general congestion control\
   mechanisms that will actually be used by many of the applications\
   that currently use UDP.  This may include applications that are\
   perfectly happy without end-to-end congestion control.  Several of\
   our design requirements follow from a desire to design and deploy a\
   congestion-controlled protocol that is actually attractive to these\
   "reluctant" applications.  These design requirements include a choice\
   between different forms of congestion control, moderate overhead in\
   the size of the packet header, and the use of Explicit Congestion\
   Notification (ECN) and the ECN nonce [RFC3540], which provide\
   positive benefit to the application itself.\
\
   There will always be a few flows that are resistant to the use of\
   end-to-end congestion control, preferring an environment where end-\
   to-end congestion control is used by everyone else, but not by\
   themselves.  There has been substantial agreement [RFC2309, FF99]\
   that in order to maintain the continued use of end-to-end congestion\
   control, router mechanisms are needed to detect and penalize\
   uncontrolled high-bandwidth flows in times of high congestion; these\
   router mechanisms are colloquially known as "penalty boxes".\
   However, before undertaking a concerted effort toward the deployment\
   of penalty boxes in the Internet, it seems reasonable, and more\
   effective, to first make a concerted effort to make end-to-end\
   congestion control easily available to applications currently using\
   UDP.\
\
5.  Additional Design Considerations\
\
   This section mentions some additional design considerations that\
   should be considered in designing a new transport protocol.\
\
   o  Mobility: Mechanisms for multihoming and mobility are one area of\
      additional functionality that cannot necessarily be layered\
      cleanly and effectively on top of a transport protocol.  Thus, one\
      outstanding design decision with any new transport protocol\
      concerns whether to incorporate mechanisms for multihoming and\
      mobility into the protocol itself.  The current version of DCCP\
      [RFC4340] includes no multihoming or mobility support.\
\
   o  Defense against DoS attacks and spoofing: A reliable handshake for\
      connection setup and teardown offers protection against DoS and\
      spoofing attacks.  Mechanisms allowing a server to avoid holding\
      any state for unacknowledged connection attempts or already-\
      finished connections offer additional protection against DoS\
      attacks.  Thus, in designing a new transport protocol, even one\
      designed to provide minimal functionality, the requirements for\
\
\
\
Floyd, et al.                Informational                     [Page 15]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
      providing defense against DoS attacks and spoofing need to be\
      considered.\
\
   o  Interoperation with RTP: As Section 3.3.3 describes, attention\
      should be paid to any necessary or desirable changes in RTP when\
      it is used over the new protocol, such as reduced RTP headers.\
\
   o  API: Some functionality required by the protocol, or useful for\
      applications using the protocol, may require the definition of new\
      API mechanisms.  Examples include allowing applications to decide\
      what information to put in a packet at transmission time, and\
      providing applications with some information about packet sequence\
      numbers.\
\
   o  Interactions with NATs and firewalls: NATs and firewalls don't\
      interact well with UDP, with its lack of explicit flow setup and\
      teardown and, in practice, the lack of well-known ports for many\
      UDP applications.  Some of these issues are application specific;\
      others should be addressed by the transport protocol itself.\
\
   o  Consider general experiences with unicast transport: A\
      Requirements for Unicast Transport/Sessions (RUTS) BOF was held at\
      the IETF meeting in December 1998, with the goal of understanding\
      the requirements of applications whose needs were not met by TCP\
      [RUTS].  Not all of those unmet needs are relevant to or\
      appropriate for a unicast, congestion-controlled, unreliable flow\
      of datagrams designed for long-lived transfers.  Some are,\
      however, and any new protocol should address those needs and other\
      requirements derived from the community's experience.  We believe\
      that this document addresses the requirements relevant to our\
      problem area that were brought up at the RUTS BOF.\
\
6.  Transport Requirements of Request/Response Applications\
\
   Up until now, this document has discussed the transport and\
   congestion control requirements of applications that generate long-\
   lived, large flows of unreliable datagrams.  This section discusses\
   briefly the transport needs of another class of applications, those\
   of request/response transfers where the response might be a small\
   number of packets, with preferences that include both reliable\
   delivery and a minimum of state maintained at the ends.  The reliable\
   delivery could be accomplished, for example, by having the receiver\
   re-query when one or more of the packets in the response is lost.\
   This is a class of applications whose needs are not well-met by\
   either UDP or by TCP.\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 16]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   Although there is a legitimate need for a transport protocol for such\
   short-lived reliable flows of such request/response applications, we\
   believe that the overlap with the requirements of DCCP is almost\
   non-existent and that DCCP should not be designed to meet the needs\
   of these request/response applications.  Areas of non-compatible\
   requirements include the following:\
\
   o  Reliability: DCCP applications don't need reliability (and long-\
      lived applications that do require reliability are well-suited to\
      TCP or SCTP).  In contrast, these short-lived request/response\
      applications do require reliability (possibly client-driven\
      reliability in the form of requesting missing segments of a\
      response).\
\
   o  Connection setup and teardown: Because DCCP is aimed at flows\
      whose duration is often unknown in advance, it addresses\
      interactions with NATs and firewalls by having explicit handshakes\
      for setup and teardown.  In contrast, the short-lived\
      request/response applications know the transfer length in advance,\
      but cannot tolerate the additional delay of a handshake for flow\
      setup.  Thus, mechanisms for interacting with NATs and firewalls\
      are likely to be completely different for the two sets of\
      applications.\
\
   o  Congestion control mechanisms: The styles of congestion control\
      mechanisms and negotiations of congestion control features are\
      heavily dependent on the flow duration.  In addition, the\
      preference of the request/response applications for a stateless\
      server strongly impacts the congestion control choices.  Thus,\
      DCCP and the short-lived request/response applications have rather\
      different requirements both for congestion control mechanisms and\
      for negotiation procedures.\
\
7.  Summary of Recommendations\
\
   Our problem statement has discussed the need for implementing\
   congestion control for unreliable flows.  Additional problems concern\
   the need for low overhead, the problems of firewall traversal, and\
   the need for reliable parameter negotiation.  Our consideration of\
   the problem statement has resulted in the following general\
   recommendations:\
\
   o  A unicast transport protocol for unreliable datagrams should be\
      developed, including mandatory, built-in congestion control,\
      explicit connection setup and teardown, reliable feature\
      negotiation, and reliable congestion feedback.\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 17]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   o  The protocol must provide a set of congestion control mechanisms\
      from which the application may choose.  These mechanisms should\
      include, at minimum, TCP-like congestion control and a more\
      slowly-responding congestion control such as TFRC.\
\
   o  Important features of the connection, such as the congestion\
      control mechanism in use, should be reliably negotiated by both\
      endpoints.\
\
   o  Support for ECN should be included.  (Applications could still\
      make the decision not to use ECN for a particular session.)\
\
   o  The overhead must be low, in terms of both packet size and\
      protocol complexity.\
\
   o  Some DoS protection for servers must be included.  In particular,\
      servers can make themselves resistant to spoofed connection\
      attacks ("SYN floods").\
\
   o  Connection setup and teardown must use explicit handshakes,\
      facilitating transmission through stateful firewalls.\
\
   In 2002, there was judged to be a consensus about the need for a new\
   unicast transport protocol for unreliable datagrams, and the next\
   step was then the consideration of more detailed architectural\
   issues.\
\
8.  Security Considerations\
\
   There are no security considerations for this document.  It does\
   discuss a number of security issues in the course of problem\
   analysis, such as DoS resistance and firewall traversal.  The\
   security considerations for DCCP are discussed separately in\
   [RFC4340].\
\
9.  Acknowledgements\
\
   We would like to thank Spencer Dawkins, Jiten Goel, Jeff Hammond,\
   Lars-Erik Jonsson, John Loughney, Michael Mealling, and Rik Wade for\
   feedback on earlier versions of this document.  We would also like to\
   thank members of the Transport Area Working Group and of the DCCP\
   Working Group for discussions of these issues.\
\
\
\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 18]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
Informative References\
\
   [BRS99]        Balakrishnan, H., Rahul, H., and S. Seshan, "An\
                  Integrated Congestion Management Architecture for\
                  Internet Hosts", SIGCOMM, Sept. 1999.\
\
   [FF99]         Floyd, S. and K. Fall, "Promoting the Use of End-to-\
                  End Congestion Control in the Internet", IEEE/ACM\
                  Transactions on Networking, August 1999.\
\
   [PF01]         Padhye, J. and S. Floyd, "Identifying the TCP Behavior\
                  of Web Servers", SIGCOMM 2001.\
\
   [RFC2309]      Braden, B., Clark, D., Crowcroft, J., Davie, B.,\
                  Deering, S., Estrin, D., Floyd, S., Jacobson, V.,\
                  Minshall, G., Partridge, C., Peterson, L.,\
                  Ramakrishnan, K., Shenker, S., Wroclawski, J., and L.\
                  Zhang, "Recommendations on Queue Management and\
                  Congestion Avoidance in the Internet", RFC 2309, April\
                  1998.\
\
   [RFC2326]      Schulzrinne, H., Rao, A., and R. Lanphier, "Real Time\
                  Streaming Protocol (RTSP)", RFC 2326, April 1998.\
\
   [RFC2525]      Paxson, V., Allman, M., Dawson, S., Fenner, W.,\
                  Griner, J., Heavens, I., Lahey, K., Semke, J., and B.\
                  Volz, "Known TCP Implementation Problems", RFC 2525,\
                  March 1999.\
\
   [RFC2914]      Floyd, S., "Congestion Control Principles", BCP 41,\
                  RFC 2914, September 2000.\
\
   [RFC2960]      Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\
                  Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\
                  Zhang, L., and V. Paxson, "Stream Control Transmission\
                  Protocol", RFC 2960, October 2000.\
\
   [RFC3124]      Balakrishnan, H. and S. Seshan, "The Congestion\
                  Manager", RFC 3124, June 2001.\
\
   [RFC3168]      Ramakrishnan, K., Floyd, S., and D. Black, "The\
                  Addition of Explicit Congestion Notification (ECN) to\
                  IP", RFC 3168, September 2001.\
\
   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\
                  and E. Schooler, "SIP: Session Initiation Protocol",\
                  RFC 3261, June 2002.\
\
\
\
Floyd, et al.                Informational                     [Page 19]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
   [RFC3448]      Handley, M., Floyd, S., Padhye, J., and J. Widmer,\
                  "TCP Friendly Rate Control (TFRC): Protocol\
                  Specification", RFC 3448, January 2003.\
\
   [RFC3540]      Spring, N., Wetherall, D., and D. Ely, "Robust\
                  Explicit Congestion Notification (ECN) Signaling with\
                  Nonces", RFC 3540, June 2003.\
\
   [RFC3714]      Floyd, S. and J. Kempf, "IAB Concerns Regarding\
                  Congestion Control for Voice Traffic in the Internet",\
                  RFC 3714, March 2004.\
\
   [RFC3758]      Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\
                  Conrad, "Stream Control Transmission Protocol (SCTP)\
                  Partial Reliability Extension", RFC 3758, May 2004.\
\
   [RFC4340]      Kohler, E., Handley, M., and S. Floyd, "Datagram\
                  Congestion Control Protocol (DCCP)", RFC 4340, March\
                  2006.\
\
   [RUTS]         Requirements for Unicast Transport/Sessions (RUTS)\
                  BOF, Dec. 7, 1998.  URL\
                  "http://www.ietf.org/proceedings/98dec/43rd-ietf-\
                  98dec-142.html".\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 20]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
Authors' Addresses\
\
   Sally Floyd\
   ICSI Center for Internet Research (ICIR),\
   International Computer Science Institute,\
   1947 Center Street, Suite 600\
   Berkeley, CA 94704\
   USA\
\
   EMail: floyd@icir.org\
\
\
   Mark Handley\
   Department of Computer Science\
   University College London\
   Gower Street\
   London WC1E 6BT\
   UK\
\
   EMail: M.Handley@cs.ucl.ac.uk\
\
\
   Eddie Kohler\
   4531C Boelter Hall\
   UCLA Computer Science Department\
   Los Angeles, CA 90095\
   USA\
\
   EMail: kohler@cs.ucla.edu\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 21]\
\
RFC 4336               Problem Statement for DCCP             March 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Floyd, et al.                Informational                     [Page 22]\
\

doc 22
  field 0
    name titolo
    type string
    value rfc4328.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                              D. Papadimitriou, Ed.\
Request for Comments: 4328                                       Alcatel\
Updates: 3471                                               January 2006\
Category: Standards Track\
\
\
           Generalized Multi-Protocol Label Switching (GMPLS)\
   Signaling Extensions for G.709 Optical Transport Networks Control\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document is a companion to the Generalized Multi-Protocol Label\
   Switching (GMPLS) signaling documents.  It describes the technology-\
   specific information needed to extend GMPLS signaling to control\
   Optical Transport Networks (OTN); it also includes the so-called\
   pre-OTN developments.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Conventions Used in This Document ..........................3\
   2. GMPLS Extensions for G.709 - Overview ...........................3\
   3. Generalized Label Request .......................................4\
      3.1. Common Part ................................................5\
           3.1.1. LSP Encoding Type ...................................5\
           3.1.2. Switching Type ......................................6\
           3.1.3. Generalized-PID (G-PID) .............................6\
      3.2. G.709 Traffic Parameters ...................................8\
           3.2.1. Signal Type (ST) ....................................8\
           3.2.2. Number of Multiplexed Components (NMC) ..............9\
           3.2.3. Number of Virtual Components (NVC) .................10\
           3.2.4. Multiplier (MT) ....................................10\
           3.2.5. Reserved Fields ....................................10\
   4. Generalized Label ..............................................10\
      4.1. ODUk Label Space ..........................................11\
      4.2. Label Distribution Rules ..................................13\
\
\
\
Papadimitriou               Standards Track                     [Page 1]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
      4.3. Optical Channel Label Space ...............................14\
   5. Examples .......................................................14\
   6. RSVP-TE Signaling Protocol Extensions ..........................16\
   7. Security Considerations ........................................16\
   8. IANA Considerations ............................................16\
   9. Acknowledgements ...............................................18\
   10. References ....................................................18\
      10.1. Normative References .....................................18\
      10.2. Informative References ...................................19\
   11. Contributors ..................................................19\
   Appendix A. Abbreviations .........................................21\
   Appendix B. G.709 Indexes .........................................22\
\
1.  Introduction\
\
   Generalized Multi-Protocol Label Switching (GMPLS) [RFC3945] extends\
   MPLS from supporting Packet Switching Capable (PSC) interfaces and\
   switching to include support of four new classes of interfaces and\
   switching: Layer-2 Switching (L2SC), Time-Division Multiplex (TDM),\
   Lambda Switch (LSC), and Fiber-Switch (FSC) Capable.  A functional\
   description of the extensions to MPLS signaling that are needed to\
   support these new classes of interfaces and switching is provided in\
   [RFC3471].  [RFC3473] describes the RSVP-TE-specific formats and\
   mechanisms needed to support all four classes of interfaces.\
\
   This document presents the technology details that are specific to\
   G.709 Optical Transport Networks (OTN) as specified in the ITU-T\
   G.709 recommendation [ITUT-G709] (and referenced documents),\
   including pre-OTN developments.  Per [RFC3471], G.709 technology-\
   specific parameters are carried through the signaling protocol in\
   dedicated traffic parameter objects.\
\
   The G.709 traffic parameters defined hereafter (see Section 3.2) MUST\
   be used when the label is encoded as defined in this document.\
   Moreover, the label MUST be encoded as defined in Section 4 when\
   these G.709 traffic parameters are used.\
\
   In the context of this memo, by pre-OTN developments, one refers to\
   Optical Channel, Digital Wrapper and Forward Error Correction (FEC)\
   solutions that are not fully G.709 compliant.  Details concerning\
   pre-OTN Synchronous Optical Network (SONET)/Synchronous Digital\
   Hierarchy (SDH) based solutions including Section/Regenerator Section\
   overhead (SOH/RSOH) and Line/Multiplex Section overhead (LOH/MSOH)\
   transparency are covered in [RFC3946].\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                     [Page 2]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   *** Note on ITU-T G.709 Recommendation ***\
\
   The views on the ITU-T G.709 OTN Recommendation presented in this\
   document are intentionally restricted to the GMPLS perspective within\
   the IETF CCAMP WG context.  Hence, the objective of this document is\
   not to replicate the content of the ITU-T OTN recommendations.\
   Therefore, readers interested in more details concerning the\
   corresponding technologies are strongly invited to consult the\
   corresponding ITU-T documents (also referenced in this memo).\
\
1.1.  Conventions Used in This Document\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in [RFC2119].\
\
   In addition, the reader is assumed to be familiar with the\
   terminology used in ITU-T [ITUT-G709], as well as [RFC3471] and\
   [RFC3473].  Abbreviations used in this document are detailed in\
   Appendix 1.\
\
2.  GMPLS Extensions for G.709 - Overview\
\
   [ITUT-G709] defines several networking layers constituting the\
   optical transport hierarchy:\
\
   - with full functionality:\
     . Optical Transmission Section (OTS)\
     . Optical Multiplex Section (OMS)\
     . Optical Channel (OCh)\
   - with reduced functionality:\
     . Optical Physical Section (OPS)\
     . Optical Channel with reduced functionality (OChr)\
\
   It also defines two layers constituting the digital transport\
   hierarchy:\
\
   - Optical Channel Transport Unit (OTUk)\
   - Optical Channel Data Unit (ODUk)\
\
   However, only the OCh and the ODUk layers are defined as switching\
   layers.  Both OCh (but not OChr) and ODUk layers include the overhead\
   for supervision and management.  The OCh overhead is transported in a\
   non-associated manner (also referred to as the non-associated\
   overhead naOH) in the Optical Transport Module (OTM) Overhead Signal\
   (OOS), together with the OTS and OMS non-associated overhead.  The\
   OOS is transported via a dedicated wavelength, referred to as the\
   Optical Supervisory Channel (OSC).  It should be noticed that the\
\
\
\
Papadimitriou               Standards Track                     [Page 3]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   naOH is only functionally specified and as such, it is open to\
   vendor-specific solutions.  The ODUk overhead is transported in an\
   associated manner as part of the digital ODUk frame.\
\
   As described in [ITUT-G709], in addition to the support of ODUk\
   mapping into OTUk (k = 1, 2, 3), G.709 supports ODUk multiplexing.\
   It refers to the multiplexing of ODUj (j = 1, 2) into an ODUk (k > j)\
   signal, in particular:\
\
     - ODU1 into ODU2 multiplexing\
     - ODU1 into ODU3 multiplexing\
     - ODU2 into ODU3 multiplexing\
     - ODU1 and ODU2 into ODU3 multiplexing\
\
   Adapting GMPLS to control G.709 OTN can be achieved by creating:\
\
     - a Digital Path layer, by extending the previously defined\
       "Digital Wrapper" in [RFC3471] corresponding to the ODUk\
       (digital) path layer.\
     - an Optical Path layer, by extending the "Lambda" concept (defined\
       in [RFC3471]) to the OCh (optical) path layer.\
     - a label space structure, by considering a tree whose root is an\
       OTUk signal and leaves the ODUj signals (k >= j); enabling the\
       identification of the exact position of a particular ODUj signal\
       in an ODUk multiplexing structure.\
\
   Thus, the GMPLS signaling extensions for G.709 need to cover the\
   Generalized Label Request, the Generalized Label as well as the\
   specific technology dependent objects included in the so-called\
   traffic parameters as specified in [RFC3946] for SONET/SDH networks.\
   Moreover, because multiplexing in the digital domain (such as ODUk\
   multiplexing) has been specified in the amended version of the G.709\
   ITU-T recommendation (October 2001), this document also proposes a\
   label space definition suitable for that purpose.  Notice also that\
   one uses the G.709 ODUk (i.e., Digital Path) and OCh (i.e., Optical\
   Path) layers directly in order to define the corresponding label\
   spaces.\
\
3.  Generalized Label Request\
\
   The Generalized Label Request, as defined in [RFC3471], includes a\
   common part (i.e., used for any switching technology) and a\
   technology dependent part (i.e., the traffic parameters).  In this\
   section, both parts are extended to accommodate GMPLS Signaling to\
   the G.709 transport plane recommendation (see [ITUT-G709]).\
\
\
\
\
\
\
Papadimitriou               Standards Track                     [Page 4]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
3.1.  Common Part\
\
   As defined in [RFC3471], the LSP Encoding Type, the Switching Type\
   and the Generalized Protocol Identifier (Generalized-PID) constitute\
   the common part of the Generalized Label Request.  The encoding of\
   the RSVP-TE GENERALIZED_LABEL_REQUEST object is specified in\
   [RFC3473] Section 2.1.\
\
   As mentioned above, this document extends the LSP Encoding Type, the\
   Switching Type, and G-PID (Generalized-PID) values to accommodate\
   G.709 Recommendation [ITUT-G709].\
\
3.1.1.  LSP Encoding Type\
\
   Because G.709 Recommendation defines two networking layers (ODUk\
   layers and OCh layer), the LSP Encoding Type code-points can reflect\
   these two layers defined in [RFC3471] Section 3.1 as "Digital\
   Wrapper" and "Lambda" code.  The LSP Encoding Type is specified per\
   networking layer or, more precisely, per group of functional\
   networking layers: the ODUk layers and the OCh layer.\
\
   Therefore, an additional LSP Encoding Type code-point for the G.709\
   Digital Path layer is defined; it enlarges the existing "Digital\
   Wrapper" code-point defined in [RFC3471].  The former MUST be\
   generated when the interface or tunnel on which the traffic will be\
   transmitted supports G.709 compliant Digital Path layer encoding.\
   The latter MUST only be used for non-G.709 compliant Digital Wrapper\
   layer(s) encoding.  A transit or an egress node (receiving a Path\
   message containing a GENERALIZED_LABEL_REQUEST object) MUST generate\
   a PathErr message, with a "Routing problem/Unsupported Encoding"\
   indication, if the requested LSP Encoding Type cannot be supported on\
   the corresponding incoming interface.\
\
   In the same way, an additional LSP Encoding Type code-point for the\
   G.709 Optical Channel layer is defined; it enlarges the existing\
   "Lambda" code-point defined in [RFC3471].  The former MUST be\
   generated when the interface or tunnel on which the traffic will be\
   transmitted supports G.709-compliant Optical Channel layer encoding.\
   The latter MUST only be used for non-G.709 compliant Lambda layer(s)\
   encoding.  A transit or an egress node (receiving a Path message that\
   contains a GENERALIZED_LABEL_REQUEST object) MUST generate a PathErr\
   message with a "Routing problem/Unsupported Encoding" indication, if\
   the requested LSP Encoding Type cannot be supported on the\
   corresponding incoming interface.\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                     [Page 5]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   Consequently, the following additional code-points for the LSP\
   Encoding Type are defined:\
\
        Value           Type\
        -----           ----\
        12             G.709 ODUk (Digital Path)\
        13             G.709 Optical Channel\
\
   Moreover, the code-point for the G.709 Optical Channel (OCh) layer\
   will indicate the requested capability of an end-system to use the\
   G.709 non-associated overhead (naOH), i.e., the OTM Overhead Signal\
   (OOS) multiplexed into the OTM-n.m interface signal.\
\
3.1.2.  Switching Type\
\
   The Switching Type indicates the type of switching that should be\
   performed at the termination of a particular link (see [RFC4202]).\
\
   No additional Switching Type values are to be considered in order to\
   accommodate G.709 switching types, because an ODUk switching (and\
   thus LSPs) belongs to the TDM class, while an OCh switching (and thus\
   LSPs) belong to the Lambda class (i.e., LSC).\
\
   Intermediate and egress nodes MUST verify that the value indicated in\
   the Switching Type field is supported on the corresponding incoming\
   interface.  If the requested value can not be supported, the node\
   MUST generate a PathErr message with a "Routing problem/Switching\
   Type" indication.\
\
3.1.3.  Generalized-PID (G-PID)\
\
   The G-PID (16 bits field), as defined in [RFC3471], identifies the\
   payload carried by an LSP, i.e., an identifier of the client layer of\
   that LSP.  This identifier is used by the endpoints of the G.709 LSP.\
\
   The G-PID can take one of the following values when the client\
   payload is transported over the Digital Path layer, in addition to\
   the payload identifiers defined in [RFC3471]:\
\
   - CBRa:  asynchronous Constant Bit Rate (i.e., mapping of STM-16/OC-\
            48, STM-64/OC-192 and STM-256/OC-768)\
   - CBRb:  bit synchronous Constant Bit Rate (i.e., mapping of STM-\
            16/OC-48, STM-64/OC-192 and STM-256/OC-768)\
   - ATM:   mapping at 2.5, 10 and 40 Gbps\
   - BSOT:  non-specific client Bit Stream with Octet Timing (i.e.,\
            Mapping of 2.5, 10 and 40 Gbps Bit Stream)\
   - BSNT:  non-specific client Bit Stream without Octet Timing (i.e.,\
            Mapping of 2.5, 10 and 40 Gbps Bit Stream)\
\
\
\
Papadimitriou               Standards Track                     [Page 6]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   - ODUk:  transport of Digital Paths at 2.5, 10 and 40 Gbps\
   - ESCON: Enterprise Systems Connection\
   - FICON: Fiber Connection\
\
   The G-PID can take one of the following values when the client\
   payload is transported over the Optical Channel layer, in addition to\
   the payload identifiers defined in [RFC3471]:\
\
   - CBR: Constant Bit Rate (i.e., mapping of STM-16/OC-48, STM-64/OC-\
     192 and STM-256/OC-768)\
   - OTUk/OTUkV: transport of Digital Section at 2.5, 10 and 40 Gbps\
\
   Also, when client payloads such as Ethernet MAC/PHY and IP/PPP are\
   encapsulated through the Generic Framing Procedure (GFP), as\
   described in ITU-T G.7041, dedicated G-PID values are defined.\
\
   In order to include pre-OTN developments, the G-PID field can take\
   one of the values (currently defined in [RFC3471]) when the following\
   client payloads are transported over a so-called lambda LSP:\
\
   - Ethernet PHY (1 Gbps and 10 Gbps)\
   - Fiber Channel\
\
   The following table summarizes the G-PID with respect to the LSP\
   Encoding Type:\
\
   Value     G-PID Type                       LSP Encoding Type\
   -----     ----------                       -----------------\
    47       G.709 ODUj                       G.709 ODUk (with k > j)\
    48       G.709 OTUk(v)                    G.709 OCh\
                                              ODUk mapped into OTUk(v)\
    49       CBR/CBRa                         G.709 ODUk, G.709 OCh\
    50       CBRb                             G.709 ODUk\
    51       BSOT                             G.709 ODUk\
    52       BSNT                             G.709 ODUk\
    53       IP/PPP (GFP)                     G.709 ODUk (and SDH)\
    54       Ethernet MAC (framed GFP)        G.709 ODUk (and SDH)\
    55       Ethernet PHY (transparent GFP)   G.709 ODUk (and SDH)\
    56       ESCON                            G.709 ODUk, Lambda, Fiber\
    57       FICON                            G.709 ODUk, Lambda, Fiber\
    58       Fiber Channel                    G.709 ODUk, Lambda, Fiber\
\
   Note: Values 49 and 50 include mapping of SDH.\
\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                     [Page 7]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   The following table summarizes the update of the G-PID values defined\
   in [RFC3471]:\
\
   Value     G-PID Type                 LSP Encoding Type\
   -----     ----------                 -----------------\
    32       ATM Mapping                SDH, G.709 ODUk\
    33       Ethernet PHY               SDH, G.709 OCh, Lambda, Fiber\
    34       Sonet/SDH                  G.709 OCh, Lambda, Fiber\
    35       Reserved (SONET Dep.)      G.709 OCh, Lambda, Fiber\
\
3.2.  G.709 Traffic Parameters\
\
   When G.709 Digital Path Layer or G.709 Optical Channel Layer is\
   specified in the LSP Encoding Type field, the information referred to\
   as technology dependent (or simply traffic parameters) is carried\
   additionally to the one included in the Generalized Label Request.\
\
   The G.709 traffic parameters are defined as follows:\
\
      0                   1                   2                   3\
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |  Signal Type  |   Reserved    |              NMC              |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |              NVC              |        Multiplier (MT)        |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |                           Reserved                            |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   In this frame, NMC stands for Number of Multiplexed Components, NVC\
   for Number of Virtual Components, and MT for Multiplier.  Each of\
   these fields is tailored to support G.709 LSP requests.\
\
   The RSVP-TE encoding of the G.709 traffic-parameters is detailed in\
   Section 6.\
\
3.2.1.  Signal Type (ST)\
\
   This field (8 bits) indicates the type of G.709 Elementary Signal\
   that comprises the requested LSP.  The permitted values are:\
\
      Value     Type\
      -----     ----\
        0       Not significant\
        1       ODU1 (i.e., 2.5 Gbps)\
        2       ODU2 (i.e., 10  Gbps)\
        3       ODU3 (i.e., 40  Gbps)\
        4       Reserved (for future use)\
\
\
\
Papadimitriou               Standards Track                     [Page 8]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
        5       Reserved (for future use)\
        6       OCh at 2.5 Gbps\
        7       OCh at 10  Gbps\
        8       OCh at 40  Gbps\
        9-255   Reserved (for future use)\
\
   The value of the Signal Type field depends on LSP Encoding Type value\
   defined in Section 3.1.1 and [RFC3471]:\
\
     - if the LSP Encoding Type value is the G.709 Digital Path layer,\
       then the valid values are the ODUk signals (k = 1, 2 or 3).\
     - if the LSP Encoding Type value is the G.709 Optical Channel\
       layer, then the valid values are the OCh at 2.5, 10, or 40 Gbps.\
     - if the LSP Encoding Type is "Lambda" (which includes the pre-OTN\
       Optical Channel layer) then the valid value is irrelevant (Signal\
       Type = 0).\
     - if the LSP Encoding Type is "Digital Wrapper", then the valid\
       value is irrelevant (Signal Type = 0).\
\
   Several transforms can be sequentially applied on the Elementary\
   Signal to build the Final Signal that is actually requested for the\
   LSP.  Each transform application is optional and must be ignored if\
   zero; this does not include the Multiplier (MT), which cannot be zero\
   and must be ignored if equal to one.  Transforms must be applied\
   strictly in the following order:\
\
     - First, virtual concatenation (by using the NVC field) can be\
       optionally applied directly on the Elementary Signal to form a\
       Composed Signal\
     - Second, a multiplication (by using the Multiplier field) can be\
       optionally applied, either directly on the Elementary Signal, or\
       on the virtually concatenated signal obtained from the first\
       phase.  The resulting signal is referred to as Final Signal.\
\
3.2.2.  Number of Multiplexed Components (NMC)\
\
   The NMC field (16 bits) indicates the number of ODU tributary slots\
   used by an ODUj when multiplexed into an ODUk (k > j) for the\
   requested LSP.  This field is not applicable when an ODUk is mapped\
   into an OTUk and irrelevant at the Optical Channel layer.  In both\
   cases, it MUST be set to zero (NMC = 0) when sent and should be\
   ignored when received.\
\
   When applied at the Digital Path layer, in particular for ODU2\
   connections multiplexed into one ODU3 payload, the NMC field\
   specifies the number of individual tributary slots (NMC = 4) that\
   constitute the requested connection.  These components are still\
   processed within the context of a single connection entity.  For all\
\
\
\
Papadimitriou               Standards Track                     [Page 9]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   other currently defined multiplexing cases (see Section 2), the NMC\
   field is set to 1.\
\
3.2.3.  Number of Virtual Components (NVC)\
\
   The NVC field (16 bits) is dedicated to ODUk virtual concatenation\
   (i.e., ODUk Inverse Multiplexing) purposes.  It indicates the number\
   of ODU1, ODU2, or ODU3 Elementary Signals that are requested to be\
   virtually concatenated to form an ODUk-Xv signal.  By definition,\
   these signals MUST be of the same type.\
\
   This field is set to 0 (default value) to indicate that no virtual\
   concatenation is requested.\
\
   Note that the current usage of this field only applies for G.709 ODUk\
   LSPs, i.e., values greater than zero, are only acceptable for ODUk\
   Signal Types.  Therefore, it MUST be set to zero (NVC = 0), and\
   should be ignored when received, when a G.709 OCh LSP is requested.\
\
3.2.4.  Multiplier (MT)\
\
   The Multiplier field (16 bits) indicates the number of identical\
   Elementary Signals or Composed Signals that are requested for the\
   LSP, i.e., that form the Final Signal.  A Composed Signal is the\
   resulting signal from the application of the NMC and NVC fields to an\
   elementary Signal Type.  GMPLS signaling currently implies that all\
   the Composed Signals must be part of the same LSP.\
\
   This field is set to one (default value) to indicate that exactly one\
   instance of a signal is being requested.  Intermediate and egress\
   nodes MUST verify that the node itself and the interfaces on which\
   the LSP will be established can support the requested multiplier\
   value.  If the requested values cannot be supported, the receiver\
   node MUST generate a PathErr message (see Section 6).\
\
   Zero is an invalid value for the MT field.  If received, the node\
   MUST generate a PathErr message (see Section 6).\
\
3.2.5.  Reserved Fields\
\
   The reserved fields (8 bits in row 1 and 32 bits in row 3) are\
   dedicated for future use.  Reserved bits SHOULD be set to zero when\
   sent and MUST be ignored when received.\
\
4.  Generalized Label\
\
   This section describes the Generalized Label value space for Digital\
   Paths and Optical Channels.  The Generalized Label is defined in\
\
\
\
Papadimitriou               Standards Track                    [Page 10]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   [RFC3471].  The format of the corresponding RSVP-TE GENERALIZED_LABEL\
   object is specified in [RFC3473] Section 2.3.\
\
   The label distribution rules detailed in Section 4.2 follow (when\
   applicable) the ones defined in [RFC3946].\
\
4.1.  ODUk Label Space\
\
   At the Digital Path layer (i.e., ODUk layers), G.709 defines three\
   different client payload bit rates.  An Optical Data Unit (ODU) frame\
   has been defined for each of these bit rates.  ODUk refers to the\
   frame at bit rate k, where k = 1 (for 2.5 Gbps), 2 (for 10 Gbps), or\
   3 (for 40 Gbps).\
\
   In addition to the support of ODUk mapping into OTUk, the G.709\
   label space supports the sub-levels of ODUk multiplexing.  ODUk\
   multiplexing refers to multiplexing of ODUj (j = 1, 2) into an ODUk\
   (k > j), in particular:\
\
      - ODU1 into ODU2 multiplexing\
      - ODU1 into ODU3 multiplexing\
      - ODU2 into ODU3 multiplexing\
      - ODU1 and ODU2 into ODU3 multiplexing\
\
   More precisely, ODUj into ODUk multiplexing (k > j) is defined when\
   an ODUj is multiplexed into an ODUk Tributary Unit Group (i.e., an\
   ODTUG constituted by ODU tributary slots) that is mapped into an\
   OPUk.  The resulting OPUk is mapped into an ODUk, and the ODUk is\
   mapped into an OTUk.\
\
   Therefore, the label space structure is a tree whose root is an OTUk\
   signal and whose leaves are the ODUj signals (k >= j) that can be\
   transported via the tributary slots and switched between these slots.\
   A G.709 Digital Path layer label identifies the exact position of a\
   particular ODUj signal in an ODUk multiplexing structure.\
\
   The G.709 Digital Path Layer label or ODUk label has the following\
   format:\
\
     0                   1                   2                   3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    |                   Reserved                |     t3    | t2  |t1|\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
   Reserved bits MUST be set to zero when sent and SHOULD be ignored\
   when received.\
\
\
\
\
Papadimitriou               Standards Track                    [Page 11]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   The specification of the fields t1, t2, and t3 self-consistently\
   characterizes the ODUk label space.  The value space for the t1, t2,\
   and t3 fields is defined as follows:\
\
   1. t1 (1-bit):\
        - t1=1 indicates an ODU1 signal.\
        - t1 is not significant for the other ODUk signal types (i.e.,\
          t1 value MUST be set to 0 and ignored).\
\
   2. t2 (3-bit):\
        - t2=1 indicates an ODU2 signal that is not further sub-\
          divided.\
        - t2=[2..5] indicates the tributary slot (t2th-2) used by the\
          ODU1 in an ODTUG2 mapped into an ODU2 (via OPU2).\
        - t2 is not significant for an ODU3 (i.e., t2 value MUST be\
          set to 0 and ignored).\
\
   3. t3 (6-bit):\
        - t3=1 indicates an ODU3 signal that is not further sub-\
          divided.\
        - t3=[2..17] indicates the tributary slot (t3th-1) used by the\
          ODU1 in an ODTUG3 mapped into an ODU3 (via OPU3).\
        - t3=[18..33] indicates the tributary slot (t3th-17) used by\
          the ODU2 in an ODTUG3 mapped into an ODU3 (via OPU3).\
\
   Note: in case of ODU2 into ODU3 multiplexing, 4 labels are required\
   to identify the 4 tributary slots used by the ODU2; these tributary\
   time slots have to be allocated in ascending order.\
\
   If the label sub-field value t[i]=1 (i, j = 1, 2 or 3) and t[j]=0 (j\
   > i), the corresponding ODUk signal ODU[i] is directly mapped into\
   the corresponding OTUk signal (k=i).  This is referred to as the\
   mapping of an ODUk signal into an OTUk of the same order.  Therefore,\
   the numbering starts at 1; zero is used to indicate a non-significant\
   field.  A label field equal to zero is an invalid value.\
\
   Examples:\
\
   - t3=0, t2=0, t1=1 indicates an ODU1 mapped into an OTU1\
   - t3=0, t2=1, t1=0 indicates an ODU2 mapped into an OTU2\
   - t3=1, t2=0, t1=0 indicates an ODU3 mapped into an OTU3\
   - t3=0, t2=3, t1=0 indicates the ODU1 in the second tributary slot\
     of the ODTUG2 mapped into an ODU2 (via OPU2) mapped into an OTU2\
   - t3=5, t2=0, t1=0 indicates the ODU1 in the fourth tributary slot\
     of the ODTUG3 mapped into an ODU3 (via OPU3) mapped into an OTU3\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 12]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
4.2.  Label Distribution Rules\
\
   In case of ODUk in OTUk mapping, only one label can appear in the\
   Generalized Label.  The unique label is encoded as a single 32-bit\
   label value (as defined in Section 4.1) of the GENERALIZED_LABEL\
   object (Class-Num = 16, C-Type = 2).\
\
   In case of ODUj in ODUk (k > j) multiplexing, the explicit ordered\
   list of the labels in the multiplex is given (this list can be\
   restricted to only one label when NMC = 1).  Each label indicates a\
   component (ODUj tributary slot) of the multiplexed signal.  The order\
   of the labels must reflect the order of the ODUj into the multiplex\
   (not the physical order of tributary slots).  This ordered list of\
   labels is encoded as a sequence of 32-bit label values (as defined in\
   Section 4.1) of the GENERALIZED_LABEL object (Class-Num = 16, C-Type\
   = 2).\
\
   In case of ODUk virtual concatenation, the explicit ordered list of\
   all labels in the concatenation is given.  Each label indicates a\
   component of the virtually concatenated signal.  The order of the\
   labels must reflect the order of the ODUk to concatenate (not the\
   physical order of time-slots).  This representation limits virtual\
   concatenation to remain within a single (component) link.  In case of\
   multiplexed virtually concatenated signals, the first set of labels\
   indicates the components (ODUj tributary slots) of the first\
   virtually concatenated signal, the second set of labels indicates the\
   components (ODUj tributary slots) of the second virtually\
   concatenated signal, and so on.  This ordered list of labels is\
   encoded as a sequence of 32-bit label values (as defined in Section\
   4.1) of the GENERALIZED_LABEL object (Class-Num = 16, C-Type = 2).\
   In case of ODUk virtual concatenation, the number of label values is\
   determined by the NVC value.  Multiplexed ODUk virtual concatenation\
   additionally uses the NMC value to determine the number of labels per\
   set (equal in size).\
\
   In case of multiplication (i.e., when using the MT field), the\
   explicit ordered list of all labels taking part in the composed\
   signal is given.  The above representation limits multiplication to\
   remain within a single (component) link.  In case of multiplication\
   of multiplexed virtually concatenated signals, the first set of\
   labels indicates the components of the first multiplexed virtually\
   concatenated signal, the second set of labels indicates components of\
   the second multiplexed virtually concatenated signal, and so on.\
   This ordered list of labels is encoded as a sequence of 32-bit label\
   values (as defined in Section 4.1) of the GENERALIZED_LABEL object\
   (Class-Num = 16, C-Type = 2).  In case of multiplication of (equal)\
   ODUk virtual concatenated signals, the number of label values per\
   signal is determined by the NVC value.  Multiplication of multiplexed\
\
\
\
Papadimitriou               Standards Track                    [Page 13]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   (equal) ODUk virtual concatenation additionally uses the NMC value to\
   determine the number of labels per set (equal in size).\
\
4.3.  Optical Channel Label Space\
\
   At the Optical Channel layer, the label space must be consistently\
   defined as a flat space whose values reflect the local assignment of\
   OCh identifiers that correspond to the OTM-n.m sub-interface signals\
   (m = 1, 2 or 3).  Note that these identifiers do not cover OChr\
   because the corresponding Connection Function (OChr-CF) between OTM-\
   nr.m/OTM-0r.m is not defined in [ITUT-G798].\
\
   The OCh label space values are defined by either absolute values\
   (i.e., channel identifiers or Channel ID, also referred to as\
   wavelength identifiers) or relative values (channel spacing, also\
   referred to as inter-wavelength spacing).  The latter is strictly\
   confined to a per-port label space, whereas the former could be\
   defined as a local or a global (per node) label space.  Such an OCh\
   label space is applicable to both OTN Optical Channel layer and pre-\
   OTN Optical Channel layer.\
\
   Optical Channel label encoding (and distribution) rules are defined\
   in [RFC3471].  They MUST be used for the Upstream Label, the\
   Suggested Label, and the Generalized Label.\
\
5.  Examples\
\
   The following examples are given in order to illustrate the\
   processing described in the previous sections of this document.\
\
   1. ODUk in OTUk mapping: when one ODU1 (ODU2 or ODU3) signal is\
      directly transported in an OTU1 (OTU2 or OTU3), the upstream node\
      requests results simply in an ODU1 (ODU2 or ODU3) signal request.\
\
      In such conditions, the downstream node has to return a unique\
      label because the ODU1 (ODU2 or ODU3) is directly mapped into the\
      corresponding OTU1 (OTU2 or OTU3).  Because a single ODUk signal\
      is requested (Signal Type = 1, 2 or 3), the downstream node has to\
      return a single ODUk label, which can be, for instance, one of the\
      following when the Signal Type = 1:\
\
      - t3=0, t2=0, t1=1 indicating a single ODU1 mapped into an OTU1\
      - t3=0, t2=1, t1=0 indicating a single ODU2 mapped into an OTU2\
      - t3=1, t2=0, t1=0 indicating a single ODU3 mapped into an OTU3\
\
   2. ODU1 into ODUk multiplexing (k > 1): when one ODU1 is multiplexed\
      into the payload of a structured ODU2 (or ODU3), the upstream node\
      requests results simply in an ODU1 signal request.\
\
\
\
Papadimitriou               Standards Track                    [Page 14]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
      In such conditions, the downstream node has to return a unique\
      label because the ODU1 is multiplexed into one ODTUG2 (or ODTUG3).\
      The latter is then mapped into the ODU2 (or ODU3) via OPU2 (or\
      OPU3) and then mapped into the corresponding OTU2 (or OTU3).\
      Because a single ODU1 multiplexed signal is requested (Signal Type\
      = 1 and NMC = 1), the downstream node has to return a single ODU1\
      label, which can take, for instance, one of the following values:\
\
      - t3=0,t2=4,t1=0 indicates the ODU1 in the third TS of the ODTUG2\
      - t3=2,t2=0,t1=0 indicates the ODU1 in the first TS of the ODTUG3\
      - t3=7,t2=0,t1=0 indicates the ODU1 in the sixth TS of the ODTUG3\
\
   3. ODU2 into ODU3 multiplexing: when one unstructured ODU2 is\
      multiplexed into the payload of a structured ODU3, the upstream\
      node requests results simply in an ODU2 signal request.\
\
      In such conditions, the downstream node has to return four labels\
      since the ODU2 is multiplexed into one ODTUG3.  The latter is\
      mapped into an ODU3 (via OPU3) and then mapped into an OTU3.\
      Since an ODU2 multiplexed signal is requested (Signal Type = 2,\
      and NMC = 4), the downstream node has to return four ODU labels\
      which can take for instance the following values:\
\
      - t3=18, t2=0, t1=0 (first  part of ODU2 in first TS of ODTUG3)\
      - t3=22, t2=0, t1=0 (second part of ODU2 in fifth TS of ODTUG3)\
      - t3=23, t2=0, t1=0 (third  part of ODU2 in sixth TS of ODTUG3)\
      - t3=26, t2=0, t1=0 (fourth part of ODU2 in ninth TS of ODTUG3)\
\
   4. When a single OCh signal of 40 Gbps is requested (Signal Type =\
      8), the downstream node must return a single wavelength label as\
      specified in [RFC3471].\
\
   5. When requesting multiple ODUk LSP (i.e., with a multiplier (MT)\
      value > 1), an explicit list of labels is returned to the\
      requestor node.\
\
      When the downstream node receives a request for a 4 x ODU1 signal\
      (Signal Type = 1, NMC = 1 and MT = 4) multiplexed into an ODU3, it\
      returns an ordered list of four labels to the upstream node: the\
      first ODU1 label corresponds to the first signal of the LSP, the\
      second ODU1 label corresponds to the second signal of the LSP,\
      etc.  For instance, the corresponding labels can take the\
      following values:\
\
      - First  ODU1: t3=2,  t2=0, t1=0 (in first TS of ODTUG3)\
      - Second ODU1: t3=10, t2=0, t1=0 (in ninth TS of ODTUG3)\
      - Third  ODU1: t3=7,  t2=0, t1=0 (in sixth TS of ODTUG3)\
      - Fourth ODU1: t3=6,  t2=0, t1=0 (in fifth TS of ODTUG3)\
\
\
\
Papadimitriou               Standards Track                    [Page 15]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
6.  RSVP-TE Signaling Protocol Extensions\
\
   This section specifies the [RFC3473] protocol extensions needed to\
   accommodate G.709 traffic parameters.\
\
   The G.709 traffic parameters are carried in the G.709 SENDER_TSPEC\
   and FLOWSPEC objects.  The same format is used both for SENDER_TSPEC\
   object and FLOWSPEC objects.  The content of the objects is defined\
   above in Section 3.2. The objects have the following class and type\
   for G.709:\
\
   - G.709 SENDER_TSPEC Object: Class = 12, C-Type = 5\
   - G.709 FLOWSPEC Object: Class = 9, C-Type = 5\
\
   There is no Adspec associated with the G.709 SENDER_TSPEC.  Either\
   the Adspec is omitted or an Int-serv Adspec with the Default General\
   Characterization Parameters and Guaranteed Service fragment is used,\
   see [RFC2210].\
\
   For a particular sender in a session, the contents of the FLOWSPEC\
   object received in a Resv message SHOULD be identical to the contents\
   of the SENDER_TSPEC object received in the corresponding Path\
   message.  If the objects do not match, a ResvErr message with a\
   "Traffic Control Error/Bad Flowspec value" error SHOULD be generated.\
\
   Intermediate and egress nodes MUST verify that the node itself, and\
   the interfaces on which the LSP will be established, can support the\
   requested Signal Type, NMC, and NVC values (as defined in Section\
   3.2).  If the requested value(s) cannot be supported, the receiver\
   node MUST generate a PathErr message with a "Traffic Control\
   Error/Service unsupported" indication (see [RFC2205]).\
\
   In addition, if the MT field is received with a zero value, the node\
   MUST generate a PathErr message with a "Traffic Control Error/Bad\
   Tspec value" indication (see [RFC2205]).\
\
7.  Security Considerations\
\
   This document introduces no new security considerations to [RFC3473].\
\
8.  IANA Considerations\
\
   Two values have been defined by IANA for this document:\
\
   Two RSVP C-Types in registry:\
\
             http://www.iana.org/assignments/rsvp-parameters\
\
\
\
\
Papadimitriou               Standards Track                    [Page 16]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
             - A G.709 SENDER_TSPEC object: Class = 12, C-Type = 5 - see\
               Section 6.\
\
             - A G.709 FLOWSPEC object: Class = 9, C-Type = 5 - see\
               Section 6.\
\
   IANA will also track the code-point spaces extended and/or updated by\
   this document.  For this purpose, the following new registry entries\
   have been added in the newly requested registry entry:\
   http://www.iana.org/assignments/gmpls-sig-parameters\
\
   - LSP Encoding Type:\
     Name: LSP Encoding Type\
     Format: 8-bit number\
     Values:\
        [1..11]         defined in [RFC3471]\
        12              defined in Section 3.1.1\
        13              defined in Section 3.1.1\
     Allocation Policy:\
        [0..239]        Assigned by IANA via IETF Standards Track RFC\
                        Action.\
        [240..255]      Assigned temporarily for Experimental Usage.\
                        These will not be registered with IANA\
\
   - Switching Type:\
     Name: Switching Type\
     Format: 8-bit number\
     Values: defined in [RFC3471]\
     Allocation Policy:\
        [0..255]        Assigned by IANA via IETF Standards Track RFC\
                        Action.\
\
   - Generalized PID (G-PID):\
     Name: G-PID\
     Format: 16-bit number\
     Values:\
        [0..31]         defined in [RFC3471]\
        [32..35]        defined in [RFC3471] and updated by Section\
                        3.1.3\
        [36..46]        defined in [RFC3471]\
        [47..58]        defined in Section 3.1.3\
     Allocation Policy:\
        [0..31743]      Assigned by IANA via IETF Standards Track RFC\
                        Action.\
        [31744..32767]  Assigned temporarily for Experimental Usage\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 17]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
        [32768..65535]  Not assigned.  Before any assignments can be\
                        made in this range, there MUST be a Standards\
                        Track RFC that specifies IANA Considerations\
                        that covers the range being assigned.\
\
   Note: per [RFC3471], Section 3.1.1, standard Ethertype values are\
   used as G-PIDs for packet and Ethernet LSPs.\
\
9.  Acknowledgements\
\
   The authors would like to thank Jean-Loup Ferrant, Mathieu Garnot,\
   Massimo Canali, Germano Gasparini, and Fong Liaw for their\
   constructive comments and inputs as well as James Fu, Siva\
   Sankaranarayanan, and Yangguang Xu for their useful feedback.  Many\
   thanks to Adrian Farrel for having thoroughly reviewed this document.\
\
   This document incorporates (upon agreement) material and ideas from a\
   work in progress, "Common Label and Label Request Specification for\
   Automatic Switched Transport Network", by Zhi Lin.\
\
10.  References\
\
10.1.  Normative References\
\
   [RFC2119]    Bradner, S., "Key words for use in RFCs to Indicate\
                Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2205]    Braden, R., Zhang, L., Berson, S., Herzog, S., and S.\
                Jamin, "Resource ReSerVation Protocol (RSVP) -- Version\
                1 Functional Specification", RFC 2205, September 1997.\
\
   [RFC2210]    Wroclawski, J., "The Use of RSVP with IETF Integrated\
                Services", RFC 2210, September 1997.\
\
   [RFC3471]    Berger, L., "Generalized Multi-Protocol Label Switching\
                (GMPLS) Signaling Functional Description", RFC 3471,\
                January 2003.\
\
   [RFC3473]    Berger, L., "Generalized Multi-Protocol Label Switching\
                (GMPLS) Signaling Resource ReserVation Protocol-Traffic\
                Engineering (RSVP-TE) Extensions", RFC 3473, January\
                2003.\
\
   [RFC3946]    Mannie, E. and D. Papadimitriou, "Generalized Multi-\
                Protocol Label Switching (GMPLS) Extensions for\
                Synchronous Optical Network (SONET) and Synchronous\
                Digital Hierarchy (SDH) Control", RFC 3946, October\
                2004.\
\
\
\
Papadimitriou               Standards Track                    [Page 18]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   [RFC4202]    Kompella, K., Ed. and Y. Rekhter, Ed., "Routing\
                Extensions in Support of Generalized Multi-Protocol\
                Label Switching (GMPLS)", RFC 4202, September 2005.\
\
10.2.  Informative References\
\
   [RFC3945]    Mannie, E., "Generalized Multi-Protocol Label Switching\
                (GMPLS) Architecture", RFC 3945, October 2004.\
\
   For information on the availability of the following documents,\
   please see http://www.itu.int\
\
   [ITUT-G709]  ITU-T, "Interface for the Optical Transport Network\
                (OTN)," G.709 Recommendation (and Amendment 1), February\
                2001 (October 2001).\
\
   [ITUT-G798]  ITU-T, "Characteristics of Optical Transport Network\
                Hierarchy Equipment Functional Blocks," G.798\
                Recommendation, October 2001.\
\
11.  Contributors\
\
   Alberto Bellato (Alcatel)\
   Via Trento 30,\
   I-20059 Vimercate, Italy\
   EMail: alberto.bellato@alcatel.it\
\
   Sudheer Dharanikota (Consult)\
   EMail: sudheer@ieee.org\
\
   Michele Fontana (Alcatel)\
   Via Trento 30,\
   I-20059 Vimercate, Italy\
   EMail: michele.fontana@alcatel.it\
\
   Nasir Ghani (Sorrento Networks)\
   9990 Mesa Rim Road,\
   San Diego, CA 92121, USA\
   EMail: nghani@sorrentonet.com\
\
   Gert Grammel (Alcatel)\
   Lorenzstrasse, 10,\
   70435 Stuttgart, Germany\
   EMail: gert.grammel@alcatel.de\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 19]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
   Dan Guo (Turin Networks)\
   1415 N. McDowell Blvd,\
   Petaluma, CA 94954, USA\
   EMail: dguo@turinnetworks.com\
\
   Juergen Heiles (Siemens)\
   Hofmannstr. 51,\
   D-81379 Munich, Germany\
   EMail: juergen.heiles@siemens.com\
\
   Jim Jones (Alcatel)\
   3400 W. Plano Parkway,\
   Plano, TX 75075, USA\
   EMail: jim.d.jones@alcatel.com\
\
   Zhi-Wei Lin (Lucent)\
   101 Crawfords Corner Rd, Rm 3C-512\
   Holmdel, New Jersey 07733-3030, USA\
   EMail: zwlin@lucent.com\
\
   Eric Mannie (Consult)\
   EMail: eric_mannie@hotmail.com\
\
   Maarten Vissers (Alcatel)\
   Lorenzstrasse, 10,\
   70435 Stuttgart, Germany\
   EMail: maarten.vissers@alcalel.de\
\
   Yong Xue (WorldCom)\
   22001 Loudoun County Parkway,\
   Ashburn, VA 20147, USA\
   EMail: yong.xue@wcom.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 20]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
Appendix A.  Abbreviations\
\
   BSNT         Bit Stream without Octet Timing\
   BSOT         Bit Stream with Octet Timing\
   CBR          Constant Bit Rate\
   ESCON        Enterprise Systems Connection\
   FC           Fiber Channel\
   FEC          Forward Error Correction\
   FICON        Fiber Connection\
   FSC          Fiber Switch Capable\
   GCC          General Communication Channel\
   GFP          Generic Framing Procedure\
   LSC          Lambda Switch Capable\
   LSP          Label Switched Path\
   MS           Multiplex Section\
   naOH         non-associated Overhead\
   NMC          Number of Multiplexed Components\
   NVC          Number of Virtual Components\
   OCC          Optical Channel Carrier\
   OCG          Optical Carrier Group\
   OCh          Optical Channel (with full functionality)\
   OChr         Optical Channel (with reduced functionality)\
   ODTUG        Optical Date Tributary Unit Group\
   ODU          Optical Channel Data Unit\
   OH           Overhead\
   OMS          Optical Multiplex Section\
   OMU          Optical Multiplex Unit\
   OOS          OTM Overhead Signal\
   OPS          Optical Physical Section\
   OPU          Optical Channel Payload Unit\
   OSC          Optical Supervisory Channel\
   OTH          Optical Transport Hierarchy\
   OTM          Optical Transport Module\
   OTN          Optical Transport Network\
   OTS          Optical Transmission Section\
   OTU          Optical Channel Transport Unit\
   OTUkV        Functionally Standardized OTUk\
   PPP          Point to Point Protocol\
   PSC          Packet Switch Capable\
   RES          Reserved\
   RS           Regenerator Section\
   TTI          Trail Trace Identifier\
   TDM          Time Division Multiplex\
\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 21]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
Appendix B.  G.709 Indexes\
\
   - Index k: The index "k" is used to represent a supported bit rate\
   and the different versions of OPUk, ODUk and OTUk. k=1 represents an\
   approximate bit rate of 2.5 Gbit/s, k=2 represents an approximate bit\
   rate of 10 Gbit/s, k = 3 an approximate bit rate of 40 Gbit/s and k =\
   4 an approximate bit rate of 160 Gbit/s (under definition).  The\
   exact bit-rate values are in kbits/s:\
\
    . OPU: k=1: 2 488 320.000, k=2:  9 995 276.962, k=3: 40 150 519.322\
\
    . ODU: k=1: 2 498 775.126, k=2: 10 037 273.924, k=3: 40 319 218.983\
\
    . OTU: k=1: 2 666 057.143, k=2: 10 709 225.316, k=3: 43 018 413.559\
\
   - Index m: The index "m" is used to represent the bit rate or set of\
   bit rates supported on the interface.  This is a one or more digit\
   "k", where each "k" represents a particular bit rate.  The valid\
   values for m are (1, 2, 3, 12, 23, 123).\
\
   - Index n: The index "n" is used to represent the order of the OTM,\
   OTS, OMS, OPS, OCG and OMU.  This index represents the maximum number\
   of wavelengths that can be supported at the lowest bit rate supported\
   on the wavelength.  It is possible that a reduced number of higher\
   bit rate wavelengths are supported.  The case n=0 represents a single\
   channel without a specific wavelength assigned to the channel.\
\
   - Index r: The index "r", if present, is used to indicate a reduced\
   functionality OTM, OCG, OCC and OCh (non-associated overhead is not\
   supported).  Note that for n=0 the index r is not required as it\
   implies always reduced functionality.\
\
Editor's Address\
\
   Dimitri Papadimitriou (Alcatel)\
   Francis Wellesplein 1,\
   B-2018 Antwerpen, Belgium\
\
   Phone: +32 3 240-8491\
   EMail: dimitri.papadimitriou@alcatel.be\
\
\
\
\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 22]\
\
RFC 4328          GMPLS Signaling Extensions for G.709      January 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Papadimitriou               Standards Track                    [Page 23]\
\

doc 23
  field 0
    name titolo
    type string
    value rfc4329.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                       B. Hoehrmann\
Request for Comments: 4329                                    April 2006\
Category: Informational\
\
\
                         Scripting Media Types\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document describes the registration of media types for the\
   ECMAScript and JavaScript programming languages and conformance\
   requirements for implementations of these types.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Conformance and Document Conventions ............................2\
   3. Deployed Scripting Media Types and Compatibility ................2\
   4. Character Encoding Scheme Handling ..............................4\
      4.1. Charset Parameter ..........................................4\
      4.2. Character Encoding Scheme Detection ........................4\
      4.3. Character Encoding Scheme Error Handling ...................6\
   5. Security Considerations .........................................6\
   6. IANA Considerations .............................................8\
   7. JavaScript Media Types ..........................................9\
      7.1. text/javascript (obsolete) .................................9\
      7.2. application/javascript ....................................10\
   8. ECMAScript Media Types .........................................11\
      8.1. text/ecmascript (obsolete) ................................11\
      8.2. application/ecmascript ....................................12\
   9. References .....................................................13\
      9.1. Normative References ......................................13\
      9.2. Informative References ....................................13\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                      [Page 1]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
1.  Introduction\
\
   This memo describes media types for the JavaScript and ECMAScript\
   programming languages.  Refer to "Brief History" and "Overview" in\
   [ECMA] for background information on these languages.\
\
   Programs written in these programming languages have historically\
   been interchanged using inapplicable, experimental, and unregistered\
   media types.  This document defines four of the most commonly used\
   media types for such programs to reflect this usage in the IANA media\
   type registry, to foster interoperability by defining underspecified\
   aspects, and to provide general security considerations.\
\
2.  Conformance and Document Conventions\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in BCP 14, [RFC2119] and\
   indicate requirement levels for compliant implementations.\
   Requirements apply to all implementations unless otherwise stated.\
\
   An implementation is a software module that supports one of the media\
   types defined in this document.  Software modules may support\
   multiple media types but conformance is considered individually for\
   each type.\
\
   Implementations that fail to satisfy one or more "MUST" requirements\
   are considered non-compliant.  Implementations that satisfy all\
   "MUST" requirements, but fail to satisfy one or more "SHOULD"\
   requirements, are said to be "conditionally compliant".  All other\
   implementations are "unconditionally compliant".\
\
3.  Deployed Scripting Media Types and Compatibility\
\
   Various unregistered media types have been used in an ad-hoc fashion\
   to label and exchange programs written in ECMAScript and JavaScript.\
   These include:\
\
      +-----------------------------------------------------+\
      | text/javascript          | text/ecmascript          |\
      | text/javascript1.0       | text/javascript1.1       |\
      | text/javascript1.2       | text/javascript1.3       |\
      | text/javascript1.4       | text/javascript1.5       |\
      | text/jscript             | text/livescript          |\
      | text/x-javascript        | text/x-ecmascript        |\
      | application/x-javascript | application/x-ecmascript |\
      | application/javascript   | application/ecmascript   |\
      +-----------------------------------------------------+\
\
\
\
Hoehrmann                    Informational                      [Page 2]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   Use of the "text" top-level type for this kind of content is known to\
   be problematic.  This document thus defines text/javascript and text/\
   ecmascript but marks them as "obsolete".  Use of experimental and\
   unregistered media types, as listed in part above, is discouraged.\
   The media types,\
\
      * application/javascript\
      * application/ecmascript\
\
   which are also defined in this document, are intended for common use\
   and should be used instead.\
\
   This document defines equivalent processing requirements for the\
   types text/javascript, text/ecmascript, and application/javascript.\
   Use of and support for the media type application/ecmascript is\
   considerably less widespread than for other media types defined in\
   this document.  Using that to its advantage, this document defines\
   stricter processing rules for this type to foster more interoperable\
   processing.\
\
   The types defined in this document are applicable to scripts written\
   in [JS15] and [ECMA], respectively, as well as to scripts written in\
   a compatible language or profile such as [EcmaCompact].\
\
   This document does not address scripts written in other languages.\
   In particular, future versions of JavaScript, future editions of\
   [ECMA], and extensions to [ECMA], such as [E4X], are not directly\
   addressed.  This document may be updated to take other content into\
   account.\
\
   Updates of this document may introduce new optional parameters;\
   implementations MUST consider the impact of such an update.  For the\
   application/ecmascript media type, implementations MUST NOT process\
   content labeled with a "version" parameter as if no such parameter\
   had been specified; this is typically achieved by treating the\
   content as unsupported.  This error handling behavior allows\
   extending the definition of the media type for content that cannot be\
   processed by implementations of [ECMA].\
\
   The programming languages defined in [JS15] and [ECMA] share a common\
   subset.  Choice of a type for scripts compatible with both languages\
   is out of the scope of this document.\
\
   This document does not define how fragment identifiers in resource\
   identifiers ([RFC3986], [RFC3987]) for documents labeled with one of\
\
\
\
\
\
\
Hoehrmann                    Informational                      [Page 3]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   the media types defined in this document are resolved.  An update of\
   this document may define processing of fragment identifiers.\
\
4.  Character Encoding Scheme Handling\
\
   Refer to [RFC3536] for a discussion of terminology used in this\
   section.  Source text (as defined in [ECMA], section 6) can be binary\
   source text.  Binary source text is a textual data object that\
   represents source text encoded using a character encoding scheme.  A\
   textual data object is a whole text protocol message or a whole text\
   document, or a part of it, that is treated separately for purposes of\
   external storage and retrieval.  An implementation's internal\
   representation of source text and source text are not considered\
   binary source text.\
\
   Implementations need to determine a character encoding scheme in\
   order to decode binary source text to source text.  The media types\
   defined in this document allow an optional charset parameter to\
   explicitly specify the character encoding scheme used to encode the\
   source text.\
\
   How implementations determine the character encoding scheme can be\
   subject to processing rules that are out of the scope of this\
   document.  For example, transport protocols can require that a\
   specific character encoding scheme is to be assumed if the optional\
   charset parameter is not specified, or they can require that the\
   charset parameter is used in certain cases.  Such requirements are\
   not considered part of this document.\
\
   Implementations that support binary source text MUST support binary\
   source text encoded using the UTF-8 [RFC3629] character encoding\
   scheme.  Other character encoding schemes MAY be supported.  Use of\
   UTF-8 to encode binary source text is encouraged but not required.\
\
4.1.  Charset Parameter\
\
   The charset parameter provides a means to specify the character\
   encoding scheme of binary source text.  Its value MUST match the\
   mime-charset production defined in [RFC2978], section 2.3, and SHOULD\
   be a registered charset [CHARSETS].  An illegal value is a value that\
   does not match that production.\
\
4.2.  Character Encoding Scheme Detection\
\
   It is possible that implementations cannot interoperably determine a\
   single character encoding scheme simply by complying with all\
   requirements of the applicable specifications.  To foster\
   interoperability in such cases, the following algorithm is defined.\
\
\
\
Hoehrmann                    Informational                      [Page 4]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   Implementations apply this algorithm until a single character\
   encoding scheme is determined.\
\
   1.  If a charset parameter with a legal value is specified, the value\
       determines the character encoding scheme.\
\
   2.  If the binary source text starts with a Unicode encoding form\
       signature, the signature determines the encoding.  The following\
       octet sequences, at the very beginning of the binary source text,\
       are considered with their corresponding character encoding\
       schemes:\
\
          +------------------+----------+\
          | Leading sequence | Encoding |\
          +------------------+----------+\
          | FF FE 00 00      | UTF-32LE |\
          | 00 00 FE FF      | UTF-32BE |\
          | FF FE            | UTF-16LE |\
          | FE FF            | UTF-16BE |\
          | EF BB BF         | UTF-8    |\
          +------------------+----------+\
\
       The longest matching octet sequence determines the encoding.\
       Implementations of this step MUST use these octet sequences to\
       determine the character encoding scheme, even if the determined\
       scheme is not supported.  If this step determines the character\
       encoding scheme, the octet sequence representing the Unicode\
       encoding form signature MUST be ignored when decoding the binary\
       source text to source text.\
\
   3.  The character encoding scheme is determined to be UTF-8.\
\
   If the character encoding scheme is determined to be UTF-8 through\
   any means other than step 2 as defined above and the binary source\
   text starts with the octet sequence EF BB BF, the octet sequence is\
   ignored when decoding the binary source text to source text.  (The\
   sequence will also be ignored if step 2 determines the character\
   encoding scheme per the requirements in step 2).\
\
   In the cited case, implementations of the types text/javascript,\
   text/ecmascript, and application/javascript SHOULD and\
   implementations of the type application/ecmascript MUST implement the\
   requirements defined in this section.\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                      [Page 5]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
4.3.  Character Encoding Scheme Error Handling\
\
   The following error processing behavior is RECOMMENDED for the media\
   types text/javascript, text/ecmascript, and application/javascript,\
   and REQUIRED for the media type application/ecmascript.\
\
   o  If the value of a charset parameter is illegal, implementations\
      MUST either recover from the error by ignoring the parameter or\
      consider the character encoding scheme unsupported.\
\
   o  If binary source text is determined to have been encoded using a\
      certain character encoding scheme that the implementation is\
      unable to process, implementations MUST consider the resource\
      unsupported (i.e., they MUST NOT decode the binary source text\
      using a different character encoding scheme).\
\
   o  Binary source text can be determined to have been encoded using a\
      certain character encoding scheme but contain octet sequences that\
      are not legal according to that scheme.  This is typically caused\
      by a lack of proper character encoding scheme information; such\
      errors can pose a security risk, as discussed in section 5.\
\
      Implementations SHOULD detect such errors as early as possible; in\
      particular, they SHOULD detect them before interpreting any of the\
      source text.  Implementations MUST detect such errors and MUST NOT\
      interpret any source text after detecting such an error.  Such\
      errors MAY be reported, e.g., as syntax errors as defined in\
      [ECMA], section 16.\
\
   This document does not define facilities that allow specification of\
   the character encoding scheme used to encode binary source text in a\
   conflicting manner.  There are only two sources for character\
   encoding scheme information: the charset parameter and the Unicode\
   encoding form signature.  If a charset parameter is specified, binary\
   source text is processed as defined for that character encoding\
   scheme.\
\
5.  Security Considerations\
\
   Refer to [RFC3552] for a discussion of terminology used in this\
   section.  Examples in this section and discussions of interactions of\
   host environments with scripts and extensions to [ECMA] are to be\
   understood as non-exhaustive and of a purely illustrative nature.\
\
   The programming language defined in [ECMA] is not intended to be\
   computationally self-sufficient, rather it is expected that the\
   computational environment provides facilities to programs to enable\
\
\
\
\
Hoehrmann                    Informational                      [Page 6]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   specific functionality.  Such facilities constitute unknown factors\
   and are thus considered out of the scope of this document.\
\
   Derived programming languages are permitted to include additional\
   functionality that is not described in [ECMA]; such functionality\
   constitutes an unknown factor and is thus considered out of the scope\
   of this document.  In particular, extensions to [ECMA] defined for\
   the JavaScript programming language are not discussed in this\
   document.\
\
   Uncontrolled execution of scripts can be exceedingly dangerous.\
   Implementations that execute scripts MUST give consideration to their\
   application's threat models and those of the individual features they\
   implement; in particular, they MUST ensure that untrusted content is\
   not executed in an unprotected environment.\
\
   Specifications for host environment facilities and for derived\
   programming languages should include security considerations.  If an\
   implementation supports such facilities, the respective security\
   considerations apply.  In particular, if scripts can be referenced\
   from or included in specific document formats, the considerations for\
   the embedding or referencing document format apply.\
\
   For example, scripts embedded in application/xhtml+xml [RFC3236]\
   documents could be enabled through the host environment to manipulate\
   the document instance, which could cause the retrieval of remote\
   resources; security considerations regarding retrieval of remote\
   resources of the embedding document would apply in this case.\
\
   This circumstance can further be used to make information, that is\
   normally only available to the script, available to a web server by\
   encoding the information in the resource identifier of the resource,\
   which can further enable eavesdropping attacks.  Implementation of\
   such facilities is subject to the security considerations of the host\
   environment, as discussed above.\
\
   The facilities defined in [ECMA] do not include provisions for input\
   of external data, output of computed results, or modification of\
   aspects of the host environment.  An implementation of only the\
   facilities defined in [ECMA] is not considered to support dangerous\
   operations.\
\
   The programming language defined in [ECMA] does include facilities to\
   loop, cause computationally complex operations, or consume large\
   amounts of memory; this includes, but is not limited to, facilities\
   that allow dynamically generated source text to be executed (e.g.,\
   the eval() function); uncontrolled execution of such features can\
   cause denial of service, which implementations MUST protect against.\
\
\
\
Hoehrmann                    Informational                      [Page 7]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   A host environment can provide facilities to access external input.\
   Scripts that pass such input to the eval() function or similar\
   language features can be vulnerable to code injection attacks.\
   Scripts are expected to protect against such attacks.\
\
   A host environment can provide facilities to output computed results\
   in a user-visible manner.  For example, host environments supporting\
   a graphical user interface can provide facilities that enable scripts\
   to present certain messages to the user.  Implementations MUST take\
   steps to avoid confusion of the origin of such messages.  In general,\
   the security considerations for the host environment apply in such a\
   case as discussed above.\
\
   Implementations are required to support the UTF-8 character encoding\
   scheme; the security considerations of [RFC3629] apply.  Additional\
   character encoding schemes may be supported; support for such schemes\
   is subject to the security considerations of those schemes.\
\
   Source text is expected to be in Unicode Normalization Form C.\
   Scripts and implementations MUST consider security implications of\
   unnormalized source text and data.  For a detailed discussion of such\
   implications refer to the security considerations in [RFC3629].\
\
   Scripts can be executed in an environment that is vulnerable to code\
   injection attacks.  For example, a CGI script [RFC3875] echoing user\
   input could allow the inclusion of untrusted scripts that could be\
   executed in an otherwise trusted environment.  This threat scenario\
   is subject to security considerations that are out of the scope of\
   this document.\
\
   The "data" resource identifier scheme [RFC2397], in combination with\
   the types defined in this document, could be used to cause execution\
   of untrusted scripts through the inclusion of untrusted resource\
   identifiers in otherwise trusted content.  Security considerations of\
   [RFC2397] apply.\
\
   Implementations can fail to implement a specific security model or\
   other means to prevent possibly dangerous operations.  Such failure\
   could possibly be exploited to gain unauthorized access to a system\
   or sensitive information; such failure constitutes an unknown factor\
   and is thus considered out of the scope of this document.\
\
6.  IANA Considerations\
\
   This document registers four new media types as defined in the\
   following sections.\
\
\
\
\
\
Hoehrmann                    Informational                      [Page 8]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
7.  JavaScript Media Types\
\
7.1.  text/javascript (obsolete)\
\
   Type name:               text\
   Subtype name:            javascript\
   Required parameters:     none\
   Optional parameters:     charset, see section 4.1.\
   Encoding considerations:\
      The same as the considerations in section 3.1 of [RFC3023].\
\
   Security considerations: See section 5.\
   Interoperability considerations:\
      None, except as noted in other sections of this document.\
\
   Published specification: [JS15]\
   Applications which use this media type:\
      Script interpreters as discussed in this document.\
\
   Additional information:\
\
      Magic number(s):             n/a\
      File extension(s):           .js\
      Macintosh File Type Code(s): TEXT\
\
   Person & email address to contact for further information:\
      See Author's Address section.\
\
   Intended usage:          OBSOLETE\
   Restrictions on usage:   n/a\
   Author:                  See Author's Address section.\
   Change controller:       The IESG.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                      [Page 9]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
7.2.  application/javascript\
\
   Type name:               application\
   Subtype name:            javascript\
   Required parameters:     none\
   Optional parameters:     charset, see section 4.1.\
   Encoding considerations:\
      The same as the considerations in section 3.2 of [RFC3023].\
\
   Security considerations: See section 5.\
   Interoperability considerations:\
      None, except as noted in other sections of this document.\
\
   Published specification: [JS15]\
   Applications which use this media type:\
      Script interpreters as discussed in this document.\
\
   Additional information:\
\
      Magic number(s):             n/a\
      File extension(s):           .js\
      Macintosh File Type Code(s): TEXT\
\
   Person & email address to contact for further information:\
      See Author's Address section.\
\
   Intended usage:          COMMON\
   Restrictions on usage:   n/a\
   Author:                  See Author's Address section.\
   Change controller:       The IESG.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                     [Page 10]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
8.  ECMAScript Media Types\
\
8.1.  text/ecmascript (obsolete)\
\
   Type name:               text\
   Subtype name:            ecmascript\
   Required parameters:     none\
   Optional parameters:     charset, see section 4.1.\
   Encoding considerations:\
      The same as the considerations in section 3.1 of [RFC3023].\
\
   Security considerations: See section 5.\
   Interoperability considerations:\
      None, except as noted in other sections of this document.\
\
   Published specification: [ECMA]\
   Applications which use this media type:\
      Script interpreters as discussed in this document.\
\
   Additional information:\
\
      Magic number(s):             n/a\
      File extension(s):           .es\
      Macintosh File Type Code(s): TEXT\
\
   Person & email address to contact for further information:\
      See Author's Address section.\
\
   Intended usage:          OBSOLETE\
   Restrictions on usage:   n/a\
   Author:                  See Author's Address section.\
   Change controller:       The IESG.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                     [Page 11]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
8.2.  application/ecmascript\
\
   Type name:               application\
   Subtype name:            ecmascript\
   Required parameters:     none\
   Optional parameters:     charset, see section 4.1.\
\
      Note: Section 3 defines error handling behavior for content\
      labeled with a "version" parameter.\
\
   Encoding considerations:\
      The same as the considerations in section 3.2 of [RFC3023].\
\
   Security considerations: See section 5.\
   Interoperability considerations:\
      None, except as noted in other sections of this document.\
\
   Published specification: [ECMA]\
   Applications which use this media type:\
      Script interpreters as discussed in this document.\
\
   Additional information:\
\
      Magic number(s):             n/a\
      File extension(s):           .es\
      Macintosh File Type Code(s): TEXT\
\
   Person & email address to contact for further information:\
      See Author's Address section.\
\
   Intended usage:          COMMON\
   Restrictions on usage:   n/a\
   Author:                  See Author's Address section.\
   Change controller:       The IESG.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                     [Page 12]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
9.  References\
\
9.1.  Normative References\
\
   [CHARSETS]     IANA, "Assigned character sets",\
                  <http://www.iana.org/assignments/character-sets>.\
\
   [ECMA]         European Computer Manufacturers Association,\
                  "ECMAScript Language Specification 3rd Edition",\
                  December 1999, <http://www.ecma-international.org/\
                  publications/standards/Ecma-262.htm>\
\
   [RFC2119]      Bradner, S., "Key words for use in RFCs to Indicate\
                  Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2978]      Freed, N. and J. Postel, "IANA Charset Registration\
                  Procedures", BCP 19, RFC 2978, October 2000.\
\
   [RFC3023]      Murata, M., St. Laurent, S., and D. Kohn, "XML Media\
                  Types", RFC 3023, January 2001.\
\
   [RFC3536]      Hoffman, P., "Terminology Used in Internationalization\
                  in the IETF", RFC 3536, May 2003.\
\
   [RFC3552]      Rescorla, E. and B. Korver, "Guidelines for Writing\
                  RFC Text on Security Considerations", BCP 72, RFC\
                  3552, July 2003.\
\
   [RFC3629]      Yergeau, F., "UTF-8, a transformation format of ISO\
                  10646", STD 63, RFC 3629, November 2003.\
\
9.2.  Informative References\
\
   [E4X]          European Computer Manufacturers Association,\
                  "ECMAScript for XML (E4X)", June 2004,\
                  <http://www.ecma-international.org/\
                  publications/standards/Ecma-357.htm>\
\
   [EcmaCompact]  European Computer Manufacturers Association,\
                  "ECMAScript 3rd Edition Compact Profile", June 2001,\
                  <http://www.ecma-international.org/\
                  publications/standards/Ecma-327.htm>\
\
   [JS15]         Netscape Communications Corp., "Core JavaScript\
                  Reference 1.5", September 2000,\
                  <http://web.archive.org/*/http://\
                  devedge.netscape.com/library/manuals/2000\
                  /javascript/1.5/reference/>.\
\
\
\
Hoehrmann                    Informational                     [Page 13]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
   [RFC2397]      Masinter, L., "The "data" URL scheme", RFC 2397,\
                  August 1998.\
\
   [RFC3236]      Baker, M. and P. Stark, "The 'application/xhtml+xml'\
                  Media Type", RFC 3236, January 2002.\
\
   [RFC3875]      Robinson, D. and K. Coar, "The Common Gateway\
                  Interface (CGI) Version 1.1", RFC 3875, October 2004.\
\
   [RFC3986]      Berners-Lee, T., Fielding, R., and L. Masinter,\
                  "Uniform Resource Identifier (URI): Generic Syntax",\
                  STD 66, RFC 3986, January 2005.\
\
   [RFC3987]      Duerst, M. and M. Suignard, "Internationalized\
                  Resource Identifiers (IRIs)", RFC 3987, January 2005.\
\
Author's Address\
\
   Bjoern Hoehrmann\
   Weinheimer Strasse 22\
   Mannheim  D-68309\
   Germany\
\
   EMail: bjoern@hoehrmann.de\
   URI:   http://bjoern.hoehrmann.de\
\
   Note: Please write "Bjoern Hoehrmann" with o-umlaut (U+00F6) wherever\
   possible, e.g., as "Bj&#246;rn H&#246;hrmann" in HTML and XML.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Hoehrmann                    Informational                     [Page 14]\
\
RFC 4329                 Scripting Media Types                April 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Hoehrmann                    Informational                     [Page 15]\
\

doc 24
  field 0
    name titolo
    type string
    value rfc4334.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                         R. Housley\
Request for Comments: 4334                                Vigil Security\
Obsoletes: 3770                                                 T. Moore\
Category: Standards Track                                      Microsoft\
                                                           February 2006\
\
\
            Certificate Extensions and Attributes Supporting\
            Authentication in Point-to-Point Protocol (PPP)\
                and Wireless Local Area Networks (WLAN)\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   This document defines two Extensible Authentication Protocol (EAP)\
   extended key usage values and a public key certificate extension to\
   carry Wireless LAN (WLAN) System Service identifiers (SSIDs).  This\
   document obsoletes RFC 3770.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 1]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
1. Introduction\
\
   Several Extensible Authentication Protocol (EAP) [EAP] authentication\
   methods employ X.509 public key certificates.  For example, EAP-TLS\
   [EAP-TLS] can be used with PPP [PPP] as well as IEEE 802.1X [802.1X].\
   PPP is used for dial-up and VPN environments.  IEEE 802.1X defines\
   port-based, network access control, and it is used to provide\
   authenticated network access for Ethernet, Token Ring, Wireless LANs\
   (WLANs) [802.11], and other IEEE 802 networks.\
\
   Automated selection of client certificates for use with PPP and IEEE\
   802.1X is highly desirable.  By using certificate extensions to\
   identify the intended environment for a particular certificate, the\
   need for user input is minimized.  Further, the certificate\
   extensions facilitate the separation of administrative functions\
   associated with certificates used for different environments.\
\
   IEEE 802.1X can be used for authentication with multiple networks.\
   For example, the same wireless station might use IEEE 802.1X to\
   authenticate to a corporate IEEE 802.11 WLAN and a public IEEE 802.11\
   "hotspot."  Each of these IEEE 802.11 WLANs has a different network\
   name, called Service Set Identifier (SSID).  If the network operators\
   have a roaming agreement, then cross-realm authentication allows the\
   same certificate to be used on both networks.  However, if the\
   networks do not have a roaming agreement, then the IEEE 802.1X\
   supplicant needs to select a certificate for the current network\
   environment.  Including a list of SSIDs in a certificate extension\
   facilitates automated selection of an appropriate X.509 public key\
   certificate without human user input.  Alternatively, a companion\
   attribute certificate could contain the list of SSIDs.\
\
   This document defines extended key usage values and a WLAN-specific\
   certificate extension for use in certificates issued to clients of\
   PPP and WLANs.\
\
1.1. Changes since RFC 3770\
\
   This document is primarily same as RFC 3770.  Six significant changes\
   are included:\
\
      * This document now uses the same normative reference for ASN.1\
        as RFC 3280 [PROFILE].  The intent is to have the same\
        dependencies.\
\
      * The discussion of the critical bit in the certificate extension\
        in section 2 is aligned with RFC 3280.  Also, the discussion of\
        the key usage certificate extension was expanded.\
\
\
\
\
Housley & Moore             Standards Track                     [Page 2]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
      * RFC 3770 contained a typographical error in the object\
        identifier for the Wireless LAN SSID Attribute Certificate\
        Attribute.  Section 4 corrects the typographical error.\
\
      * Clarified that the SSID extension may appear in certificates\
        that do not include the extended key usage extension.\
\
      * Uses the terms "peer", "EAP Server", and "supplicant" as they\
        are defined in [EAP] and [802.1X].  RFC 3770 used "client"\
        and "server".\
\
      * The object identifier for the extended key usage certificate\
        extension is listed in RFC 3280, and it is no longer\
        repeated in this document.\
\
1.2. Conventions Used in This Document\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in RFC 2119 [STDWORDS].\
\
1.3. Abstract Syntax Notation\
\
   All X.509 certificate [X.509] extensions are defined using ASN.1\
   [X.680,X.690].\
\
2. EAP Extended Key Usage Values\
\
   RFC 3280 [PROFILE] specifies the extended key usage X.509 certificate\
   extension.  The extension indicates one or more purposes for which\
   the certified public key may be used.  The extended key usage\
   extension can be used in conjunction with key usage extension, which\
   indicates the intended purpose of the certified public key.\
\
   The extended key usage extension syntax is repeated here for\
   convenience:\
\
      ExtKeyUsageSyntax  ::=  SEQUENCE SIZE (1..MAX) OF KeyPurposeId\
\
      KeyPurposeId  ::=  OBJECT IDENTIFIER\
\
   This specification defines two KeyPurposeId values: one for EAP over\
   PPP, and one for EAP over LAN (EAPOL).  Inclusion of the EAP over PPP\
   value indicates that the certified public key is appropriate for use\
   by a peer with EAP in the PPP environment.  The inclusion of the\
   EAPOL value indicates that the certified public key is appropriate\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 3]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
   for use by a peer with the EAP in the LAN environment.  Inclusion of\
   both values indicates that the certified public key is appropriate\
   for use by a peer in either of the environments.\
\
      id-kp  OBJECT IDENTIFIER  ::=\
         { iso(1) identified-organization(3) dod(6) internet(1)\
           security(5) mechanisms(5) pkix(7) 3 }\
\
      id-kp-eapOverPPP  OBJECT IDENTIFIER  ::=  { id-kp 13 }\
\
      id-kp-eapOverLAN  OBJECT IDENTIFIER  ::=  { id-kp 14 }\
\
   The extended key usage extension MAY, at the option of the\
   certificate issuer, be either critical or non-critical.\
\
   Certificate-using applications MAY require the extended key usage\
   extension to be present in a certificate, and they MAY require a\
   particular KeyPurposeId value to be present (such as id-kp-eapOverPPP\
   or id-kp-eapOverLAN) within the extended key usage extension.  If\
   multiple KeyPurposeId values are included, the certificate-using\
   application need not recognize all of them, as long as the required\
   KeyPurposeId value is present.\
\
   If a certificate contains a key usage extension, the KeyUsage bits\
   that are needed depends on the EAP method that is employed.\
\
   If a certificate contains both a key usage extension and an extended\
   key usage extension, then both extensions MUST be processed\
   independently, and the certificate MUST only be used for a purpose\
   consistent with both extensions.  If there is no purpose consistent\
   with both extensions, then the certificate-using application MUST NOT\
   use the certificate for any purpose.\
\
3. WLAN SSID Public Key Certificate Extension\
\
   The Wireless LAN (WLAN) System Service identifiers (SSIDs) public key\
   certificate extension is always non-critical.  It contains a list of\
   SSIDs.  The list of SSIDs MAY be used to select the correct\
   certificate for authentication in a particular WLAN.\
\
   If the extended key usage extension appears in the same certificate\
   as the SSID extension, then the extended key usage extension MUST\
   indicate that the certified public key is appropriate for use with\
   the EAP in the LAN environment by including the id-kp-eapOverLAN\
   KeyPurposeId value.\
\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 4]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
   Since SSID values are unmanaged, the same SSID can appear in\
   different certificates that are intended to be used with different\
   WLANs.  When this occurs, automatic selection of the certificate will\
   fail, and the implementation SHOULD obtain help from the user to\
   choose the correct certificate.  In cases where a human user is\
   unavailable, each potential certificate MAY be tried until one\
   succeeds.  However, by maintaining a cache of Access Point (AP) MAC\
   addresses or an EAP server identity with which the certificate has\
   successfully authenticated, user involvement can be minimized.\
   RADIUS [RADIUS1, RADIUS2] is usually used as the authentication\
   service in WLAN deployments.  The cache can be used to avoid future\
   human user interaction or certificate selection by trial and error.\
\
   The WLAN SSID extension is identified by id-pe-wlanSSID.\
\
      id-pe  OBJECT IDENTIFIER  ::=\
         { iso(1) identified-organization(3) dod(6) internet(1)\
           security(5) mechanisms(5) pkix(7) 1 }\
\
      id-pe-wlanSSID  OBJECT IDENTIFIER  ::=  { id-pe 13 }\
\
   The syntax for the WLAN SSID extension is:\
\
      SSIDList  ::=  SEQUENCE SIZE (1..MAX) OF SSID\
\
      SSID  ::=  OCTET STRING (SIZE (1..32))\
\
4. WLAN SSID Attribute Certificate Attribute\
\
   When the public key certificate does not include the WLAN SSID\
   certificate extension, then an attribute certificate [ACPROFILE] can\
   be used to associate a list of SSIDs with the public key certificate.\
   The WLAN SSIDs attribute certificate attribute contains a list of\
   SSIDs, and the list of SSIDs MAY be used to select the correct\
   certificate for authentication in a particular WLAN environment.\
\
   The WLAN SSID attribute certificate attribute is identified by\
   id-aca-wlanSSID.\
\
      id-aca  OBJECT IDENTIFIER  ::=\
         { iso(1) identified-organization(3) dod(6) internet(1)\
           security(5) mechanisms(5) pkix(7) 10 }\
\
      id-aca-wlanSSID  OBJECT IDENTIFIER ::= { id-aca 7 }\
\
\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 5]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
   The syntax for the WLAN SSID attribute certificate attribute is\
   exactly the same as that for the WLAN SSID extension:\
\
      SSIDList  ::=  SEQUENCE SIZE (1..MAX) OF SSID\
\
      SSID  ::=  OCTET STRING (SIZE (1..32))\
\
5. Security Considerations\
\
   The procedures and practices employed by the certification authority\
   (CA) MUST ensure that the correct values for the extended key usage\
   extension and SSID extension are inserted in each certificate that is\
   issued.  Relying parties may accept or reject a particular\
   certificate for an intended use based on the information provided in\
   these extensions.  Incorrect representation of the information in\
   either extension could cause the relying party to reject an otherwise\
   appropriate certificate or accept a certificate that ought to be\
   rejected.\
\
   If multiple SSIDs are included in a certificate, then information can\
   be obtained from a certificate about the SSIDs associated with\
   several WLANs, not with the WLAN that is currently being accessed.\
   The intended use of the SSID extensions is to help a peer determine\
   the correct certificate to present when trying to gain access to a\
   WLAN.  In most situations, including EAP-TLS, the peer will have the\
   opportunity to validate the certificate provided by the EAP server\
   before transmitting one of its own certificates to the EAP server.\
   While the peer may not be sure that the EAP server has access to the\
   corresponding private key until later in the protocol exchange, the\
   identity information in the EAP server certificate can be used to\
   determine whether or not the peer certificate ought to be provided.\
   When the same peer certificate is used to authenticate to multiple\
   WLANs, the list of SSIDs is available from servers associated with\
   each WLAN.  Of course, the list of SSIDs is also made available to\
   any eavesdroppers on the WLAN.  Whenever this SSID disclosure is a\
   concern, different peer certificates ought to be used for the each\
   WLAN.\
\
   SSID values are unmanaged; therefore, SSIDs may not be unique.\
   Hence, it is possible for peer certificates that are intended to be\
   used with different WLANs to contain the same SSID.  In this case,\
   automatic selection of the certificate will fail, and the\
   implementation SHOULD obtain help from the user to choose the correct\
   certificate.  If a human user is unavailable, each potential\
   certificate MAY be tried until one succeeds, disclosing the list of\
   SSIDs associated with each certificate, which might otherwise not be\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 6]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
   disclosed.  Therefore, it is RECOMMENDED that sequentially trying\
   each certificate only be employed when user selection is unavailable\
   or impractical.\
\
   In practice, disclosure of the SSID is of little concern.  Some WLAN\
   security experts recommend that the SSID be masked in the beacon sent\
   out by Access Points (APs).  The intent is to make it harder for an\
   attacker to find the correct AP to target.  However, other WLAN\
   management messages include the SSID, so this practice only forces\
   the attacker to eavesdrop on the WLAN management messages instead of\
   the beacon.  Therefore, placing the SSID in the certificate does not\
   make matters worse.\
\
6. IANA Considerations\
\
   Certificate extensions and extended key usage values are identified\
   by object identifiers (OIDs).  The OIDs used in this document were\
   assigned from an arc delegated by the IANA.  No further action by the\
   IANA is necessary for this document or any anticipated updates.\
\
7. References\
\
7.1. Normative References\
\
   [ACPROFILE] Farrell, S. and R. Housley, "An Internet Attribute\
               Certificate Profile for Authorization", RFC 3281,\
               April 2002.\
\
   [PROFILE]   Housley, R., Polk, W., Ford, W., and D. Solo, "Internet\
               X.509 Public Key Infrastructure: Certificate and\
               Certificate Revocation List (CRL) Profile", RFC 3280,\
               April 2002.\
\
   [EAP]       Aboba, B., Blunk, L., Vollbrechtand, J., Carlson, J.,\
               and H. Levkowetz, "Extensible Authentication Protocol\
               (EAP)", RFC 3748, June 2004.\
\
   [STDWORDS]  Bradner, S., "Key words for use in RFCs to Indicate\
               Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [X.509]     ITU-T.  Recommendation X.509: The Directory -\
               Authentication Framework.  2000.\
\
   [X.680]     ITU-T Recommendation X.680: Information Technology -\
               Abstract Syntax Notation One, 1997.\
\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 7]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
   [X.690]     ITU-T Recommendation X.660 Information Technology - ASN.1\
               encoding rules: Specification of Basic Encoding Rules\
               (BER), Canonical Encoding Rules (CER) and Distinguished\
               Encoding Rules (DER), 1997.\
\
7.2. Informative References\
\
   [802.11]    IEEE Std 802.11, "Wireless LAN Medium Access\
               Control (MAC) and Physical Layer (PHY) Specifications",\
               1999.\
\
   [802.1X]    IEEE Std 802.1X, "Port-based Network Access Control",\
               2001.\
\
   [EAP-TLS]   Aboba, B. and D. Simon, "PPP EAP TLS Authentication\
               Protocol", RFC 2716, October 1999.\
\
   [PPP]       Simpson, W., "The Point-to-Point Protocol (PPP)",\
               STD 51, RFC 1661, July 1994.\
\
   [RADIUS1]   Rigney, C., Willens, S., Rubens, A., and W. Simpson,\
               "Remote Authentication Dial In User Service (RADIUS)",\
               RFC 2865, June 2000.\
\
   [RADIUS2]   Congdon, P., Aboba, B., Smith, A., Zorn, G., and J.\
               Roese, "IEEE 802.1X Remote Authentication Dial In User\
               Service (RADIUS) Usage Guidelines", RFC 3580, September\
               2003.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Housley & Moore             Standards Track                     [Page 8]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
8. ASN.1 Module\
\
   WLANCertExtn\
     { iso(1) identified-organization(3) dod(6) internet(1)\
       security(5) mechanisms(5) pkix(7) id-mod(0)\
       id-mod-wlan-extns2005(37) }\
\
   DEFINITIONS IMPLICIT TAGS ::=\
   BEGIN\
\
\
   -- OID Arcs\
\
   id-pe  OBJECT IDENTIFIER  ::=\
      { iso(1) identified-organization(3) dod(6) internet(1)\
        security(5) mechanisms(5) pkix(7) 1 }\
\
   id-kp  OBJECT IDENTIFIER  ::=\
      { iso(1) identified-organization(3) dod(6) internet(1)\
        security(5) mechanisms(5) pkix(7) 3 }\
\
   id-aca  OBJECT IDENTIFIER  ::=\
      { iso(1) identified-organization(3) dod(6) internet(1)\
        security(5) mechanisms(5) pkix(7) 10 }\
\
\
   -- Extended Key Usage Values\
\
   id-kp-eapOverPPP  OBJECT IDENTIFIER  ::=  { id-kp 13 }\
\
   id-kp-eapOverLAN  OBJECT IDENTIFIER  ::=  { id-kp 14 }\
\
\
   -- Wireless LAN SSID Extension\
\
   id-pe-wlanSSID  OBJECT IDENTIFIER  ::=  { id-pe 13 }\
\
   SSIDList  ::=  SEQUENCE SIZE (1..MAX) OF SSID\
\
   SSID  ::=  OCTET STRING (SIZE (1..32))\
\
\
   -- Wireless LAN SSID Attribute Certificate Attribute\
   -- Uses same syntax as the certificate extension: SSIDList\
\
   id-aca-wlanSSID  OBJECT IDENTIFIER ::= { id-aca 7 }\
\
   END\
\
\
\
Housley & Moore             Standards Track                     [Page 9]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
Authors' Addresses\
\
   Russell Housley\
   Vigil Security, LLC\
   918 Spring Knoll Drive\
   Herndon, VA 20170\
   USA\
\
   EMail: housley@vigilsec.com\
\
\
   Tim Moore\
   Microsoft Corporation\
   One Microsoft Way\
   Redmond, WA 98052\
   USA\
\
   EMail: timmoore@microsoft.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Housley & Moore             Standards Track                    [Page 10]\
\
RFC 4334       Supporting Authentication in PPP and WLAN   February 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Housley & Moore             Standards Track                    [Page 11]\
\

doc 25
  field 0
    name titolo
    type string
    value rfc4331.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                          B. Korver\
Request for Comments: 4331                             Network Resonance\
Category: Standards Track                                   L. Dusseault\
                                                                    OSAF\
                                                           February 2006\
\
\
                       Quota and Size Properties\
       for Distributed Authoring and Versioning (DAV) Collections\
\
Status of This Memo\
\
   This document specifies an Internet standards track protocol for the\
   Internet community, and requests discussion and suggestions for\
   improvements.  Please refer to the current edition of the "Internet\
   Official Protocol Standards" (STD 1) for the standardization state\
   and status of this protocol.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2006).\
\
Abstract\
\
   Web Distributed Authoring and Versioning (WebDAV) servers are\
   frequently deployed with quota (size) limitations.  This document\
   discusses the properties and minor behaviors needed for clients to\
   interoperate with quota (size) implementations on WebDAV\
   repositories.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
      1.1. Notational Conventions .....................................2\
      1.2. Requirement for Quotas .....................................2\
   2. Solution Overview ...............................................3\
   3. DAV:quota-available-bytes .......................................3\
   4. DAV:quota-used-bytes ............................................4\
   5. Example PROPFIND Request and Response ...........................5\
   6. Error Reporting .................................................6\
   7. Notes ...........................................................6\
   8. Security Considerations .........................................8\
   9. Internationalization Considerations .............................8\
   10. Acknowledgements ...............................................8\
   11. References .....................................................8\
      11.1. Normative References ......................................8\
      11.2. Informative References ....................................8\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 1]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
1.  Introduction\
\
1.1.  Notational Conventions\
\
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",\
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this\
   document are to be interpreted as described in [RFC2119].\
\
   The definition of live property is provided in [RFC2518].  The\
   definition of protected and computed properties is provided in\
   [RFC3253], Section 1.4.\
\
1.2.  Requirement for Quotas\
\
   WebDAV servers based on [RFC2518] have been implemented and deployed\
   with quota restrictions on collections and users, so it makes sense\
   to standardize this functionality to improve user experience and\
   client interoperability.\
\
   The reasons why WebDAV servers frequently have quotas enforced are\
   the same reasons why any storage system comes with quotas.\
\
   o  Sometimes the storage service charges according to quota.\
\
   o  Sometimes the storage service is provided free, but the storage\
      service provider has limited storage space (e.g., university-\
      provided student accounts).\
\
   o  Even in cases where the storage can be upgraded, the storage\
      managers may choose to limit quota in order to encourage users to\
      limit the files they store on the system and to clean up obsolete\
      files (e.g., IT departments within corporations).\
\
   In order to work best with repositories that support quotas, client\
   software should be able to determine and display the DAV:quota-\
   available-bytes (defined below) on collections.  Further, client\
   software should have some way of fairly reliably determining how much\
   storage space is already counted towards that quota.\
\
   Support for the properties defined in this document enhances the\
   client experience, because the client has a chance of managing its\
   files to avoid running out of allocated storage space.  Clients may\
   not be able to calculate the value as accurately on their own,\
   depending on how total space used is calculated by the server.\
\
\
\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 2]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
2.  Solution Overview\
\
   The approach to meeting the requirements and scenarios outlined above\
   is to define two live properties.  This specification can be met on a\
   server by implementing both DAV:quota-available-bytes and DAV:quota-\
   used-bytes on collections only.\
\
   A <DAV:allprop> PROPFIND request SHOULD NOT return any of the\
   properties defined by this document.  However, these property names\
   MUST be returned in a <DAV:propname> request for a resource that\
   supports the properties, except in the case of infinite limits, which\
   are explained below.\
\
   The DAV:quota-available-bytes and DAV:quota-used-bytes definitions\
   below borrow heavily from the quota definitions in the Network File\
   System (NFS) [RFC3530] specification.\
\
3.  DAV:quota-available-bytes\
\
   Name: quota-available-bytes\
\
   Namespace: DAV:\
\
   Purpose: Indicates the maximum amount of additional storage available\
      to be allocated to a resource.\
\
   DTD: <!ELEMENT quota-available-bytes (#PCDATA) >\
\
   The DAV:quota-available-bytes property value is the value in octets\
   representing the amount of additional disk space beyond the current\
   allocation that can be allocated to this resource before further\
   allocations will be refused.  It is understood that this space may be\
   consumed by allocations to other resources.\
\
   Support for this property is REQUIRED on collections, and OPTIONAL on\
   other resources.  A server SHOULD implement this property for each\
   resource that has the DAV:quota-used-bytes property.\
\
   Clients SHOULD expect that as the DAV:quota-available-bytes on a\
   resource approaches 0, further allocations to that resource may be\
   refused.  A value of 0 indicates that users will probably not be able\
   to perform operations that write additional information (e.g., a PUT\
   inside a collection), but may be able to replace through overwrite an\
   existing resource of equal size.\
\
   Note that there may be a number of distinct but overlapping limits,\
   which may even include physical media limits.  When reporting DAV:\
   quota-available-bytes, the server is at liberty to choose any of\
\
\
\
Korver & Dusseault          Standards Track                     [Page 3]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
   those limits but SHOULD do so in a repeatable way.  The rule may be\
   configured per repository, or may be "choose the smallest number".\
\
   If a resource has no quota enforced or unlimited storage ("infinite\
   limits"), the server MAY choose not to return this property (404 Not\
   Found response in Multi-Status), although this specification\
   RECOMMENDS that servers return some appropriate value (e.g., the\
   amount of free disk space).  A client cannot entirely assume that\
   there is no quota enforced on a resource that does not have this\
   property, but might as well act as if there is no quota.\
\
   The value of this property is protected (see Section 1.4.2 of\
   [RFC3253] for the definition of protected properties).  A 403\
   Forbidden response is RECOMMENDED for attempts to write a protected\
   property, and the server SHOULD include an XML error body as defined\
   by DeltaV [RFC3253] with the <DAV:cannot-modify-protected-property/>\
   precondition tag.\
\
4.  DAV:quota-used-bytes\
\
   Name: quota-used-bytes\
\
   Namespace: DAV:\
\
   Purpose: Contains the amount of storage counted against the quota on\
      a resource.\
\
   DTD: <!ELEMENT quota-used-bytes (#PCDATA) >\
\
   The DAV:quota-used-bytes value is the value in octets representing\
   the amount of space used by this resource and possibly a number of\
   other similar resources, where the set of "similar" meets at least\
   the criterion that allocating space to any resource in the set will\
   count against the DAV:quota-available-bytes.  It MUST include the\
   total count including usage derived from sub-resources if\
   appropriate.  It SHOULD include metadata storage size if metadata\
   storage is counted against the DAV:quota-available-bytes.\
\
   Note that there may be a number of distinct but overlapping sets of\
   resources for which a DAV:quota-used-bytes is maintained (e.g., "all\
   files with a given owner", "all files with a given group owner",\
   etc.).  The server is at liberty to choose any of those sets but\
   SHOULD do so in a repeatable way.  The rule may be configured per\
   repository.\
\
   Support for this property is REQUIRED on collections, and OPTIONAL on\
   other resources.  A server SHOULD implement this property for each\
   resource that has the DAV:quota-available-bytes property.\
\
\
\
Korver & Dusseault          Standards Track                     [Page 4]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
   This value of this property is computed (see Section 1.4.3 of\
   [RFC3253] for the definition of computed property).  A 403 Forbidden\
   response is RECOMMENDED for attempts to write a protected property,\
   and the server SHOULD include an XML error body as defined by DeltaV\
   [RFC3253] with the <DAV:cannot-modify-protected-property/>\
   precondition tag.\
\
5.  Example PROPFIND Request and Response\
\
   Request:\
\
         PROPFIND /~milele/public/ HTTP/1.1\
         Depth: 0\
         Host: www.example.com\
         Content-Type: text/xml\
         Content-Length: xxx\
\
         <?xml version="1.0" ?>\
         <D:propfind xmlns:D="DAV:">\
           <D:prop>\
             <D:quota-available-bytes/>\
             <D:quota-used-bytes/>\
           </D:prop>\
         </D:propfind>\
\
   Response:\
\
         HTTP/1.1 207 Multi-Status\
         Date: Tue, 16 Oct 2001 22:13:39 GMT\
         Content-Length: xxx\
         Content-Type: text/xml; charset=UTF-8\
\
         <?xml version="1.0" encoding="utf-8" ?>\
         <D:multistatus xmlns:D="DAV:">\
         <D:response>\
           <D:href>http://www.example.com/~milele/public/</D:href>\
           <D:propstat>\
             <D:prop>\
               <D:quota-available-bytes>596650</D:quota-available-bytes>\
               <D:quota-used-bytes>403350</D:quota-used-bytes>\
             </D:prop>\
             <D:status>HTTP/1.1 200 OK</D:status>\
           </D:propstat>\
         </D:response>\
         </D:multistatus>\
\
\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 5]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
6.  Error Reporting\
\
   WebDAV [RFC2518] defines the status code 507 (Insufficient Storage).\
   This status code SHOULD be used when a client request (e.g., a PUT,\
   PROPFIND, MKCOL, MOVE, or COPY) fails because it would exceed their\
   quota or physical storage limits.  In order to differentiate the\
   response from other storage problems, the server SHOULD include an\
   XML error body as defined by DeltaV [RFC3253] with the appropriate\
   precondition tag.\
\
   Preconditions:\
\
   (DAV:quota-not-exceeded): the request MUST NOT cause the allocated\
   quota to be exceeded.\
\
   (DAV:sufficient-disk-space): there is sufficient physical space to\
   execute the request.\
\
   Example error response:\
\
      HTTP/1.1 507 Insufficient Storage\
      Content-Length: xxx\
      Content-Type: text/xml\
\
      <?xml version="1.0">\
      <error xmlns="DAV:">\
        <quota-not-exceeded/>\
      </error>\
\
   Implementation note: some clients may be able to take advantage of\
   the different precondition codes when mapping to operating system\
   status codes, such as E_NOSPC and E_DQUOT in NFS (see [RFC3530],\
   Section 12).\
\
7.  Notes\
\
   Server implementations store and account for their data in many\
   different ways.  Some of the challenges:\
\
   o  Some server implementations find it prohibitive to count storage\
      used for metadata; others may choose to do so for better\
      accounting.\
\
   o  Older versions of resources may be stored as well.\
\
   o  Variants of one resource may exist with different content lengths.\
\
   o  Content may be dynamically generated.\
\
\
\
Korver & Dusseault          Standards Track                     [Page 6]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
   o  Resource bodies can be compressed.\
\
   o  Some resources may be stored for "free", not counting against\
      quota.\
\
   Since server storage accounting can vary so much, clients should\
   expect the following:\
\
   o  The size of a file on the client's file system, or in a PUT\
      message, may not correspond to the amount of storage required by\
      the server to store the resource.  Thus, the client cannot predict\
      with 100% accuracy whether a given file will be allowed given the\
      storage quota.\
\
   o  Deleting or overwriting a resource may not free up the same amount\
      of storage as indicated by the DAV:getcontentlength property\
      defined in [RFC2518] for the resource.  If deleting a resource\
      does not free up any space, the file may have been moved to a\
      "trash" folder or "recycle bin", or retained as in versioning\
      systems ([RFC3253]).\
\
   o  Since there are many factors that affect the storage used by a set\
      of resources, including automatic compression, the size of\
      associated metadata, and server-inserted content (such as that\
      created by PHP code) in the on-the-wire representation of\
      resources, clients are advised not to depend on the value of DAV:\
      quota-used-bytes being the sum of the DAV:getcontentlength\
      properties for resources contained by a collection.\
\
   o  Additionally, because there may be a number of distinct but\
      overlapping sets of resources for which a DAV:quota-used-bytes is\
      maintained (Section 4), there may be no correlation between the\
      size of the resources in a collection and DAV:quota-used-bytes.\
      For example, for a server that implements user-based quotas,\
      DAV:quota-used-bytes usually will be the same for a collection and\
      its members.\
\
   o  On some systems where quota is counted by collection and not by\
      user, a quota on a sub-collection may be larger than the quota on\
      the parent collection that contains it.  For example, the quota on\
      /~milele/ may be 100 MB, but the quota on /~milele/public/ may be\
      unlimited.  This allows the space used by /~milele/public/ to be\
      as large as the quota on /~milele/ allows (depending on the other\
      contents of /~milele/) even if the quota on /~milele/ is changed.\
      Thus, even when the quota on a parent collection is changed, it is\
      not necessarily required to change the quota on every child or\
      descendant collection.\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 7]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
8.  Security Considerations\
\
   A hacker may prefer to store files in collections with a large quota.\
   This isn't strictly a security concern because it doesn't make it any\
   easier to store files.  On the other hand, the DAV:quota-used-bytes\
   property may make it easier to detect tampering or misuse.\
\
9.  Internationalization Considerations\
\
   Quota is counted in Arabic numerals expressed in strings.  There are\
   no internationalization considerations.\
\
10.  Acknowledgements\
\
   Stefan Eissing, Geoff Clemm, Jim Luther, Julian Reschke, and Jim\
   Whitehead, among others, have provided valuable comments on this\
   document.\
\
11.  References\
\
11.1.  Normative References\
\
   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate\
              Requirement Levels", BCP 14, RFC 2119, March 1997.\
\
   [RFC2518]  Goland, Y., Whitehead, E., Faizi, A., Carter, S., and D.\
              Jensen, "HTTP Extensions for Distributed Authoring --\
              WebDAV", RFC 2518, February 1999.\
\
   [RFC3253]  Clemm, G., Amsden, J., Ellison, T., Kaler, C., and J.\
              Whitehead, "Versioning Extensions to WebDAV (Web\
              Distributed Authoring and Versioning)", RFC 3253, March\
              2002.\
\
11.2.  Informative References\
\
   [RFC3530]  Shepler, S., Callaghan, B., Robinson, D., Thurlow, R.,\
              Beame, C., Eisler, M., and D. Noveck, "Network File System\
              (NFS) version 4 Protocol", RFC 3530, April 2003.\
\
\
\
\
\
\
\
\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 8]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
Authors' Addresses\
\
   Brian Korver\
   Network Resonance, Inc.\
   2483 E. Bayshore Road\
   Suite 212\
   Palo Alto, CA  94303\
   US\
\
   Phone: +1 650 812-7705\
   EMail: briank@networkresonance.com\
\
\
   Lisa Dusseault\
   Open Source Applications Foundation\
   543 Howard Street\
   5th Floor\
   San Francisco, CA  94105\
   US\
\
   Phone: +1 415 946-3040\
   EMail: lisa@osafoundation.org\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Korver & Dusseault          Standards Track                     [Page 9]\
\
RFC 4331                     WebDAV Quotas                 February 2006\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2006).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at\
   ietf-ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is provided by the IETF\
   Administrative Support Activity (IASA).\
\
\
\
\
\
\
\
Korver & Dusseault          Standards Track                    [Page 10]\
\

doc 26
  field 0
    name titolo
    type string
    value rfc4332.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                           K. Leung\
Request for Comments: 4332                                      A. Patel\
Category: Informational                                    Cisco Systems\
                                                             G. Tsirtsis\
                                                    Flarion Technologies\
                                                             E. Klovning\
                                                 Birdstep Technology ASA\
                                                           December 2005\
\
\
           Cisco's Mobile IPv4 Host Configuration Extensions\
\
Status of This Memo\
\
   This memo provides information for the Internet community.  It does\
   not specify an Internet standard of any kind.  Distribution of this\
   memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
IESG Note\
\
   This RFC is not a candidate for any level of Internet Standard.  The\
   IETF disclaims any knowledge of the fitness of this RFC for any\
   purpose and in particular notes that the decision to publish is not\
   based on IETF review for such things as security, congestion control,\
   or inappropriate interaction with deployed protocols.  The RFC Editor\
   has chosen to publish this document at its discretion.  Readers of\
   this document should exercise caution in evaluating its value for\
   implementation and deployment.  See RFC 3932 for more information.\
\
   This RFC does not offer any security mechanisms to provide data\
   origin authentication and integrity, yet these security services are\
   vitally important in this context.\
\
Abstract\
\
   An IP device requires basic host configuration to be able to\
   communicate.  For example, it will typically require an IP address\
   and the address of a DNS server.  This information is configured\
   statically or obtained dynamically using Dynamic Host Configuration\
   Protocol (DHCP) or Point-to-Point Protocol/IP Control Protocol\
   (PPP/IPCP).  However, both DHCP and PPP/IPCP provide host\
   configuration based on the access network.  In Mobile IPv4, the\
   registration process boots up a Mobile Node at an access network,\
   also known as a foreign network.  The information to configure the\
\
\
\
Leung, et al.                Informational                      [Page 1]\
\
RFC 4332                      Host Config                  December 2005\
\
\
   host needs to be based on the home network.  This document describes\
   the Cisco vendor-specific extensions to Mobile IPv4 to provide the\
   base host configuration in Registration Request and Reply messages.\
\
Table of Contents\
\
   1. Introduction ....................................................2\
   2. Host Configuration Extensions Summary ...........................3\
   3. Host Configuration Extensions ...................................4\
      3.1. Host Configuration Request Extension .......................5\
      3.2. Home Network Length Prefix Extension .......................5\
      3.3. DNS Server Extension .......................................6\
      3.4. DHCP Server Extension ......................................6\
      3.5. DHCP Client ID Extension ...................................7\
      3.6. Default Gateway Extension ..................................7\
      3.7. DNS Suffix Extension .......................................8\
      3.8. Configuration URL Extension ................................8\
   4. Security Considerations .........................................9\
   5. Acknowledgements ................................................9\
   6. Informative References ..........................................9\
\
1.  Introduction\
\
   An IPv4 device requires some basic configuration to communicate with\
   other nodes.  Typically, it has an IP address for an interface and\
   DNS server's IP address to resolve the peer's hostname to an IP\
   address.  DHCP [RFC2131] and PPP/IPCP [RFC1332] provide host\
   configuration information on the access network interface, but this\
   is inadequate in a Mobile IPv4 environment.  In Mobile IPv4\
   [RFC3344], a Mobile Node has a virtual network interface on the home\
   network, anchored by the Home Agent.  The IP address, home subnet\
   prefix, default gateway, and home network's DNS servers are essential\
   in the boot up of a network interface.  In some cases, these are the\
   only pieces of information needed by the Mobile Node.\
\
   The Mobile IPv4 registration process provides the mechanism for a\
   Mobile Node to boot up on a foreign network.  Upon the successful\
   registration, the Mobile Node can communicate with the Correspondent\
   Node.  The need to provide an efficient method to obtain the host\
   configuration exists.  If the Mobile Node is a DHCP client, it can\
   obtain configuration parameters from the DHCP server in the home\
   network after the initial registration.\
\
   This document introduces the Cisco vendor-specific extensions (VSEs)\
   [RFC3115] to provide the means for a Mobile Node to download some\
   fundamental configuration associated with the home network via the\
\
\
\
\
\
Leung, et al.                Informational                      [Page 2]\
\
RFC 4332                      Host Config                  December 2005\
\
\
   Home Agent.  These extensions provide information for home subnet\
   prefix, DNS server, DHCP server, DHCP client identifier, default\
   gateway, DNS suffix, and configuration URL.\
\
2.  Host Configuration Extensions Summary\
\
   The following Cisco vendor-specific extensions provide the host\
   configuration for a Mobile Node.  The "Host Configuration Request"\
   extension is allowed only in the Registration Request.  The rest of\
   the extensions are appended in the Registration Reply.\
\
   o  Host Configuration Request\
\
      *  Request for host configuration information from the Mobile Node\
         to the Home Agent.\
\
   o  Home Network Prefix Length\
\
      *  The length of the subnet prefix on the home network.\
\
   o  Default Gateway\
\
      *  The default gateway's IP address on the home network.\
\
   o  DNS Server\
\
      *  The DNS server's IP address in the home network.\
\
   o  DNS Suffix\
\
      *  The DNS suffix for hostname resolution in the home network.\
\
   o  DHCP Client ID\
\
      *  The DHCP Client ID used to obtain the IP address.  When the\
         Mobile Node returns home and is responsible for managing its\
         own address, this information maps to the client identifier\
         option as defined in section 9.14 of [RFC2132] and referenced\
         in [RFC2131].\
\
   o  DHCP Server\
\
      *  The DHCP server's IP address in the home network.\
\
   o  Configuration URL\
\
      *  The URL for the Mobile Node to download configuration\
         parameters from a server.\
\
\
\
Leung, et al.                Informational                      [Page 3]\
\
RFC 4332                      Host Config                  December 2005\
\
\
   When the Mobile Node needs to obtain its host configuration, the Host\
   Configuration Request VSE is appended to the Registration Request.\
   This VSE indicates to the Home Agent that either all or selected host\
   configuration VSEs need to be appended to the Registration Reply.  If\
   the Home Agent retrieved the information from a DHCP server (in Proxy\
   DHCP mode), then the DHCP Client ID and DHCP Server extensions are\
   appended in the Registration Reply.  These DHCP-related extensions\
   are populated with values that had been used in the DHCP messages\
   exchanged between the Home Agent and the DHCP server.\
\
   The VSEs are authenticated as part of the registration message using\
   any of the authentication mechanism defined for Mobile IP ([RFC3344],\
   [RFC3012]).\
\
   This message MAY contain extensions defined in Mobile IP, including\
   vendor-specific extensions [RFC3115].\
\
3.  Host Configuration Extensions\
\
   Cisco's host configuration extensions to Mobile IPv4 are based on the\
   vendor-specific extensions defined in [RFC3115].  The format of the\
   VSE TLV (Type-Length-Value) is as follows:\
\
    0               1               2               3\
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    |     Type      |   Length      |          Reserved             |\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    |                          Vendor/Org-ID                        |\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    |       Vendor-NVSE-Type        |     Vendor-NVSE-Value ...\
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
     Type: 134\
\
     Length:\
\
        Indicates the length (in bytes) of the data field within this\
        extension, excluding the Type and Length fields.\
\
     Reserved:\
\
        Reserved for future use.  To be set to 0 while sending, ignored\
        on reception.\
\
     Vendor/Org-ID:\
\
        9 (Cisco Systems)\
\
\
\
Leung, et al.                Informational                      [Page 4]\
\
RFC 4332                      Host Config                  December 2005\
\
\
     Vendor-NVSE-Type:\
\
        14 (Host Configuration)\
\
     Vendor-NVSE-Value:\
\
        Format is shown below for each subtype.  The Sub-Type field is\
        an integer from 0 to 255.\
\
3.1.  Host Configuration Request Extension\
\
   This format of the Host Configuration Request extension is shown\
   below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |           Selector            |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         0\
\
      Selector:\
\
         0 indicates all host configuration available to the Home\
         Agent (HA) is requested by the Mobile Node.\
\
3.2.  Home Network Length Prefix Extension\
\
   This format of the Home Network Prefix Length extension is shown\
   below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |        Prefix Length          |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         1\
\
      Prefix Length:\
\
         The number of bits in the home subnet prefix.\
\
\
\
\
Leung, et al.                Informational                      [Page 5]\
\
RFC 4332                      Host Config                  December 2005\
\
\
3.3.  DNS Server Extension\
\
   This format of the DNS Server extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |        Primary DNS Server\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
                 . . .               |        Secondary DNS Server\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
                 . . .               |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         2\
\
      Primary DNS Server:\
\
         The IP address of the primary DNS server.\
\
      Secondary DNS Server:\
\
         The IP address of the secondary DNS server.\
\
3.4.  DHCP Server Extension\
\
   This format of the DHCP Server extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |          DHCP Server\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
                 . . .               |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         3\
\
      DHCP Server:\
\
         The IP address of the DHCP server.\
\
\
\
\
\
\
Leung, et al.                Informational                      [Page 6]\
\
RFC 4332                      Host Config                  December 2005\
\
\
3.5.  DHCP Client ID Extension\
\
   This format of the DHCP Client ID extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |          Client ID . . .\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         4\
\
      Client ID:\
\
         DHCP servers use this value to index their database of address\
         bindings.  This value is expected to be unique for all clients\
         in an administrative domain.  The size of field is between 2\
         and 255 octets.\
\
3.6.  Default Gateway Extension\
\
   This format of the Default Gateway extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |          Default Gateway\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
                 . . .               |\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         5\
\
      Default Gateway:\
\
         The IP address of the default gateway for the Mobile Node on\
         the home network.\
\
\
\
\
\
\
\
\
\
\
Leung, et al.                Informational                      [Page 7]\
\
RFC 4332                      Host Config                  December 2005\
\
\
3.7.  DNS Suffix Extension\
\
   This format of the DNS Suffix extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |         DNS Suffix . . .\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         6\
\
      DNS Suffix:\
\
         The DNS suffix to be appended to the name of Mobile Node when\
         completing its fully qualified domain name (FQDN).  The size of\
         field is between 1 and 246 octets.\
\
3.8.  Configuration URL Extension\
\
   This format of the Configuration URL extension is shown below.\
\
     0               1               2               3\
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
     |           Sub-Type            |         URL String . . .\
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
\
      Sub-Type:\
\
         7\
\
      URL String:\
\
         The Mobile Node can retrieve configuration parameters via the\
         URL.  The URL is at most 246 bytes in length.\
\
\
\
\
\
\
\
\
\
\
\
\
\
Leung, et al.                Informational                      [Page 8]\
\
RFC 4332                      Host Config                  December 2005\
\
\
4.  Security Considerations\
\
   The host configuration extensions follow the same rules for Mobile IP\
   extensions in registration messages.  See the Security Considerations\
   section in RFC 3344.\
\
   The Configuration URL extension may trigger the Mobile Node to\
   download the configuration parameters from a server.  The protection\
   of the data transfer is outside the scope of this document.  Possible\
   options include encryption of data before transfer or using HTTPS.\
\
5.  Acknowledgements\
\
   The authors would like to acknowledge Jayshree Bharatia, Kuntal\
   Chowdhury, Avi Lior, and Lila Madour for their contributions to the\
   work in progress titled "Mobile IPv4 Extension for Configuration\
   Options Exchange".\
\
6.  Informative References\
\
   [RFC1332]  McGregor, G., "The PPP Internet Protocol Control Protocol\
              (IPCP)", RFC 1332, May 1992.\
\
   [RFC2131]  Droms, R., "Dynamic Host Configuration Protocol",\
              RFC 2131, March 1997.\
\
   [RFC2132]  Alexander, S. and R. Droms, "DHCP Options and BOOTP Vendor\
              Extensions", RFC 2132, March 1997.\
\
   [RFC3012]  Perkins, C. and P. Calhoun, "Mobile IPv4 Challenge/\
              Response Extensions", RFC 3012, November 2000.\
\
   [RFC3115]  Dommety, G. and K. Leung, "Mobile IP Vendor/\
              Organization-Specific Extensions", RFC 3115, April 2001.\
\
   [RFC3344]  Perkins, C., "IP Mobility Support for IPv4", RFC 3344,\
              August 2002.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Leung, et al.                Informational                      [Page 9]\
\
RFC 4332                      Host Config                  December 2005\
\
\
Authors' Addresses\
\
   Kent Leung\
   Cisco Systems\
   170 W. Tasman Drive\
   San Jose, CA  95134\
   US\
\
   Phone: +1 408-526-5030\
   EMail: kleung@cisco.com\
\
\
   Alpesh Patel\
   Cisco Systems\
   170 W. Tasman Drive\
   San Jose, CA  95134\
   US\
\
   Phone: +1 408-853-9580\
   EMail: alpesh@cisco.com\
\
\
   George Tsirtsis\
   Flarion Technologies\
   Bedminster One\
   135 Route 202/206 South\
   Bedminster, NJ  07921\
   US\
\
   Phone: +1 908-947-7059\
   EMail: g.tsirtsis@flarion.com\
\
\
   Espen Klovning\
   Birdstep Technology ASA\
   Bryggegata 7\
   Oslo,   0250\
   Norway\
\
   Phone: +47 95 20 26 29\
   EMail: espen@birdstep.com\
\
\
\
\
\
\
\
\
\
\
Leung, et al.                Informational                     [Page 10]\
\
RFC 4332                      Host Config                  December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78 and at www.rfc-editor.org/copyright.html, and\
   except as set forth therein, the authors retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Leung, et al.                Informational                     [Page 11]\
\

doc 27
  field 0
    name titolo
    type string
    value rfc4333.txt
  field 1
    name contenuto
    type string
    value \
\
\
\
\
\
Network Working Group                                     G. Huston, Ed.\
Request for Comments: 4333                                         APNIC\
BCP: 113                                                  B. Wijnen, Ed.\
Category: Best Current Practice                      Lucent Technologies\
                                                           December 2005\
\
          The IETF Administrative Oversight Committee (IAOC)\
                Member Selection Guidelines and Process\
\
Status of This Memo\
\
   This document specifies an Internet Best Current Practices for the\
   Internet Community, and requests discussion and suggestions for\
   improvements.  Distribution of this memo is unlimited.\
\
Copyright Notice\
\
   Copyright (C) The Internet Society (2005).\
\
Abstract\
\
   This memo outlines the guidelines for selection of members of the\
   IETF Administrative Oversight Committee, and describes the selection\
   process used by the IAB and the IESG.\
\
1.  Introduction\
\
   The IETF Administrative Support Activity (IASA) provides the\
   administrative structure required to support the IETF standards\
   process and to support the IETF's technical activities.  Within this\
   activity is the office of the IETF Administrative Director (IAD) and\
   the IETF Administrative Oversight Committee (IAOC).  In addition to\
   the ex-officio roles of the IETF Chair and IAB Chair on this\
   committee, the IAB and IESG are each responsible for the appointment\
   of one voting member of this committee.\
\
   This memo outlines the process by which the IAB and IESG make their\
   selections.  This process will also be used in the event of mid-term\
   vacancies that may arise with these positions.\
\
   The document also provides guidance to the IETF Nominations Committee\
   regarding desirable qualifications and selection criteria for IAOC\
   candidates.\
\
   The same guidance may be used by the Internet Society (ISOC) Board of\
   Trustees within its process of IAOC member appointment.\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 1]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
1.1.  Overview of IAOC\
\
   The IASA is described in [RFC4071].  It is headed by a full-time ISOC\
   employee, the IETF Administrative Director (IAD), an officer\
   empowered to act on behalf of the IASA at the direction of the IAOC.\
\
   The IAOC's role is to provide appropriate direction to the IAD, to\
   review the IAD's regular reports, and to oversee the IASA functions\
   to ensure that the administrative needs of the IETF community are\
   being properly met.  The IAOC's mission is not to be engaged in the\
   day-to-day administrative work of IASA, but rather to provide\
   appropriate direction, oversight, and approval.\
\
   As described in [RFC4071], the IAOC's responsibilities are as\
   follows:\
\
   o  To select the IAD and provide high-level review and direction for\
      his or her work.  This task should be handled by a sub-committee,\
      as described in [RFC4071].\
\
   o  To review the IAD's plans and contracts to ensure that they will\
      meet the administrative needs of the IETF.\
\
   o  To track whether the IASA functions are meeting the IETF\
      community's administrative needs, and to work with the IAD to\
      determine a plan for corrective action if they are not.\
\
   o  To review the IAD's budget proposals to ensure that they will meet\
      the IETF's needs, and review the IAD's regular financial reports.\
\
   o  To ensure that the IASA is run in a transparent and accountable\
      manner.  While the day-to-day work should be delegated to the IAD\
      and others, the IAOC is responsible for ensuring that IASA\
      finances and operational status are tracked appropriately and that\
      monthly, quarterly, and annual financial and operational reports\
      are published to the IETF community.\
\
   o  To designate, in consultation with the IAB and the IESG, the\
      person or people who carry out the tasks that other IETF process\
      documents say are to be carried out by the IETF Executive\
      Director.\
\
   The IAOC's role is to direct and review, not perform, the work of the\
   IAD and IASA.  The IAOC holds periodic teleconferences and\
   face-to-face meetings as needed to carry out the IAOC's duties\
   efficiently and effectively.\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 2]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
1.2.  Overview of Selection Process\
\
   In brief, this document describes the time frame and procedures for\
   the IAB and IESG to solicit public input and make a selection for the\
   position.\
\
2.  Desirable Qualifications and Selection Criteria for IETF-Nominated\
    IAOC Members\
\
   The qualifications and selection criteria described in this section\
   shall be used by the IAB and IESG in selecting a suitably qualified\
   candidate for the IAOC position.  As described in [RFC4071], the IETF\
   Nominations Committee also has the responsibility to select IAOC\
   members, and the Nominations Committee shall also use these desirable\
   qualifications and selection criteria to guide its selection process.\
   The same guidance may be used by the ISOC Board of Trustees within\
   its process of IAOC member appointment.\
\
   Candidates for these IAOC positions should have knowledge of the\
   IETF, knowledge of contracts and financial procedures, and\
   familiarity with the administrative support needs of the IAB, the\
   IESG, and the IETF standards process.\
\
   The candidates are also expected to be able to understand the\
   respective roles and responsibilities of the IETF and ISOC in this\
   activity, and be able to articulate these roles within the IETF\
   community.\
\
   The candidates will also be expected to exercise all the duties of an\
   IAOC member, including being prepared to undertake any associated\
   responsibilities.  These include, but are not limited to, the setting\
   of administrative support policies, oversight of the administrative\
   operations of the IETF, and representing the interests of the IETF to\
   the IAOC.  The candidates must be able to undertake full\
   participation in all committee meetings and committee activities.\
\
   In the case of the IAB-selected member of the IAOC, this individual\
   does not directly represent the IAB.  Similarly for the IESG-selected\
   member of the IAOC, this individual does not directly represent the\
   IESG.  The IAB- and IESG-selected members are accountable directly to\
   the IETF community.\
\
   In the case of IAOC members selected by the IETF Nominations\
   Committee, such members do not represent any particular sub-grouping\
   of IETF participants.  IETF Nominations Committee-selected IAOC\
   members are accountable directly to the entire IETF community.\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 3]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
3.  IAB and IESG Selection Process of an IAOC Member\
\
3.1.  Nominations and Eligibility\
\
   The IAB and IESG will alternate year by year in making a public call\
   for nominations on the ietf-announce@ietf.org mailing list.  The\
   public call will specify the manner by which nominations will be\
   accepted and the means by which the list of nominees will be\
   published.\
\
   Self-nominations are permitted.  Along with the name and contact\
   information for each candidate, details about the candidate's\
   background and qualifications for the position should be attached to\
   the nomination.  All IETF participants, including working group\
   chairs, IETF Nominating Committee members, and IAB and IESG members\
   are eligible for nomination.\
\
   IAB members who accept a nomination for an IAB-selected position will\
   recuse themselves from IAB selection discussions.  Similarly, IESG\
   members who accept a nomination for an IESG-selected position will\
   recuse themselves from IESG selection discussions.\
\
3.2.  Selection\
\
   The selecting body will publish the list of nominated persons prior\
   to making a decision, allowing time for the community to pass any\
   relevant comments to that body.\
\
   The selecting body will review the nomination material and any\
   submitted comments, and make its selection.\
\
3.3.  Care of Personal Information\
\
   The following procedures will be used by the IAB and IESG in managing\
   candidates' personal information:\
\
   o  The candidate's name will be published, with all other candidate\
      names, at the close of the nominations period.\
\
   o  Except as noted above, all information provided to the IAB or IESG\
      during this process will be kept as confidential to that body.\
\
3.4.  Term of Office and Selection Time Frame\
\
   The IAB and IESG expect to seat their selected committee member at\
   the first IETF meeting of every second year, for a two-year term of\
   office.  The IAB and IESG will alternate each year in undertaking a\
   selection, except for the initial selection.  For the first year, the\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 4]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
   IAB and IESG will operate their selection process concurrently.  Also\
   for the first year, the IESG-selected candidate will serve on the\
   committee for an initial term ending with the first IETF meeting of\
   the following year, and the IAB-selected candidate will serve for a\
   term one year longer than the IESG-selected candidate.  Thereafter,\
   the candidates will be seated for two-year terms.\
\
   Basic time frame requirements for the selection process are as\
   follows:\
\
   o  3-4 weeks for solicitation of nominations.\
\
   o  3-4 weeks for review of nominees, deliberation, and selection.\
\
   In November of every year, the selecting body of that year will\
   announce the specific dates for the selection process for that year,\
   following the guidelines above.\
\
3.5.  Mid-term Vacancies\
\
   This document describes the process for the general appointment of\
   IAB-selected and IESG-selected IAOC members.  However, if the\
   appointed member is unable to serve the full two-year term, the\
   selecting body may, at its discretion, immediately select a\
   replacement to serve the remainder of the term using the interim\
   process defined in Section 3.5.1.  If the selecting body does not\
   invoke the interim process, the next regularly scheduled two-year\
   selection process will fill the vacancy.\
\
3.5.1.  Interim Appointment Process\
\
   If the selecting body elects to fill the mid-term vacancy before the\
   next regularly scheduled two-year selection process, a separate time\
   line will be announced and the remainder of the process described in\
   this document will be followed.\
\
4.  Security Considerations\
\
   This document does not describe any technical protocols and has no\
   implications for network security.\
\
5.  Acknowledgements\
\
   This document is based extensively on RFC 3677 [RFC3677].  It has\
   benefited from helpful review comments from Harald Alvestrand, Brian\
   Carpenter, Leslie Daigle, Rob Evans, Michael Patton, Mark Townsley,\
   and Margaret Wasserman.\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 5]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
6.  Informative References\
\
   [RFC3677]  Daigle, L. and Internet Architecture Board , "IETF ISOC\
              Board of Trustee Appointment Procedures", BCP 77, RFC\
              3677, December 2003.\
\
   [RFC4071]  Austein, R. and B. Wijnen, "Structure of the IETF\
              Administrative Support Activity (IASA)", BCP 101, RFC\
              4071, April 2005.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 6]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
Appendix A.  IAB Members\
\
   Internet Architecture Board members at the time this document was\
   written were the following:\
\
      Bernard Aboba\
      Loa Andersson\
      Brian Carpenter\
      Leslie Daigle\
      Patrik Faltstrom\
      Bob Hinden\
      Kurtis Lindqvist\
      David Meyer\
      Pekka Nikander\
      Eric Rescorla\
      Pete Resnick\
      Janathan Rosenberg\
      Lixia Zhang\
\
Appendix B.  IESG Members\
\
   Internet Engineering Steering Group members at the time this document\
   was written were the following:\
\
      Brian Carpenter\
      Bill Fenner\
      Ted Hardie\
      Sam Hartman\
      Scott Hollenbeck\
      Russell Housley\
      David Kessens\
      Allison Mankin\
      Mark Townsley\
      Jon Peterson\
      Margaret Wasserman\
      Bert Wijnen\
      Alex Zinin\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 7]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
Authors' Addresses\
\
   Geoff Huston (editor)\
   APNIC\
\
   EMail: gih@apnic.net\
\
\
   Bert Wijnen (editor)\
   Lucent Technologies\
\
   EMail: bwijnen@lucent.com\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 8]\
\
RFC 4333                 IAOC Member Selection             December 2005\
\
\
Full Copyright Statement\
\
   Copyright (C) The Internet Society (2005).\
\
   This document is subject to the rights, licenses and restrictions\
   contained in BCP 78, and except as set forth therein, the authors\
   retain all their rights.\
\
   This document and the information contained herein are provided on an\
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\
\
Intellectual Property\
\
   The IETF takes no position regarding the validity or scope of any\
   Intellectual Property Rights or other rights that might be claimed to\
   pertain to the implementation or use of the technology described in\
   this document or the extent to which any license under such rights\
   might or might not be available; nor does it represent that it has\
   made any independent effort to identify any such rights.  Information\
   on the procedures with respect to rights in RFC documents can be\
   found in BCP 78 and BCP 79.\
\
   Copies of IPR disclosures made to the IETF Secretariat and any\
   assurances of licenses to be made available, or the result of an\
   attempt made to obtain a general license or permission for the use of\
   such proprietary rights by implementers or users of this\
   specification can be obtained from the IETF on-line IPR repository at\
   http://www.ietf.org/ipr.\
\
   The IETF invites any interested party to bring to its attention any\
   copyrights, patents or patent applications, or other proprietary\
   rights that may cover technology that may be required to implement\
   this standard.  Please address the information to the IETF at ietf-\
   ipr@ietf.org.\
\
Acknowledgement\
\
   Funding for the RFC Editor function is currently provided by the\
   Internet Society.\
\
\
\
\
\
\
\
Huston & Wijnen          Best Current Practice                  [Page 9]\
\

END
checksum 00000000001304197222
